<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>甘拜下风</title>
    <url>/2020/01/18/AB/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Congratulations, wrong guess." data-whm="Do you really want to see it?">
  <script id="hbeData" type="hbeData" data-hmacdigest="2e34efd559c3908ab949575849fa0e32ba325287d32637c76e487b357b5d1271">073467ca4f930af409eaa941e6bda085e8d292cf5fe9f89eedc4dd3d47dbd0257715dd0a22dd316fd6eb61639d2d7611cee6f280bfd37b16db41ff29aeb227a6dcf02c5a24645ce56888c93e4e89714e859631e058052f7843f402d91ced687d1ad5603594adf849cac700042da5690031acade18ebe995728e8b90a10e2c2f0203971780e90adffd53c70046af911d882d25069455a41d3bda8d46de6933e3fa4bc1febbea020f03ff25f9fb6da437345e4dd60d34311de60b2b6b11b415d032c745db5a8ade0da50c35a9a46633639e72a8543a10df6877703cf09b36e75c4fd4df995f31b3e3469fbdddacf99bdb7e883663743f19f9f6c4c25e76590dd88dc64a4e111517d41e2b0481f67175e41c43386b6c79f00e7368bd52101d979532a2ca86d250e3fca729a2b2528ae890909d0f3c0555ea1b33f8b72e85270e472f67ae3c5f8c80e74532cc09bef53c47a5c80ce480e9e853f6c6c90f57116b4d5ca9e47484931ad660c6af3a29711fb94fde0607703f29e75e0c8f498e6f326e439e01bdacfe2efd438d52921b2ee54ae99aa41c26e987fd9d69aec94ced459a2d9c974ab97a08d34683e1a0951c56d823af76175146dcc97fc0aff0545d1d8a671e9dd67d0bf85a66aca0bbce252b689b789dfe6b1799a0676557b43144c673ce27607aeb6fbeed199e832817fd2eb02bfa0042764b06c1d00b86a39529ac372354972c313e1775444457159ee6ef932094f721e8485035ac80f5140aadc991f8540a8277c94f2f3ac234c008970d0a998ea13bfb1ec20bb4989426582e0be1229d7df7a520df621c27f595d091e34cb687a43f1a85f2a05ba23093454ead74b9ac86ab501fbabf0df5bef9ba15b329c1a1b43549be084d3c693322739c24270de1ffdba83fe911bab93b2237ae67b4fb035f2a1c1f87e917e0d8bfef88bc498fc4a86301634f13ffb00cfc170fb696c743183e43f568284461e6ca170422469faaf85c4be760879a9fab4775995ae01b82298aa64cf0fe88979937d6920f04cd5687bcf1a97928d61f4401d5f80252ec4c8b59657729251e6e1525f4a793a59838bc745b7c3511133b3023bced2100b7ee1478a012923d27d26956e2b0773e99705087da4090a548fd3233bf32d871f22c2aba30d941db88699286b2741ffc95d9e924c0a1974650b875b520492ee4a32bf4c4dd309e76d7f481e36f034bba34d6f8a37f12bd51e2da386ea8956a00f6935bc8f459db22180e7441ba1787c864fc4a7862e997d188de8e90b50d28177609745bc147800f59c0affe7b901df63caee229e64da08c10dfbe0e06909b71446a42747624ff9f6d52de4736a16c7ac9843417f72ab11300bbea63612143e052eb6a71afd12f4051c9d8804d6f46f9ba3b3a3fc279783e63d0579f10ab3e81ef8174f5ebc386b0f87e58fd0a99e6791dd59e389231d949d6d012411431a466bb217d8480b21c4aca8354d7fddbf233e079dfbaae72341749abe0edba1782f697a9f46748f0f105ec3cd40e6e7c1fdad49abaeaaf5be5cbc26da717e380c8d4a97aa76dc52bfeae2ce89c7c22911822725ee17b748e9435d46766b572a04dc8f091c0e1ebce1d403b1177a72fc4a87b2be2678f7fa31389d8379d5a7640b388b66ad33a55b06335413be1bea4d63fb992ce5d6947bd0198ab3c84c9a74e6ce40263149bd80c58629c5f8446695b0e6fd9282ea77b79130fd4a5331a3aa35223b5c63cb045c95f028342c0eee991f7537b4d4ad58281ff874dfea033addc79e9e174fa8fcc20aad85f8ffcee4d02645c4cf83eb7316594967ff5ecbbc125f3d53a6aae4f98e9b5f92f7419c58f24a1d16e22009b079660cb536e45447241be169b45781a9896e99dcd090fd38881abc21851b2d14b8d9ddbe48ad73a32656759653e4155da651b0807a131a06615df07205aad561f518bfbffb6573571a5a42214cae0c350098e8ff5083d92e6b3990e623cacb8223304f5423326fd630a0b4e4e140e82bdbea75077a73fad0e3b4740972b597f99f3546a61bf247e1c40a25305d4a4729343881bca66f7e739bf4b652f3b05c3c2352313f965b6b4cd197e42b7c86645b72fb70cd36209f90ea9c547f73d6784bbb1a28280a160a3c74d8c47f586ed59efbb9326fdea9c64821ffcde81bfd20de25020db5c6e7433b02b68908021eb54ca9682c579cefdfb71cd43ddcbd2bd703a9ffd529835f45080c10ee8e7e7a2ded00cf624d239bd8b69a43d47cc6faba70cbd6f7bb9d297be5d14aa3321729a0bbd65f0c1e2bbc09296ca0b78a7c6fdd60145b363d5a5c51671cb96cffb7af5785329de1d50c1ba75d31b39df46c230230b21e474b1b910d870c2294f2df67fb4f0c1f0a9d5614c0abaf54d75ff63f845c2277c7b357e9021a02a801600a8da27828256d7e9081ceb3b937c95ccc04a1f252e3ccb9c992764efdf695ae897945c7541aa24d430db6712104b5fdf0460b0cce8691da9a999c07110eecf2037fb6b3c0e79f45d994bc16a6b0241512063c92a9dc2bafdcfdd34fc467faa408e516d60152439d4e00c106839e2935382e3912db5f578274bec0d098dd70f24fc97f40644d3b2388649a4adcf42a17514e075418f1c600952ff4e5b8c02ba114bf4d147d77bce1610ac9ecf5a3ead2b9bf1a1fca5f8475da1bf05bb7bebca9406bf5302fbeed4e8dfa3ab0fe5a633d6c3ed9067d5e44c0b35a5c5b0e52a756d3f2b1444823ea1648d7efd993b7e22a6a78539aee577e78c80834034beeae88f7ffe5af493ac1f368d1e6feab7725839bdaa7bf6921cbc1d6b99522e69904561aaedb34925902c8c9b181de8f99ebd209aababa86fa41b334bc0c5aa53b400384a92b139fdc05cf2595f709fe5f215eae5edad7befa2768f15aebb138fa9d109387ac876e0da44324ac353077b872b2cf74e2aa4e851288442794d004c967e2e67d77f1f573d6641ae73a14ff5be47f86a2565122ec91bb33e18cc11fbb6556fabf06bbf3cf1f76fcb0ba1231585f1b236e43d13b471110f84e7f41a87045960190b80596995e1e78fd955c3111fff607074ff235a40297e0ff1a5bb8e72e2f5007ea2ab126d18467aefd29299af5e1b8a86db47ae33001d88bd21c1d47f69011c9046aedbedd2d4ba9b9819ca75deff5d9d44486f037718739750c12cd0b4b88d4efe477245a937f0801adfac5224253c5f91a517af5ca0105e0560f633eef3691e2c494480a905b7d1c552bc5b9a8b4d6759f3bbc295aaed0840a6d49a75b0c276d832b997d48c84172ad94c40330c9a4eac54ff8cb13bc78191ff0c906a98992c2456749b0674481338bc14d9cbe9a3637f92028af2eb525826d35d3ed7f0c08e3f160ef8e38f124bd8812aaab3bf229b452b61be7cc22f6c7114c229bc6008b7ffda7ff00ba947953f2bf7d57bf09a304c49bc5fa30f573d44eada892e9109bbd2d80a0b6c76543254ba08b1819ceafa434381c086165ba3c7d30f9d6a2bd2e0e461bfa8e272d2081393cae31b8a256220b577b01a472db946cfeb7b9d01531e6b4adfdb7a63a6339993c736bec6fe369b3fa645a3a3f6fb4bca2e0d4b67639e805200a097581f5b11cf6a49aa29740fa1e9d5f87f86cf05fe7ca66e061f230dddf054fff16b3a238fa94f26399af96a4d345814e73df697fd006ad390058d097d50cabc6a09cd018a38fb7ffe6cedbe717e21ee0ff8f4bb83ac14d20f0bc430000d87f9c45d7a94ebd9ea2565c5bc52a25e84476c7cf222f22ca3d31c65f2b16fce6aa3f7f6f3532a4c79bcfac8395bf46ed8570a78c978cd0bfcc1d1631c5b634b9ec3edde8549599584aff88631f7ebfa728d7337c5ab6beecf35473acfbde8de5ec48b0960b340f3bf9d562931b380f347c8c261be42816660d24a527e55340b1f1e5e9fbb9e3aa333cfb8b85b6b6c38e403fcd006bd3d0c5f0eb46430d8bc358d3b394147007964717fb3716a25d26cab5e8c6e544e9c35b4b9a2857f7d4283e5cd03b72c294251814c7fbd5c67049923547b0f5d22bb02e175b023f4a1407e568375fa5257ad80dbbb7b2d632aa09179c8cfb7a0798112490b9b5987bc6d4c87b4d00f7ce85ea61aeb331ca30191f64304a33e3b80c6728d8ce2ac2002481e0107956388fc37ca5e19ad18f7adcd81b1d4a0f8aee5edf13d54e6f7b6ce908287d4df2401fae21e1d431b05626abc8feb8fc6d9c05f31c8545cbf65b52cf0621419ddb22e39fa275e4562920c4f048371dba5847f2db6213b6f59238acfb9feccf9a21da7276c6f99c83aa8594a6dbafcc7f2e08d9418f951d64ab12a8a9887c544c21cae8c2ff71250d55867a60b09a05b6d7ac48abd8885d2fcaa6e97668727da046ac981692cbf5af806e9edeb4b93bc3b61d246ef55796081a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hand over Your Token!</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>sentiment</category>
      </categories>
      <tags>
        <tag>阿炳</tag>
        <tag>情</tag>
        <tag>exclusive message</tag>
      </tags>
  </entry>
  <entry>
    <title>网站备忘/备用</title>
    <url>/2024/01/17/web4memo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录一些自用 &amp; 公开的资源站/备用链接</p>
<a id="more"></a>

<h1 id="资源站"><a href="#资源站" class="headerlink" title="资源站"></a>资源站</h1><p>TODO</p>
<h1 id="备用"><a href="#备用" class="headerlink" title="备用"></a>备用</h1><p>TODO</p>
]]></content>
      <categories>
        <category>memo</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode For Android 安卓使用vscode</title>
    <url>/2024/01/17/vscode4android/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>无意发现鸿蒙4可以在连接显示器的时候启用电脑模式，如果可以运行生产力软件——Visual Studio Code那就完美了。拾人牙慧实施了一些方案，发现截至20240117还是这种本地Termex+proot+vscode_server(pacman)的后端结合via浏览器全屏操作的前端方案较为舒适且坑少。</p>
<a id="more"></a>

<h1 id="安装Termux"><a href="#安装Termux" class="headerlink" title="安装Termux"></a>安装Termux</h1><p>进入<a href="https://d.icdown.club/repository/main/ZeroTermux/">IXCM工作室下载站 (icdown.club)</a>下载比较新的版本，Zero-Termux比老旧的Termux更好用。如果下载站挂掉可以尝试：</p>
<ol>
<li><p><a href="https://f-droid.org/?utm_source=ld246.com">F-Droid - Free and Open Source Android App Repository</a>下载，不要用Play商店（老旧不再维护）</p>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>开发环境</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>利用kplayer实现无人值守推流云盘资源</title>
    <url>/2023/11/28/kpalyerWithCloudFile/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在Linux主机（NAS、软路由等）上部署无人值守的24h推流直播服务，利用Alist，NFS等服务挂载自动挂载云盘资源。</p>
<blockquote>
<p><a href="http://live.bilibili.com/21256315">Blibili直播地址</a></p>
</blockquote>
<a id="more"></a>

<h1 id="Alist挂载云盘"><a href="#Alist挂载云盘" class="headerlink" title="Alist挂载云盘"></a>Alist挂载云盘</h1><ol>
<li>NAS利用<code>Alist docker</code>挂载云盘：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alist:5244</span><br><span class="line">docker run -d --restart=always -v /etc/alist:/opt/alist/data -p 5244:5244 -e PUID=0 -e PGID=0 -e UMASK=022 --name=&quot;alist&quot; xhofe/alist:main</span><br></pre></td></tr></table></figure>
<p>    QNAP用docker方案挂载Alist会在每次重启NAS的时候丢失挂载的网盘配置，建议直接使用脚本在目录中安装：<a href="https://alist.nn.ci/guide/install/script.html">One-click Script | AList Docs (nn.ci)</a></p>
<ol start="2">
<li><p>利用HybridMount等应用挂载Alist内云盘到NAS本地</p>
<blockquote>
<p><a href="http://localhost:5244/dav">http://localhost:5244/dav</a></p>
</blockquote>
</li>
</ol>
<h1 id="KPlayer"><a href="#KPlayer" class="headerlink" title="KPlayer"></a>KPlayer</h1><blockquote>
<p><a href="https://docs.kplayer.net/">https://docs.kplayer.net/</a></p>
</blockquote>
<p>暂时直接参考这个吧，没时间写</p>
]]></content>
      <categories>
        <category>NAS</category>
      </categories>
      <tags>
        <tag>Alist</tag>
        <tag>Linux服务</tag>
        <tag>NAS</tag>
      </tags>
  </entry>
  <entry>
    <title>中兴机顶盒B860AV2.1刷安卓/ARM64/OMV/EmuELEC</title>
    <url>/2023/04/09/B860AV21-Tutorial/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="What-We-Do"><a href="#What-We-Do" class="headerlink" title="What We Do"></a>What We Do</h1><p>利用机顶盒的低能耗、低价格以及高性能的特点，刷入各种固件，使其应用在各种场景：</p>
<ol>
<li><p>刷入安卓/当贝桌面，绕开IPTV收费机制。适用于家庭收视场景；</p>
</li>
<li><p>刷入armbian64系统，做微型服务器。适用于微服务器、PT盒子、PCDN盒子等场景。</p>
</li>
<li><p>刷入OMV系统，做NAS。适用于轻量级家庭私有云场景。</p>
</li>
<li><p>刷入EmuELEC系统，做怀旧游戏机。适用于轻量聚会游戏（怀旧）场景。</p>
</li>
</ol>
<a id="more"></a>

<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="中兴B860AV2-1配置"><a href="#中兴B860AV2-1配置" class="headerlink" title="中兴B860AV2.1配置"></a>中兴B860AV2.1配置</h2><p>芯片：S905L 四核 2GHz<br>存储：1G+8G<br>（猜测）接口：两个 USB，1 TF卡，1 网口，1 HDMI，有AV接口，无音频接口。</p>
<p>无线：有Wifi，无蓝牙</p>
<h2 id="硬件-工具准备"><a href="#硬件-工具准备" class="headerlink" title="硬件/工具准备"></a>硬件/工具准备</h2><ul>
<li><p>双工USB线，可自己改造可网购。</p>
<ul>
<li>讲究的话可以直接购买，家里如果有富足数据线，剪断后只要两个usb公头。正常数据线有四根线，红色为正极，黑色为负极，白色、绿色为数据传输。按颜色对接即可。如果无颜色，只能借助万用表，确保两个公头的线序一致即可。（如图）<br><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/B860AV/1.png" alt="USB"></li>
</ul>
</li>
<li><p>短接工具：镊子、别针等导电物件，或网购“专用免拆短接HDMI刷机S905”（型号不一定通用，注意芯片信号）</p>
</li>
<li><p>网线以及机顶盒电源线</p>
</li>
<li><p>我用的小米的万能遥控是可行的，原始的遥控器可能在刷机后不通用了</p>
</li>
<li><p>TF卡以及读卡器，TF卡最少8G。如果需要刷EmuELEC，建议选用64G的TF卡，可以刷入更全的游戏包。</p>
</li>
</ul>
<h2 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h2><ul>
<li><p>刷机软件：<a href="https://pan.baidu.com/s/1XbCkDhSHTuq5IGXFwvalTQ">Amlogic USB Burning Tool</a>，提取码：iw8h </p>
</li>
<li><p>过时硬件的驱动：某些系统如果无法识别盒子的驱动，需要下载安装<a href="https://gsmusbdrivers.com/download/amlogic-usb-driver/">Amlogic USB Driver Android [Download] - GSM USB Drivers</a></p>
</li>
<li><p>线刷安卓固件（带ROOT）：<a href="https://pan.baidu.com/s/1SYtbQ0vg-gmN_Zy06zxKJQ">带ROOT安卓固件</a>，提取码：wmmh </p>
</li>
<li><p>卡刷固件烧写工具：<a href="https://www.balena.io/etcher">balenaEtcher - Flash OS images to SD cards &amp; USB drives</a></p>
</li>
<li><p>卡刷Armbian固件：<a href="https://pan.baidu.com/s/1bztVXaz1yLp3G_Po5OABLw">Armbian20.10</a>，提取码：zt7u </p>
</li>
<li><p>卡刷EmuELEC固件：<a href="https://pan.baidu.com/s/122dANVsfwi04g5BEP1StPA">emuelec4.3正式版-S905M-S905L-58G</a>，提取码：intl </p>
</li>
</ul>
<p>其他场景以及其他设备型号的固件自行搜索，操作原理和过程类似。</p>
<h1 id="避坑预警"><a href="#避坑预警" class="headerlink" title="避坑预警"></a>避坑预警</h1><p>这些坑可能遇见，但是我没遇见。做个备份</p>
<ol>
<li><p>拿到B860AV2.1盒子卡刷、Recovery、TTL写入、ADB都会锁，只能通过线刷才能成功。以上刷机方法都试过，很坑，建议大家不要去试。</p>
</li>
<li><p>线刷一般会发生以下三个错误  </p>
</li>
</ol>
<ul>
<li><p>线刷驱动装不上，win10要关闭驱动签名；</p>
</li>
<li><p>线刷98%失败，Amlogic Usb burning tool 2.1.6.8以后的版本做了超时退出，固件太大，验证时间超过30秒就会失败，这个地方卡了最久，建议使用2.1.6这个版本；</p>
</li>
<li><p>遥控左键、电源键都触发不了线刷时，拆机断电后短接C125位置的空位。  </p>
</li>
</ul>
<ol start="3">
<li><p>盒子优先从TF卡启动，eMMC和TF卡都有系统从TF卡启动；</p>
</li>
<li><p>CoreELEC，wifi驱动没有；需要自己编辑红外遥控键码；</p>
</li>
<li><p>Armbian 系统长时间不使用，UI就会卡顿；</p>
</li>
<li><p>潜龙的固件有几个版本不能自动获取IP，需要手动配置。</p>
</li>
</ol>
<h1 id="刷入底包"><a href="#刷入底包" class="headerlink" title="刷入底包"></a>刷入底包</h1><p>以上的场景中，需要首先线刷底包，包括安卓或者当贝桌面等基于安卓系统的固件。后续才可以借助TF卡 or U盘卡刷其它系统。这里介绍刷安卓固件的步骤，当贝桌面换个固件写入即可。</p>
<h2 id="短接"><a href="#短接" class="headerlink" title="短接"></a>短接</h2><p>这个操作只需要在线刷底包的时候进行。如果买了HDMI口的免拆工具，直接插上就行。如果型号不匹配或者不具备条件，参考以下方法短接电阻。注意B860AV2.1的短接入口为C125，后面带字母的可能需要短接的电阻不一样，例如B860AV2.1-A是短接C128。</p>
<p><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/B860AV/2.png" alt="短接"></p>
<p>短接工具可以选回形针、镊子，甚至你可以选择焊上然后再吸锡器去除焊接点。</p>
<h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><p>打开USB Burning Tool，左上角点击文件加载烧录包，之前下载的压缩包记得解压，用的是.img后缀的文件。选中刷机包后，把软件右侧所有能选中的勾都去掉，否则可能变砖。</p>
<blockquote>
<p>选择刷安卓底包用来刷其他系统的需要勾选刷写Boot Loader，以此来完成写入Emmc的操作。</p>
</blockquote>
<p>盒子<strong>不要通电</strong>。把双头USB一端连接到盒子的挨着网线的那个USB插孔，另一端连接上电脑的USB接口。</p>
<p>这里得特殊说一下，因为盒子USB插孔选不对，电脑也不识别。正常情况下，盒子连接上电脑，指示灯会点亮。如果不亮，针对这两种情况，可以用以下步骤排除：</p>
<ol>
<li><p>若先插USB（盒子指示灯不亮），再短接C125，再插盒子电源（指示灯亮），电脑识别，松开短接，开始刷机。</p>
</li>
<li><p>若先插USB（盒子指示灯亮）（再拔掉USB），则先短接C125，再插USB，再插盒子电源，电脑识别，松开短接，开始刷机。</p>
</li>
</ol>
<p>所以选择第一种情况。插机箱的USB，盒子先不亮这种。（如果你用的是笔记本，那就得判断用灯是先亮还是后亮的USB口了）此时，盒子跟电脑已经用USB线连接，盒子没有插电源。用短接工具把盒子电路板上的C125处两个针脚连接上。别松手，把盒子电源插上。</p>
<p>这时候USB Burning Tool工具<strong>会提示“连接成功”</strong>。</p>
<p>然后点击开始等待写入完成即可。这里埋点记录写入过程中可能存在的BUG。一般来说，重启或者重新尝试。</p>
<p>刷机在4% 刷写u-boot的时候一定不要松开。等到7%开始格式化EMMC分区的时候就可以松开了。中途会失败，在点击开始即可。</p>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>底包刷入很简单，后续接入显示器，借助遥控器（Maybe需要重新编译，但我有的时候可以用小米的万能遥控）</p>
<h1 id="刷入armbian系统"><a href="#刷入armbian系统" class="headerlink" title="刷入armbian系统"></a>刷入armbian系统</h1><blockquote>
<p>如果是高安版本就不要折腾了，高安可以线刷（固件与非高安不通用）但不能ROOT，无法启动和刷入Armbian</p>
</blockquote>
<h2 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h2><blockquote>
<p>这一步建立在刷入带root权限的安卓系统的基础上</p>
</blockquote>
<ol>
<li><p>需要准备[rebootupdate.apk](<a href="https://androidappsapk.co/download/me.thomastv.rebootupdate/8d3d30a22310d98e7862f183538f43f2/#google_vignette">List APK variants of Reboot to LibreELEC 1.1 apk | AndroidAppsAPK.co</a>)，如果原始网站不可用，可以选择<a href="https://pan.baidu.com/s/1HheiMaOpCPWfMA3QLdJMgg">百度云-rebootupdate.apk</a>，提取码：1f8l 。用来完成root权限的写入。点击刚才装的软件，选择首次运行。允许root执行。此时立刻插入U盘到USB2口。SD卡的话可以在启动机顶盒前就插入；</p>
</li>
<li><p>使用BalenaEtcher将armbian固件写入<strong>TF卡</strong>（U盘可能出错）</p>
</li>
</ol>
<h2 id="刷写过程"><a href="#刷写过程" class="headerlink" title="刷写过程"></a>刷写过程</h2><ol>
<li><p>将armbian固件成功写入之后，修改/boot分区中的<code>/extlinux/exlinux.conf</code>文件：在rk3399那两句前添加<code>#</code>，选择<code>s905x-p212.dtb</code>(去掉#即可)，其他非aml可删除：</p>
<p><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/B860AV/3.png" alt="exlinux.conf"></p>
</li>
<li><p>将/boot分区中文件<code>uboot-s905x...</code>修改为<code>uboot.ext</code></p>
</li>
</ol>
<h2 id="从TF卡启动并刷入Emmc"><a href="#从TF卡启动并刷入Emmc" class="headerlink" title="从TF卡启动并刷入Emmc"></a>从TF卡启动并刷入Emmc</h2><p>可以TF卡启动，也可以刷入Emmc。插了TF卡的话默认使用TF卡启动，刷入Emmc方便后续刷OMV再挂载硬盘。不刷的话启动方法更灵活一些。</p>
<ol>
<li><p>打开rebootupdate，待安卓完全关闭后，重启前，插入SD卡，<strong>防止文件污染</strong></p>
</li>
<li><p>进入armbian(sd卡)系统，设置用户名和密码等  </p>
</li>
<li><p><code>cd /boot</code>,输入 <code>ls</code> 列出文件目录  </p>
</li>
<li><p>删除<code>System....Infmation</code>文件夹，使用 <code>rm -rf &#39;System....Infmation&#39;</code>    （带引号），如有dir等安卓文件，一并删除  </p>
</li>
<li><p>在root文件夹中，有<code>install-aml.sh</code>，写入emmc（<strong>不要使用是s905-emmc</strong>）  </p>
<ol>
<li><p>赋予权限<code>chmod 755 install-aml.sh</code></p>
</li>
<li><p><code>./install-aml.sh</code>  </p>
</li>
<li><p>等待刷写完成，重启即可。</p>
</li>
</ol>
</li>
</ol>
<p>成功刷入armbian，并写入emmc：</p>
<p><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/B860AV/4.png" alt="arm-64效果"></p>
<p>此时即可进入arm系统开始玩耍啦~</p>
<h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h2><p>使用SSH在内网环境下登录系统。可以用端口转发+DDNS，利用软路由实现公网访问。</p>
<p>首次进入会让你重新设置密码；如果开机一直显示<code>reset high-speed usb device number 2 using xhci-hcd</code>说明设备USB供电不足，建议换一个U盘（USB2.0）或者直接使用SD卡</p>
<h1 id="刷入OMV系统"><a href="#刷入OMV系统" class="headerlink" title="刷入OMV系统"></a>刷入OMV系统</h1><h2 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h2><ol>
<li><p>使用SSH登入刷了armbian系统的机顶盒，输入指令<code>armbian-config</code></p>
</li>
<li><p>选择自动安装：</p>
<ul>
<li>方向键移到Software⇨回车</li>
<li>方向键移到Softy⇨回车</li>
<li>方向键移到OMV⇨ 空格键选择⇨回车确定</li>
<li>等待安装完成</li>
</ul>
</li>
</ol>
<h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><blockquote>
<p>手动安装的原因是自动安装容易出错，下载进度缓慢</p>
</blockquote>
<ol>
<li><p>添加OMV软件源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;deb http://packages.openmediavault.org/public arrakis main&quot; &gt; /etc/apt/sources.list.d/openmediavault.list</span><br><span class="line">apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 7E7A6C592EF35D13 24863F0C716B980B</span><br></pre></td></tr></table></figure></li>
<li><p>设置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export LANG=C</span><br><span class="line">export DEBIAN_FRONTEND=noninteractive</span><br><span class="line">export APT_LISTCHANGES_FRONTEND=none</span><br></pre></td></tr></table></figure></li>
<li><p>开始安装OMV</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install openmediavault-keyring postfix</span><br><span class="line">apt install openmediavault</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>耐心</strong>等待安装完成即可。</p>
<h2 id="TIPS-1"><a href="#TIPS-1" class="headerlink" title="TIPS"></a>TIPS</h2><ul>
<li><p>安装出现错误后，输入如下命令即可安装成功：<code>apt --fix-broken install</code></p>
</li>
<li><p>浏览器输入机顶盒的<code>IP</code>即可进入OMV系统，其中默认用户名为<code>admin</code>，密码为<code>openmediavault</code></p>
<p><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/B860AV/5.png" alt="OMV"></p>
</li>
</ul>
<h2 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h2><h3 id="共享移动硬盘"><a href="#共享移动硬盘" class="headerlink" title="共享移动硬盘"></a>共享移动硬盘</h3><blockquote>
<p>注意： NFS 只是一小众的文件共亨协议，应用的不多，但苹果系统下应用很广，建议还是用SMB协议吧。通用性较强些。</p>
</blockquote>
<h3 id="01-挂载移动硬盘"><a href="#01-挂载移动硬盘" class="headerlink" title="01 挂载移动硬盘"></a>01 挂载移动硬盘</h3><ul>
<li>插上移动硬盘接到n1的usb口</li>
</ul>
<blockquote>
<p>OMV不支持EXT2，3，extFat，所以最好用ext4或NTFS</p>
</blockquote>
<ul>
<li>存储器→文件系统</li>
<li>选择移动硬盘→点击[挂载]→保存并应用</li>
</ul>
<h3 id="02-添加移动硬盘中需要共享的文件夹"><a href="#02-添加移动硬盘中需要共享的文件夹" class="headerlink" title="02 添加移动硬盘中需要共享的文件夹"></a>02 添加移动硬盘中需要共享的文件夹</h3><ul>
<li>访问权限管理→点击[共享文件夹]</li>
<li>点击[添加]</li>
</ul>
<blockquote>
<p>名称：share</p>
<p>设备：选择移动硬盘</p>
<p>路径：点击选择，/表示共享整个移动硬盘</p>
</blockquote>
<ul>
<li>点击[保存]</li>
</ul>
<h3 id="03-新建用户"><a href="#03-新建用户" class="headerlink" title="03 新建用户"></a>03 新建用户</h3><ul>
<li>访问权限管理-&gt;用户-&gt;点[添加]</li>
</ul>
<blockquote>
<p>名称 注意不能为root<br>密码<br>确认密码<br>用户组 勾选users</p>
</blockquote>
<h3 id="04-设置新建用户对文件夹的权限"><a href="#04-设置新建用户对文件夹的权限" class="headerlink" title="04 设置新建用户对文件夹的权限"></a>04 设置新建用户对文件夹的权限</h3><ul>
<li>点击新建的用户</li>
<li>点击[特权]→勾选[读和写]</li>
<li>保存并应用</li>
</ul>
<h3 id="05-通过smb把共享文件夹共享出去"><a href="#05-通过smb把共享文件夹共享出去" class="headerlink" title="05 通过smb把共享文件夹共享出去"></a>05 通过smb把共享文件夹共享出去</h3><ul>
<li>[服务]→[SMB/CIFS]</li>
<li>[设置]→常规设置→勾选[启用]→保存并应用</li>
<li>[共享]→点击[添加]</li>
</ul>
<blockquote>
<p>共享文件夹：选择 share</p>
</blockquote>
<ul>
<li>保存并应用</li>
</ul>
<blockquote>
<p>之后就可以去[我的电脑]-&gt;[网络]中看到 名为“AML”的磁盘，输入刚创建的用户名和密码就可以登入</p>
</blockquote>
<h3 id="06-设置移动硬盘待机"><a href="#06-设置移动硬盘待机" class="headerlink" title="06 设置移动硬盘待机"></a>06 设置移动硬盘待机</h3><ul>
<li>存储器→磁盘</li>
<li>选择 移动硬盘→点击[编辑]</li>
</ul>
<blockquote>
<p>高级电源管理：1-待机状态时最低功耗</p>
<p>自动声音管理：禁用</p>
<p>停转时间：20分钟</p>
<p>写入缓存：勾选 [开启写入缓存]</p>
</blockquote>
<h2 id="安装配置transmission以及syncthing"><a href="#安装配置transmission以及syncthing" class="headerlink" title="安装配置transmission以及syncthing"></a>安装配置transmission以及syncthing</h2><blockquote>
<p>Omv5支持的插件还很少，所以transmission和syncthing只能通过<code>armbian-config</code>命令安装。</p>
</blockquote>
<ul>
<li>SSH登陆后<code>armbian-config</code>，[Software] → [Softy] → 空格选择上[Transmission、Syncthing]→ 回车确认安装</li>
</ul>
<h3 id="Transmission"><a href="#Transmission" class="headerlink" title="Transmission"></a>Transmission</h3><ul>
<li><p>修改账号密码:</p>
<ul>
<li>文件路径<code>vim /etc/transmission-daemon/settings.json</code></li>
<li><code># rpc-username rpc-password</code>都填明文；<code>download-dir为</code>下载路径。</li>
<li><code>:wq!</code> 保存并退出vim</li>
<li><code>systemctl reload transmission-daemon</code> 使改动生效</li>
</ul>
</li>
<li><p>换UI</p>
<ul>
<li>直接参考，傻瓜式更换: <a href="https://github.com/ronggang/transmission-web-control/wiki/Linux-Installation-CN">Github</a></li>
</ul>
</li>
</ul>
<h3 id="Syncthing基础配置"><a href="#Syncthing基础配置" class="headerlink" title="Syncthing基础配置"></a>Syncthing基础配置</h3><ol>
<li>打开UI界面，http://{omv-ip}:8384/，右上角操作，显示id</li>
<li>手机安装Syncthing app（<a href="https://github.com/syncthing/syncthing">开源项目地址</a>，安卓apk可以通过<a href="https://f-droid.org/zh_Hans/packages/com.nutomic.syncthingandroid/">F-Droid</a>下载），设备，有上角+，输入上述id，过一会，网页显示有设备请求连接，连接即可；</li>
<li>手机上添加需要备份的文件夹，版本控制无，共享给远程已连接的omv设备；</li>
<li>WEB UI上看到手机共享的文件，选择一个路径保存，版本控制选回收站，参数“在该时间后清除”填0</li>
<li>有时候，手机清理了一下，会发生<code>folder markermissing</code>错误，在手机需要备份的目录下创建空白文件夹<code>.stfolder</code>，并配置手机清理白名单。</li>
</ol>
<h2 id="OMV外网访问及同步"><a href="#OMV外网访问及同步" class="headerlink" title="OMV外网访问及同步"></a>OMV外网访问及同步</h2><h3 id="DDNS-端口转发"><a href="#DDNS-端口转发" class="headerlink" title="DDNS + 端口转发"></a>DDNS + 端口转发</h3><p>组网拓扑暂不细述，有两种思路：</p>
<ol>
<li><p>光猫桥接+R2S软路拨号+外接omv：</p>
<ul>
<li><p>确认对应传输端口，在R2S软路由侧设置端口转发，监听、转发并开放对应端口（防火墙）：</p>
<ul>
<li>一般是在OMV Web UI中设置了相应传输协议的端口，但需要注意的是例如FTP的21端口为发送命令端口，主动模式下的FTP的传输文件端口是<code>命令端口号-1</code>；被动传输文件端口随机，其他的协议端口自行查询。</li>
<li>Syncthing：在WEB UI（http://{omv-ip}:8384/）中检查连接记录（默认的dynamic地址的端口是否为22000），转发开放22000和48149端口</li>
</ul>
</li>
<li><p>通过R2S的DDNS_ip以及转发的端口号完成连接</p>
<p> <img src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/B860AV/6.png" alt="端口转发"></p>
</li>
</ul>
</li>
<li><p>光猫桥接+R2S拨号+交换机+omv或者光猫拨号+omv：</p>
<ul>
<li>主要需要让omv直接获取到公网ip，然后在omv中启用ddns的docker实现外网访问。</li>
<li>这种实现方式最优，但要么牺牲组网可拓展性要么牺牲钱包买交换机。</li>
</ul>
</li>
</ol>
<h3 id="Syncthing外网访问"><a href="#Syncthing外网访问" class="headerlink" title="Syncthing外网访问"></a>Syncthing外网访问</h3><p>打开上述下载安装的手机app：Syncthing，进行相关设置。无需端口转发以及DDNS之类的操作。此项目基于GO语言开发，类似torrent协议但只存储在个人设备上。<strong>须要</strong>注意以下几点：</p>
<ol>
<li><p>一定一定要确认好自己的硬盘挂载路径，否则默认同步到EMMC中，很快就占满空间了。方法可参考：输入<code>mount -l</code>和挂载项对比，如图所示：</p>
<p><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/B860AV/8.png" alt="挂载确认"></p>
<p>然后在OMV端的Syncthing UI配置OMV端同步文件夹，可以看到是正在同步状态：</p>
<p><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/B860AV/9.png" alt="挂载"></p>
</li>
</ol>
<ol start="2">
<li><p>做好id和标签的规划和命名以方便管理，建议在OMV的Syncthing UI和手机端均勾选上自动接受，以免后续同步的时候需要手动点击同意创建文件夹。同时注意勾选相关权限和共享文件夹以保证同步可达性。</p>
<p><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/B860AV/7.jpg" alt="配置确认"></p>
</li>
</ol>
<h1 id="刷入EmuELEC系统"><a href="#刷入EmuELEC系统" class="headerlink" title="刷入EmuELEC系统"></a>刷入EmuELEC系统</h1><p>刷入安卓底包后用SD卡完成卡刷，具体步骤类似以上，<strong>暂时</strong>不再赘述了，图的话有兴趣了补上。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>刷机</tag>
        <tag>机顶盒</tag>
      </tags>
  </entry>
  <entry>
    <title>移动光猫吉比特GS3101超级账号获取更改桥接</title>
    <url>/2023/01/09/GS3101-bridge/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>家里移动融合套餐的宽带用的光猫型号是GS3101，用面板后的账户密码登录发现权限几乎为零，本来改桥接要做什么也不好明说，为了避免麻烦就没找客服，这里记录一下自己折腾改桥接的方法。并且小记一下忘了拨号账户密码的解决方案。</p>
<a id="more"></a>

<h1 id="超级账号获取"><a href="#超级账号获取" class="headerlink" title="超级账号获取"></a>超级账号获取</h1><ol>
<li><p>用浏览器登录设置页面输入盒子背面提供的账号密码登入（什么权限都没有，但是只要保持登录即可）；</p>
</li>
<li><p>浏览器新建标签页输入<code>http://192.168.1.1/cgi-bin/getGateWay.cgi</code>页面提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Family Gateway</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果为NO重新打开网址即可（新版GS3101必须登录盒子才能跳转这个页面，否则为登录界面）</p>
</blockquote>
</li>
<li><p>打开CMD，输入<code>telnet 192.168.1.1</code>，回车后根据下面的密码进入<code>telnet</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">telnet_username:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">telnet_passwd:</span> <span class="string">s2@We3%Dc#</span></span><br></pre></td></tr></table></figure></li>
<li><p>输入<code>cd /tmp</code>，回车；</p>
</li>
<li><p>输入<code>cat ctromfile.cfg | grep &#39;user&#39;</code>，查询超级账号名。一般按<code>Entry0</code>，<code>Entry1</code>，<code>Entry2</code>区分账号 （后面测试得出<code>Entry0</code>对应超级账号，这里是<code>CMCCAdmin</code>）；</p>
</li>
<li><p>输入<code>cat ctromfile.cfg | grep &#39;passw&#39;</code>查询对应密码，这里是<code>CMCCAdminBTjRcU8n</code>；</p>
</li>
</ol>
<h1 id="桥接设置"><a href="#桥接设置" class="headerlink" title="桥接设置"></a>桥接设置</h1><p>得到密码后登入光猫即可进入有很多权限的超级管理员界面，然后根据以下步骤操作：</p>
<ol>
<li><p>进入网络 &gt; 宽带设置；</p>
</li>
<li><p><strong>连接名称</strong>下拉菜单选择带<code>INTERNET_R_VID</code>的选项；</p>
</li>
<li><p><strong>模式</strong>下拉菜单选择<code>Bridge</code>，（可以选择<code>lan1</code>-千兆网口，其余是百兆网口。如果提示被使用，则需先删除某个连接。也可以不选择）</p>
</li>
<li><p><strong>桥类型</strong>下拉菜单选择<code>PPPoE_Bridged</code></p>
</li>
</ol>
<p>随后保存即可完成设置</p>
<h1 id="忘记拨号账户-密码"><a href="#忘记拨号账户-密码" class="headerlink" title="忘记拨号账户/密码"></a>忘记拨号账户/密码</h1><ol>
<li><p><code>cat ctromfile.cfg | grep &#39;拨号账号&#39;</code>（账号一般是手机号，忘记了的话可以用普通账户登陆进去看到）</p>
</li>
<li><p>或者在改桥接前直接用普通账户登录，可以看到账号以及隐藏了的密码。然后F12进入开发者模式，改审阅模式中的网页元素：将拨号密码框的元素从<code>password</code>的<code>type</code>修改为<code>text</code>即可查看。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>软路由</tag>
      </tags>
  </entry>
  <entry>
    <title>软路由折腾笔记</title>
    <url>/2023/01/07/soft-routing-setup/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>软路由的入门折腾笔记，给自己以后换房子重新部署做个参考</p>
</blockquote>
<p>目前计划实现的功能：</p>
<ul>
<li>ipv6公网的DDNS，绑定域名之后实现公网访问</li>
<li>广告过滤，（翻阅长城的功能暂定不加）</li>
<li>利用<code>x-ui</code>搭建一个小型流量中转站</li>
<li>搭建青龙面板跑一些基础的脚本</li>
<li>离线下载</li>
<li>私有云</li>
</ul>
<a id="more"></a>

<h1 id="软路由刷机"><a href="#软路由刷机" class="headerlink" title="软路由刷机"></a>软路由刷机</h1><blockquote>
<p>第一次选用了NanoPi R2S作为入门机器，这个刷机流程记录了的是R2S的。后面更换机型需要重新找固件，比较靠谱的有<a href="https://www.right.com.cn/">恩山</a>、知乎等等</p>
<p>R2S性能比较差，部署不了几个功能。后面打算直接上x86的软路由一步到位</p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li><p>刷机软件：<a href="https://www.balena.io/etcher/">ethcer</a> or <a href="https://rufus.ie/zh/">rufus</a>；</p>
</li>
<li><p>软路由系统固件：（这个R2S刷的openwrt是在恩山上找的。<a href="https://github.com/klever1988/nanopi-openwrt/releases/">klever</a>版本的话，选择版本时请注意带slim的为轻量级固件，因为R2S实在性能堪忧）<a href="https://www.right.com.cn/forum/thread-4387071-1-1.html">恩山无线论坛-openwrt-r2s</a>；初始管理地址：<code>192.168.8.1</code>，初始管理密码：空；</p>
</li>
<li><p>用来刷系统的存储设备（R2S这里用的TF卡，要搭读卡器。后面x86软路由换用U盘）；</p>
</li>
<li><p>电脑＋网线</p>
</li>
</ol>
<h2 id="简要流程"><a href="#简要流程" class="headerlink" title="简要流程"></a>简要流程</h2><ol>
<li><p>系统烧录：这个没什么好说的，用刷机软件把下载好的固件镜像刷进存储介质就行，需要注意的点只是：<strong>刷入成功后会提醒你格式化U盘，千万不要！！！</strong></p>
</li>
<li><p>R2S简单初始化：完成上述步骤后，将R2S电源接通，用网线把PC与R2S的<code>LAN</code>口相连。然后在浏览器根据固件设置的默认初始管理地址和密码进入后台。然后进行一些基本的设置：</p>
<ul>
<li><p>设置<code>LAN</code>口：网络 - 接口 - <code>LAN</code>口 - 高级设置 - 打开<code>动态DHCP</code></p>
</li>
<li><p>设置<code>WAN</code>口：</p>
<ul>
<li><p>如果家里是<strong>光猫拨号</strong>上网，那就设置模式为<code>DHCP</code>客户端。  </p>
</li>
<li><p>如果家里是<strong>路由器拨号</strong>上网，或者是使用<strong>R2S做主路由</strong>，设置为<code>PPPOE</code>拨号上网，输入宽带账号和密码，保存并应用。</p>
</li>
</ul>
</li>
<li><p>设置好之后将光猫与R2S的<code>WAN</code>口连接起来，这时候应该就可以上网了。拨号成功后会显示IP地址。</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>关于这个拨号账号密码以及光猫桥接模式的设置，不同型号的光猫配置方式略有不同；关于这次配置的是移动宽带的GS3101，可以参考<a href="/2023/01/09/GS3101-bridge/" title="移动光猫吉比特GS3101超级账号获取更改桥接">移动光猫吉比特GS3101超级账号获取更改桥接</a></p>
</blockquote>
<ol start="3">
<li>如果要把R2S设置为主路由，将无线路由器的LAN口与PC相连，进入管理后台（这次使用的HIKVISION的地址是<code>http://192.168.0.1/</code>）。开启DHCP后将光猫<code>LAN</code>口连接R2S的<code>WAN</code>口，R2S的<code>LAN</code>口连接路由器的<code>WAN</code>口，即可完成组网。</li>
</ol>
<h1 id="软路由扩容"><a href="#软路由扩容" class="headerlink" title="软路由扩容"></a>软路由扩容</h1><blockquote>
<p>一开始用的<code>squashfs</code> 文件系统的固件，虽然支持还原出厂设置，但是扩容起来很麻烦，后来改用<code>ext4</code>文件系统的固件了。</p>
</blockquote>
<ol>
<li><p>SSH登录OpenWrt后，安装磁盘分区工具，先后顺序不能错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install block-mount e2fsprogs</span><br><span class="line">opkg update</span><br><span class="line">opkg install fdisk blkid vim</span><br><span class="line">opkg install cfdisk</span><br></pre></td></tr></table></figure>

<p>命令行中 <code>cfdisk</code> 、<code>fdisk</code> 均为磁盘分区工具，<code>e2fsprogs</code> 包含了 <code>mkfs</code> 命令，用于格式化分区。</p>
</li>
<li><p>使用<code>fdisk -l</code>查看分区列表，找到自己想要扩展的磁盘分区，我这里是<code>/dev/mmcblk0</code></p>
</li>
<li><p>使用<code>cfdisk /dev/mmcblk0</code> 命令进入磁盘分区界面（<code>/dev/mmcblk0</code>根据实际情况替换），通过键盘上下键切换到 <strong>Free space</strong> （剩余空间），左右键切换至 <strong>NEW</strong> （新增分区），然后按下回车键。分区类型设置为 <strong>Primary</strong> （主分区），按下回车键。左右键切换 <strong>Write</strong> 按下回车键，写入新分区。输入 <strong>yes</strong> 按下回车键，确认写入新分区。</p>
</li>
<li><p>切换 <strong>Quit</strong> ，按下回车键退出。运行 <code>fdisk -l</code> 命令，查看是否成功创建新分区。</p>
</li>
<li><p>格式化新分区：运行命令<code>mkfs.ext4 /dev/mmcblk0p3</code>，将新分区的文件系统格式化为 <code>ext4</code></p>
</li>
<li><p>挂载新分区：</p>
<ol>
<li><p>进入 Open­Wrt 管理后台，依次点击 <strong>系统</strong> - <strong>挂载点</strong> 找到并点击全局设置中的 <strong>生成配置</strong> 。如果没有自动生成，在挂载点手动添加。</p>
</li>
<li><p>在 <strong>挂载点</strong> 找到创建的新分区，点击 <strong>修改</strong> 重新调整挂载项目的设置。</p>
</li>
<li><p>勾选 <strong>启用此挂载点</strong>，<strong>挂载点</strong> 选择为 <strong>作为根文件系统使用</strong> ，完整复制根目录准备中的所有命令行后，点击 <strong>保存并应用</strong>。</p>
<blockquote>
<p>⚠️ <strong>上面复制得到的命令行不要直接运行！！！不要直接运行！！！否则报错。</strong></p>
</blockquote>
</li>
<li><p>需要手动修改命令行中 <code>mount /dev/sda1 /tmp/extroot</code> 为 <code>cfdisk</code> 创建的新分区盘符，例如这里应修改为 <code>mount /dev/mmcblk0p3 /tmp/extroot</code>，然后进入 SSH 终端，运行修改后的完整命令行，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /tmp/introot</span><br><span class="line">mkdir -p /tmp/extroot</span><br><span class="line">mount --bind / /tmp/introot</span><br><span class="line">mount /dev/mmcblk0p3 /tmp/extroot</span><br><span class="line">tar -C /tmp/introot -cvf - . | tar -C /tmp/extroot -xf -</span><br><span class="line">umount /tmp/introot</span><br><span class="line">umount /tmp/extroot</span><br></pre></td></tr></table></figure>

<p>回车键到底，直到跑完所有命令行。然后运行 <code>reboot</code> 重启 Open­Wrt后重新进入 SSH 终端运行 <code>df -h</code> 即可查看扩容效果。</p>
</li>
</ol>
</li>
</ol>
<h1 id="家宽ipv6-DDNS公网访问"><a href="#家宽ipv6-DDNS公网访问" class="headerlink" title="家宽ipv6 DDNS公网访问"></a>家宽ipv6 DDNS公网访问</h1><blockquote>
<p>现在家宽基本只能给到动态的公网ipv6了，有很多DDNS服务的提供商。阿里云也提供付费的DDNS服务，这里以免费的<a href="https://dynv6.com/">dynv6</a>为例进行部署。</p>
</blockquote>
<p>在dynv6申请了子域名之后进入<code>Documentations -&gt; APIs</code>，在管理界面复制<code>token</code>中的内容。对于路由器而言，我们的需求是路由器应当能够定期向dynv6网站汇报自己的IP地址，在Openwrt里我们采用DDNS软件包完成这件事。</p>
<p>一般来说固件编译的时候就包含了这个软件包，在<code>服务 -&gt; 动态DNS</code>中进入DDNS界面。添加一条DDNS规则时注意要将ipv4以及ipv6分别添加，我这里只有ipv6的公网，那就只添加ipv6的规则。其中部分字段可以参考以下表格：</p>
<table>
<thead>
<tr>
<th align="center">字段</th>
<th>值</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">启用</td>
<td>勾选</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">查询主机名</td>
<td>ipv6.dynv6.com</td>
<td align="left">这是采用dynv6进行ddns的固定填写方式</td>
</tr>
<tr>
<td align="center">IP地址版本</td>
<td>ipv6地址</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">DDNS服务提供商</td>
<td>dynv6.com</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">域名</td>
<td>xxxx.dynv6.com</td>
<td align="left">填写申请的子域名</td>
</tr>
<tr>
<td align="center">密码</td>
<td><strong><strong><strong>**</strong></strong></strong></td>
<td align="left">填写之前复制的token</td>
</tr>
<tr>
<td align="center">IP地址来源</td>
<td>URL</td>
<td align="left">以下为高级设置</td>
</tr>
<tr>
<td align="center">用于检测的URL</td>
<td><a href="http://checkipv6.dyndns.com/">http://checkipv6.dyndns.com</a></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">事件网络</td>
<td>wan</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>其他没有涉及的字段可以考虑保持默认设置，再自行设置定时器（更新频率）。地址来源选择URL即可以使用运营商分配的/64短码IPv6地址，看起来美观一些，当然，实际使用上并没有太大区别</p>
<p>随后保存并应用即可，可以试试用路由器的诊断工具测试IPv6的连接情况，访问<a href="http://checkipv6.dyndns.com/">这里</a>或<a href="https://testipv6.cn/">这里</a>得到你的IPv6地址（电脑访问得到电脑的，路由器访问得到路由器的，由于在这里没有NAT的概念，我们说的都是全局的、唯一的IPv6地址）</p>
<p>可以看到现在DDNS检查进程已经启动了，如果没有显示进程的PID，那么手动点击“启动”即可。</p>
<p>当然，我们可以发现API界面也推荐使用一个小脚本进行更新。可以在路由器上部署此脚本的定时任务完成这一需求。</p>
<p>如果配置完成后，地址更新成功且<a href="https://testipv6.cn测试通过，但仍旧不能从外网访问路由器，可能有以下几种原因：">https://testipv6.cn测试通过，但仍旧不能从外网访问路由器，可能有以下几种原因：</a></p>
<ul>
<li><p>运营商分配了IPv6，但禁止了传入连接（罕见，多见于教育网、机关单位等统一配置的防火墙，个人无法解决）</p>
</li>
<li><p>光猫拨号，向下级设备分配了IPv6地址，但光猫的防火墙禁止了传入连接（较常见，可通过修改光猫配置关闭防火墙或改为桥接模式、路由器拨号）</p>
</li>
<li><p>Openwrt自带防火墙默认拒绝传入连接（常见，修改设置即可，参考：<a href="https://blog.csdn.net/weixin_43593122/article/details/95766357%EF%BC%89">https://blog.csdn.net/weixin_43593122/article/details/95766357）</a></p>
</li>
<li><p>运营商禁用了常用端口80、443、8080等（常见，修改http服务器的端口再次测试即可，参考：<a href="https://blog.csdn.net/weixin_43593122/article/details/95766357%EF%BC%89">https://blog.csdn.net/weixin_43593122/article/details/95766357）</a></p>
</li>
</ul>
<h1 id="Docker安装X-UI"><a href="#Docker安装X-UI" class="headerlink" title="Docker安装X-UI"></a>Docker安装X-UI</h1><p>Openwrt已经编译包含了Docker，在自建服务器中可以使用<code>curl -fsSL https://get.docker.com | sh</code>完成Docker的安装，安装完之后会自动启动。</p>
<p>推荐新建一个<code>x-ui</code>的目录进行部署：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir x-ui &amp;&amp; cd x-ui</span><br><span class="line">docker run -itd --network=host -v $PWD/db/:/etc/x-ui/ -v $PWD/cert/:/root/cert/ --name x-ui --restart=unless-stopped enwaiax/x-ui:latest</span><br></pre></td></tr></table></figure>
<p>访问<code>http://服务器IP:54321</code>使用账号admin密码admin登录.注意需开放相关端口防火墙,并及时修改账号密码。</p>
<p>如果没有自动启动Docker那就试试看重启路由器，我就重启法修复了，不明所以。</p>
<p>可以先检索所有运行中的Docker然后根据ID进入Docker环境：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker exec -it XXXX /bin/bash # 容器ID</span><br></pre></td></tr></table></figure>
<h1 id="Docker安装青龙"><a href="#Docker安装青龙" class="headerlink" title="Docker安装青龙"></a>Docker安装青龙</h1><blockquote>
<p>青龙面板仓库地址：<a href="https://hub.docker.com/r/whyour/qinglong" title="Docker Hub">Docker Hub</a></p>
</blockquote>
<h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>使用以下命令拉取青龙面板的镜像，等待下载完成（失败或缓慢可以挂梯子）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull whyour/qinglong:latest</span><br></pre></td></tr></table></figure>
<h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><p>命令行输入一下命令创建容器，如果报错那就重启路由器再试试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">-v $pwd/ql/config:/ql/config \</span><br><span class="line">-v $pwd/ql/log:/ql/log \</span><br><span class="line">-v $pwd/ql/db:/ql/db \</span><br><span class="line">-v $pwd/ql/scripts:/ql/scripts \</span><br><span class="line">-v $pwd/ql/jbot:/ql/jbot \</span><br><span class="line">-p 5700:5700 \</span><br><span class="line">-e ENABLE_HANGUP=true \</span><br><span class="line">-e ENABLE_WEB_PANEL=true \</span><br><span class="line">--name qinglong \</span><br><span class="line">--hostname qinglong \</span><br><span class="line">--restart always \</span><br><span class="line">whyour/qinglong:latest</span><br></pre></td></tr></table></figure>
<h2 id="登录面板"><a href="#登录面板" class="headerlink" title="登录面板"></a>登录面板</h2><p>默认地址为openwrt后台管理ip+端口5700，例如<code>192.168.8.1:5700</code>或者之前DDNS的域名＋端口，在浏览器打开即可完成配置。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>软路由</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器输入URL访问网页的执行流程</title>
    <url>/2022/07/08/url-visit/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="流程概览"><a href="#流程概览" class="headerlink" title="流程概览"></a>流程概览</h1><p>对于这一个过程应该有一个大概的骨架，然后再是回忆里面的具体细节。总体流程如下，每一部分细节后面补充：</p>
<ul>
<li><p>查找浏览器缓存：如果查找到缓存中有我们URL对应的文件，则判断是否命中强缓存，如果命中直接读取使用即可，如果强缓存没有命中，判断协商缓存是否命中，但协商缓存不论是否命中都会发送请求，所以都会走下面的步骤</p>
</li>
<li><p>DNS域名解析：将输入的URL解析成对应的IP地址</p>
</li>
<li><p>生成HTTP请求报文：请求报文包括起始行，首部，主体</p>
</li>
<li><p>TCP连接：客户端与服务端进行TCP三次握手，建立连接</p>
</li>
<li><p>发送HTTP请求：握手成功后，客户端向服务端发送http请求，请求数据</p>
</li>
<li><p>服务器收到请求并返回数据：客户端根据返回的结果进行渲染展示，同时判断是否需要将文件存入缓存</p>
</li>
<li><p>TCP断开连接：客户端与服务端进行TCP四次挥手，断开连接</p>
</li>
</ul>
<a id="more"></a>

<h1 id="一、查找浏览器缓存："><a href="#一、查找浏览器缓存：" class="headerlink" title="一、查找浏览器缓存："></a>一、查找浏览器缓存：</h1><p>如果是第一次请求肯定在缓存找不到文件啦（先在memory cache也就是内存中找，再在disk cache也就是磁盘中找），那之后的请求为什么能找到呢？<br>因为第一次请求时如果服务器端在对应的<strong>请求接口中设置了响应头里</strong>的<code>Cache-Control:max-age</code>或者<code>Expires</code>，<code>Last-Modified</code>（最后修改时间） 或者<code>etag</code>（其实就是一个比文件最后修改时间判断是否修改更精确的一个标识，通常会用文件的md5值），浏览器第一次请求到之后就会将文件及这些信息缓存下来，再次请求的时候就会先判断<code>max-age</code>有没有过期（没有<code>max-age</code>就找<code>Expires</code>，两者同时存在前者优先级更高），如果没有过期，则强缓存命中，返回200（from disk cache或者from memory cache）;</p>
<p>如果已经过期，则会发起一个请求，请求头中带上<code>If-None-Match</code>（值就是上一次服务器返回的<code>etag</code>）或者<code>If-Modified-Since</code>（值就是上一次服务器返回的<code>Last-Modified</code> ），去比对服务器中要请求的文件的<code>etag</code>或者<code>last-modified</code>（注意如果两者同时存在，前者的优先级会更高），判断文件到底有没有修改，如果没有修改，则使用本地缓存的就好了，返回304（from disk cache或者from memory cache），如果修改过了，再从服务器中重新请求，并修改<code>etag</code>或者<code>last-modified</code>。返回200</p>
<h2 id="看两张图，走一遍流程"><a href="#看两张图，走一遍流程" class="headerlink" title="看两张图，走一遍流程~"></a>看两张图，走一遍流程~</h2><h3 id="第一次请求某个URL资源文件"><a href="#第一次请求某个URL资源文件" class="headerlink" title="第一次请求某个URL资源文件"></a>第一次请求某个URL资源文件</h3><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/URL-visit/1.png" width="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">第一次请求URL</div>
</center>

<p>注意这里的<code>Expires</code>是http1.0的属性，已经被http1.1的<code>max-age</code>所替代了，只有没有设置<code>max-age</code>的时候才回去找<code>Expires</code></p>
<h3 id="第一次请求某个URL资源文件-1"><a href="#第一次请求某个URL资源文件-1" class="headerlink" title="第一次请求某个URL资源文件"></a>第一次请求某个URL资源文件</h3><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/URL-visit/2.png" width="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">再次请求URL</div>
</center>

<p>补充：上文说了缓存会存在两个地方，memory cache或者disk cache，一般来说需要经常读取的文件，比如图片，JS会存在memory cache，不会经常读取的比如css文件会存在disk cache中</p>
<h1 id="二、DNS域名解析"><a href="#二、DNS域名解析" class="headerlink" title="二、DNS域名解析"></a>二、DNS域名解析</h1><p>DNS虽然也是应用层协议，事实上他是为其他应用层协议工作的，包括不限于HTTP和SMTP以及FTP，用于将用户提供的主机名解析为ip地址</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/URL-visit/3.png" width="100%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">DNS解析流程</div>
</center>

<ul>
<li><p>查找主机中的浏览器中DNS缓存，缓存中维护了一张域名和IP地址的对应表  </p>
</li>
<li><p>查找主机中的操作系统中的DNS缓存，就存在C:\Windows\System32\drivers\etc目录下的hosts文件</p>
</li>
<li><p>查询本地域名服务器，注意主机和本地域名服务器为递归查询，也就是主机需要的Ip地址<strong>一定要从本地域名服务器</strong>查询获得，不论他是自身查到的还是继续向上从哪一级获取的</p>
</li>
<li><p>如果本地域名服务器没有查询到：</p>
<ol>
<li><p>向根域名服务器发起迭代查询，一般DNS服务器的缓存中会有.com域名服务器中的域名，所以到顶级服务器的匹配过程不是那么必要了</p>
</li>
<li><p>根域名服务器会返回他一个权限域名服务器的地址</p>
</li>
<li><p>然后再去向权限域名服务器迭代查询，得到最终的IP地址</p>
</li>
</ol>
</li>
<li><p>本地域名服务器得到IP地址后返回给主机的操作系统，操作系统缓存后，交给浏览器，浏览器同时也存在维护<code>域名-IP地址</code>的表中</p>
</li>
</ul>
<h2 id="例如www-wikipedia-org："><a href="#例如www-wikipedia-org：" class="headerlink" title="例如www.wikipedia.org："></a>例如<code>www.wikipedia.org</code>：</h2><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/URL-visit/6.png" width="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">DNS解析流程</div>
</center>

<p>这样的整个域名看上去只是对应一个单独的IP地址，<strong>不过事实上后面可能对应着多个ip地址</strong>（<strong>也是学习到了，一个ip地址可以对应多个域名<a href="http://www.zhihu.com/question/29390934">听说一个IP可以绑定多个域名，那么…? - 互联网</a>，一个域名也可以对应多个ip地址<a href="https://blog.csdn.net/ywcpig/article/details/52525689">负载均衡实现，一个域名对应多个IP地址</a>，cry！</strong>）还好，有几种方法可以消除这个瓶颈：</p>
<ul>
<li><p><a href="https://blog.csdn.net/ywcpig/article/details/52525689">循环 DNS</a> 是DNS查找时返回多个IP时的解决方案。举例来说，</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Facebook.com</span><br></pre></td></tr></table></figure>

<p>实际上就对应了四个IP地址。</p>
</li>
<li><p><a href="https://blog.csdn.net/ywcpig/article/details/52525689">负载平衡器</a> 是以一个特定IP地址进行侦听并将网络请求转发到集群服务器上的硬件设备。 一些大型的站点一般都会使用这种昂贵的高性能负载平衡器。</p>
</li>
<li><p><strong>地理 DNS</strong> 根据用户所处的地理位置，通过把域名映射到多个不同的IP地址提高可扩展性。这样不同的服务器不能够更新同步状态，但映射静态内容的话非常好。</p>
</li>
<li><p><a href="https://blog.csdn.net/ywcpig/article/details/52525689">Anycast</a>是一个IP地址映射多个物理主机的路由技术。 美中不足，Anycast与TCP协议适应的不是很好，所以很少应用在那些方案中</p>
</li>
</ul>
<h1 id="三、生成HTTP请求报文"><a href="#三、生成HTTP请求报文" class="headerlink" title="三、生成HTTP请求报文"></a>三、生成HTTP请求报文</h1><p>因为像Facebook主页这样的动态页面，打开后在浏览器缓存中很快甚至马上就会过期，毫无疑问他们不能从中读取。</p>
<p>所以，浏览器将把以下请求发送到Facebook所在的服务器：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">http://facebook.com/</span> <span class="string">HTTP/1.1</span></span><br><span class="line"> <span class="attr">Accept:</span> <span class="string">application/x-ms-application,</span> <span class="string">image/jpeg,</span> <span class="string">application/xaml+xml,</span> [<span class="string">...</span>]</span><br><span class="line"> <span class="attr">User-Agent:</span> <span class="string">Mozilla/4.0</span> <span class="string">(compatible;</span> <span class="string">MSIE</span> <span class="number">8.0</span><span class="string">;</span> <span class="string">Windows</span> <span class="string">NT</span> <span class="number">6.1</span><span class="string">;</span> <span class="string">WOW64;</span> [<span class="string">...</span>]</span><br><span class="line"> <span class="attr">Accept-Encoding:</span> <span class="string">gzip,</span> <span class="string">deflate</span></span><br><span class="line"> <span class="attr">Connection:</span> <span class="string">Keep-Alive</span></span><br><span class="line"> <span class="attr">Host:</span> <span class="string">facebook.com</span></span><br><span class="line"> <span class="attr">Cookie:</span> <span class="string">datr=1265876274-[...];</span> <span class="string">locale=en_US;</span> <span class="string">lsd=WW[...];</span> <span class="string">c_user=2101[...]</span></span><br></pre></td></tr></table></figure>
<p>GET 这个请求定义了要读取的<strong>URL</strong>：<code>http://facebook.com/</code></p>
<p>以及浏览器自身定义 (<strong>User-Agent</strong> 头)， 和它希望接受什么类型的相应 (<strong>Accept</strong> and <strong>Accept-Encoding</strong> 头)</p>
<p><strong>Connection</strong>头要求服务器为了后边的请求不要关闭TCP连接。</p>
<h2 id="Tip："><a href="#Tip：" class="headerlink" title="Tip："></a>Tip：</h2><p><strong>URL</strong>：<code>http://facebook.com/</code>中最后的斜杠是至关重要的。这种情况下，浏览器能安全的添加斜杠。而像<code>http://example.com/folderOrFile</code>这样的地址，因为浏览器不清楚<code>folderOrFile</code>到底是文件夹还是文件，所以不能自动添加斜杠。这时，浏览器就不加斜杠直接访问地址，服务器会响应一个重定向，结果造成一次不必要的握手。</p>
<h1 id="四、TCP连接"><a href="#四、TCP连接" class="headerlink" title="四、TCP连接"></a>四、TCP连接</h1><p>进行TCP三次握手连接，这里附图复习一下三次握手四次挥手</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/URL-visit/4.jpg" width="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">三次握手</div>
</center>

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/URL-visit/5.jpg" width="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">四次挥手</div>
</center>

<h1 id="Option-服务的永久重定向响应"><a href="#Option-服务的永久重定向响应" class="headerlink" title="Option - 服务的永久重定向响应"></a>Option - 服务的永久重定向响应</h1><p>例如 Facebook 服务器会发回浏览器如下响应：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">HTTP/1.1</span> <span class="number">301</span> <span class="string">Moved</span> <span class="string">Permanently</span></span><br><span class="line"> <span class="attr">Cache-Control:</span> <span class="string">private,</span> <span class="literal">no</span><span class="string">-store,</span> <span class="literal">no</span><span class="string">-cache,</span> <span class="string">must-revalidate,</span> <span class="string">post-check=0,</span></span><br><span class="line"> <span class="string">pre-check=0</span></span><br><span class="line"> <span class="attr">Expires:</span> <span class="string">Sat,</span> <span class="number">01</span> <span class="string">Jan</span> <span class="number">2000 00:00:00 </span><span class="string">GMT</span></span><br><span class="line"> <span class="attr">Location:</span> <span class="string">http://www.facebook.com/</span></span><br><span class="line"> <span class="attr">P3P:</span> <span class="string">CP=&quot;DSP</span> <span class="string">LAW&quot;</span></span><br><span class="line"> <span class="attr">Pragma:</span> <span class="literal">no</span><span class="string">-cache</span></span><br><span class="line"> <span class="attr">Set-Cookie:</span> <span class="string">made_write_conn=deleted;</span> <span class="string">expires=Thu,</span> <span class="number">12</span><span class="string">-Feb-2009</span> <span class="number">05</span><span class="string">:09:50</span> <span class="string">GMT;</span></span><br><span class="line"> <span class="string">path=/;</span> <span class="string">domain=.facebook.com;</span> <span class="string">httponly</span></span><br><span class="line"> <span class="attr">Content-Type:</span> <span class="string">text/html;</span> <span class="string">charset=utf-8</span></span><br><span class="line"> <span class="attr">X-Cnection:</span> <span class="string">close</span></span><br><span class="line"> <span class="attr">Date:</span> <span class="string">Fri,</span> <span class="number">12</span> <span class="string">Feb</span> <span class="number">2010 05:09:51 </span><span class="string">GMT</span></span><br><span class="line"> <span class="attr">Content-Length:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>服务器给浏览器响应一个301永久重定向响应，这样浏览器就会访问<code>http://www.facebook.com/</code>而非<code>http://facebook.com/</code></p>
<p>为什么服务器一定要重定向而不是直接发会用户想看的网页内容呢？这个问题有好多有意思的答案：</p>
<ol>
<li><p>其中一个原因跟<strong>搜索引擎排名</strong>有关。你看，如果一个页面有两个地址，就像<code>http://www.igoro.com/</code>和<code>http://igoro.com/</code>，搜索引擎会认为它们是两个网站，结果造成每一个的搜索链接都减少从而降低排名。而搜索引擎知道301永久重定向是什么意思，这样就会把访问带www的和不带www的地址归到同一个网站排名下。</p>
</li>
<li><p>还有一个是用不同的地址会造成<strong>缓存友好性</strong>变差。当一个页面有好几个名字时，它可能会在缓存里出现好几次。</p>
</li>
</ol>
<h1 id="服务器收到请求并返回数据"><a href="#服务器收到请求并返回数据" class="headerlink" title="服务器收到请求并返回数据"></a>服务器收到请求并返回数据</h1><p>服务器在处理完请求之后生成并返回的响应：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">HTTP/1.1</span> <span class="number">200</span> <span class="string">OK</span></span><br><span class="line"> <span class="attr">Cache-Control:</span> <span class="string">private,</span> <span class="literal">no</span><span class="string">-store,</span> <span class="literal">no</span><span class="string">-cache,</span> <span class="string">must-revalidate,</span> <span class="string">post-check=0,</span></span><br><span class="line"> <span class="string">pre-check=0</span></span><br><span class="line"> <span class="attr">Expires:</span> <span class="string">Sat,</span> <span class="number">01</span> <span class="string">Jan</span> <span class="number">2000 00:00:00 </span><span class="string">GMT</span></span><br><span class="line"> <span class="attr">P3P:</span> <span class="string">CP=&quot;DSP</span> <span class="string">LAW&quot;</span></span><br><span class="line"> <span class="attr">Pragma:</span> <span class="literal">no</span><span class="string">-cache</span></span><br><span class="line"> <span class="attr">Content-Encoding:</span> <span class="string">gzip</span></span><br><span class="line"> <span class="attr">Content-Type:</span> <span class="string">text/html;</span> <span class="string">charset=utf-8</span></span><br><span class="line"> <span class="attr">X-Cnection:</span> <span class="string">close</span></span><br><span class="line"> <span class="attr">Transfer-Encoding:</span> <span class="string">chunked</span></span><br><span class="line"> <span class="attr">Date:</span> <span class="string">Fri,</span> <span class="number">12</span> <span class="string">Feb</span> <span class="number">2010 09:05:55 </span><span class="string">GMT</span></span><br><span class="line"></span><br><span class="line"> <span class="string">2b3Tn@[...]</span></span><br></pre></td></tr></table></figure>
<p>整个响应大小为35kB，其中大部分在整理后以blob类型传输。</p>
<p><strong>内容编码</strong>头告诉浏览器整个响应体用gzip算法进行压缩。解压blob块后，你可以看到如下期望的HTML：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span>    </span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">id</span>=<span class="string">&quot;facebook&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-language&quot;</span> <span class="attr">content</span>=<span class="string">&quot;en&quot;</span> /&gt;</span></span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>
<p>关于压缩，头信息说明了是否缓存这个页面，如果缓存的话如何去做，有什么cookies要去设置（前面这个响应里没有这点）和隐私信息等等。</p>
<p>请注意报头中把<strong>Content-type</strong>设置为<code>text/html</code>。报头让浏览器将该响应内容以HTML形式呈现，而不是以文件形式下载它。浏览器会根据报头信息决定如何解释该响应，不过同时也会考虑像URL扩展内容等其他因素。</p>
<h2 id="浏览器发送获取嵌入HTML的对象"><a href="#浏览器发送获取嵌入HTML的对象" class="headerlink" title="浏览器发送获取嵌入HTML的对象"></a>浏览器发送获取嵌入HTML的对象</h2><p>在浏览器显示HTML时，它会注意到需要获取其他地址内容的标签。这时，浏览器会发送一个获取请求来重新获得这些文件。</p>
<p>下面是几个我们访问<a href="https://blog.csdn.net/ywcpig/article/details/52525689">http://facebook.com</a>时需要重获取的几个URL：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pic</span></span><br><span class="line"><span class="string">http://static.ak.fbcdn.net/rsrc.php/z12E0/hash/8q2anwu7.gif</span></span><br><span class="line"><span class="string">http://static.ak.fbcdn.net/rsrc.php/zBS5C/hash/7hwy7at6.gif</span></span><br><span class="line"><span class="comment"># css</span></span><br><span class="line"><span class="string">http://static.ak.fbcdn.net/rsrc.php/z448Z/hash/2plh8s4n.css</span></span><br><span class="line"><span class="string">http://static.ak.fbcdn.net/rsrc.php/zANE1/hash/cvtutcee.css</span></span><br><span class="line"><span class="comment"># j</span></span><br><span class="line"><span class="string">http://static.ak.fbcdn.net/rsrc.php/zEMOA/hash/c8yzb6ub.js</span></span><br><span class="line"><span class="string">http://static.ak.fbcdn.net/rsrc.php/z6R9L/hash/cq2lgbs8.jss</span></span><br></pre></td></tr></table></figure>
<p>这些地址都要经历一个和HTML读取类似的过程。所以浏览器会在DNS中查找这些域名，发送请求，重定向等。</p>
<p>但不像动态页面那样，静态文件会允许浏览器对其进行缓存。有的文件可能会不需要与服务器通讯，而从缓存中直接读取。服务器的响应中包含了静态文件保存的期限信息，所以浏览器知道要把它们缓存多长时间。还有，每个响应都可能包含像版本号一样工作的ETag头（被请求变量的实体值），如果浏览器观察到文件的版本 <code>ETag</code> 信息已经存在，就马上停止这个文件的传输。</p>
<p>试着猜猜看<code>http://fbcdn.net</code>在地址中代表什么？聪明的答案是”Facebook内容分发网络”。Facebook利用<strong>内容分发网络</strong>（CDN）分发像图片，CSS表和JavaScript文件这些静态文件。所以，这些文件会在全球很多CDN的数据中心中留下备份。</p>
<p>静态内容往往代表站点的带宽大小，也能通过CDN轻松的复制。通常网站会使用第三方的CDN。例如，Facebook的静态文件由最大的CDN提供商Akamai来托管。</p>
<p>举例来讲，当你试着ping <code>http://static.ak.fbcdn.net</code>的时候，可能会从某个<code>http://akamai.net</code>服务器上获得响应。有意思的是，当你同样再ping一次的时候，响应的服务器可能就不一样，这说明幕后的负载平衡开始起作用了。</p>
<h1 id="Option-览器发送异步（AJAX）请求"><a href="#Option-览器发送异步（AJAX）请求" class="headerlink" title="Option - 览器发送异步（AJAX）请求"></a>Option - 览器发送异步（AJAX）请求</h1><p>在Web 2.0伟大精神的指引下，页面显示完成后客户端仍与服务器端保持着联系。</p>
<p>以 Facebook 聊天功能为例，它会持续与服务器保持联系来及时更新你那些亮亮灰灰的好友状态。为了更新这些头像亮着的好友状态，在浏览器中执行的 JavaScript 代码会给服务器发送异步请求。这个异步请求发送给特定的地址，它是一个按照程式构造的获取或发送请求。还是在Facebook这个例 子中，客户端发送给<code>http://www.facebook.com/ajax/chat/buddy_list.php</code>一个发布请求来获取你好友里哪个在线的状态信息。</p>
<p>提起这个模式，就必须要讲讲”AJAX”– “异步JavaScript 和 XML”，虽然服务器为什么用XML格式来进行响应也没有个一清二白的原因。再举个例子吧，对于异步请求，Facebook会返回一些JavaScript的代码片段。</p>
<p>除了其他，fiddler 这个工具能够让你看到浏览器发送的异步请求。事实上，你不仅可以被动的做为这些请求的看客，还能主动出击修改和重新发送它们。AJAX请求这么容易被蒙，可着实让那些计分的在线游戏开发者们郁闷的了。（当然，可别那样骗人家~）</p>
<p>Facebook聊天功能提供了关于AJAX一个有意思的问题案例：把数据从服务器端推送到客户端。因为HTTP是一个 请求-响应 协议，所以聊天服务器不能把新消息发给客户。取而代之的是客户端不得不隔几秒就轮询下服务器端看自己有没有新消息。</p>
<p>这些情况发生时长轮询是个减轻服务器负载挺有趣的技术。如果当被轮询时服务器没有新消息，它就不理这个客户端。而当尚未超时的情况下收到了该客户的新消息，服务器就会找到未完成的请求，把新消息做为响应返回给客户端。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中实现跨域的5种方式</title>
    <url>/2022/07/07/SpringBoot-CORS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、为什么会出现跨域问题"><a href="#一、为什么会出现跨域问题" class="headerlink" title="一、为什么会出现跨域问题"></a>一、为什么会出现跨域问题</h1><p>出于浏览器的同源策略限制。同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port）</p>
<a id="more"></a>

<h1 id="二、什么是跨域"><a href="#二、什么是跨域" class="headerlink" title="二、什么是跨域"></a>二、什么是跨域</h1><p>当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域</p>
<h1 id="三、非同源限制"><a href="#三、非同源限制" class="headerlink" title="三、非同源限制"></a>三、非同源限制</h1><p>【1】无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB</p>
<p>【2】无法接触非同源网页的 DOM</p>
<p>【3】无法向非同源地址发送 AJAX 请求</p>
<h1 id="四、java-后端实现-CORS-跨域请求的方式"><a href="#四、java-后端实现-CORS-跨域请求的方式" class="headerlink" title="四、java 后端实现 CORS 跨域请求的方式"></a>四、java 后端实现 CORS 跨域请求的方式</h1><p>对于 CORS的跨域请求，主要有以下几种方式可供选择：</p>
<ul>
<li><p>返回新的<code>CorsFilter</code></p>
</li>
<li><p>重写 <code>WebMvcConfigurer</code></p>
</li>
<li><p>使用注解 <code>@CrossOrigin</code></p>
</li>
<li><p>手动设置响应头 (<code>HttpServletResponse</code>)</p>
</li>
<li><p>自定 web filter 实现跨域</p>
</li>
</ul>
<p><strong>注意:</strong></p>
<ul>
<li><p><code>CorFilter</code> / <code>WebMvConfigurer</code> / <code>@CrossOrigin</code> 需要 SpringMVC 4.2以上版本才支持，对应 SpringBoot 1.3版本以上</p>
</li>
<li><p>上面前两种方式属于全局 CORS 配置，后两种属于局部 CORS配置。如果使用了局部跨域是会覆盖全局跨域的规则，所以可以通过 <code>@CrossOrigin</code> 注解来进行细粒度更高的跨域资源控制。</p>
</li>
</ul>
<p>其实无论哪种方案，<strong>最终目的都是修改响应头</strong>，向响应头中添加浏览器所要求的数据，进而实现跨域。</p>
<h2 id="1-返回新的-CorsFilter-全局跨域"><a href="#1-返回新的-CorsFilter-全局跨域" class="headerlink" title="1.返回新的 CorsFilter (全局跨域)"></a>1.返回新的 CorsFilter (全局跨域)</h2><p>在任意配置类，返回一个新的 <code>CorsFIlter</code> Bean ，并添加映射路径和具体的CORS配置路径。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 添加 CORS配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//放行哪些原始域</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//是否发送 Cookie</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//放行哪些请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//放行哪些原始请求头部信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//暴露哪些头部信息</span></span><br><span class="line">        config.addExposedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 添加映射路径</span></span><br><span class="line">        UrlBasedCorsConfigurationSource corsConfigurationSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        corsConfigurationSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,config);</span><br><span class="line">        <span class="comment">//3. 返回新的CorsFilter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(corsConfigurationSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-重写-WebMvcConfigurer-全局跨域"><a href="#2-重写-WebMvcConfigurer-全局跨域" class="headerlink" title="2. 重写 WebMvcConfigurer(全局跨域)"></a>2. 重写 WebMvcConfigurer(全局跨域)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">//是否发送Cookie</span></span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">//放行哪些原始域</span></span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedMethods(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>&#125;)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .exposedHeaders(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-使用注解-局部跨域"><a href="#3-使用注解-局部跨域" class="headerlink" title="3. 使用注解 (局部跨域)"></a>3. 使用注解 (局部跨域)</h2><p>在控制器(类上)上使用注解 <code>@CrossOrigin</code>，表示该类的所有方法允许跨域。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = &quot;*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在方法上使用注解 <code>@CrossOrigin</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = &quot;*&quot;)</span></span><br><span class="line"><span class="comment">//@CrossOrigin(value = &quot;http://localhost:8081&quot;) //指定具体ip允许跨域</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-手动设置响应头-局部跨域"><a href="#4-手动设置响应头-局部跨域" class="headerlink" title="4. 手动设置响应头(局部跨域)"></a>4. 手动设置响应头(局部跨域)</h2><p>使用 <code>HttpServletResponse</code> 对象添加响应头(<code>Access-Control-Allow-Origin</code>)来授权原始域，这里 Origin 的值也可以设置为 <code>“*”</code>,表示全部放行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    response.addHeader(<span class="string">&quot;Access-Allow-Control-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-使用自定义filter实现跨域"><a href="#5-使用自定义filter实现跨域" class="headerlink" title="5. 使用自定义filter实现跨域"></a>5. 使用自定义filter实现跨域</h2><p>首先编写一个过滤器，可以起名字为 <code>MyCorsFilter.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mesnac.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">    response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, OPTIONS, DELETE&quot;</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;x-requested-with,content-type&quot;</span>);</span><br><span class="line">    chain.doFilter(req, res);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在<code>web.xml</code>中配置这个过滤器，使其生效</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跨域访问 START--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.mesnac.aop.MyCorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 跨域访问 END  --&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2 扎记下篇</title>
    <url>/2022/07/03/Spring-boot-dict-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringBoot2笔记下篇"><a href="#SpringBoot2笔记下篇" class="headerlink" title="SpringBoot2笔记下篇"></a>SpringBoot2笔记下篇</h1><p>接SpringBoot2扎记上篇内容</p>
<a id="more"></a>

<h1 id="实验-抽取公共页面"><a href="#实验-抽取公共页面" class="headerlink" title="实验-抽取公共页面"></a>实验-抽取公共页面</h1><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#template-layout">官方文档 - Template Layout</a></p>
<ul>
<li>公共页面<code>/templates/common.html</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="comment">&lt;!--注意要添加xmlns:th才能添加thymeleaf的标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:fragment</span>=<span class="string">&quot;commonheader&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--common--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/style.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/style-responsive.css&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/style-responsive.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- left side start--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;leftmenu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;left-side sticky-left-side&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-side-inner&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--sidebar nav start--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-pills nav-stacked custom-nav&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/main.html&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-home&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>Dashboard<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;menu-list nav-active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-th-list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>Data Tables<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;sub-menu-list&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/basic_table&#125;&quot;</span>&gt;</span> Basic Table<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/dynamic_table&#125;&quot;</span>&gt;</span> Advanced Table<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/responsive_table&#125;&quot;</span>&gt;</span> Responsive Table<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/editable_table&#125;&quot;</span>&gt;</span> Edit Table<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--sidebar nav end--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- left side end--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- header section start--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;headermenu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;header-section&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--toggle button start--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;toggle-btn&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-bars&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--toggle button end--&gt;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- header section end--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;commonscript&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Placed js at the end of the document so the pages load faster --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/jquery-1.10.2.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/jquery-ui-1.9.2.custom.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/jquery-migrate-1.2.1.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/bootstrap.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/modernizr.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/jquery.nicescroll.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--common scripts for all pages--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/scripts.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>/templates/table/basic_table.html</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ThemeBucket&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/png&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Basic Table<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">&quot;common :: commonheader&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--将common.html的代码段 插进来--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;sticky-header&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;common :: #leftmenu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- main content start--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-content&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;common :: headermenu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- main content end--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Placed js at the end of the document so the pages load faster --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;common :: #commonscript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#difference-between-thinsert-and-threplace-and-thinclude">Difference between <code>th:insert</code> and <code>th:replace</code> (and <code>th:include</code>)</a></p>
<h1 id="遍历数据与页面bug修改"><a href="#遍历数据与页面bug修改" class="headerlink" title="遍历数据与页面bug修改"></a>遍历数据与页面bug修改</h1><p>控制层代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/dynamic_table&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">dynamic_table</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    <span class="comment">//表格内容的遍历</span></span><br><span class="line">    List&lt;User&gt; users = Arrays.asList(<span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123456&quot;</span>),</span><br><span class="line">                                     <span class="keyword">new</span> User(<span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;123444&quot;</span>),</span><br><span class="line">                                     <span class="keyword">new</span> User(<span class="string">&quot;haha&quot;</span>, <span class="string">&quot;aaaaa&quot;</span>),</span><br><span class="line">                                     <span class="keyword">new</span> User(<span class="string">&quot;hehe &quot;</span>, <span class="string">&quot;aaddd&quot;</span>));</span><br><span class="line">    model.addAttribute(<span class="string">&quot;users&quot;</span>,users);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;table/dynamic_table&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>页面代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;display table table-bordered&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hidden-table-info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;gradeX&quot;</span> <span class="attr">th:each</span>=<span class="string">&quot;user,stats:$&#123;users&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;stats.count&#125;&quot;</span>&gt;</span>Trident<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.userName&#125;&quot;</span>&gt;</span>Internet<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> &gt;</span>[[$&#123;user.password&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="视图解析器与视图"><a href="#视图解析器与视图" class="headerlink" title="视图解析器与视图"></a>视图解析器与视图</h1><p><strong>视图解析原理流程</strong>：</p>
<ol>
<li>目标方法处理的过程中（阅读<code>DispatcherServlet</code>源码），所有数据都会被放在 <code>ModelAndViewContainer</code> 里面，其中包括数据和视图地址。</li>
<li>方法的参数是一个自定义类型对象（从请求参数中确定的），把他重新放在 <code>ModelAndViewContainer</code> 。</li>
<li>任何目标方法执行完成以后都会返回<code>ModelAndView</code>（数据和视图地址）。</li>
<li><code>processDispatchResult()</code>处理派发结果（页面改如何响应）<ul>
<li><code>render(mv, request, response);</code> 进行页面渲染逻辑<ul>
<li>根据方法的<code>String</code>返回值得到 <code>View</code> 对象【定义了页面的渲染逻辑】</li>
</ul>
<ol>
<li>所有的视图解析器尝试是否能根据当前返回值得到<code>View</code>对象</li>
<li>得到了  <code>redirect:/main.html --&gt; Thymeleaf new RedirectView()</code>。</li>
<li><code>ContentNegotiationViewResolver</code> 里面包含了下面所有的视图解析器，内部还是利用下面所有视图解析器得到视图对象。</li>
<li><code>view.render(mv.getModelInternal(), request, response);</code>  视图对象调用自定义的render进行页面渲染工作。</li>
</ol>
<ul>
<li><code>RedirectView</code> 如何渲染【重定向到一个页面】</li>
<li>获取目标url地址    </li>
<li><code>response.sendRedirect(encodedURL);</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<p><strong>视图解析</strong>：<br>    - 返回值以 <code>forward:</code> 开始： <code>new InternalResourceView(forwardUrl);</code> –&gt;  转发<code>request.getRequestDispatcher(path).forward(request, response);</code><br>    - 返回值以 <code>redirect:</code> 开始： <code>new RedirectView()</code> –&gt; render就是重定向<br>    - 返回值是普通字符串：<code>new ThymeleafView()</code>—&gt;</p>
<hr>
<p>阅读源码：最好自己在IDE，打断点，且Debug模式运行实例，这样比较没那么沉闷。</p>
<h1 id="登录检查与静态资源放行"><a href="#登录检查与静态资源放行" class="headerlink" title="登录检查与静态资源放行"></a>登录检查与静态资源放行</h1><ol>
<li><p>编写一个拦截器实现<code>HandlerInterceptor</code>接口</p>
</li>
<li><p>拦截器注册到容器中（实现<code>WebMvcConfigurer</code>的<code>addInterceptors()</code>）</p>
</li>
<li><p>指定拦截规则（<span style="color:red;">注意</span>，如果是拦截所有，静态资源也会被拦截】</p>
</li>
</ol>
<p>编写一个实现<code>HandlerInterceptor</code>接口的拦截器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行之前</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String requestURI = request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;preHandle拦截的请求路径是&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录检查逻辑</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line"></span><br><span class="line">        Object loginUser = session.getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(loginUser != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拦截住。未登录。跳转到登录页</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line"><span class="comment">//        re.sendRedirect(&quot;/&quot;);</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行完成以后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;postHandle执行&#123;&#125;&quot;</span>,modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面渲染以后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterCompletion执行异常&#123;&#125;&quot;</span>,ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拦截器注册到容器中 &amp;&amp; 指定拦截规则：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())<span class="comment">//拦截器注册到容器中</span></span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)  <span class="comment">//所有请求都被拦截包括静态资源</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/fonts/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/js/**&quot;</span>,<span class="string">&quot;/aa/**&quot;</span>); <span class="comment">//放行的请求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="拦截器的执行时机和原理"><a href="#拦截器的执行时机和原理" class="headerlink" title="拦截器的执行时机和原理"></a>拦截器的执行时机和原理</h1><ol>
<li>根据当前请求，找到<code>HandlerExecutionChain</code>（可以处理请求的handler以及handler的所有 拦截器）</li>
<li>先来顺序执行 所有拦截器的 <code>preHandle()</code>方法。<ul>
<li>如果当前拦截器<code>preHandle()</code>返回为<code>true</code>。则执行下一个拦截器的<code>preHandle()</code></li>
<li>如果当前拦截器返回为<code>false</code>。直接倒序执行所有已经执行了的拦截器的  <code>afterCompletion();</code>。</li>
</ul>
</li>
<li>如果任何一个拦截器返回<code>false</code>，直接跳出不执行目标方法。</li>
<li>所有拦截器都返回<code>true</code>，才执行目标方法。</li>
<li>倒序执行所有拦截器的<code>postHandle()</code>方法。</li>
<li>前面的步骤有任何异常都会直接倒序触发 <code>afterCompletion()</code>。</li>
<li>页面成功渲染完成以后，也会倒序触发 <code>afterCompletion()</code>。</li>
</ol>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205011212637.png" width="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">拦截器的执行时机和原理</div>
</center>

<p><code>DispatcherServlet</code>中涉及到<code>HandlerInterceptor</code>的地方：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpServletRequest processedRequest = request;</span><br><span class="line">        HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">            Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                ...</span><br><span class="line"></span><br><span class="line">                <span class="comment">//该方法内调用HandlerInterceptor的preHandle()</span></span><br><span class="line">                <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">                mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">                ...</span><br><span class="line">                <span class="comment">//该方法内调用HandlerInterceptor的postHandle()</span></span><br><span class="line">                mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">            &#125;            </span><br><span class="line">            processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="comment">//该方法内调用HandlerInterceptor接口的afterCompletion方法</span></span><br><span class="line">            triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            <span class="comment">//该方法内调用HandlerInterceptor接口的afterCompletion方法</span></span><br><span class="line">            triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                    <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">triggerAfterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//该方法内调用HandlerInterceptor接口的afterCompletion方法</span></span><br><span class="line">            mappedHandler.triggerAfterCompletion(request, response, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//该方法内调用HandlerInterceptor接口的afterCompletion方法</span></span><br><span class="line">            <span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">            mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerExecutionChain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.interceptorList.size(); i++) &#123;</span><br><span class="line">            HandlerInterceptor interceptor = <span class="keyword">this</span>.interceptorList.get(i);</span><br><span class="line">            <span class="comment">//HandlerInterceptor的preHandle方法</span></span><br><span class="line">            <span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="keyword">this</span>.handler)) &#123;</span><br><span class="line"></span><br><span class="line">                triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.interceptorIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">applyPostHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> ModelAndView mv)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">this</span>.interceptorList.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            HandlerInterceptor interceptor = <span class="keyword">this</span>.interceptorList.get(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//HandlerInterceptor接口的postHandle方法</span></span><br><span class="line">            interceptor.postHandle(request, response, <span class="keyword">this</span>.handler, mv);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">triggerAfterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">this</span>.interceptorIndex; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            HandlerInterceptor interceptor = <span class="keyword">this</span>.interceptorList.get(i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//HandlerInterceptor接口的afterCompletion方法</span></span><br><span class="line">                interceptor.afterCompletion(request, response, <span class="keyword">this</span>.handler, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex2) &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, ex2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h1 id="单文件与多文件上传的使用"><a href="#单文件与多文件上传的使用" class="headerlink" title="单文件与多文件上传的使用"></a>单文件与多文件上传的使用</h1><ul>
<li>页面代码<code>/static/form/form_layouts.html</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/upload&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter email&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputPassword1&quot;</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputPassword1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span>头像<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;headerImg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span>生活照<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;photos&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> Check me out</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>控制层代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/form_layouts&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">form_layouts</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;form/form_layouts&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;email&quot;)</span> String email,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;上传的信息：email=&#123;&#125;，username=&#123;&#125;，headerImg=&#123;&#125;，photos=&#123;&#125;&quot;</span>,</span><br><span class="line">                 email,username,headerImg.getSize(),photos.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!headerImg.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//保存到文件服务器，OSS服务器</span></span><br><span class="line">            String originalFilename = headerImg.getOriginalFilename();</span><br><span class="line">            headerImg.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;H:\\cache\\&quot;</span>+originalFilename));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(photos.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (MultipartFile photo : photos) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!photo.isEmpty())&#123;</span><br><span class="line">                    String originalFilename = photo.getOriginalFilename();</span><br><span class="line">                    photo.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;H:\\cache\\&quot;</span>+originalFilename));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>文件上传相关的配置类：</p>
<ul>
<li><code>org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration</code></li>
<li><code>org.springframework.boot.autoconfigure.web.servlet.MultipartProperties</code></li>
</ul>
<p>文件大小相关配置项：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB</span></span><br><span class="line"><span class="meta">spring.servlet.multipart.max-request-size</span>=<span class="string">100MB</span></span><br></pre></td></tr></table></figure>
<h2 id="文件上传参数解析器"><a href="#文件上传参数解析器" class="headerlink" title="文件上传参数解析器"></a>文件上传参数解析器</h2><p>文件上传相关的自动配置类<code>MultipartAutoConfiguration</code>有创建文件上传参数解析器<code>StandardServletMultipartResolver</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, StandardServletMultipartResolver.class, MultipartConfigElement.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.servlet.multipart&quot;, name = &quot;enabled&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(MultipartProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipartAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MultipartProperties multipartProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultipartAutoConfiguration</span><span class="params">(MultipartProperties multipartProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.multipartProperties = multipartProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(&#123; MultipartConfigElement.class, CommonsMultipartResolver.class &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MultipartConfigElement <span class="title">multipartConfigElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.multipartProperties.createMultipartConfig();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(MultipartResolver.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StandardServletMultipartResolver <span class="title">multipartResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//配置好文件上传解析器</span></span><br><span class="line">        StandardServletMultipartResolver multipartResolver = <span class="keyword">new</span> StandardServletMultipartResolver();</span><br><span class="line">        multipartResolver.setResolveLazily(<span class="keyword">this</span>.multipartProperties.isResolveLazily());</span><br><span class="line">        <span class="keyword">return</span> multipartResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件上传解析器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardServletMultipartResolver</span> <span class="keyword">implements</span> <span class="title">MultipartResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> resolveLazily = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResolveLazily</span><span class="params">(<span class="keyword">boolean</span> resolveLazily)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resolveLazily = resolveLazily;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMultipart</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.startsWithIgnoreCase(request.getContentType(), <span class="string">&quot;multipart/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MultipartHttpServletRequest <span class="title">resolveMultipart</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> MultipartException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StandardMultipartHttpServletRequest(request, <span class="keyword">this</span>.resolveLazily);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanupMultipart</span><span class="params">(MultipartHttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(request <span class="keyword">instanceof</span> AbstractMultipartHttpServletRequest) ||</span><br><span class="line">                ((AbstractMultipartHttpServletRequest) request).isResolved()) &#123;</span><br><span class="line">            <span class="comment">// To be on the safe side: explicitly delete the parts,</span></span><br><span class="line">            <span class="comment">// but only actual file parts (for Resin compatibility)</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (Part part : request.getParts()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (request.getFile(part.getName()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        part.delete();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                LogFactory.getLog(getClass()).warn(<span class="string">&quot;Failed to perform cleanup of multipart items&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> MultipartResolver multipartResolver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initMultipartResolver</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这个就是配置类配置的StandardServletMultipartResolver文件上传解析器</span></span><br><span class="line">        <span class="keyword">this</span>.multipartResolver = context.getBean(MULTIPART_RESOLVER_BEAN_NAME, MultipartResolver.class);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpServletRequest processedRequest = request;</span><br><span class="line">        HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;<span class="comment">//最后finally的回收flag</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">            Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//做预处理,如果有上传文件 就new StandardMultipartHttpServletRequest包装类</span></span><br><span class="line">                processedRequest = checkMultipart(request);</span><br><span class="line">                multipartRequestParsed = (processedRequest != request);</span><br><span class="line">                <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">                mappedHandler = getHandler(processedRequest);</span><br><span class="line"></span><br><span class="line">                ...</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">                HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">                ...</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">                mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            ....</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> HttpServletRequest <span class="title">checkMultipart</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> MultipartException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.multipartResolver != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.multipartResolver.isMultipart(request)) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.multipartResolver.resolveMultipart(request);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cleanupMultipart</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.multipartResolver != <span class="keyword">null</span>) &#123;</span><br><span class="line">            MultipartHttpServletRequest multipartRequest =</span><br><span class="line">                    WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class);</span><br><span class="line">            <span class="keyword">if</span> (multipartRequest != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.multipartResolver.cleanupMultipart(multipartRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</code>跳到以下的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMethodAdapter</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleInternal</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView mav;</span><br><span class="line">        ...</span><br><span class="line">        mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">            ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line"></span><br><span class="line">            ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;<span class="comment">//关注点</span></span><br><span class="line">                invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">            invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            webRequest.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>this.argumentResolvers</code>其中主角类<code>RequestPartMethodArgumentResolver</code>用来生成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInvocableHandlerMethod</span> <span class="keyword">extends</span> <span class="title">InvocableHandlerMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">            Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invokeForRequest</span><span class="params">(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">            Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> doInvoke(args);<span class="comment">//反射调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">doInvoke</span><span class="params">(Object... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Method method = getBridgedMethod();</span><br><span class="line">        ReflectionUtils.makeAccessible(method);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(getBean(), args);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理得出multipart参数，准备稍后的反射调用（@PostMapping标记的上传方法）</span></span><br><span class="line">    <span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="line">            Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        MethodParameter[] parameters = getMethodParameters();</span><br><span class="line">        ...</span><br><span class="line">        Object[] args = <span class="keyword">new</span> Object[parameters.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">            MethodParameter parameter = parameters[i];</span><br><span class="line">            parameter.initParameterNameDiscovery(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line">            args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line">            <span class="keyword">if</span> (args[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关注点1</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(formatArgumentError(parameter, <span class="string">&quot;No suitable resolver&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//关注点2</span></span><br><span class="line">                args[i] = <span class="keyword">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="keyword">this</span>.dataBinderFactory);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestPartMethodArgumentResolver</span> <span class="keyword">extends</span> <span class="title">AbstractMessageConverterMethodArgumentResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对应上面代码关注点1</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//标注@RequestPart的参数</span></span><br><span class="line">        <span class="keyword">if</span> (parameter.hasParameterAnnotation(RequestPart.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (parameter.hasParameterAnnotation(RequestParam.class)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> MultipartResolutionDelegate.isMultipartArgument(parameter.nestedIfOptional());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对应上面代码关注点2</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">            NativeWebRequest request, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest servletRequest = request.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">        Assert.state(servletRequest != <span class="keyword">null</span>, <span class="string">&quot;No HttpServletRequest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        RequestPart requestPart = parameter.getParameterAnnotation(RequestPart.class);</span><br><span class="line">        <span class="keyword">boolean</span> isRequired = ((requestPart == <span class="keyword">null</span> || requestPart.required()) &amp;&amp; !parameter.isOptional());</span><br><span class="line"></span><br><span class="line">        String name = getPartName(parameter, requestPart);</span><br><span class="line">        parameter = parameter.nestedIfOptional();</span><br><span class="line">        Object arg = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装成MultipartFile类型的对象作参数</span></span><br><span class="line">        Object mpArg = MultipartResolutionDelegate.resolveMultipartArgument(name, parameter, servletRequest);</span><br><span class="line">        <span class="keyword">if</span> (mpArg != MultipartResolutionDelegate.UNRESOLVABLE) &#123;</span><br><span class="line">            arg = mpArg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> adaptArgumentIfNecessary(arg, parameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipartResolutionDelegate</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">resolveMultipartArgument</span><span class="params">(String name, MethodParameter parameter, HttpServletRequest request)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        MultipartHttpServletRequest multipartRequest =</span><br><span class="line">                WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class);</span><br><span class="line">        <span class="keyword">boolean</span> isMultipart = (multipartRequest != <span class="keyword">null</span> || isMultipartContent(request));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (MultipartFile.class == parameter.getNestedParameterType()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isMultipart) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (multipartRequest == <span class="keyword">null</span>) &#123;</span><br><span class="line">                multipartRequest = <span class="keyword">new</span> StandardMultipartHttpServletRequest(request);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> multipartRequest.getFile(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isMultipartFileCollection(parameter)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isMultipart) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (multipartRequest == <span class="keyword">null</span>) &#123;</span><br><span class="line">                multipartRequest = <span class="keyword">new</span> StandardMultipartHttpServletRequest(request);</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;MultipartFile&gt; files = multipartRequest.getFiles(name);</span><br><span class="line">            <span class="keyword">return</span> (!files.isEmpty() ? files : <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isMultipartFileArray(parameter)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isMultipart) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (multipartRequest == <span class="keyword">null</span>) &#123;</span><br><span class="line">                multipartRequest = <span class="keyword">new</span> StandardMultipartHttpServletRequest(request);</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;MultipartFile&gt; files = multipartRequest.getFiles(name);</span><br><span class="line">            <span class="keyword">return</span> (!files.isEmpty() ? files.toArray(<span class="keyword">new</span> MultipartFile[<span class="number">0</span>]) : <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Part.class == parameter.getNestedParameterType()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isMultipart) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> request.getPart(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isPartCollection(parameter)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isMultipart) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Part&gt; parts = resolvePartList(request, name);</span><br><span class="line">            <span class="keyword">return</span> (!parts.isEmpty() ? parts : <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isPartArray(parameter)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isMultipart) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Part&gt; parts = resolvePartList(request, name);</span><br><span class="line">            <span class="keyword">return</span> (!parts.isEmpty() ? parts.toArray(<span class="keyword">new</span> Part[<span class="number">0</span>]) : <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> UNRESOLVABLE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="SpringBoot默认错误处理机制"><a href="#SpringBoot默认错误处理机制" class="headerlink" title="SpringBoot默认错误处理机制"></a>SpringBoot默认错误处理机制</h1><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-error-handling">Spring Boot官方文档 - Error Handling</a></p>
<p><strong>默认规则</strong>：</p>
<ul>
<li><p>默认情况下，Spring Boot提供<code>/error</code>处理所有错误的映射</p>
</li>
<li><p>机器客户端，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。对于浏览器客户端，响应一个“ whitelabel”错误视图，以HTML格式呈现相同的数据</p>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2020-11-22T05:53:28.416+00:00&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="number">404</span>,</span><br><span class="line">  <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;Not Found&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;No message available&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/asadada&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>要对其进行自定义，添加<code>View</code>解析为<code>error</code></p>
</li>
<li><p>要完全替换默认行为，可以实现 <code>ErrorController </code>并注册该类型的Bean定义，或添加<code>ErrorAttributes类型的组件</code>以使用现有机制但替换其内容。</p>
</li>
<li><p><code>/templates/error/</code>下的4xx，5xx页面会被自动解析</p>
</li>
</ul>
<h2 id="底层组件功能分析"><a href="#底层组件功能分析" class="headerlink" title="底层组件功能分析"></a>底层组件功能分析</h2><ul>
<li><code>ErrorMvcAutoConfiguration</code>  自动配置异常处理规则</li>
<li><strong>容器中的组件</strong>：类型：<code>DefaultErrorAttributes</code> -&gt; id：<code>errorAttributes</code></li>
<li><code>public class DefaultErrorAttributes implements ErrorAttributes, HandlerExceptionResolver</code><ul>
<li><code>DefaultErrorAttributes</code>：定义错误页面中可以包含数据（异常明细，堆栈信息等）。</li>
</ul>
</li>
<li><strong>容器中的组件</strong>：类型：<code>BasicErrorController</code> –&gt; id：<code>basicErrorController</code>（json+白页 适配响应）</li>
<li><strong>处理默认 <code>/error</code> 路径的请求</strong>，页面响应 <code>new ModelAndView(&quot;error&quot;, model);</code><ul>
<li>容器中有组件 <code>View</code>-&gt;id是error；（响应默认错误页）</li>
<li>容器中放组件 <code>BeanNameViewResolver</code>（视图解析器）；按照返回的视图名作为组件的id去容器中找<code>View</code>对象。</li>
</ul>
</li>
<li><strong>容器中的组件</strong>：类型：<code>DefaultErrorViewResolver</code> -&gt; id：<code>conventionErrorViewResolver</code></li>
<li><strong>如果发生异常错误，会以HTTP的状态码 作为视图页地址（viewName），找到真正的页面</strong>（主要作用）。<ul>
<li>error/404、5xx.html</li>
<li>如果想要返回页面，就会找error视图（<code>StaticView</code>默认是一个白页）。</li>
</ul>
</li>
</ul>
<h2 id="异常处理流程"><a href="#异常处理流程" class="headerlink" title="异常处理流程"></a>异常处理流程</h2><p>譬如写一个会抛出异常的控制层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;<span class="comment">//将会抛出ArithmeticException</span></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;Hello, Spring Boot 2!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Spring Boot 2!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当浏览器发出<code>/hello</code>请求，<code>DispatcherServlet</code>的<code>doDispatch()</code>的<code>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</code>将会抛出<code>ArithmeticException</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">                <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">                <span class="comment">//将会抛出ArithmeticException</span></span><br><span class="line">                mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">                applyDefaultViewName(processedRequest, mv);</span><br><span class="line">                mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="comment">//将会捕捉ArithmeticException</span></span><br><span class="line">                dispatchException = ex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//捕捉后，继续运行</span></span><br><span class="line">            processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                    <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</span><br><span class="line">                <span class="comment">//ArithmeticException将在这处理</span></span><br><span class="line">                mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">                errorView = (mv != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">processHandlerException</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@Nullable</span> Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Success and error responses may use different content types</span></span><br><span class="line">        request.removeAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check registered HandlerExceptionResolvers...</span></span><br><span class="line">        ModelAndView exMv = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.handlerExceptionResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//遍历所有的 handlerExceptionResolvers，看谁能处理当前异常HandlerExceptionResolver处理器异常解析器</span></span><br><span class="line">            <span class="keyword">for</span> (HandlerExceptionResolver resolver : <span class="keyword">this</span>.handlerExceptionResolvers) &#123;</span><br><span class="line">                exMv = resolver.resolveException(request, response, handler, ex);</span><br><span class="line">                <span class="keyword">if</span> (exMv != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若只有系统的自带的异常解析器（没有自定义的），异常还是会抛出</span></span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>系统自带的<strong>异常解析器</strong>：</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205011338251.png" width="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">自带的异常解析器</div>
</center>

<ul>
<li><code>DefaultErrorAttributes</code>先来处理异常，它主要功能把异常信息保存到request域，并且返回null。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorAttributes</span> <span class="keyword">implements</span> <span class="title">ErrorAttributes</span>, <span class="title">HandlerExceptionResolver</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.storeErrorAttributes(request, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">storeErrorAttributes</span><span class="params">(HttpServletRequest request, Exception ex)</span> </span>&#123;</span><br><span class="line">        request.setAttribute(ERROR_ATTRIBUTE, ex);<span class="comment">//把异常信息保存到request域</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<ul>
<li><p>默认没有任何解析器（上图的<code>HandlerExceptionResolverComposite</code>）能处理异常，所以最后异常会被抛出。</p>
</li>
<li><p>最终底层就会转发<code>/error</code> 请求。会被底层的<code>BasicErrorController</code>处理。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">       HttpStatus status = getStatus(request);</span><br><span class="line">       Map&lt;String, Object&gt; model = Collections</span><br><span class="line">             .unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));</span><br><span class="line">       response.setStatus(status.value());</span><br><span class="line">       ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">       <span class="comment">//如果/template/error内没有4**.html或5**.html，</span></span><br><span class="line">       <span class="comment">//modelAndView为空，最终还是返回viewName为error的modelAndView</span></span><br><span class="line">       <span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">&quot;error&quot;</span>, model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">         <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//渲染页面</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">        <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">            render(mv, request, response);</span><br><span class="line">            <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">                WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        View view;</span><br><span class="line">        String viewName = mv.getViewName();</span><br><span class="line">        <span class="keyword">if</span> (viewName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// We need to resolve the view name.</span></span><br><span class="line">            <span class="comment">//找出合适error的View，如果/template/error内没有4**.html或5**.html，</span></span><br><span class="line">            <span class="comment">//将会返回默认异常页面ErrorMvcAutoConfiguration.StaticView</span></span><br><span class="line">            <span class="comment">//这里按需深究代码吧！</span></span><br><span class="line">            view = resolveViewName(viewName, mv.getModelInternal(), locale, request);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mv.getStatus() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                response.setStatus(mv.getStatus().value());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//看下面代码块的StaticView的render块</span></span><br><span class="line">            view.render(mv.getModelInternal(), request, response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class &#125;)</span></span><br><span class="line"><span class="comment">// Load before the main WebMvcAutoConfiguration so that the error View is available</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore(WebMvcAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123; ServerProperties.class, ResourceProperties.class, WebMvcProperties.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(prefix = &quot;server.error.whitelabel&quot;, name = &quot;enabled&quot;, matchIfMissing = true)</span></span><br><span class="line">    <span class="meta">@Conditional(ErrorTemplateMissingCondition.class)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WhitelabelErrorViewConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将创建一个名为error的系统默认异常页面View的Bean</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> StaticView defaultErrorView = <span class="keyword">new</span> StaticView();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean(name = &quot;error&quot;)</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean(name = &quot;error&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">defaultErrorView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.defaultErrorView;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the user adds @EnableWebMvc then the bean name view resolver from</span></span><br><span class="line">        <span class="comment">// WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment.</span></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BeanNameViewResolver <span class="title">beanNameViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            BeanNameViewResolver resolver = <span class="keyword">new</span> BeanNameViewResolver();</span><br><span class="line">            resolver.setOrder(Ordered.LOWEST_PRECEDENCE - <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">return</span> resolver;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticView</span> <span class="keyword">implements</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType TEXT_HTML_UTF8 = <span class="keyword">new</span> MediaType(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;html&quot;</span>, StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(StaticView.class);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (response.isCommitted()) &#123;</span><br><span class="line">                String message = getMessage(model);</span><br><span class="line">                logger.error(message);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            response.setContentType(TEXT_HTML_UTF8.toString());</span><br><span class="line">            StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            Object timestamp = model.get(<span class="string">&quot;timestamp&quot;</span>);</span><br><span class="line">            Object message = model.get(<span class="string">&quot;message&quot;</span>);</span><br><span class="line">            Object trace = model.get(<span class="string">&quot;trace&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (response.getContentType() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                response.setContentType(getContentType());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//系统默认异常页面html代码</span></span><br><span class="line">            builder.append(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;&quot;</span>).append(</span><br><span class="line">                    <span class="string">&quot;&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;&quot;</span>)</span><br><span class="line">                    .append(<span class="string">&quot;&lt;div id=&#x27;created&#x27;&gt;&quot;</span>).append(timestamp).append(<span class="string">&quot;&lt;/div&gt;&quot;</span>)</span><br><span class="line">                    .append(<span class="string">&quot;&lt;div&gt;There was an unexpected error (type=&quot;</span>).append(htmlEscape(model.get(<span class="string">&quot;error&quot;</span>)))</span><br><span class="line">                    .append(<span class="string">&quot;, status=&quot;</span>).append(htmlEscape(model.get(<span class="string">&quot;status&quot;</span>))).append(<span class="string">&quot;).&lt;/div&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (message != <span class="keyword">null</span>) &#123;</span><br><span class="line">                builder.append(<span class="string">&quot;&lt;div&gt;&quot;</span>).append(htmlEscape(message)).append(<span class="string">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (trace != <span class="keyword">null</span>) &#123;</span><br><span class="line">                builder.append(<span class="string">&quot;&lt;div style=&#x27;white-space:pre-wrap;&#x27;&gt;&quot;</span>).append(htmlEscape(trace)).append(<span class="string">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            builder.append(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">            response.getWriter().append(builder.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">htmlEscape</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (input != <span class="keyword">null</span>) ? HtmlUtils.htmlEscape(input.toString()) : <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">getMessage</span><span class="params">(Map&lt;String, ?&gt; model)</span> </span>&#123;</span><br><span class="line">            Object path = model.get(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">            String message = <span class="string">&quot;Cannot render error page for request [&quot;</span> + path + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (model.get(<span class="string">&quot;message&quot;</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                message += <span class="string">&quot; and exception [&quot;</span> + model.get(<span class="string">&quot;message&quot;</span>) + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            message += <span class="string">&quot; as the response has already been committed.&quot;</span>;</span><br><span class="line">            message += <span class="string">&quot; As a result, the response may have the wrong status code.&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;text/html&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="几种异常处理原理"><a href="#几种异常处理原理" class="headerlink" title="几种异常处理原理"></a>几种异常处理原理</h2><ul>
<li><p>自定义错误页</p>
<ul>
<li>error/404.html   error/5xx.html；有精确的错误状态码页面就匹配精确，没有就找 4xx.html；如果都没有就触发白页</li>
</ul>
</li>
<li><p><code>@ControllerAdvice</code>+<code>@ExceptionHandler</code>处理全局异常；底层是 <code>ExceptionHandlerExceptionResolver</code> 支持的</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;ArithmeticException.class,NullPointerException.class&#125;)</span>  <span class="comment">//处理异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleArithException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        log.error(<span class="string">&quot;异常是：&#123;&#125;&quot;</span>,e);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>; <span class="comment">//视图地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>@ResponseStatus</code>+自定义异常 ；底层是 <code>ResponseStatusExceptionResolver</code> ，把responseStatus注解的信息底层调用 <code>response.sendError(statusCode, resolvedReason)</code>，tomcat发送的<code>/error</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus(value= HttpStatus.FORBIDDEN,reason = &quot;用户数量太多&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTooManyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">UserTooManyException</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">UserTooManyException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dynamic_table&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dynamic_table</span><span class="params">(<span class="meta">@RequestParam(value=&quot;pn&quot;,defaultValue = &quot;1&quot;)</span> Integer pn,Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//表格内容的遍历</span></span><br><span class="line">         List&lt;User&gt; users = Arrays.asList(<span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123456&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;123444&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;haha&quot;</span>, <span class="string">&quot;aaaaa&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="string">&quot;hehe &quot;</span>, <span class="string">&quot;aaddd&quot;</span>));</span><br><span class="line">        model.addAttribute(<span class="string">&quot;users&quot;</span>,users);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(users.size()&gt;<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserTooManyException();<span class="comment">//抛出自定义异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;table/dynamic_table&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Spring自家异常如 <code> org.springframework.web.bind.MissingServletRequestParameterException</code>，<code>DefaultHandlerExceptionResolver</code> 处理Spring自家异常。</p>
</li>
<li><ul>
<li><code>response.sendError(HttpServletResponse.SC_BAD_REQUEST/*400*/, ex.getMessage());</code> </li>
</ul>
</li>
<li><p>自定义实现 <code>HandlerExceptionResolver</code> 处理异常；可以作为默认的全局异常处理规则</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Order(value= Ordered.HIGHEST_PRECEDENCE)</span>  <span class="comment">//优先级，数字越小优先级越高</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerHandlerExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.sendError(<span class="number">511</span>,<span class="string">&quot;我喜欢的错误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>ErrorViewResolver</code>  实现自定义处理异常<ul>
<li><code>response.sendError()</code>，error请求就会转给controller。</li>
<li>你的异常没有任何人能处理，tomcat底层调用<code>response.sendError()</code>，error请求就会转给controller。</li>
<li><code>basicErrorController</code> 要去的页面地址是 <code>ErrorViewResolver</code>  。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        HttpStatus status = getStatus(request);</span><br><span class="line">        Map&lt;String, Object&gt; model = Collections</span><br><span class="line">                .unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));</span><br><span class="line">        response.setStatus(status.value());</span><br><span class="line">        ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">        <span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">&quot;error&quot;</span>, model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">            Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里用到ErrorViewResolver接口</span></span><br><span class="line">        <span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">            ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">            <span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> modelAndView;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ErrorViewResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="原生组件注入-原生注解与Spring方式注入"><a href="#原生组件注入-原生注解与Spring方式注入" class="headerlink" title="原生组件注入-原生注解与Spring方式注入"></a>原生组件注入-原生注解与Spring方式注入</h1><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#howto-add-a-servlet-filter-or-listener">官方文档 - Servlets, Filters, and listeners</a></p>
<h2 id="使用原生的注解"><a href="#使用原生的注解" class="headerlink" title="使用原生的注解"></a>使用原生的注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;66666&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns=&#123;&quot;/css/*&quot;,&quot;/images/*&quot;&#125;)</span> <span class="comment">//my</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyFilter初始化完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyFilter工作&quot;</span>);</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyFilter销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MySwervletContextListener监听到项目初始化完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MySwervletContextListener监听到项目销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后还要在主启动类添加注解<code>@ServletComponentScan</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ServletComponentScan(basePackages = &quot;com.lun&quot;)</span><span class="comment">//</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = RedisAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boot05WebAdminApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Boot05WebAdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Spring方式注入"><a href="#Spring方式注入" class="headerlink" title="Spring方式注入"></a>Spring方式注入</h2><p><code>ServletRegistrationBean</code>, <code>FilterRegistrationBean</code>, and <code>ServletListenerRegistrationBean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRegistConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyServlet myServlet = <span class="keyword">new</span> MyServlet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean(myServlet,<span class="string">&quot;/my&quot;</span>,<span class="string">&quot;/my02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        MyFilter myFilter = <span class="keyword">new</span> MyFilter();</span><br><span class="line"><span class="comment">//        return new FilterRegistrationBean(myFilter,myServlet());</span></span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean(myFilter);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/my&quot;</span>,<span class="string">&quot;/css/*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MySwervletContextListener mySwervletContextListener = <span class="keyword">new</span> MySwervletContextListener();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletListenerRegistrationBean(mySwervletContextListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="DispatcherServlet注入原理"><a href="#DispatcherServlet注入原理" class="headerlink" title="DispatcherServlet注入原理"></a>DispatcherServlet注入原理</h2><p><code>org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration</code>配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(DispatcherServlet.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServletAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * The bean name for a DispatcherServlet that will be mapped to the root URL &quot;/&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_DISPATCHER_SERVLET_BEAN_NAME = <span class="string">&quot;dispatcherServlet&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * The bean name for a ServletRegistrationBean for the DispatcherServlet &quot;/&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME = <span class="string">&quot;dispatcherServletRegistration&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">    <span class="meta">@Conditional(DefaultDispatcherServletCondition.class)</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(ServletRegistration.class)</span></span><br><span class="line">    <span class="meta">@EnableConfigurationProperties(WebMvcProperties.class)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServletConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建DispatcherServlet类的Bean</span></span><br><span class="line">        <span class="meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> DispatcherServlet <span class="title">dispatcherServlet</span><span class="params">(WebMvcProperties webMvcProperties)</span> </span>&#123;</span><br><span class="line">            DispatcherServlet dispatcherServlet = <span class="keyword">new</span> DispatcherServlet();</span><br><span class="line">            dispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());</span><br><span class="line">            dispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());</span><br><span class="line">            dispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());</span><br><span class="line">            dispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());</span><br><span class="line">            dispatcherServlet.setEnableLoggingRequestDetails(webMvcProperties.isLogRequestDetails());</span><br><span class="line">            <span class="keyword">return</span> dispatcherServlet;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnBean(MultipartResolver.class)</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line">            <span class="keyword">return</span> resolver;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">    <span class="meta">@Conditional(DispatcherServletRegistrationCondition.class)</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(ServletRegistration.class)</span></span><br><span class="line">    <span class="meta">@EnableConfigurationProperties(WebMvcProperties.class)</span></span><br><span class="line">    <span class="meta">@Import(DispatcherServletConfiguration.class)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServletRegistrationConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册DispatcherServlet类</span></span><br><span class="line">        <span class="meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span></span><br><span class="line">        <span class="meta">@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> DispatcherServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">(DispatcherServlet dispatcherServlet,</span></span></span><br><span class="line"><span class="function"><span class="params">                WebMvcProperties webMvcProperties, ObjectProvider&lt;MultipartConfigElement&gt; multipartConfig)</span> </span>&#123;</span><br><span class="line">            DispatcherServletRegistrationBean registration = <span class="keyword">new</span> DispatcherServletRegistrationBean(dispatcherServlet,</span><br><span class="line">                    webMvcProperties.getServlet().getPath());</span><br><span class="line">            registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class="line">            registration.setLoadOnStartup(webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line">            multipartConfig.ifAvailable(registration::setMultipartConfig);</span><br><span class="line">            <span class="keyword">return</span> registration;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DispatcherServlet</code>默认映射的是 <code>/</code> 路径，可以通过在配置文件修改<code>spring.mvc.servlet.path=/mvc</code>。</p>
<h1 id="嵌入式Servlet容器-切换web服务器与定制化"><a href="#嵌入式Servlet容器-切换web服务器与定制化" class="headerlink" title="嵌入式Servlet容器-切换web服务器与定制化"></a>嵌入式Servlet容器-切换web服务器与定制化</h1><ul>
<li><p>默认支持的WebServer</p>
<ul>
<li><code>Tomcat</code>, <code>Jetty</code>, or <code>Undertow</code>。</li>
<li><code>ServletWebServerApplicationContext </code>容器启动寻找<code>ServletWebServerFactory</code> 并引导创建服务器。</li>
</ul>
</li>
<li><p>原理</p>
<ul>
<li>SpringBoot应用启动发现当前是Web应用，web场景包-导入tomcat。</li>
<li>web应用会创建一个web版的IOC容器 <code>ServletWebServerApplicationContext</code> 。</li>
<li><code>ServletWebServerApplicationContext</code>  启动的时候寻找 <code>ServletWebServerFactory</code> （Servlet 的web服务器工厂——&gt;Servlet 的web服务器）。</li>
<li>SpringBoot底层默认有很多的WebServer工厂（<code>ServletWebServerFactoryConfiguration</code>内创建Bean），如：<ul>
<li><code>TomcatServletWebServerFactory</code></li>
<li><code>JettyServletWebServerFactory</code></li>
<li><code>UndertowServletWebServerFactory</code></li>
</ul>
</li>
<li>底层直接会有一个自动配置类<code>ServletWebServerFactoryAutoConfiguration</code>。</li>
<li><code>ServletWebServerFactoryAutoConfiguration</code>导入了<code>ServletWebServerFactoryConfiguration</code>（配置类）。</li>
<li><code>ServletWebServerFactoryConfiguration  </code>根据动态判断系统中到底导入了那个Web服务器的包。（默认是web-starter导入tomcat包），容器中就有 <code>TomcatServletWebServerFactory</code></li>
<li><code>TomcatServletWebServerFactory </code>创建出Tomcat服务器并启动；<code>TomcatWebServer</code> 的构造器拥有初始化方法initialize——<code>this.tomcat.start();</code></li>
<li>内嵌服务器，与以前手动把启动服务器相比，改成现在使用代码启动（tomcat核心jar包存在）。</li>
</ul>
</li>
</ul>
<p>Spring Boot默认使用Tomcat服务器，若需更改其他服务器，则修改工程pom.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#howto-use-another-web-server">官方文档 - Use Another Web Server</a></p>
<h2 id="定制Servlet容器"><a href="#定制Servlet容器" class="headerlink" title="定制Servlet容器"></a>定制Servlet容器</h2><ul>
<li><p>实现<code>WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt;</code> </p>
</li>
<li><ul>
<li>把配置文件的值和<code>ServletWebServerFactory</code>进行绑定</li>
</ul>
</li>
<li><p>修改配置文件 <code>server.xxx</code></p>
</li>
<li><p>直接自定义 <code>ConfigurableServletWebServerFactory</code></p>
</li>
</ul>
<p><code>xxxxxCustomizer</code>：定制化器，可以改变xxxx的默认规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizationBean</span> <span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">ConfigurableServletWebServerFactory</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory server)</span> </span>&#123;</span><br><span class="line">        server.setPort(<span class="number">9000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="SpringBoot定制化组件的几种方式（小结）"><a href="#SpringBoot定制化组件的几种方式（小结）" class="headerlink" title="SpringBoot定制化组件的几种方式（小结）"></a>SpringBoot定制化组件的几种方式（小结）</h1><h2 id="定制化的常见方式"><a href="#定制化的常见方式" class="headerlink" title="定制化的常见方式"></a>定制化的常见方式</h2><ul>
<li><p>修改配置文件</p>
</li>
<li><p><code>xxxxxCustomizer</code></p>
</li>
<li><p>编写自定义的配置类  <code>xxxConfiguration</code> + <code>@Bean</code>替换、增加容器中默认组件，视图解析器</p>
</li>
<li><p>Web应用 编写一个配置类实现 <code>WebMvcConfigurer</code> 即可定制化web功能 + <code>@Bean</code>给容器中再扩展一些组件</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>@EnableWebMvc</code> + <code>WebMvcConfigurer</code> — <code>@Bean</code>  可以全面接管SpringMVC，所有规则全部自己重新配置； 实现定制和扩展功能（<strong>高级功能，初学者退避三舍</strong>）。<ul>
<li>原理：<ol>
<li><code>WebMvcAutoConfiguration</code>默认的SpringMVC的自动配置功能类，如静态资源、欢迎页等。</li>
<li>一旦使用 <code>@EnableWebMvc</code> ，会<code>@Import(DelegatingWebMvcConfiguration.class)</code>。</li>
<li><code>DelegatingWebMvcConfiguration</code>的作用，只保证SpringMVC最基本的使用<ul>
<li>把所有系统中的<code>WebMvcConfigurer</code>拿过来，所有功能的定制都是这些<code>WebMvcConfigurer</code>合起来一起生效。</li>
<li>自动配置了一些非常底层的组件，如<code>RequestMappingHandlerMapping</code>，这些组件依赖的组件都是从容器中获取如。</li>
<li><code>public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport</code>。</li>
</ul>
</li>
<li><code>WebMvcAutoConfiguration</code>里面的配置要能生效必须  <code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code>。</li>
<li>@EnableWebMvc 导致了WebMvcAutoConfiguration  没有生效。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="原理分析套路"><a href="#原理分析套路" class="headerlink" title="原理分析套路"></a>原理分析套路</h2><p>场景starter - <code>xxxxAutoConfiguration</code> - 导入xxx组件 - 绑定<code>xxxProperties</code> - 绑定配置文件项。</p>
<h1 id="数据访问-数据库场景的自动配置分析与整合测试"><a href="#数据访问-数据库场景的自动配置分析与整合测试" class="headerlink" title="数据访问-数据库场景的自动配置分析与整合测试"></a>数据访问-数据库场景的自动配置分析与整合测试</h1><h2 id="导入JDBC场景"><a href="#导入JDBC场景" class="headerlink" title="导入JDBC场景"></a>导入JDBC场景</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接着导入数据库驱动包（MySQL为例）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认版本：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;5.1.49&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">想要修改版本</span></span><br><span class="line"><span class="comment">1、直接依赖引入具体版本（maven的就近依赖原则）</span></span><br><span class="line"><span class="comment">2、重新声明版本（maven的属性的就近优先原则）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="相关数据源配置类"><a href="#相关数据源配置类" class="headerlink" title="相关数据源配置类"></a>相关数据源配置类</h2><ul>
<li><p><code>DataSourceAutoConfiguration</code> ： 数据源的自动配置。</p>
<ul>
<li>修改数据源相关的配置：<code>spring.datasource</code>。</li>
<li><strong>数据库连接池的配置，是自己容器中没有DataSource才自动配置的</strong>。</li>
<li>底层配置好的连接池是：<code>HikariDataSource</code>。</li>
</ul>
</li>
<li><p><code>DataSourceTransactionManagerAutoConfiguration</code>： 事务管理器的自动配置。</p>
</li>
<li><p><code>JdbcTemplateAutoConfiguration</code>： <code>JdbcTemplate</code>的自动配置，可以来对数据库进行CRUD。</p>
<ul>
<li>可以修改前缀为<code>spring.jdbc</code>的配置项来修改<code>JdbcTemplate</code>。</li>
<li><code>@Bean @Primary JdbcTemplate</code>：Spring容器中有这个<code>JdbcTemplate</code>组件，使用<code>@Autowired</code>。</li>
</ul>
</li>
<li><p><code>JndiDataSourceAutoConfiguration</code>： JNDI的自动配置。</p>
</li>
<li><p><code>XADataSourceAutoConfiguration</code>： 分布式事务相关的。</p>
</li>
</ul>
<h2 id="修改配置项"><a href="#修改配置项" class="headerlink" title="修改配置项"></a>修改配置项</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_account</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
<h2 id="单元测试数据源"><a href="#单元测试数据源" class="headerlink" title="单元测试数据源"></a>单元测试数据源</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boot05WebAdminApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span><span class="comment">//用@org.junit.Test会报空指针异常，可能跟JUnit新版本有关</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        jdbcTemplate.queryForObject(&quot;select * from account_tbl&quot;)</span></span><br><span class="line"><span class="comment">//        jdbcTemplate.queryForList(&quot;select * from account_tbl&quot;,)</span></span><br><span class="line">        Long aLong = jdbcTemplate.queryForObject(<span class="string">&quot;select count(*) from account_tbl&quot;</span>, Long.class);</span><br><span class="line">        log.info(<span class="string">&quot;记录总数：&#123;&#125;&quot;</span>,aLong);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义方式整合druid数据源"><a href="#自定义方式整合druid数据源" class="headerlink" title="自定义方式整合druid数据源"></a>自定义方式整合druid数据源</h2><p><a href="https://github.com/alibaba/druid">Druid官网</a></p>
<h3 id="Druid是什么？"><a href="#Druid是什么？" class="headerlink" title="Druid是什么？"></a>Druid是什么？</h3><p>它是数据库连接池，它能够提供强大的监控和扩展功能。</p>
<p><a href="https://github.com/alibaba/druid/wiki/Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D">官方文档 - Druid连接池介绍</a></p>
<p>Spring Boot整合第三方技术的两种方式：</p>
<ul>
<li><p>自定义</p>
</li>
<li><p>找starter场景</p>
</li>
</ul>
<h3 id="自定义方式"><a href="#自定义方式" class="headerlink" title="自定义方式"></a>自定义方式</h3><p><strong>添加依赖</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>配置Druid数据源</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span><span class="comment">//复用配置文件的数据源配置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        druidDataSource.setUrl();</span></span><br><span class="line"><span class="comment">//        druidDataSource.setUsername();</span></span><br><span class="line"><span class="comment">//        druidDataSource.setPassword();</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE">更多配置项</a></p>
<p><strong>配置Druid的监控页功能</strong>：</p>
<ul>
<li><p>Druid内置提供了一个<code>StatViewServlet</code>用于展示Druid的统计信息。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE">官方文档 - 配置_StatViewServlet配置</a>。这个<code>StatViewServlet</code>的用途包括：</p>
<ul>
<li>提供监控信息展示的html页面</li>
<li>提供监控信息的JSON API</li>
</ul>
</li>
<li><p>Druid内置提供一个<code>StatFilter</code>，用于统计监控信息。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter">官方文档 - 配置_StatFilter</a></p>
</li>
<li><p><code>WebStatFilter</code>用于采集web-jdbc关联监控的数据，如SQL监控、URI监控。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_%E9%85%8D%E7%BD%AEWebStatFilter">官方文档 - 配置_配置WebStatFilter</a></p>
</li>
<li><p>Druid提供了<code>WallFilter</code>，它是基于SQL语义分析来实现防御SQL注入攻击的。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter">官方文档 - 配置 wallfilter</a></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加入监控和防火墙功能功能</span></span><br><span class="line">        druidDataSource.setFilters(<span class="string">&quot;stat,wall&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 druid的监控页功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StatViewServlet statViewServlet = <span class="keyword">new</span> StatViewServlet();</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean = </span><br><span class="line">            <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(statViewServlet, <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监控页账号密码：</span></span><br><span class="line">        registrationBean.addInitParameter(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WebStatFilter 用于采集web-jdbc关联监控的数据。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebStatFilter webStatFilter = <span class="keyword">new</span> WebStatFilter();</span><br><span class="line"></span><br><span class="line">        FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(webStatFilter);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">        filterRegistrationBean.addInitParameter(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="druid数据源starter整合方式"><a href="#druid数据源starter整合方式" class="headerlink" title="druid数据源starter整合方式"></a>druid数据源starter整合方式</h2><p><a href="">官方文档 - Druid Spring Boot Starter</a></p>
<p><strong>引入依赖</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>分析自动配置</strong>：</p>
<ul>
<li>扩展配置项 <code>spring.datasource.druid</code></li>
<li>自动配置类<code>DruidDataSourceAutoConfigure</code></li>
<li><code>DruidSpringAopConfiguration.class</code>,  监控SpringBean的；配置项：<code>spring.datasource.druid.aop-patterns</code></li>
<li><code>DruidStatViewServletConfiguration.class</code>, 监控页的配置。<code>spring.datasource.druid.stat-view-servlet</code>默认开启。</li>
<li><code>DruidWebStatFilterConfiguration.class</code>，web监控配置。<code>spring.datasource.druid.web-stat-filter</code>默认开启。</li>
<li><code>DruidFilterConfiguration.class</code>所有Druid的filter的配置：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_STAT_PREFIX = <span class="string">&quot;spring.datasource.druid.filter.stat&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_CONFIG_PREFIX = <span class="string">&quot;spring.datasource.druid.filter.config&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_ENCODING_PREFIX = <span class="string">&quot;spring.datasource.druid.filter.encoding&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_SLF4J_PREFIX = <span class="string">&quot;spring.datasource.druid.filter.slf4j&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_LOG4J_PREFIX = <span class="string">&quot;spring.datasource.druid.filter.log4j&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_LOG4J2_PREFIX = <span class="string">&quot;spring.datasource.druid.filter.log4j2&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_COMMONS_LOG_PREFIX = <span class="string">&quot;spring.datasource.druid.filter.commons-log&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_WALL_PREFIX = <span class="string">&quot;spring.datasource.druid.filter.wall&quot;</span>;</span><br></pre></td></tr></table></figure>
<p><strong>配置示例</strong>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_account</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">aop-patterns:</span> <span class="string">com.atguigu.admin.*</span>  <span class="comment">#监控SpringBean</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall</span>     <span class="comment"># 底层开启功能，stat（sql监控），wall（防火墙）</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">stat-view-servlet:</span>   <span class="comment"># 配置监控页功能</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">resetEnable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">web-stat-filter:</span>  <span class="comment"># 监控web</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">urlPattern:</span> <span class="string">/*</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&#x27;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span>    <span class="comment"># 对上面filters里面的stat的详细配置</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">          <span class="attr">logSlowSql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">drop-table-allow:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="整合MyBatis-配置版"><a href="#整合MyBatis-配置版" class="headerlink" title="整合MyBatis-配置版"></a>整合MyBatis-配置版</h2><p><a href="https://github.com/mybatis">MyBatis的GitHub仓库</a></p>
<p><a href="https://mybatis.org/mybatis-3/zh/index.html">MyBatis官方</a></p>
<p><strong>starter的命名方式</strong>：</p>
<ol>
<li>SpringBoot官方的Starter：<code>spring-boot-starter-*</code></li>
<li>第三方的： <code>*-spring-boot-starter</code></li>
</ol>
<p><strong>引入依赖</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>配置模式</strong>:</p>
<ul>
<li><p>全局配置文件</p>
</li>
<li><p><code>SqlSessionFactory</code>：自动配置好了</p>
</li>
<li><p><code>SqlSession</code>：自动配置了<code>SqlSessionTemplate</code> 组合了<code>SqlSession</code></p>
</li>
<li><p><code>@Import(AutoConfiguredMapperScannerRegistrar.class)</code></p>
</li>
<li><p><code>Mapper</code>： 只要我们写的操作MyBatis的接口标准了<code>@Mapper</code>就会被自动扫描进来</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(MybatisProperties.class)</span> ： MyBatis配置项绑定类。</span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisAutoConfiguration</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mybatis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisProperties</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>配置文件</strong>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/my</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置mybatis规则</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span>  <span class="comment">#全局配置文件位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/*.xml</span>  <span class="comment">#sql映射文件位置</span></span><br></pre></td></tr></table></figure>
<p><strong>mybatis-config.xml</strong>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 由于Spring Boot自动配置缘故，此处不必配置，只用来做做样。--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>Mapper接口</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.boot.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.boot.bean.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lun.boot.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>POJO</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getters and setters...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>DB</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>
<p><strong>Controller and Service</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userService.getUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;<span class="comment">//IDEA下标红线，可忽视这红线</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置<code>private Configuration configuration;</code> 也就是配置<code>mybatis.configuration</code>相关的，就是相当于改mybatis全局配置文件中的值。（也就是说配置了<code>mybatis.configuration</code>，就不需配置mybatis全局配置文件了）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置mybatis规则</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="comment"># 可以不写全局配置文件，所有全局配置文件的配置都放在configuration配置项中了。</span></span><br><span class="line">  <span class="comment"># config-location: classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>导入MyBatis官方Starter。</li>
<li>编写Mapper接口，需<code>@Mapper</code>注解。</li>
<li>编写SQL映射文件并绑定Mapper接口。</li>
<li>在<code>application.yaml</code>中指定Mapper配置文件的所处位置，以及指定全局配置文件的信息 （建议：**配置在<code>mybatis.configuration</code>**）。</li>
</ul>
<h2 id="整合MyBatis-注解配置混合版"><a href="#整合MyBatis-注解配置混合版" class="headerlink" title="整合MyBatis-注解配置混合版"></a>整合MyBatis-注解配置混合版</h2><p>你可以通过Spring Initializr添加MyBatis的Starer。</p>
<p><strong>注解与配置混合搭配，干活不累</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser2</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(`name`) values(#&#123;name&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser2</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.boot.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.boot.bean.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into user(`name`) values(#&#123;name&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>简单DAO方法就写在注解上。复杂的就写在配置文件里。</p>
</li>
<li><p>使用<code>@MapperScan(&quot;com.lun.boot.mapper&quot;)</code> 简化，Mapper接口就可以不用标注<code>@Mapper</code>注解。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.lun.boot.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="整合MyBatisPlus操作数据库"><a href="#整合MyBatisPlus操作数据库" class="headerlink" title="整合MyBatisPlus操作数据库"></a>整合MyBatisPlus操作数据库</h2><p><a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">IDEA的MyBatis的插件 - MyBatisX</a></p>
<p><a href="https://baomidou.com/">MyBatisPlus官网</a></p>
<p><a href="https://baomidou.com/guide/">MyBatisPlus官方文档</a></p>
<h3 id="MyBatisPlus是什么"><a href="#MyBatisPlus是什么" class="headerlink" title="MyBatisPlus是什么"></a>MyBatisPlus是什么</h3><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<hr>
<p>添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>MybatisPlusAutoConfiguration</code>配置类，<code>MybatisPlusProperties</code>配置项绑定。</p>
</li>
<li><p><code>SqlSessionFactory</code>自动配置好，底层是容器中默认的数据源。</p>
</li>
<li><p><code>mapperLocations</code>自动配置好的，有默认值<code>classpath*:/mapper/**/*.xml</code>，这表示任意包的类路径下的所有mapper文件夹下任意路径下的所有xml都是sql映射文件。  建议以后sql映射文件放在 mapper下。</p>
</li>
<li><p>容器中也自动配置好了<code>SqlSessionTemplate</code>。</p>
</li>
<li><p><code>@Mapper</code> 标注的接口也会被自动扫描，建议直接 <code>@MapperScan(&quot;com.lun.boot.mapper&quot;)</code>批量扫描。</p>
</li>
<li><p>MyBatisPlus<strong>优点</strong>之一：只需要我们的Mapper继承MyBatisPlus的<code>BaseMapper</code> 就可以拥有CRUD能力，减轻开发工作。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.lun.hellomybatisplus.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CRUD实验-数据列表展示"><a href="#CRUD实验-数据列表展示" class="headerlink" title="CRUD实验-数据列表展示"></a>CRUD实验-数据列表展示</h1><p><a href="https://baomidou.com/guide/crud-interface.html">官方文档 - CRUD接口</a></p>
<p>使用MyBatis Plus提供的<code>IService</code>，<code>ServiceImpl</code>，减轻Service层开发工作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lun.hellomybatisplus.model.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  Service 的CRUD也不用写了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//此处故意为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lun.hellomybatisplus.model.User;</span><br><span class="line"><span class="keyword">import</span> com.lun.hellomybatisplus.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.lun.hellomybatisplus.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>,<span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//此处故意为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与下一节联合在一起</p>
<h2 id="分页数据展示"><a href="#分页数据展示" class="headerlink" title="分页数据展示"></a>分页数据展示</h2><p>与下一节联合在一起</p>
<h2 id="删除用户完成"><a href="#删除用户完成" class="headerlink" title="删除用户完成"></a>删除用户完成</h2><p>添加分页插件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MybatisPlusInterceptor</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor mybatisPlusInterceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span></span><br><span class="line">        <span class="comment">// paginationInterceptor.setOverflow(false);</span></span><br><span class="line">        <span class="comment">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span></span><br><span class="line">        <span class="comment">// paginationInterceptor.setLimit(500);</span></span><br><span class="line">        <span class="comment">// 开启 count 的 join 优化,只针对部分 left join</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这是分页拦截器</span></span><br><span class="line">        PaginationInnerInterceptor paginationInnerInterceptor = <span class="keyword">new</span> PaginationInnerInterceptor();</span><br><span class="line">        paginationInnerInterceptor.setOverflow(<span class="keyword">true</span>);</span><br><span class="line">        paginationInnerInterceptor.setMaxLimit(<span class="number">500L</span>);</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(paginationInnerInterceptor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;display table table-bordered table-striped&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dynamic-table&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;gradeX&quot;</span> <span class="attr">th:each</span>=<span class="string">&quot;user: $&#123;users.records&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;user.name&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span>Win 95+<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.email&#125;&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/delete/&#123;id&#125;(id=$&#123;user.id&#125;,pn=$&#123;users.current&#125;)&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">                   <span class="attr">class</span>=<span class="string">&quot;btn btn-danger btn-sm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;span6&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dataTables_info&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dynamic-table_info&quot;</span>&gt;</span></span><br><span class="line">            当前第[[$&#123;users.current&#125;]]页  总计 [[$&#123;users.pages&#125;]]页  共[[$&#123;users.total&#125;]]条记录</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;span6&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dataTables_paginate paging_bootstrap pagination&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;prev disabled&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>← 前一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:class</span>=<span class="string">&quot;$&#123;num == users.current?&#x27;active&#x27;:&#x27;&#x27;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">th:each</span>=<span class="string">&quot;num:$&#123;#numbers.sequence(1,users.pages)&#125;&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/dynamic_table(pn=$&#123;num&#125;)&#125;&quot;</span>&gt;</span>[[$&#123;num&#125;]]<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;next disabled&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>下一页 → <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>#numbers</code>表示methods for formatting numeric objects.<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#expression-utility-objects">link</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user/delete/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@RequestParam(value = &quot;pn&quot;,defaultValue = &quot;1&quot;)</span>Integer pn,</span></span></span><br><span class="line"><span class="function"><span class="params">                         RedirectAttributes ra)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    userService.removeById(id);</span><br><span class="line"></span><br><span class="line">    ra.addAttribute(<span class="string">&quot;pn&quot;</span>,pn);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/dynamic_table&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/dynamic_table&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">dynamic_table</span><span class="params">(<span class="meta">@RequestParam(value=&quot;pn&quot;,defaultValue = &quot;1&quot;)</span> Integer pn,Model model)</span></span>&#123;</span><br><span class="line">    <span class="comment">//表格内容的遍历</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//从数据库中查出user表中的用户进行展示</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造分页参数</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(pn, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//调用page进行分页</span></span><br><span class="line">    Page&lt;User&gt; userPage = userService.page(page, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    model.addAttribute(<span class="string">&quot;users&quot;</span>,userPage);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;table/dynamic_table&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="准备阿里云Redis环境"><a href="#准备阿里云Redis环境" class="headerlink" title="准备阿里云Redis环境"></a>准备阿里云Redis环境</h2><p><strong>添加依赖</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入jedis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>RedisAutoConfiguration</code>自动配置类，RedisProperties 属性类 –&gt; spring.redis.xxx是对redis的配置。</li>
<li>连接工厂<code>LettuceConnectionConfiguration</code>、<code>JedisConnectionConfiguration</code>是准备好的。</li>
<li>自动注入了<code>RedisTemplate&lt;Object, Object&gt;</code>，<code>xxxTemplate</code>。</li>
<li>自动注入了<code>StringRedisTemplate</code>，key，value都是String</li>
<li>底层只要我们使用<code>StringRedisTemplate</code>、<code>RedisTemplate</code>就可以操作Redis。</li>
</ul>
<p><strong>外网Redis环境搭建</strong>：</p>
<ol>
<li><p>阿里云按量付费Redis，其中选择<strong>经典网络</strong>。</p>
</li>
<li><p>申请Redis的公网连接地址。</p>
</li>
<li><p>修改白名单，允许<code>0.0.0.0/0</code>访问。</p>
</li>
</ol>
<h2 id="Redis操作与统计小实验"><a href="#Redis操作与统计小实验" class="headerlink" title="Redis操作与统计小实验"></a>Redis操作与统计小实验</h2><p>相关Redis配置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">#   url: redis://lfy:Lfy123456@r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com:6379</span><br><span class="line">    host: r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com</span><br><span class="line">    port: <span class="number">6379</span></span><br><span class="line">    password: lfy:Lfy123456</span><br><span class="line">    client-type: jedis</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: <span class="number">10</span></span><br><span class="line">#   lettuce:# 另一个用来连接redis的java框架</span><br><span class="line">#      pool:</span><br><span class="line">#        max-active: 10</span><br><span class="line">#        min-idle: 5</span><br></pre></td></tr></table></figure>
<p>测试Redis连接：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boot05WebAdminApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisConnectionFactory redisConnectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testRedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ValueOperations&lt;String, String&gt; operations = redisTemplate.opsForValue();</span><br><span class="line"></span><br><span class="line">        operations.set(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String hello = operations.get(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello);</span><br><span class="line"></span><br><span class="line">        System.out.println(redisConnectionFactory.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Redis Desktop Manager：可视化Redis管理软件。</p>
<p>URL统计拦截器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUrlCountInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认每次访问当前uri就会计数+1</span></span><br><span class="line">        redisTemplate.opsForValue().increment(uri);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注册URL统计拦截器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisUrlCountInterceptor redisUrlCountInterceptor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        registry.addInterceptor(redisUrlCountInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/fonts/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/js/**&quot;</span>,<span class="string">&quot;/aa/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Filter、Interceptor 几乎拥有相同的功能？</p>
<ul>
<li>Filter是Servlet定义的原生组件，它的好处是脱离Spring应用也能使用。</li>
<li>Interceptor是Spring定义的接口，可以使用Spring的自动装配等功能。</li>
</ul>
<p>调用Redis内的统计数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/main.html&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">mainPage</span><span class="params">(HttpSession session,Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;当前方法是：&#123;&#125;&quot;</span>,<span class="string">&quot;mainPage&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ValueOperations&lt;String, String&gt; opsForValue =</span><br><span class="line">                redisTemplate.opsForValue();</span><br><span class="line"></span><br><span class="line">        String s = opsForValue.get(<span class="string">&quot;/main.html&quot;</span>);</span><br><span class="line">        String s1 = opsForValue.get(<span class="string">&quot;/sql&quot;</span>);</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;mainCount&quot;</span>,s);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;sqlCount&quot;</span>,s1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="单元测试-JUnit5简介"><a href="#单元测试-JUnit5简介" class="headerlink" title="单元测试-JUnit5简介"></a>单元测试-JUnit5简介</h1><p><strong>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库</strong></p>
<p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations">JUnit 5官方文档</a></p>
<p>作为最新版本的JUnit框架，JUnit5与之前版本的JUnit框架有很大的不同。由三个不同子项目的几个不同模块组成。</p>
<p><strong>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</strong></p>
<ul>
<li><p><strong>JUnit Platform</strong>: Junit Platform是在JVM上启动测试框架的基础，不仅支持Junit自制的测试引擎，其他测试引擎也都可以接入。</p>
</li>
<li><p><strong>JUnit Jupiter</strong>: JUnit Jupiter提供了JUnit5的新的编程模型，是JUnit5新特性的核心。内部包含了一个<strong>测试引擎</strong>，用于在Junit Platform上运行。</p>
</li>
<li><p><strong>JUnit Vintage</strong>: 由于JUint已经发展多年，为了照顾老的项目，JUnit Vintage提供了兼容JUnit4.x，JUnit3.x的测试引擎。</p>
</li>
</ul>
<p><strong>注意</strong>：</p>
<ul>
<li><p>SpringBoot 2.4 以上版本移除了默认对 Vintage 的依赖。如果需要兼容JUnit4需要自行引入（不能使用JUnit4的功能 @Test）</p>
</li>
<li><p>JUnit 5’s Vintage已经从<code>spring-boot-starter-test</code>从移除。如果需要继续兼容Junit4需要自行引入Vintage依赖：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用添加JUnit 5，添加对应的starter：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Spring的JUnit 5的基本单元测试模板（Spring的JUnit4的是<code>@SpringBootTest</code>+<code>@RunWith(SpringRunner.class)</code>）：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Assertions;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;<span class="comment">//注意不是org.junit.Test（这是JUnit4版本的）</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBootApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Component component;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//@Transactional 标注后连接数据库有回滚功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assertions.assertEquals(<span class="number">5</span>, component.getFive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Jupiter</p>
<p>英 [ˈdʒuːpɪtə(r)]   美 [ˈdʒuːpɪtər]</p>
<p>n. 木星(太阳系中最大的行星)</p>
</blockquote>
<blockquote>
<p>vintage</p>
<p>英 [ˈvɪntɪdʒ]   美 [ˈvɪntɪdʒ]</p>
<p>n. 特定年份(或地方)酿制的酒;酿造年份;采摘葡萄酿酒的期间(或季节);葡萄收获期(或季节)</p>
<p>adj. (指葡萄酒)优质的，上等的，佳酿的;古色古香的(指1917–1930年间制造，车型和品味受人青睐的);(过去某个时期)典型的，优质的;(某人的)最佳作品的</p>
</blockquote>
<h2 id="常用测试注解"><a href="#常用测试注解" class="headerlink" title="常用测试注解"></a>常用测试注解</h2><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations">官方文档 - Annotations</a></p>
<ul>
<li><strong>@Test</strong>：表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li>
<li><strong>@ParameterizedTest</strong>：表示方法是参数化测试。</li>
<li><strong>@RepeatedTest</strong>：表示方法可重复执行。</li>
<li><strong>@DisplayName</strong>：为测试类或者测试方法设置展示名称。</li>
<li><strong>@BeforeEach</strong>：表示在<strong>每个</strong>单元测试<strong>之前</strong>执行。</li>
<li><strong>@AfterEach</strong>：表示在<strong>每个</strong>单元测试<strong>之后</strong>执行。</li>
<li><strong>@BeforeAll</strong>：表示在<strong>所有</strong>单元测试<strong>之前</strong>执行。</li>
<li><strong>@AfterAll</strong>：表示在<strong>所有</strong>单元测试<strong>之后</strong>执行。</li>
<li><strong>@Tag</strong>：表示单元测试类别，类似于JUnit4中的@Categories。</li>
<li><strong>@Disabled</strong>：表示测试类或测试方法不执行，类似于JUnit4中的@Ignore。</li>
<li><strong>@Timeout</strong>：表示测试方法运行如果超过了指定时间将会返回错误。</li>
<li><strong>@ExtendWith</strong>：为测试类或测试方法提供扩展类引用。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DisplayName(&quot;junit5功能测试类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Junit5Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试displayname注解&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDisplayName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">        System.out.println(jdbcTemplate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@ValueSource(strings = &#123; &quot;racecar&quot;, &quot;radar&quot;, &quot;able was I ere I saw elba&quot; &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">palindromes</span><span class="params">(String candidate)</span> </span>&#123;</span><br><span class="line">        assertTrue(StringUtils.isPalindrome(candidate));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Disabled</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试方法2&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatedTest(5)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 规定方法超时时间。超出时间测试出异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Timeout(value = 500, unit = TimeUnit.MILLISECONDS)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testTimeout</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">600</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testBeforeEach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试就要开始了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testAfterEach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结束了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testBeforeAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;所有测试就要开始了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testAfterAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;所有测试以及结束了...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="断言机制"><a href="#断言机制" class="headerlink" title="断言机制"></a>断言机制</h2><p>断言Assertion是测试方法中的核心部分，用来对测试需要满足的条件进行验证。这些断言方法都是org.junit.jupiter.api.Assertions的静态方法。检查业务逻辑返回的数据是否合理。所有的测试运行结束以后，会有一个详细的测试报告。</p>
<p>JUnit 5 内置的断言可以分成如下几个类别：</p>
<h3 id="简单断言"><a href="#简单断言" class="headerlink" title="简单断言"></a>简单断言</h3><p>用来对单个值进行简单的验证。如：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>assertEquals</td>
<td>判断两个对象或两个原始类型是否相等</td>
</tr>
<tr>
<td>assertNotEquals</td>
<td>判断两个对象或两个原始类型是否不相等</td>
</tr>
<tr>
<td>assertSame</td>
<td>判断两个对象引用是否指向同一个对象</td>
</tr>
<tr>
<td>assertNotSame</td>
<td>判断两个对象引用是否指向不同的对象</td>
</tr>
<tr>
<td>assertTrue</td>
<td>判断给定的布尔值是否为 true</td>
</tr>
<tr>
<td>assertFalse</td>
<td>判断给定的布尔值是否为 false</td>
</tr>
<tr>
<td>assertNull</td>
<td>判断给定的对象引用是否为 null</td>
</tr>
<tr>
<td>assertNotNull</td>
<td>判断给定的对象引用是否不为 null</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;simple assertion&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     assertEquals(<span class="number">3</span>, <span class="number">1</span> + <span class="number">2</span>, <span class="string">&quot;simple math&quot;</span>);</span><br><span class="line">     assertNotEquals(<span class="number">3</span>, <span class="number">1</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">     assertNotSame(<span class="keyword">new</span> Object(), <span class="keyword">new</span> Object());</span><br><span class="line">     Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">     assertSame(obj, obj);</span><br><span class="line"></span><br><span class="line">     assertFalse(<span class="number">1</span> &gt; <span class="number">2</span>);</span><br><span class="line">     assertTrue(<span class="number">1</span> &lt; <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">     assertNull(<span class="keyword">null</span>);</span><br><span class="line">     assertNotNull(<span class="keyword">new</span> Object());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数组断言"><a href="#数组断言" class="headerlink" title="数组断言"></a>数组断言</h3><p>通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;array assertion&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">array</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertArrayEquals(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="组合断言"><a href="#组合断言" class="headerlink" title="组合断言"></a>组合断言</h3><p><code>assertAll()</code>方法接受多个 <code>org.junit.jupiter.api.Executable</code> 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;assert all&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">all</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> assertAll(<span class="string">&quot;Math&quot;</span>,</span><br><span class="line">    () -&gt; assertEquals(<span class="number">2</span>, <span class="number">1</span> + <span class="number">1</span>),</span><br><span class="line">    () -&gt; assertTrue(<span class="number">1</span> &gt; <span class="number">0</span>)</span><br><span class="line"> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="异常断言"><a href="#异常断言" class="headerlink" title="异常断言"></a>异常断言</h3><p>在JUnit4时期，想要测试方法的异常情况时，需要用<code>@Rule</code>注解的<code>ExpectedException</code>变量还是比较麻烦的。而JUnit5提供了一种新的断言方式<code>Assertions.assertThrows()</code>，配合函数式编程就可以进行使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;异常测试&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ArithmeticException exception = Assertions.assertThrows(</span><br><span class="line">           <span class="comment">//扔出断言异常</span></span><br><span class="line">            ArithmeticException.class, () -&gt; System.out.println(<span class="number">1</span> % <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="超时断言"><a href="#超时断言" class="headerlink" title="超时断言"></a>超时断言</h3><p>JUnit5还提供了Assertions.assertTimeout()为测试方法设置了超时时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;超时测试&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeoutTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果测试方法时间超过1s将会异常</span></span><br><span class="line">    Assertions.assertTimeout(Duration.ofMillis(<span class="number">1000</span>), () -&gt; Thread.sleep(<span class="number">500</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="快速失败"><a href="#快速失败" class="headerlink" title="快速失败"></a>快速失败</h3><p>通过 fail 方法直接使得测试失败。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;fail&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fail(<span class="string">&quot;This should fail&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>Unit 5 中的前置条件（assumptions【假设】）类似于断言，不同之处在于不满足的<strong>断言assertions</strong>会使得测试方法失败，而<strong>不满足的前置条件只会使得测试方法的执行终止</strong>。</p>
<p>前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DisplayName(&quot;前置条件&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssumptionsTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String environment = <span class="string">&quot;DEV&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;simple&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleAssume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assumeTrue(Objects.equals(<span class="keyword">this</span>.environment, <span class="string">&quot;DEV&quot;</span>));</span><br><span class="line">        assumeFalse(() -&gt; Objects.equals(<span class="keyword">this</span>.environment, <span class="string">&quot;PROD&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;assume then do&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assumeThenDo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assumingThat(</span><br><span class="line">            Objects.equals(<span class="keyword">this</span>.environment, <span class="string">&quot;DEV&quot;</span>),</span><br><span class="line">            () -&gt; System.out.println(<span class="string">&quot;In DEV&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>assumeTrue</code> 和 <code>assumFalse</code> 确保给定的条件为 <code>true</code> 或 <code>false</code>，不满足条件会使得测试执行终止。</p>
<p><code>assumingThat</code> 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。只有条件满足时，<code>Executable</code> 对象才会被执行；当条件不满足时，测试执行并不会终止。</p>
<h2 id="嵌套测试"><a href="#嵌套测试" class="headerlink" title="嵌套测试"></a>嵌套测试</h2><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested">官方文档 - Nested Tests</a></p>
<p>JUnit 5 可以通过 Java 中的内部类和<code>@Nested</code> 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用<code>@BeforeEach</code> 和<code>@AfterEach</code>注解，而且嵌套的层次没有限制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DisplayName(&quot;A stack&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestingAStackDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Object&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;is instantiated with new Stack()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">isInstantiatedWithNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;when new&quot;)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WhenNew</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@BeforeEach</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">createNewStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;is empty&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertTrue(stack.isEmpty());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when popped&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">throwsExceptionWhenPopped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::pop);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">throwsExceptionWhenPeeked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::peek);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nested</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;after pushing an element&quot;)</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AfterPushing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            String anElement = <span class="string">&quot;an element&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@BeforeEach</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">pushAnElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                stack.push(anElement);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;it is no longer empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">isNotEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when popped and is empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">returnElementWhenPopped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertEquals(anElement, stack.pop());</span><br><span class="line">                assertTrue(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">returnElementWhenPeeked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertEquals(anElement, stack.peek());</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h2><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests">官方文档 - Parameterized Tests</a></p>
<p>参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。</p>
<p>利用@ValueSource等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p>
<p>利用**@ValueSource**等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p>
<ul>
<li><strong>@ValueSource</strong>: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</li>
<li><strong>@NullSource</strong>: 表示为参数化测试提供一个null的入参</li>
<li><strong>@EnumSource</strong>: 表示为参数化测试提供一个枚举入参</li>
<li><strong>@CsvFileSource</strong>：表示读取指定CSV文件内容作为参数化测试入参</li>
<li><strong>@MethodSource</strong>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</li>
</ul>
<p>当然如果参数化测试仅仅只能做到指定普通的入参还达不到让我觉得惊艳的地步。让我真正感到他的强大之处的地方在于他可以支持外部的各类入参。如:CSV,YML,JSON 文件甚至方法的返回值也可以作为入参。只需要去实现**<code>ArgumentsProvider</code>**接口，任何外部文件都可以作为它的入参。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(strings = &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;)</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;参数化测试1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parameterizedTest1</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">    System.out.println(string);</span><br><span class="line">    Assertions.assertTrue(StringUtils.isNotBlank(string));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@MethodSource(&quot;method&quot;)</span>    <span class="comment">//指定方法名</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;方法来源参数&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithExplicitLocalMethodSource</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    Assertions.assertNotNull(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> Stream&lt;String&gt; <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="迁移指南"><a href="#迁移指南" class="headerlink" title="迁移指南"></a>迁移指南</h3><p><a href="https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4">官方文档 - Migrating from JUnit 4</a></p>
<p>在进行迁移的时候需要注意如下的变化：</p>
<ul>
<li>注解在 <code>org.junit.jupiter.api</code> 包中，断言在 <code>org.junit.jupiter.api.Assertions</code> 类中，前置条件在 <code>org.junit.jupiter.api.Assumptions</code> 类中。</li>
<li>把<code>@Before</code> 和<code>@After</code> 替换成<code>@BeforeEach</code> 和<code>@AfterEach</code>。</li>
<li>把<code>@BeforeClass</code> 和<code>@AfterClass</code> 替换成<code>@BeforeAll</code> 和@AfterAll。</li>
<li>把<code>@Ignore</code> 替换成<code>@Disabled</code>。</li>
<li>把<code>@Category</code> 替换成<code>@Tag</code>。</li>
<li>把<code>@RunWith</code>、<code>@Rule</code> 和<code>@ClassRule</code> 替换成<code>@ExtendWith</code>。</li>
</ul>
<h1 id="指标监控-SpringBoot-Actuator与Endpoint"><a href="#指标监控-SpringBoot-Actuator与Endpoint" class="headerlink" title="指标监控-SpringBoot Actuator与Endpoint"></a>指标监控-SpringBoot Actuator与Endpoint</h1><p>未来每一个微服务在云上部署以后，我们都需要对其进行监控、追踪、审计、控制等。SpringBoot就抽取了Actuator场景，使得我们每个微服务快速引用即可获得生产级别的应用监控、审计等功能。</p>
<p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#production-ready">官方文档 - Spring Boot Actuator: Production-ready Features</a></p>
<p><strong>1.x与2.x的不同</strong>：</p>
<ul>
<li><p>SpringBoot Actuator 1.x</p>
<ul>
<li>支持SpringMVC</li>
<li>基于继承方式进行扩展</li>
<li>层级Metrics配置</li>
<li>自定义Metrics收集</li>
<li>默认较少的安全策略</li>
</ul>
</li>
<li><p>SpringBoot Actuator 2.x</p>
<ul>
<li>支持SpringMVC、JAX-RS以及Webflux</li>
<li>注解驱动进行扩展</li>
<li>层级&amp;名称空间Metrics</li>
<li>底层使用MicroMeter，强大、便捷默认丰富的安全策略</li>
</ul>
</li>
</ul>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><ul>
<li>添加依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>访问<code>http://localhost:8080/actuator/**</code>。</li>
<li>暴露所有监控信息为HTTP。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">true</span> <span class="comment">#暴露所有端点信息</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span>  <span class="comment">#以web方式暴露</span></span><br></pre></td></tr></table></figure>
<ul>
<li>测试例子<ul>
<li><a href="http://localhost:8080/actuator/beans">http://localhost:8080/actuator/beans</a></li>
<li><a href="http://localhost:8080/actuator/configprops">http://localhost:8080/actuator/configprops</a></li>
<li><a href="http://localhost:8080/actuator/metrics">http://localhost:8080/actuator/metrics</a></li>
<li><a href="http://localhost:8080/actuator/metrics/jvm.gc.pause">http://localhost:8080/actuator/metrics/jvm.gc.pause</a></li>
<li><a href="http://localhost:8080/actuator/metrics/endpointName/detailPath">http://localhost:8080/actuator/metrics/endpointName/detailPath</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>actuator</p>
<p>英 [ˈæktjʊeɪtə]   美 [ˈæktjuˌeɪtər]</p>
<p>n. 致动（促动，激励，调节）器；传动（装置，机构）；拖动装置；马达；操作机构；执行机构（元件）；（电磁铁）螺线管；操纵装置（阀门）；调速控制器；往复运动油（气）缸；作动筒</p>
</blockquote>
<blockquote>
<p>metric</p>
<p>英 [ˈmetrɪk]   美 [ˈmetrɪk]</p>
<p>adj. 米制的;公制的;按公制制作的;用公制测量的</p>
<p>n. 度量标准;[数学]度量;诗体;韵文;诗韵</p>
</blockquote>
<h2 id="常使用的端点及开启与禁用"><a href="#常使用的端点及开启与禁用" class="headerlink" title="常使用的端点及开启与禁用"></a>常使用的端点及开启与禁用</h2><h3 id="常使用的端点"><a href="#常使用的端点" class="headerlink" title="常使用的端点"></a>常使用的端点</h3><table>
<thead>
<tr>
<th>ID</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>auditevents</code></td>
<td>暴露当前应用程序的审核事件信息。需要一个<code>AuditEventRepository组件</code>。</td>
</tr>
<tr>
<td><code>beans</code></td>
<td>显示应用程序中所有Spring Bean的完整列表。</td>
</tr>
<tr>
<td><code>caches</code></td>
<td>暴露可用的缓存。</td>
</tr>
<tr>
<td><code>conditions</code></td>
<td>显示自动配置的所有条件信息，包括匹配或不匹配的原因。</td>
</tr>
<tr>
<td><code>configprops</code></td>
<td>显示所有<code>@ConfigurationProperties</code>。</td>
</tr>
<tr>
<td><code>env</code></td>
<td>暴露Spring的属性<code>ConfigurableEnvironment</code></td>
</tr>
<tr>
<td><code>flyway</code></td>
<td>显示已应用的所有Flyway数据库迁移。 需要一个或多个<code>Flyway</code>组件。</td>
</tr>
<tr>
<td><code>health</code></td>
<td>显示应用程序运行状况信息。</td>
</tr>
<tr>
<td><code>httptrace</code></td>
<td>显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个<code>HttpTraceRepository</code>组件。</td>
</tr>
<tr>
<td><code>info</code></td>
<td>显示应用程序信息。</td>
</tr>
<tr>
<td><code>integrationgraph</code></td>
<td>显示Spring <code>integrationgraph</code> 。需要依赖<code>spring-integration-core</code>。</td>
</tr>
<tr>
<td><code>loggers</code></td>
<td>显示和修改应用程序中日志的配置。</td>
</tr>
<tr>
<td><code>liquibase</code></td>
<td>显示已应用的所有Liquibase数据库迁移。需要一个或多个<code>Liquibase</code>组件。</td>
</tr>
<tr>
<td><code>metrics</code></td>
<td>显示当前应用程序的“指标”信息。</td>
</tr>
<tr>
<td><code>mappings</code></td>
<td>显示所有<code>@RequestMapping</code>路径列表。</td>
</tr>
<tr>
<td><code>scheduledtasks</code></td>
<td>显示应用程序中的计划任务。</td>
</tr>
<tr>
<td><code>sessions</code></td>
<td>允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。</td>
</tr>
<tr>
<td><code>shutdown</code></td>
<td>使应用程序正常关闭。默认禁用。</td>
</tr>
<tr>
<td><code>startup</code></td>
<td>显示由<code>ApplicationStartup</code>收集的启动步骤数据。需要使用<code>SpringApplication</code>进行配置<code>BufferingApplicationStartup</code>。</td>
</tr>
<tr>
<td><code>threaddump</code></td>
<td>执行线程转储。</td>
</tr>
</tbody></table>
<p>如果您的应用程序是Web应用程序（Spring MVC，Spring WebFlux或Jersey），则可以使用以下附加端点：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>heapdump</code></td>
<td>返回<code>hprof</code>堆转储文件。</td>
</tr>
<tr>
<td><code>jolokia</code></td>
<td>通过HTTP暴露JMX bean（需要引入Jolokia，不适用于WebFlux）。需要引入依赖<code>jolokia-core</code>。</td>
</tr>
<tr>
<td><code>logfile</code></td>
<td>返回日志文件的内容（如果已设置<code>logging.file.name</code>或<code>logging.file.path</code>属性）。支持使用HTTP<code>Range</code>标头来检索部分日志文件的内容。</td>
</tr>
<tr>
<td><code>prometheus</code></td>
<td>以Prometheus服务器可以抓取的格式公开指标。需要依赖<code>micrometer-registry-prometheus</code>。</td>
</tr>
</tbody></table>
<p>其中最常用的Endpoint：</p>
<ul>
<li><strong>Health：监控状况</strong></li>
<li><strong>Metrics：运行时指标</strong></li>
<li><strong>Loggers：日志记录</strong></li>
</ul>
<h3 id="Health-Endpoint"><a href="#Health-Endpoint" class="headerlink" title="Health Endpoint"></a>Health Endpoint</h3><p>健康检查端点，我们一般用于在云平台，平台会定时的检查应用的健康状况，我们就需要Health Endpoint可以为平台返回当前应用的一系列组件健康状况的集合。</p>
<p>重要的几点：</p>
<ul>
<li>health endpoint返回的结果，应该是一系列健康检查后的一个汇总报告。</li>
<li>很多的健康检查默认已经自动配置好了，比如：数据库、redis等。</li>
<li>可以很容易的添加自定义的健康检查机制。</li>
</ul>
<h3 id="Metrics-Endpoint"><a href="#Metrics-Endpoint" class="headerlink" title="Metrics Endpoint"></a>Metrics Endpoint</h3><p>提供详细的、层级的、空间指标信息，这些信息可以被pull（主动推送）或者push（被动获取）方式得到：</p>
<ul>
<li>通过Metrics对接多种监控系统。</li>
<li>简化核心Metrics开发。</li>
<li>添加自定义Metrics或者扩展已有Metrics。</li>
</ul>
<h3 id="开启与禁用Endpoints"><a href="#开启与禁用Endpoints" class="headerlink" title="开启与禁用Endpoints"></a>开启与禁用Endpoints</h3><ul>
<li>默认所有的Endpoint除过shutdown都是开启的。</li>
<li>需要开启或者禁用某个Endpoint。配置模式为<code>management.endpoint.&lt;endpointName&gt;.enabled = true</code></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">beans:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>或者禁用所有的Endpoint然后手动开启指定的Endpoint。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">beans:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="暴露Endpoints"><a href="#暴露Endpoints" class="headerlink" title="暴露Endpoints"></a>暴露Endpoints</h3><p>支持的暴露方式</p>
<ul>
<li>HTTP：默认只暴露health和info。</li>
<li>JMX：默认暴露所有Endpoint。</li>
<li>除过health和info，剩下的Endpoint都应该进行保护访问。如果引入Spring Security，则会默认配置安全访问规则。</li>
</ul>
<table>
<thead>
<tr>
<th align="left">ID</th>
<th align="left">JMX</th>
<th align="left">Web</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>auditevents</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>beans</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>caches</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>conditions</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>configprops</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>env</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>flyway</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>health</code></td>
<td align="left">Yes</td>
<td align="left">Yes</td>
</tr>
<tr>
<td align="left"><code>heapdump</code></td>
<td align="left">N/A</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>httptrace</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>info</code></td>
<td align="left">Yes</td>
<td align="left">Yes</td>
</tr>
<tr>
<td align="left"><code>integrationgraph</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>jolokia</code></td>
<td align="left">N/A</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>logfile</code></td>
<td align="left">N/A</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>loggers</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>liquibase</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>metrics</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>mappings</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>prometheus</code></td>
<td align="left">N/A</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>scheduledtasks</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>sessions</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>shutdown</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>startup</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
<tr>
<td align="left"><code>threaddump</code></td>
<td align="left">Yes</td>
<td align="left">No</td>
</tr>
</tbody></table>
<p>若要更改公开的Endpoint，请配置以下的包含和排除属性：</p>
<table>
<thead>
<tr>
<th align="left">Property</th>
<th align="left">Default</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>management.endpoints.jmx.exposure.exclude</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>management.endpoints.jmx.exposure.include</code></td>
<td align="left"><code>*</code></td>
</tr>
<tr>
<td align="left"><code>management.endpoints.web.exposure.exclude</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>management.endpoints.web.exposure.include</code></td>
<td align="left"><code>info, health</code></td>
</tr>
</tbody></table>
<p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#production-ready-endpoints-exposing-endpoints">官方文档 - Exposing Endpoints</a></p>
<h2 id="定制Endpoint"><a href="#定制Endpoint" class="headerlink" title="定制Endpoint"></a>定制Endpoint</h2><h3 id="定制-Health-信息"><a href="#定制-Health-信息" class="headerlink" title="定制 Health 信息"></a>定制 Health 信息</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span> <span class="comment">#总是显示详细信息。可显示每个模块的状态信息</span></span><br></pre></td></tr></table></figure>
<p>通过实现<code>HealthIndicator </code>接口，或继承<code>MyComHealthIndicator </code>类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.health.Health;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.health.HealthIndicator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHealthIndicator</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> errorCode = check(); <span class="comment">// perform some specific health check</span></span><br><span class="line">        <span class="keyword">if</span> (errorCode != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Health.down().withDetail(<span class="string">&quot;Error Code&quot;</span>, errorCode).build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Health.up().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构建Health</span></span><br><span class="line"><span class="comment">Health build = Health.down()</span></span><br><span class="line"><span class="comment">                .withDetail(&quot;msg&quot;, &quot;error service&quot;)</span></span><br><span class="line"><span class="comment">                .withDetail(&quot;code&quot;, &quot;500&quot;)</span></span><br><span class="line"><span class="comment">                .withException(new RuntimeException())</span></span><br><span class="line"><span class="comment">                .build();</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComHealthIndicator</span> <span class="keyword">extends</span> <span class="title">AbstractHealthIndicator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 真实的检查方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> builder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//mongodb。  获取连接进行测试</span></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 检查完成</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span> == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//            builder.up(); //健康</span></span><br><span class="line">            builder.status(Status.UP);</span><br><span class="line">            map.put(<span class="string">&quot;count&quot;</span>,<span class="number">1</span>);</span><br><span class="line">            map.put(<span class="string">&quot;ms&quot;</span>,<span class="number">100</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//            builder.down();</span></span><br><span class="line">            builder.status(Status.OUT_OF_SERVICE);</span><br><span class="line">            map.put(<span class="string">&quot;err&quot;</span>,<span class="string">&quot;连接超时&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;ms&quot;</span>,<span class="number">3000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        builder.withDetail(<span class="string">&quot;code&quot;</span>,<span class="number">100</span>)</span><br><span class="line">                .withDetails(map);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="定制info信息"><a href="#定制info信息" class="headerlink" title="定制info信息"></a>定制info信息</h3><p>常用两种方式：</p>
<ul>
<li>编写配置文件</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">appName:</span> <span class="string">boot-admin</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">mavenProjectName:</span> <span class="string">@project.artifactId@</span>  <span class="comment">#使用@@可以获取maven的pom文件值</span></span><br><span class="line">  <span class="attr">mavenProjectVersion:</span> <span class="string">@project.version@</span></span><br></pre></td></tr></table></figure>
<ul>
<li>编写InfoContributor</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.info.Info;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.info.InfoContributor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleInfoContributor</span> <span class="keyword">implements</span> <span class="title">InfoContributor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contribute</span><span class="params">(Info.Builder builder)</span> </span>&#123;</span><br><span class="line">        builder.withDetail(<span class="string">&quot;example&quot;</span>,</span><br><span class="line">                Collections.singletonMap(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://localhost:8080/actuator/info">http://localhost:8080/actuator/info</a> 会输出以上方式返回的所有info信息</p>
<h3 id="定制Metrics信息"><a href="#定制Metrics信息" class="headerlink" title="定制Metrics信息"></a>定制Metrics信息</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#production-ready-metrics-meter">Spring Boot支持的metrics</a></p>
<p>增加定制Metrics：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyService</span></span>&#123;</span><br><span class="line">    Counter counter;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">(MeterRegistry meterRegistry)</span></span>&#123;</span><br><span class="line">         counter = meterRegistry.counter(<span class="string">&quot;myservice.method.running.counter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        counter.increment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//也可以使用下面的方式</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">MeterBinder <span class="title">queueSize</span><span class="params">(Queue queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (registry) -&gt; Gauge.builder(<span class="string">&quot;queueSize&quot;</span>, queue::size).register(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="定制Endpoint-1"><a href="#定制Endpoint-1" class="headerlink" title="定制Endpoint"></a>定制Endpoint</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Endpoint(id = &quot;container&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DockerEndpoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getDockerInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singletonMap(<span class="string">&quot;info&quot;</span>,<span class="string">&quot;docker started...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@WriteOperation</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">restartDocker</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;docker restarted....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>场景：</p>
<ul>
<li>开发ReadinessEndpoint来管理程序是否就绪。</li>
<li>开发LivenessEndpoint来管理程序是否存活。</li>
</ul>
<h2 id="Boot-Admin-Server"><a href="#Boot-Admin-Server" class="headerlink" title="Boot Admin Server"></a>Boot Admin Server</h2><p><a href="">官方Github</a></p>
<p><a href="https://codecentric.github.io/spring-boot-admin/2.3.1/#getting-started">官方文档</a></p>
<p>可视化指标监控</p>
<blockquote>
<p>What is Spring Boot Admin?</p>
<p>codecentric’s Spring Boot Admin is a community project to manage and monitor your <a href="http://projects.spring.io/spring-boot/">Spring Boot</a> ® applications. The applications register with our Spring Boot Admin Client (via HTTP) or are discovered using Spring Cloud ® (e.g. Eureka, Consul). The UI is just a Vue.js application on top of the Spring Boot Actuator endpoints.</p>
</blockquote>
<p><a href="https://codecentric.github.io/spring-boot-admin/2.3.1/#getting-started">开始使用方法</a></p>
<h1 id="高级特性-Profile环境切换"><a href="#高级特性-Profile环境切换" class="headerlink" title="高级特性-Profile环境切换"></a>高级特性-Profile环境切换</h1><p>为了方便多环境适配，Spring Boot简化了profile功能。</p>
<ul>
<li>默认配置文件<code>application.yaml</code>任何时候都会加载。</li>
<li>指定环境配置文件<code>application-&#123;env&#125;.yaml</code>，<code>env</code>通常替代为<code>test</code>，</li>
<li>激活指定环境<ul>
<li>配置文件激活：<code>spring.profiles.active=prod</code></li>
<li>命令行激活：<code>java -jar xxx.jar --spring.profiles.active=prod  --person.name=haha</code>（修改配置文件的任意值，<strong>命令行优先</strong>）</li>
</ul>
</li>
<li>默认配置与环境配置同时生效</li>
<li>同名配置项，profile配置优先</li>
</ul>
<h2 id="Profile条件装配功能"><a href="#Profile条件装配功能" class="headerlink" title="@Profile条件装配功能"></a>@Profile条件装配功能</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;person&quot;)</span><span class="comment">//在配置文件中配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>application.properties</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">lun</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function">Integer <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Profile(&quot;test&quot;)</span><span class="comment">//加载application-test.yaml里的</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Profile(value = &#123;&quot;prod&quot;,&quot;default&quot;&#125;)</span><span class="comment">//加载application-prod.yaml里的</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>application-test.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-张三</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7000</span></span><br></pre></td></tr></table></figure>
<p>application-prod.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prod-张三</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br></pre></td></tr></table></figure>
<p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 激活prod配置文件</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">prod</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//激活了prod，则返回Boss；激活了test，则返回Worker</span></span><br><span class="line">    <span class="keyword">return</span> person.getClass().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>@Profile还可以修饰在方法上：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile(&quot;prod&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Color <span class="title">red</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Color();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile(&quot;test&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Color <span class="title">green</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Color();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>可以激活一组：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">production</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.profiles.group.production[0]</span>=<span class="string">proddb</span></span><br><span class="line"><span class="meta">spring.profiles.group.production[1]</span>=<span class="string">prodmq</span></span><br></pre></td></tr></table></figure>
<h2 id="配置加载优先级"><a href="#配置加载优先级" class="headerlink" title="配置加载优先级"></a>配置加载优先级</h2><h3 id="外部化配置"><a href="#外部化配置" class="headerlink" title="外部化配置"></a>外部化配置</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-external-config">官方文档 - Externalized Configuration</a></p>
<p>Spring Boot uses a very particular <code>PropertySource</code> order that is designed to allow sensible overriding of values. Properties are considered in the following order (with values from lower items overriding earlier ones)（1优先级最低，14优先级最高）:</p>
<ol>
<li>Default properties (specified by setting <code>SpringApplication.setDefaultProperties</code>).</li>
<li><a href="https://docs.spring.io/spring/docs/5.3.3/javadoc-api/org/springframework/context/annotation/PropertySource.html"><code>@PropertySource</code></a> annotations on your <code>@Configuration</code> classes. Please note that such property sources are not added to the <code>Environment</code> until the application context is being refreshed. This is too late to configure certain properties such as <code>logging.*</code> and <code>spring.main.*</code> which are read before refresh begins.</li>
<li>Config data (such as <code>application.properties</code> files)</li>
<li>A <code>RandomValuePropertySource</code> that has properties only in <code>random.*</code>.</li>
<li>OS environment variables.</li>
<li>Java System properties (<code>System.getProperties()</code>).</li>
<li>JNDI attributes from <code>java:comp/env</code>.</li>
<li><code>ServletContext</code> init parameters.</li>
<li><code>ServletConfig</code> init parameters.</li>
<li>Properties from <code>SPRING_APPLICATION_JSON</code> (inline JSON embedded in an environment variable or system property).</li>
<li>Command line arguments.</li>
<li><code>properties</code> attribute on your tests. Available on <a href="https://docs.spring.io/spring-boot/docs/2.4.2/api/org/springframework/boot/test/context/SpringBootTest.html"><code>@SpringBootTest</code></a> and the <a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests">test annotations for testing a particular slice of your application</a>.</li>
<li><a href="https://docs.spring.io/spring/docs/5.3.3/javadoc-api/org/springframework/test/context/TestPropertySource.html"><code>@TestPropertySource</code></a> annotations on your tests.</li>
<li><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#using-boot-devtools-globalsettings">Devtools global settings properties</a> in the <code>$HOME/.config/spring-boot</code> directory when devtools is active.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span><span class="comment">//以这种方式可以获得配置值</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li>外部配置源<ul>
<li>Java属性文件。</li>
<li>YAML文件。</li>
<li>环境变量。</li>
<li>命令行参数。</li>
</ul>
</li>
<li>配置文件查找位置<ol>
<li>classpath 根路径。</li>
<li>classpath 根路径下config目录。</li>
<li>jar包当前目录。</li>
<li>jar包当前目录的config目录。</li>
<li>/config子目录的直接子目录。</li>
</ol>
</li>
<li>配置文件加载顺序：<ol>
<li>当前jar包内部的<code>application.properties</code>和<code>application.yml</code>。</li>
<li>当前jar包内部的<code>application-&#123;profile&#125;.properties</code> 和 <code>application-&#123;profile&#125;.yml</code>。</li>
<li>引用的外部jar包的<code>application.properties</code>和<code>application.yml</code>。</li>
<li>引用的外部jar包的<code>application-&#123;profile&#125;.properties</code>和<code>application-&#123;profile&#125;.yml</code>。</li>
</ol>
</li>
<li>指定环境优先，外部优先，后面的可以覆盖前面的同名配置项。</li>
</ul>
<h2 id="自定义starter细节"><a href="#自定义starter细节" class="headerlink" title="自定义starter细节"></a>自定义starter细节</h2><h3 id="starter启动原理"><a href="#starter启动原理" class="headerlink" title="starter启动原理"></a>starter启动原理</h3><ul>
<li>starter的pom.xml引入autoconfigure依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[starter] --&gt;B[autoconfigure]</span><br><span class="line">B --&gt; C[spring-boot-starter]</span><br></pre></td></tr></table></figure>
<ul>
<li><p>autoconfigure包中配置使用<code>META-INF/spring.factories</code>中<code>EnableAutoConfiguration</code>的值，使得项目启动加载指定的自动配置类</p>
</li>
<li><p>编写自动配置类 <code>xxxAutoConfiguration</code> -&gt; <code>xxxxProperties</code></p>
</li>
<li><ul>
<li><code>@Configuration</code></li>
<li><code>@Conditional</code></li>
<li><code>@EnableConfigurationProperties</code></li>
<li><code>@Bean</code></li>
<li>……</li>
</ul>
</li>
<li><p>引入starter — <code>xxxAutoConfiguration</code> — 容器中放入组件 —- <code>绑定xxxProperties</code> —- 配置项</p>
</li>
</ul>
<h3 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h3><ul>
<li><p>目标：创建<code>HelloService</code>的自定义starter。</p>
</li>
<li><p>创建两个工程，分别命名为<code>hello-spring-boot-starter</code>（普通Maven工程），<code>hello-spring-boot-starter-autoconfigure</code>（需用用到Spring Initializr创建的Maven工程）。</p>
</li>
<li><p><code>hello-spring-boot-starter</code>无需编写什么代码，只需让该工程引入<code>hello-spring-boot-starter-autoconfigure</code>依赖：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot-starter-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>hello-spring-boot-starter-autoconfigure</code>的pom.xml如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot-starter-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-boot-starter-autoconfigure<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建4个文件：<ul>
<li><code>com/lun/hello/auto/HelloServiceAutoConfiguration</code></li>
<li><code>com/lun/hello/bean/HelloProperties</code></li>
<li><code>com/lun/hello/service/HelloService</code></li>
<li><code>src/main/resources/META-INF/spring.factories</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lun.hello.bean.HelloProperties;</span><br><span class="line"><span class="keyword">import</span> com.lun.hello.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(HelloService.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HelloProperties.class)</span><span class="comment">//默认HelloProperties放在容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lun.hello.bean.HelloProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认不要放在容器中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String userName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix() + <span class="string">&quot;: &quot;</span> + userName + <span class="string">&quot; &gt; &quot;</span> + helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.lun.hello.auto.HelloServiceAutoConfiguration</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>用maven插件，将两工程install到本地。</p>
</li>
<li><p>接下来，测试使用自定义starter，用Spring Initializr创建名为<code>hello-spring-boot-starter-test</code>工程，引入<code>hello-spring-boot-starter</code>依赖，其pom.xml如下：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-spring-boot-starter-test<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 引入`hello-spring-boot-starter`依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加配置文件<code>application.properties</code>：</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">hello.prefix</span>=<span class="string">hello</span></span><br><span class="line"><span class="meta">hello.suffix</span>=<span class="string">666</span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加单元测试类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lun.hello.service.HelloService;<span class="comment">//来自自定义starter</span></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Assertions;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloSpringBootStarterTestApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// System.out.println(helloService.sayHello(&quot;lun&quot;));</span></span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;hello: lun &gt; 666&quot;</span>, helloService.sayHello(<span class="string">&quot;lun&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="SpringApplication创建初始化流程"><a href="#SpringApplication创建初始化流程" class="headerlink" title="SpringApplication创建初始化流程"></a>SpringApplication创建初始化流程</h1><h3 id="SpringBoot启动过程"><a href="#SpringBoot启动过程" class="headerlink" title="SpringBoot启动过程"></a>SpringBoot启动过程</h3><p>Spring Boot应用的启动类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringBootStarterTestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloSpringBootStarterTestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt; primarySource, String... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> run(<span class="keyword">new</span> Class&lt;?&gt;[] &#123; primarySource &#125;, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt;[] primarySources, String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(primarySources).run(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先看看new SpringApplication(primarySources)，下一节再看看run()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>, primarySources);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">        Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">        <span class="comment">//WebApplicationType是枚举类，有NONE,SERVLET,REACTIVE,下行webApplicationType是SERVLET</span></span><br><span class="line">        <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始启动引导器，去spring.factories文件中找org.springframework.boot.Bootstrapper，但我找不到实现Bootstrapper接口的类</span></span><br><span class="line">        <span class="keyword">this</span>.bootstrappers = <span class="keyword">new</span> ArrayList&lt;&gt;(getSpringFactoriesInstances(Bootstrapper.class));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//去spring.factories找 ApplicationContextInitializer</span></span><br><span class="line">        setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//去spring.factories找 ApplicationListener</span></span><br><span class="line">        setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; deduceMainApplicationClass() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            StackTraceElement[] stackTrace = <span class="keyword">new</span> RuntimeException().getStackTrace();</span><br><span class="line">            <span class="keyword">for</span> (StackTraceElement stackTraceElement : stackTrace) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;main&quot;</span>.equals(stackTraceElement.getMethodName())) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Class.forName(stackTraceElement.getClassName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="comment">// Swallow and continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>spring.factories：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Application Context Initializers</span></span><br><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\</span></span><br><span class="line">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.rsocket.context.RSocketPortInfoApplicationContextInitializer,\</span><br><span class="line"><span class="attr">org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Application Listeners</span></span><br><span class="line"><span class="meta">org.springframework.context.ApplicationListener</span>=<span class="string">\</span></span><br><span class="line">org.springframework.boot.ClearCachesApplicationListener,\</span><br><span class="line">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</span><br><span class="line">org.springframework.boot.context.FileEncodingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.logging.LoggingApplicationListener,\</span><br><span class="line">org.springframework.boot.env.EnvironmentPostProcessorApplicationListener,\</span><br><span class="line"><span class="attr">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener</span></span><br><span class="line"></span><br><span class="line"><span class="attr">...</span></span><br></pre></td></tr></table></figure>
<h1 id="SpringBoot完整启动过程"><a href="#SpringBoot完整启动过程" class="headerlink" title="SpringBoot完整启动过程"></a>SpringBoot完整启动过程</h1><p>继续上一节，接着讨论<code>return new SpringApplication(primarySources).run(args)</code>的<code>run</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        StopWatch stopWatch = <span class="keyword">new</span> StopWatch();<span class="comment">//开始计时器</span></span><br><span class="line">        stopWatch.start();<span class="comment">//开始计时</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        <span class="comment">//创建引导上下文（Context环境）createBootstrapContext()</span></span><br><span class="line">        <span class="comment">//获取到所有之前的 bootstrappers 挨个执行 intitialize() 来完成对引导启动器上下文环境设置</span></span><br><span class="line">        DefaultBootstrapContext bootstrapContext = createBootstrapContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.到最后该方法会返回这context</span></span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.让当前应用进入headless模式</span></span><br><span class="line">        configureHeadlessProperty();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.获取所有 RunListener（运行监听器）,为了方便所有Listener进行事件感知</span></span><br><span class="line">        SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 遍历 SpringApplicationRunListener 调用 starting 方法；</span></span><br><span class="line">        <span class="comment">// 相当于通知所有感兴趣系统正在启动过程的人，项目正在 starting。</span></span><br><span class="line">        listeners.starting(bootstrapContext, <span class="keyword">this</span>.mainApplicationClass);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//6.保存命令行参数 ApplicationArguments</span></span><br><span class="line">            ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//7.准备环境</span></span><br><span class="line">            ConfigurableEnvironment environment = prepareEnvironment(listeners, bootstrapContext, applicationArguments);</span><br><span class="line">            configureIgnoreBeanInfo(environment);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*打印标志</span></span><br><span class="line"><span class="comment">              .   ____          _            __ _ _</span></span><br><span class="line"><span class="comment">             /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="comment">            ( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span></span><br><span class="line"><span class="comment">             \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span></span><br><span class="line"><span class="comment">              &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="comment">             =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="comment">             :: Spring Boot ::                (v2.4.2)</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            Banner printedBanner = printBanner(environment);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建IOC容器（createApplicationContext（））</span></span><br><span class="line">            <span class="comment">// 根据项目类型webApplicationType（NONE,SERVLET,REACTIVE）创建容器，</span></span><br><span class="line">            <span class="comment">// 当前会创建 AnnotationConfigServletWebServerApplicationContext</span></span><br><span class="line">            context = createApplicationContext();</span><br><span class="line">            context.setApplicationStartup(<span class="keyword">this</span>.applicationStartup);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//8.准备ApplicationContext IOC容器的基本信息</span></span><br><span class="line">            prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">            <span class="comment">//9.刷新IOC容器,创建容器中的所有组件,Spring框架的内容</span></span><br><span class="line">            refreshContext(context);</span><br><span class="line">            <span class="comment">//该方法没内容，大概为将来填入</span></span><br><span class="line">            afterRefresh(context, applicationArguments);</span><br><span class="line">            stopWatch.stop();<span class="comment">//停止计时</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;<span class="comment">//this.logStartupInfo默认是true</span></span><br><span class="line">                <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//10.</span></span><br><span class="line">            listeners.started(context);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//11.调用所有runners</span></span><br><span class="line">            callRunners(context, applicationArguments);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="comment">//13.</span></span><br><span class="line">            handleRunFailure(context, ex, listeners);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//12.</span></span><br><span class="line">            listeners.running(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="comment">//13.</span></span><br><span class="line">            handleRunFailure(context, ex, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DefaultBootstrapContext <span class="title">createBootstrapContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultBootstrapContext bootstrapContext = <span class="keyword">new</span> DefaultBootstrapContext();</span><br><span class="line">        <span class="keyword">this</span>.bootstrappers.forEach((initializer) -&gt; initializer.intitialize(bootstrapContext));</span><br><span class="line">        <span class="keyword">return</span> bootstrapContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureHeadlessProperty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//this.headless默认为true</span></span><br><span class="line">        System.setProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS,</span><br><span class="line">                System.getProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, Boolean.toString(<span class="keyword">this</span>.headless)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_PROPERTY_JAVA_AWT_HEADLESS = <span class="string">&quot;java.awt.headless&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SpringApplicationRunListeners <span class="title">getRunListeners</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt;[] types = <span class="keyword">new</span> Class&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;</span><br><span class="line">        <span class="comment">//getSpringFactoriesInstances 去 spring.factories 找 SpringApplicationRunListener</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringApplicationRunListeners(logger,</span><br><span class="line">                getSpringFactoriesInstances(SpringApplicationRunListener.class, types, <span class="keyword">this</span>, args),</span><br><span class="line">                <span class="keyword">this</span>.applicationStartup);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7.准备环境</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">prepareEnvironment</span><span class="params">(SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">            DefaultBootstrapContext bootstrapContext, ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Create and configure the environment</span></span><br><span class="line">        <span class="comment">//返回或者创建基础环境信息对象，如：StandardServletEnvironment, StandardReactiveWebEnvironment</span></span><br><span class="line">        ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class="line">        <span class="comment">//配置环境信息对象,读取所有的配置源的配置属性值。</span></span><br><span class="line">        configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">        <span class="comment">//绑定环境信息</span></span><br><span class="line">        ConfigurationPropertySources.attach(environment);</span><br><span class="line">        <span class="comment">//7.1 通知所有的监听器当前环境准备完成</span></span><br><span class="line">        listeners.environmentPrepared(bootstrapContext, environment);</span><br><span class="line">        DefaultPropertiesPropertySource.moveToEnd(environment);</span><br><span class="line">        configureAdditionalProfiles(environment);</span><br><span class="line">        bindToSpringApplication(environment);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isCustomEnvironment) &#123;</span><br><span class="line">            environment = <span class="keyword">new</span> EnvironmentConverter(getClassLoader()).convertEnvironmentIfNecessary(environment,</span><br><span class="line">                    deduceEnvironmentClass());</span><br><span class="line">        &#125;</span><br><span class="line">        ConfigurationPropertySources.attach(environment);</span><br><span class="line">        <span class="keyword">return</span> environment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">            ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">            ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//保存环境信息</span></span><br><span class="line">        context.setEnvironment(environment);</span><br><span class="line">        <span class="comment">//IOC容器的后置处理流程</span></span><br><span class="line">        postProcessApplicationContext(context);</span><br><span class="line">        <span class="comment">//应用初始化器</span></span><br><span class="line">        applyInitializers(context);</span><br><span class="line">        <span class="comment">//8.1 遍历所有的 listener 调用 contextPrepared。</span></span><br><span class="line">        <span class="comment">//EventPublishRunListenr通知所有的监听器contextPrepared</span></span><br><span class="line">        listeners.contextPrepared(context);</span><br><span class="line">        bootstrapContext.close(context);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">            logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">            logStartupProfileInfo(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Add boot specific singleton beans</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">        beanFactory.registerSingleton(<span class="string">&quot;springApplicationArguments&quot;</span>, applicationArguments);</span><br><span class="line">        <span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">            beanFactory.registerSingleton(<span class="string">&quot;springBootBanner&quot;</span>, printedBanner);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">            ((DefaultListableBeanFactory) beanFactory)</span><br><span class="line">                    .setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.lazyInitialization) &#123;</span><br><span class="line">            context.addBeanFactoryPostProcessor(<span class="keyword">new</span> LazyInitializationBeanFactoryPostProcessor());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Load the sources</span></span><br><span class="line">        Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">        Assert.notEmpty(sources, <span class="string">&quot;Sources must not be empty&quot;</span>);</span><br><span class="line">        load(context, sources.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">//8.2</span></span><br><span class="line">        listeners.contextLoaded(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//11.调用所有runners</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callRunners</span><span class="params">(ApplicationContext context, ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">        List&lt;Object&gt; runners = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取容器中的 ApplicationRunner</span></span><br><span class="line">        runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());</span><br><span class="line">        <span class="comment">//获取容器中的  CommandLineRunner</span></span><br><span class="line">        runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());</span><br><span class="line">        <span class="comment">//合并所有runner并且按照@Order进行排序</span></span><br><span class="line">        AnnotationAwareOrderComparator.sort(runners);</span><br><span class="line">        <span class="comment">//遍历所有的runner。调用 run 方法</span></span><br><span class="line">        <span class="keyword">for</span> (Object runner : <span class="keyword">new</span> LinkedHashSet&lt;&gt;(runners)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (runner <span class="keyword">instanceof</span> ApplicationRunner) &#123;</span><br><span class="line">                callRunner((ApplicationRunner) runner, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (runner <span class="keyword">instanceof</span> CommandLineRunner) &#123;</span><br><span class="line">                callRunner((CommandLineRunner) runner, args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//13.</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleRunFailure</span><span class="params">(ConfigurableApplicationContext context, Throwable exception,</span></span></span><br><span class="line"><span class="function"><span class="params">            SpringApplicationRunListeners listeners)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                handleExitCode(context, exception);</span><br><span class="line">                <span class="keyword">if</span> (listeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//14.</span></span><br><span class="line">                    listeners.failed(context, exception);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">                reportFailure(getExceptionReporters(context), exception);</span><br><span class="line">                <span class="keyword">if</span> (context != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    context.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;Unable to close ApplicationContext&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        ReflectionUtils.rethrowRuntimeException(exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2. new SpringApplication(primarySources).run(args) 最后返回的接口类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConfigurableApplicationContext</span> <span class="keyword">extends</span> <span class="title">ApplicationContext</span>, <span class="title">Lifecycle</span>, <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">    String CONFIG_LOCATION_DELIMITERS = <span class="string">&quot;,; \t\n&quot;</span>;</span><br><span class="line">    String CONVERSION_SERVICE_BEAN_NAME = <span class="string">&quot;conversionService&quot;</span>;</span><br><span class="line">    String LOAD_TIME_WEAVER_BEAN_NAME = <span class="string">&quot;loadTimeWeaver&quot;</span>;</span><br><span class="line">    String ENVIRONMENT_BEAN_NAME = <span class="string">&quot;environment&quot;</span>;</span><br><span class="line">    String SYSTEM_PROPERTIES_BEAN_NAME = <span class="string">&quot;systemProperties&quot;</span>;</span><br><span class="line">    String SYSTEM_ENVIRONMENT_BEAN_NAME = <span class="string">&quot;systemEnvironment&quot;</span>;</span><br><span class="line">    String APPLICATION_STARTUP_BEAN_NAME = <span class="string">&quot;applicationStartup&quot;</span>;</span><br><span class="line">    String SHUTDOWN_HOOK_THREAD_NAME = <span class="string">&quot;SpringContextShutdownHook&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setId</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setParent</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(ConfigurableEnvironment var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ConfigurableEnvironment <span class="title">getEnvironment</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setApplicationStartup</span><span class="params">(ApplicationStartup var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ApplicationStartup <span class="title">getApplicationStartup</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBeanFactoryPostProcessor</span><span class="params">(BeanFactoryPostProcessor var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setClassLoader</span><span class="params">(ClassLoader var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addProtocolResolver</span><span class="params">(ProtocolResolver var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerShutdownHook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isActive</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#4.</span></span><br><span class="line"><span class="comment">#spring.factories</span></span><br><span class="line"><span class="comment"># Run Listeners</span></span><br><span class="line"><span class="meta">org.springframework.boot.SpringApplicationRunListener</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">org.springframework.boot.context.event.EventPublishingRunListener</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringApplicationRunListeners</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Log log;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;SpringApplicationRunListener&gt; listeners;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationStartup applicationStartup;</span><br><span class="line"></span><br><span class="line">    SpringApplicationRunListeners(Log log, Collection&lt;? extends SpringApplicationRunListener&gt; listeners,</span><br><span class="line">            ApplicationStartup applicationStartup) &#123;</span><br><span class="line">        <span class="keyword">this</span>.log = log;</span><br><span class="line">        <span class="keyword">this</span>.listeners = <span class="keyword">new</span> ArrayList&lt;&gt;(listeners);</span><br><span class="line">        <span class="keyword">this</span>.applicationStartup = applicationStartup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.遍历 SpringApplicationRunListener 调用 starting 方法；</span></span><br><span class="line">    <span class="comment">//相当于通知所有感兴趣系统正在启动过程的人，项目正在 starting。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">starting</span><span class="params">(ConfigurableBootstrapContext bootstrapContext, Class&lt;?&gt; mainApplicationClass)</span> </span>&#123;</span><br><span class="line">        doWithListeners(<span class="string">&quot;spring.boot.application.starting&quot;</span>, (listener) -&gt; listener.starting(bootstrapContext),</span><br><span class="line">                (step) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mainApplicationClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        step.tag(<span class="string">&quot;mainApplicationClass&quot;</span>, mainApplicationClass.getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7.1</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">        doWithListeners(<span class="string">&quot;spring.boot.application.environment-prepared&quot;</span>,</span><br><span class="line">                (listener) -&gt; listener.environmentPrepared(bootstrapContext, environment));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.1</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        doWithListeners(<span class="string">&quot;spring.boot.application.context-prepared&quot;</span>, (listener) -&gt; listener.contextPrepared(context));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.2</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        doWithListeners(<span class="string">&quot;spring.boot.application.context-loaded&quot;</span>, (listener) -&gt; listener.contextLoaded(context));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//10.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        doWithListeners(<span class="string">&quot;spring.boot.application.started&quot;</span>, (listener) -&gt; listener.started(context));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//12.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        doWithListeners(<span class="string">&quot;spring.boot.application.running&quot;</span>, (listener) -&gt; listener.running(context));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//14.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">        doWithListeners(<span class="string">&quot;spring.boot.application.failed&quot;</span>,</span><br><span class="line">                (listener) -&gt; callFailedListener(listener, context, exception), (step) -&gt; &#123;</span><br><span class="line">                    step.tag(<span class="string">&quot;exception&quot;</span>, exception.getClass().toString());</span><br><span class="line">                    step.tag(<span class="string">&quot;message&quot;</span>, exception.getMessage());</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doWithListeners</span><span class="params">(String stepName, Consumer&lt;SpringApplicationRunListener&gt; listenerAction,</span></span></span><br><span class="line"><span class="function"><span class="params">            Consumer&lt;StartupStep&gt; stepAction)</span> </span>&#123;</span><br><span class="line">        StartupStep step = <span class="keyword">this</span>.applicationStartup.start(stepName);</span><br><span class="line">        <span class="keyword">this</span>.listeners.forEach(listenerAction);</span><br><span class="line">        <span class="keyword">if</span> (stepAction != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stepAction.accept(step);</span><br><span class="line">        &#125;</span><br><span class="line">        step.end();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="自定义事件监听组件"><a href="#自定义事件监听组件" class="headerlink" title="自定义事件监听组件"></a>自定义事件监听组件</h1><p><code>MyApplicationContextInitializer.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextInitializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyApplicationContextInitializer ....initialize.... &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MyApplicationListener.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyApplicationListener.....onApplicationEvent...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MyApplicationRunner.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="meta">@Component</span><span class="comment">//放入容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyApplicationRunner...run...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MyCommandLineRunner.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 应用启动做一个一次性事情</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="meta">@Component</span><span class="comment">//放入容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyCommandLineRunner....run....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MySpringApplicationRunListener.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.ConfigurableBootstrapContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplicationRunListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.ConfigurableEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SpringApplication application;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySpringApplicationRunListener</span><span class="params">(SpringApplication application, String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.application = application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">(ConfigurableBootstrapContext bootstrapContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener....starting....&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener....environmentPrepared....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener....contextPrepared....&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener....contextLoaded....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener....started....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener....running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener....failed....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注册<code>MyApplicationContextInitializer</code>，<code>MyApplicationListener</code>，<code>MySpringApplicationRunListener</code>:</p>
<p><code>resources / META-INF / spring.factories</code>:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\</span></span><br><span class="line">  <span class="attr">com.lun.boot.listener.MyApplicationContextInitializer</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.context.ApplicationListener</span>=<span class="string">\</span></span><br><span class="line">  <span class="attr">com.lun.boot.listener.MyApplicationListener</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.boot.SpringApplicationRunListener</span>=<span class="string">\</span></span><br><span class="line">  <span class="attr">com.lun.boot.listener.MySpringApplicationRunListener</span></span><br></pre></td></tr></table></figure>
<h1 id="后会有期"><a href="#后会有期" class="headerlink" title="后会有期"></a>后会有期</h1><blockquote>
<p>路漫漫其修远兮，吾将上下而求索。</p>
</blockquote>
<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行。</p>
</blockquote>
<ul>
<li><p>Spring Boot 2 场景整合篇</p>
<ul>
<li>虚拟化技术</li>
<li>安全控制</li>
<li>缓存技术</li>
<li>消息中间件</li>
<li>对象存储</li>
<li>定时调度</li>
<li>异步任务</li>
<li>分布式系统</li>
</ul>
</li>
<li><p>Spring Boot 2 响应式编程</p>
<ul>
<li>响应式编程基础</li>
<li>Webflux开发Web应用</li>
<li>响应式访问持久化层</li>
<li>响应式安全开发</li>
<li>响应式原理</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2 扎记上篇</title>
    <url>/2022/07/03/Spring-boot-dict-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringBoot2笔记上篇"><a href="#SpringBoot2笔记上篇" class="headerlink" title="SpringBoot2笔记上篇"></a>SpringBoot2笔记上篇</h1><h1 id="基础入门-SpringBoot2"><a href="#基础入门-SpringBoot2" class="headerlink" title="基础入门-SpringBoot2"></a>基础入门-SpringBoot2</h1><ol>
<li><p>Spring Boot 2核心技术</p>
</li>
<li><p>Spring Boot 2响应式编程</p>
</li>
</ol>
<ul>
<li>环境要求<ul>
<li>Java8及以上</li>
<li>Maven 3.3及以上</li>
</ul>
</li>
<li>学习资料<ul>
<li><a href="https://spring.io/projects/spring-boot">Spring Boot官网</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/">Spring Boot官方文档</a></li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="Spring生态圈"><a href="#Spring生态圈" class="headerlink" title="Spring生态圈"></a>Spring生态圈</h2><p><a href="https://spring.io/">Spring官网</a></p>
<h2 id="Spring能做什么"><a href="#Spring能做什么" class="headerlink" title="Spring能做什么"></a>Spring能做什么</h2><h3 id="Spring的能力"><a href="#Spring的能力" class="headerlink" title="Spring的能力"></a>Spring的能力</h3><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205004146543.png" width="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Spring的能力</div>
</center>

<h3 id="Spring的生态"><a href="#Spring的生态" class="headerlink" title="Spring的生态"></a>Spring的生态</h3><p>覆盖了：</p>
<ul>
<li>web开发</li>
<li>数据访问</li>
<li>安全控制</li>
<li>分布式</li>
<li>消息服务</li>
<li>移动开发</li>
<li>批处理</li>
<li>……</li>
</ul>
<h3 id="Spring5重大升级"><a href="#Spring5重大升级" class="headerlink" title="Spring5重大升级"></a>Spring5重大升级</h3><ul>
<li>响应式编程</li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205004250581.png" width="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">响应式编程</div>
</center>

<ul>
<li>内部源码设计</li>
</ul>
<p>基于Java8的一些新特性，如：接口默认实现。重新设计源码架构。</p>
<h2 id="为什么用SpringBoot"><a href="#为什么用SpringBoot" class="headerlink" title="为什么用SpringBoot"></a>为什么用SpringBoot</h2><blockquote>
<p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.<a href="https://spring.io/projects/spring-boot">link</a></p>
<p>能快速创建出生产级别的Spring应用。</p>
</blockquote>
<h3 id="SpringBoot优点"><a href="#SpringBoot优点" class="headerlink" title="SpringBoot优点"></a>SpringBoot优点</h3><ul>
<li><p>Create stand-alone Spring applications</p>
<ul>
<li>创建独立Spring应用</li>
</ul>
</li>
<li><p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</p>
<ul>
<li>内嵌web服务器</li>
</ul>
</li>
<li><p>Provide opinionated ‘starter’ dependencies to simplify your build configuration</p>
<ul>
<li>自动starter依赖，简化构建配置</li>
</ul>
</li>
<li><p>Automatically configure Spring and 3rd party libraries whenever possible</p>
<ul>
<li>自动配置Spring以及第三方功能</li>
</ul>
</li>
<li><p>Provide production-ready features such as metrics, health checks, and externalized configuration</p>
<ul>
<li>提供生产级别的监控、健康检查及外部化配置</li>
</ul>
</li>
<li><p>Absolutely no code generation and no requirement for XML configuration</p>
<ul>
<li>无代码生成、无需编写XML</li>
</ul>
</li>
<li><p>SpringBoot是整合Spring技术栈的一站式框架</p>
</li>
<li><p>SpringBoot是简化Spring技术栈的快速开发脚手架</p>
</li>
</ul>
<h3 id="SpringBoot缺点"><a href="#SpringBoot缺点" class="headerlink" title="SpringBoot缺点"></a>SpringBoot缺点</h3><ul>
<li>人称版本帝，迭代快，需要时刻关注变化</li>
<li>封装太深，内部原理复杂，不容易精通</li>
</ul>
<h2 id="SpringBoot的大时代背景"><a href="#SpringBoot的大时代背景" class="headerlink" title="SpringBoot的大时代背景"></a>SpringBoot的大时代背景</h2><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><blockquote>
<p>In short, the <strong>microservice architectural style</strong> is an approach to developing a single application as a <strong>suite of small services</strong>, each <strong>running in its own process</strong> and communicating with <strong>lightweight</strong> mechanisms, often an <strong>HTTP</strong> resource API. These services are built around <strong>business capabilities</strong> and <strong>independently deployable</strong> by fully <strong>automated deployment</strong> machinery. There is a bare minimum of centralized management of these services, which may be <strong>written in different programming languages</strong> and use different data storage technologies.——<a href="https://martinfowler.com/articles/microservices.html">James Lewis and Martin Fowler (2014)</a></p>
</blockquote>
<ul>
<li>微服务是一种架构风格</li>
<li>一个应用拆分为一组小型服务</li>
<li>每个服务运行在自己的进程内，也就是可独立部署和升级</li>
<li>服务之间使用轻量级HTTP交互</li>
<li>服务围绕业务功能拆分</li>
<li>可以由全自动部署机制独立部署</li>
<li>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术</li>
</ul>
<h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/2021020500434620.png" width="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">微服务</div>
</center>

<h4 id="分布式的困难"><a href="#分布式的困难" class="headerlink" title="分布式的困难"></a>分布式的困难</h4><ul>
<li>远程调用</li>
<li>服务发现</li>
<li>负载均衡</li>
<li>服务容错</li>
<li>配置管理</li>
<li>服务监控</li>
<li>链路追踪</li>
<li>日志管理</li>
<li>任务调度</li>
<li>……</li>
</ul>
<h4 id="分布式的解决"><a href="#分布式的解决" class="headerlink" title="分布式的解决"></a>分布式的解决</h4><ul>
<li>SpringBoot + SpringCloud</li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205004523307.png" width="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">分布式解决方案</div>
</center>

<h3 id="云原生"><a href="#云原生" class="headerlink" title="云原生"></a>云原生</h3><p>原生应用如何上云。 Cloud Native</p>
<p><strong>上云的困难</strong></p>
<ul>
<li>服务自愈</li>
<li>弹性伸缩</li>
<li>服务隔离</li>
<li>自动化部署</li>
<li>灰度发布</li>
<li>流量治理</li>
<li>……</li>
</ul>
<h2 id="SpringBoot官方文档架构"><a href="#SpringBoot官方文档架构" class="headerlink" title="SpringBoot官方文档架构"></a>SpringBoot官方文档架构</h2><ul>
<li><a href="https://spring.io/projects/spring-boot">Spring Boot官网</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/">Spring Boot官方文档</a></li>
</ul>
<p><strong>官网文档架构</strong></p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205004733270.png" width="100%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">文档架构</div>
</center>

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205004828702.png" width="100%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">官网文档架构</div>
</center>

<p><a href="https://github.com/spring-projects/spring-boot/wiki#release-notes">查看版本新特性</a></p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205005342147.png" width="90%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">新特性</div>
</center>

<h1 id="SpringBoot-HelloWorld"><a href="#SpringBoot-HelloWorld" class="headerlink" title="SpringBoot-HelloWorld"></a>SpringBoot-HelloWorld</h1><h2 id="Maven配置文件"><a href="#Maven配置文件" class="headerlink" title="Maven配置文件"></a>Maven配置文件</h2><p>新添内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>需求：浏览发送<code>/hello</code>请求，响应 <code>Hello，Spring Boot 2</code></p>
<h2 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建主程序"><a href="#创建主程序" class="headerlink" title="创建主程序"></a>创建主程序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写业务"><a href="#编写业务" class="headerlink" title="编写业务"></a>编写业务</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Spring Boot 2!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运行-amp-测试"><a href="#运行-amp-测试" class="headerlink" title="运行&amp;测试"></a>运行&amp;测试</h3><ul>
<li>运行<code>MainApplication</code>类</li>
<li>浏览器输入<code>http://localhost:8888/hello</code>，将会输出<code>Hello, Spring Boot 2!</code>。</li>
</ul>
<h3 id="设置配置"><a href="#设置配置" class="headerlink" title="设置配置"></a>设置配置</h3><p>maven工程的resource文件夹中创建application.properties文件。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8888</span></span><br></pre></td></tr></table></figure>
<p><a href="https://docs.spring.io/spring-boot/docs/2.3.7.RELEASE/reference/html/appendix-application-properties.html#common-application-properties-server">更多配置信息</a></p>
<h3 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h3><p>在pom.xml添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在IDEA的Maven插件上点击运行 clean 、package，把helloworld工程项目的打包成jar包，</p>
<p>打包好的jar包被生成在helloworld工程项目的target文件夹内。</p>
<p>用cmd运行<code>java -jar boot-01-helloworld-1.0-SNAPSHOT.jar</code>，既可以运行helloworld工程项目。</p>
<p>将jar包直接在目标服务器执行即可。</p>
<h1 id="SpringBoot-依赖管理特性"><a href="#SpringBoot-依赖管理特性" class="headerlink" title="SpringBoot-依赖管理特性"></a>SpringBoot-依赖管理特性</h1><ul>
<li>父项目做依赖管理</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面项目的父项目如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>它几乎声明了所有开发中常用的依赖的版本号，自动版本仲裁机制</p>
<ul>
<li>开发导入starter场景启动器<ol>
<li>见到很多 spring-boot-starter-* ： *就某种场景</li>
<li>只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</li>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">更多SpringBoot所有支持的场景</a></li>
<li>见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。</li>
</ol>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">所有场景启动器最底层的依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>无需关注版本号，自动版本仲裁</p>
<ol>
<li>引入依赖默认都可以不写版本</li>
<li>引入非版本仲裁的jar，要写版本号。</li>
</ol>
</li>
<li><p>可以修改默认版本号</p>
<ol>
<li>查看spring-boot-dependencies里面规定当前依赖的版本用的 key。</li>
<li>在当前项目里面重写配置，如下面的代码。</li>
</ol>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>IDEA快捷键：</p>
<ul>
<li><code>ctrl + shift + alt + U</code>：以图的方式显示项目中依赖之间的关系。</li>
<li><code>alt + ins</code>：相当于Eclipse的 Ctrl + N，创建新类，新包等。</li>
</ul>
<h1 id="SpringBoot-自动配置特性"><a href="#SpringBoot-自动配置特性" class="headerlink" title="SpringBoot-自动配置特性"></a><a id="SpringBootAutoConfig">SpringBoot-自动配置特性</a></h1><ul>
<li>自动配好Tomcat<ul>
<li>引入Tomcat依赖。</li>
<li>配置Tomcat</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>自动配好SpringMVC</p>
<ul>
<li>引入SpringMVC全套组件</li>
<li>自动配好SpringMVC常用组件（功能）</li>
</ul>
</li>
<li><p>自动配好Web常见功能，如：字符编码问题</p>
<ul>
<li>SpringBoot帮我们配置好了<strong>所有web开发的常见场景</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">    ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">    String[] names = run.getBeanDefinitionNames();</span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>默认的包结构<ul>
<li>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</li>
<li>无需以前的包扫描配置</li>
<li>想要改变扫描路径<ul>
<li><code>@SpringBootApplication(scanBasePackages=&quot;com.lun&quot;)</code></li>
<li><code>@ComponentScan</code> 指定扫描路径</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.lun&quot;)</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>各种配置拥有默认值</p>
<ul>
<li>默认配置最终都是映射到某个类上，如：<code>MultipartProperties</code></li>
<li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li>
</ul>
</li>
<li><p>按需加载所有自动配置项</p>
<ul>
<li>非常多的starter</li>
<li>引入了哪些场景这个场景的自动配置才会开启</li>
<li>SpringBoot所有的自动配置功能都在 <code>spring-boot-autoconfigure</code> 包里面</li>
</ul>
</li>
</ul>
<h1 id="底层注解"><a href="#底层注解" class="headerlink" title="底层注解"></a>底层注解</h1><h2 id="Configuration详解"><a href="#Configuration详解" class="headerlink" title="@Configuration详解"></a>@Configuration详解</h2><ul>
<li>基本使用<ul>
<li>Full模式与Lite模式</li>
<li>示例</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、配置类里面使用<span class="doctag">@Bean</span>标注在方法上给容器注册组件，默认也是单实例的</span></span><br><span class="line"><span class="comment"> * 2、配置类本身也是组件</span></span><br><span class="line"><span class="comment"> * 3、proxyBeanMethods：代理bean的方法</span></span><br><span class="line"><span class="comment"> *      Full(proxyBeanMethods = true)（保证每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是单实例的）（默认）</span></span><br><span class="line"><span class="comment"> *      Lite(proxyBeanMethods = false)（每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是新创建的）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User zhangsan = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//user组件依赖了Pet组件</span></span><br><span class="line">        zhangsan.setPet(tomcatPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;tom&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcatPet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Configuration</code>测试代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.shimmer.boot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">        String[] names = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、从容器中获取组件</span></span><br><span class="line">        Pet tom01 = run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line">        Pet tom02 = run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;组件：&quot;</span>+(tom01 == tom02));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、com.shimmer.boot.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892</span></span><br><span class="line">        MyConfig bean = run.getBean(MyConfig.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果@Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。</span></span><br><span class="line">        <span class="comment">//保持组件单实例</span></span><br><span class="line">        User user = bean.user01();</span><br><span class="line">        User user1 = bean.user01();</span><br><span class="line">        System.out.println(user == user1);</span><br><span class="line"></span><br><span class="line">        User user01 = run.getBean(<span class="string">&quot;user01&quot;</span>, User.class);</span><br><span class="line">        Pet tom = run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;用户的宠物：&quot;</span>+(user01.getPet() == tom));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>最佳实战<ul>
<li>配置类组件之间<strong>无依赖关系</strong>用Lite模式加速容器启动过程，减少判断</li>
<li>配置类组件之间<strong>有依赖关系</strong>，方法会被调用得到之前单实例组件，用Full模式（默认）</li>
</ul>
</li>
</ul>
<hr>
<p>IDEA快捷键：</p>
<ul>
<li><code>Alt + Ins</code>:生成getter，setter、构造器等代码。</li>
<li><code>Ctrl + Alt + B</code>:查看类的具体实现代码。</li>
</ul>
<h2 id="Import导入组件"><a href="#Import导入组件" class="headerlink" title="@Import导入组件"></a>@Import导入组件</h2><p><code>@Bean</code>、<code>@Component</code>、<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code>，它们是Spring的基本标签，在Spring Boot中并未改变它们原来的功能。</p>
<p><code>@ComponentScan</code> 在<a href="#SpringBootAutoConfig">SpringBoot-自动配置特性</a>有用例。</p>
<p><code>@Import(&#123;User.class, DBHelper.class&#125;)</code>给容器中<strong>自动创建出这两个类型的组件</strong>，默认组件的名字就是全类名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;User.class, DBHelper.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5、获取组件</span></span><br><span class="line">String[] beanNamesForType = run.getBeanNamesForType(User.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String s : beanNamesForType) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DBHelper bean1 = run.getBean(DBHelper.class);</span><br><span class="line">System.out.println(bean1);</span><br></pre></td></tr></table></figure>
<h2 id="Conditional条件装配"><a href="#Conditional条件装配" class="headerlink" title="@Conditional条件装配"></a>@Conditional条件装配</h2><p><strong>条件装配：满足Conditional指定的条件，则进行组件注入</strong></p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205005453173.png" width="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">组件注入</div>
</center>

<p>用<code>@ConditionalOnMissingBean</code>举例说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;tom&quot;)</span><span class="comment">//没有tom名字的Bean时，MyConfig类的Bean才能生效。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User zhangsan = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        zhangsan.setPet(tomcatPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;tom22&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcatPet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">    ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">    String[] names = run.getBeanDefinitionNames();</span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> tom = run.containsBean(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;容器中Tom组件：&quot;</span>+tom);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> user01 = run.containsBean(<span class="string">&quot;user01&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;容器中user01组件：&quot;</span>+user01);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> tom22 = run.containsBean(<span class="string">&quot;tom22&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;容器中tom22组件：&quot;</span>+tom22);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ImportResource导入Spring配置文件"><a href="#ImportResource导入Spring配置文件" class="headerlink" title="@ImportResource导入Spring配置文件"></a>@ImportResource导入Spring配置文件</h2><p>比如，公司使用<code>bean.xml</code>文件生成配置bean，然而你为了省事，想继续复用<code>bean.xml</code>，<code>@ImportResource</code>粉墨登场。</p>
<p><strong>bean.xml：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&quot;&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;haha&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lun.boot.bean.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hehe&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lun.boot.bean.Pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tomcat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">    ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> haha = run.containsBean(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">    <span class="keyword">boolean</span> hehe = run.containsBean(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;haha：&quot;</span>+haha);<span class="comment">//true</span></span><br><span class="line">    System.out.println(<span class="string">&quot;hehe：&quot;</span>+hehe);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ConfigurationProperties配置绑定"><a href="#ConfigurationProperties配置绑定" class="headerlink" title="@ConfigurationProperties配置绑定"></a>@ConfigurationProperties配置绑定</h2><p>如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用</p>
<p><strong>传统方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getProperties</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">         Properties pps = <span class="keyword">new</span> Properties();</span><br><span class="line">         pps.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.properties&quot;</span>));</span><br><span class="line">         Enumeration enum1 = pps.propertyNames();<span class="comment">//得到配置文件的名字</span></span><br><span class="line">         <span class="keyword">while</span>(enum1.hasMoreElements()) &#123;</span><br><span class="line">             String strKey = (String) enum1.nextElement();</span><br><span class="line">             String strValue = pps.getProperty(strKey);</span><br><span class="line">             System.out.println(strKey + <span class="string">&quot;=&quot;</span> + strValue);</span><br><span class="line">             <span class="comment">//封装到JavaBean。</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>Spring Boot一种<strong>配置绑定</strong>：</p>
<p><code>@ConfigurationProperties</code> + <code>@Component</code></p>
<p>假设有配置文件application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">mycar.brand</span>=<span class="string">BYD</span></span><br><span class="line"><span class="meta">mycar.price</span>=<span class="string">100000</span></span><br></pre></td></tr></table></figure>
<p>只有在容器中的组件，才会拥有SpringBoot提供的强大功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>Spring Boot另一种<strong>配置绑定</strong>：</p>
<p><code>@EnableConfigurationProperties</code> + <code>@ConfigurationProperties</code></p>
<ol>
<li>开启Car配置绑定功能</li>
<li>把这个Car这个组件自动注册到容器中</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="自动配置包规则原理"><a href="#自动配置包规则原理" class="headerlink" title="自动配置包规则原理"></a>自动配置包规则原理</h1><p>Spring Boot应用的启动类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析下<code>@SpringBootApplication</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重点分析<code>@SpringBootConfiguration</code>，<code>@EnableAutoConfiguration</code>，<code>@ComponentScan</code>。</p>
<h2 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Configuration.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Configuration</code>代表当前是一个配置类。</p>
<h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><p>指定扫描哪些Spring注解。可见上面的示例</p>
<h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重点分析<code>@AutoConfigurationPackage</code>，<code>@Import(AutoConfigurationImportSelector.class)</code>。</p>
<h3 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h3><p>标签名直译为：自动配置包，指定了默认的包规则。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span><span class="comment">//给容器中导入一个组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;</span><br><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>利用Registrar给容器中导入一系列组件</li>
<li>将指定的一个包下的所有组件导入进MainApplication所在包下。</li>
</ol>
<h2 id="初始加载自动配置类"><a href="#初始加载自动配置类" class="headerlink" title="初始加载自动配置类"></a>初始加载自动配置类</h2><h3 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import(AutoConfigurationImportSelector.class)"></a>@Import(AutoConfigurationImportSelector.class)</h3><ol>
<li>利用<code>getAutoConfigurationEntry(annotationMetadata);</code>给容器中批量导入一些组件</li>
<li>调用<code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)</code>获取到所有需要导入到容器中的配置类</li>
<li>利用工厂加载 <code>Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader);</code>得到所有的组件</li>
<li>从<code>META-INF/spring.factories</code>位置来加载一个文件。<ul>
<li>默认扫描我们当前系统里面所有<code>META-INF/spring.factories</code>位置的文件</li>
<li><code>spring-boot-autoconfigure-2.3.4.RELEASE.jar</code>包里面也有<code>META-INF/spring.factories</code></li>
</ul>
</li>
</ol>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205005536620.png" width="100%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">加载自动配置类</div>
</center>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件里面写死了spring-boot一启动就要给容器中加载的所有配置类</span></span><br><span class="line"><span class="comment"># spring-boot-autoconfigure-2.3.4.RELEASE.jar/META-INF/spring.factories</span></span><br><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line"><span class="attr">...</span></span><br></pre></td></tr></table></figure>
<p>虽然我们127个场景的所有自动配置启动的时候默认全部加载，但是<code>xxxxAutoConfiguration</code>按照条件装配规则（<code>@Conditional</code>），最终会按需配置。</p>
<p>如<code>AopAutoConfiguration</code>类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.aop&quot;,</span></span><br><span class="line"><span class="meta">    name = &quot;auto&quot;,</span></span><br><span class="line"><span class="meta">    havingValue = &quot;true&quot;,</span></span><br><span class="line"><span class="meta">    matchIfMissing = true</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AopAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自动配置流程"><a href="#自动配置流程" class="headerlink" title="自动配置流程"></a>自动配置流程</h2><p>以<code>DispatcherServletAutoConfiguration</code>的内部类<code>DispatcherServletConfiguration</code>为例子:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(MultipartResolver.class)</span>  <span class="comment">//容器中有这个类型组件</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span> <span class="comment">//容器中没有这个名字 multipartResolver 的组件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span></span><br><span class="line">    <span class="comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span></span><br><span class="line">    <span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line">    <span class="keyword">return</span> resolver;<span class="comment">//给容器中加入了文件上传解析器；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SpringBoot默认会在底层配好所有的组件，但是<strong>如果用户自己配置了以用户的优先</strong>。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul>
<li>SpringBoot先加载所有的自动配置类  <code>xxxxxAutoConfiguration</code></li>
<li>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。（<code>xxxxProperties</code>里面读取，<code>xxxProperties</code>和配置文件进行了绑定）</li>
<li>生效的配置类就会给容器中装配很多组件</li>
<li>只要容器中有这些组件，相当于这些功能就有了</li>
<li>定制化配置<ul>
<li>用户直接自己<code>@Bean</code>替换底层的组件</li>
<li>用户去看这个组件是获取的配置文件什么值就去修改。</li>
</ul>
</li>
</ul>
<p><strong>xxxxxAutoConfiguration —&gt; 组件 —&gt; xxxxProperties里面拿值  —-&gt; application.properties</strong></p>
<h1 id="SpringBoot应用编写"><a href="#SpringBoot应用编写" class="headerlink" title="SpringBoot应用编写"></a>SpringBoot应用编写</h1><ul>
<li>引入场景依赖<ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">官方文档</a></li>
</ul>
</li>
<li>查看自动配置了哪些（选做）<ul>
<li>自己分析，引入场景对应的自动配置一般都生效了</li>
<li>配置文件中debug=true开启自动配置报告。<ul>
<li>Negative（不生效）</li>
<li>Positive（生效）</li>
</ul>
</li>
</ul>
</li>
<li>是否需要修改<ul>
<li>参照文档修改配置项<ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties">官方文档</a></li>
<li>自己分析。xxxxProperties绑定了配置文件的哪些。</li>
</ul>
</li>
<li>自定义加入或者替换组件<ul>
<li>@Bean、@Component…</li>
</ul>
</li>
<li>自定义器  XXXXXCustomizer；</li>
<li>……</li>
</ul>
</li>
</ul>
<h2 id="Lombok简化开发"><a href="#Lombok简化开发" class="headerlink" title="Lombok简化开发"></a>Lombok简化开发</h2><p>Lombok用标签方式代替构造器、getter/setter、toString()等鸡肋代码。</p>
<p>spring boot已经管理Lombok。引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>IDEA中File-&gt;Settings-&gt;Plugins，搜索安装Lombok插件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name,Integer age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>简化日志开发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle01</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;请求进来了....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Spring Boot 2!&quot;</span>+<span class="string">&quot;你好：&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="dev-tools"><a href="#dev-tools" class="headerlink" title="dev-tools"></a>dev-tools</h2><blockquote>
<p>Spring Boot includes an additional set of tools that can make the application development experience a little more pleasant. The <code>spring-boot-devtools</code> module can be included in any project to provide additional development-time features.——<a href="https://docs.spring.io/spring-boot/docs/2.3.8.RELEASE/reference/html/using-spring-boot.html#using-boot-devtools">link</a></p>
<p>Applications that use <code>spring-boot-devtools</code> automatically restart whenever files on the classpath change. This can be a useful feature when working in an IDE, as it gives a very fast feedback loop for code changes. By default, any entry on the classpath that points to a directory is monitored for changes. Note that certain resources, such as static assets and view templates, <a href="https://docs.spring.io/spring-boot/docs/2.3.8.RELEASE/reference/html/using-spring-boot.html#using-boot-devtools-restart-exclude">do not need to restart the application</a>.——<a href="https://docs.spring.io/spring-boot/docs/2.3.8.RELEASE/reference/html/using-spring-boot.html#using-boot-devtools-restart">link</a></p>
<p>Triggering a restart</p>
<p>As DevTools monitors classpath resources, the only way to trigger a restart is to update the classpath. The way in which you cause the classpath to be updated depends on the IDE that you are using:</p>
<ul>
<li>In Eclipse, saving a modified file causes the classpath to be updated and triggers a restart.</li>
<li>In IntelliJ IDEA, building the project (<code>Build -&gt; Build Project</code>)(shortcut: Ctrl+F9) has the same effect.</li>
</ul>
</blockquote>
<p>添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在IDEA中，项目或者页面修改以后：Ctrl+F9。</p>
<h2 id="Spring-Initailizr"><a href="#Spring-Initailizr" class="headerlink" title="Spring Initailizr"></a>Spring Initailizr</h2><p><a href="https://start.spring.io/">Spring Initailizr</a>是创建Spring Boot工程向导。</p>
<p>在IDEA中，菜单栏New -&gt; Project -&gt; Spring Initailizr。</p>
<h2 id="yaml的用法"><a href="#yaml的用法" class="headerlink" title="yaml的用法"></a>yaml的用法</h2><p>同以前的properties用法</p>
<p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p>
<p><strong>非常适合用来做以数据为中心的配置文件</strong>。</p>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul>
<li>key: value；kv之间有空格</li>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进不允许使用tab，只允许空格</li>
<li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li>
<li>‘#’表示注释</li>
<li>字符串无需加引号，如果要加，单引号’’、双引号””表示字符串内容会被 转义、不转义</li>
</ul>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">k:</span> <span class="string">v</span></span><br></pre></td></tr></table></figure>
<ul>
<li>对象：键值对的集合。map、hash、set、object </li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#行内写法：  </span></span><br><span class="line"></span><br><span class="line"><span class="attr">k:</span> &#123;<span class="string">k1:v1</span>,<span class="string">k2:v2</span>,<span class="string">k3:v3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">  <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">k3:</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure>
<ul>
<li>数组：一组按次序排列的值。array、list、queue</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#行内写法：  </span></span><br><span class="line"></span><br><span class="line"><span class="attr">k:</span> [<span class="string">v1</span>,<span class="string">v2</span>,<span class="string">v3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"></span><br><span class="line"><span class="attr">k:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v2</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line">    <span class="keyword">private</span> String[] interests;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; animal;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; score;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Double&gt; salarys;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用yaml表示以上对象</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">userName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2019</span><span class="string">/12/12</span> <span class="number">20</span><span class="string">:12:33</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">pet:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">weight:</span> <span class="number">23.4</span></span><br><span class="line">  <span class="attr">interests:</span> [<span class="string">篮球</span>,<span class="string">游泳</span>]</span><br><span class="line">  <span class="attr">animal:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">jerry</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mario</span></span><br><span class="line">  <span class="attr">score:</span></span><br><span class="line">    <span class="attr">english:</span> </span><br><span class="line">      <span class="attr">first:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">second:</span> <span class="number">40</span></span><br><span class="line">      <span class="attr">third:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">math:</span> [<span class="number">131</span>,<span class="number">140</span>,<span class="number">148</span>]</span><br><span class="line">    <span class="attr">chinese:</span> &#123;<span class="attr">first:</span> <span class="number">128</span>,<span class="attr">second:</span> <span class="number">136</span>&#125;</span><br><span class="line">  <span class="attr">salarys:</span> [<span class="number">3999</span>,<span class="number">4999.98</span>,<span class="number">5999.99</span>]</span><br><span class="line">  <span class="attr">allPets:</span></span><br><span class="line">    <span class="attr">sick:</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tom</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">jerry</span>,<span class="attr">weight:</span> <span class="number">47</span>&#125;</span><br><span class="line">    <span class="attr">health:</span> [&#123;<span class="attr">name:</span> <span class="string">mario</span>,<span class="attr">weight:</span> <span class="number">47</span>&#125;]</span><br></pre></td></tr></table></figure>
<h2 id="自定义类绑定的配置提示"><a href="#自定义类绑定的配置提示" class="headerlink" title="自定义类绑定的配置提示"></a>自定义类绑定的配置提示</h2><blockquote>
<p>You can easily generate your own configuration metadata file from items annotated with <code>@ConfigurationProperties</code> by using the <code>spring-boot-configuration-processor</code> jar. The jar includes a Java annotation processor which is invoked as your project is compiled.——<a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#configuration-metadata-annotation-processor">link</a></p>
</blockquote>
<p>自定义的类和配置文件绑定一般没有提示。若要提示，添加如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 下面插件作用是工程打包时，不将spring-boot-configuration-processor打进包内，让其只在编码的时候有用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="web开发简介"><a href="#web开发简介" class="headerlink" title="web开发简介"></a>web开发简介</h1><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p>
<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>
<ul>
<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>
<ul>
<li>内容协商视图解析器和BeanName视图解析器</li>
</ul>
</li>
<li><p>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content">later in this document</a>)).</p>
<ul>
<li>静态资源（包括webjars）</li>
</ul>
</li>
<li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p>
<ul>
<li>自动注册 <code>Converter，GenericConverter，Formatter </code></li>
</ul>
</li>
<li><p>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters">later in this document</a>).</p>
<ul>
<li>支持 <code>HttpMessageConverters</code> （后来我们配合内容协商理解原理）</li>
</ul>
</li>
<li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes">later in this document</a>).</p>
<ul>
<li>自动注册 <code>MessageCodesResolver</code> （国际化用）</li>
</ul>
</li>
<li><p>Static <code>index.html</code> support.</p>
<ul>
<li>静态index.html 页支持</li>
</ul>
</li>
<li><p>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon">later in this document</a>).</p>
<ul>
<li>自定义 <code>Favicon</code>  </li>
</ul>
</li>
<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer">later in this document</a>).</p>
<ul>
<li>自动使用 <code>ConfigurableWebBindingInitializer</code> ，（DataBinder负责将请求数据绑定到JavaBean上）</li>
</ul>
</li>
</ul>
<blockquote>
<p>If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p>
<p><strong>不用@EnableWebMvc注解。使用</strong> <strong><code>@Configuration</code></strong> <strong>+</strong> <strong><code>WebMvcConfigurer</code></strong> <strong>自定义规则</strong></p>
</blockquote>
<blockquote>
<p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p>
<p><strong>声明</strong> <strong><code>WebMvcRegistrations</code></strong> <strong>改变默认底层组件</strong></p>
</blockquote>
<blockquote>
<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p>
<p><strong>使用</strong> <strong><code>@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC</code></strong></p>
</blockquote>
<h2 id="静态资源规则与定制化"><a href="#静态资源规则与定制化" class="headerlink" title="静态资源规则与定制化"></a>静态资源规则与定制化</h2><h3 id="静态资源目录"><a href="#静态资源目录" class="headerlink" title="静态资源目录"></a>静态资源目录</h3><p>只要静态资源放在类路径下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p>
<p>访问 ： 当前项目根路径/ + 静态资源名 </p>
<p>原理： 静态映射/**。</p>
<p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面。</p>
<p>也可以改变默认的静态资源路径，<code>/static</code>，<code>/public</code>,<code>/resources</code>, <code>/META-INF/resources</code>失效</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure>
<h3 id="静态资源访问前缀"><a href="#静态资源访问前缀" class="headerlink" title="静态资源访问前缀"></a>静态资源访问前缀</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></table></figure>
<p>当前项目 + static-path-pattern + 静态资源名 = 静态资源文件夹下找</p>
<h3 id="webjar"><a href="#webjar" class="headerlink" title="webjar"></a>webjar</h3><p>可用jar方式添加css，js等资源文件，<a href="https://www.webjars.org/">https://www.webjars.org/</a>。例如，添加jquery</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/<strong>jquery/3.5.1/jquery.js</strong></a>  后面地址要按照依赖里面的包路径。</p>
<h2 id="welcome与favicon功能"><a href="#welcome与favicon功能" class="headerlink" title="welcome与favicon功能"></a>welcome与favicon功能</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.3.8.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-welcome-page">官方文档</a></p>
<h3 id="欢迎页支持"><a href="#欢迎页支持" class="headerlink" title="欢迎页支持"></a>欢迎页支持</h3><ul>
<li><p>静态资源路径下 index.html。</p>
<ul>
<li>可以配置静态资源路径</li>
<li>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   这个会导致welcome page功能失效</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>controller能处理/index。</li>
</ul>
<h3 id="自定义Favicon"><a href="#自定义Favicon" class="headerlink" title="自定义Favicon"></a>自定义Favicon</h3><p>指网页标签上的小图标。</p>
<p>favicon.ico 放在静态资源目录下即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span></span><br></pre></td></tr></table></figure>
<h2 id="静态资源原理"><a href="#静态资源原理" class="headerlink" title="静态资源原理"></a>静态资源原理</h2><ul>
<li>SpringBoot启动默认加载  <code>xxxAutoConfiguration</code> 类（自动配置类）</li>
<li>SpringMVC功能的自动配置类<code>WebMvcAutoConfiguration</code>，生效</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">        ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>给容器中配置的内容：<ul>
<li>配置文件的相关属性的绑定：<code>WebMvcProperties==spring.mvc</code>、<code>ResourceProperties==spring.resources</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置类只有一个有参构造器"><a href="#配置类只有一个有参构造器" class="headerlink" title="配置类只有一个有参构造器"></a>配置类只有一个有参构造器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">////有参构造器所有参数的值都会从容器中确定</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebMvcAutoConfigurationAdapter</span><span class="params">(WebProperties webProperties, WebMvcProperties mvcProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">        ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">        ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">        ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span></span><br><span class="line"><span class="function"><span class="params">        ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mvcProperties = mvcProperties;</span><br><span class="line">    <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">    <span class="keyword">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line">    <span class="keyword">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line">    <span class="keyword">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line">    <span class="keyword">this</span>.servletRegistrations = servletRegistrations;</span><br><span class="line">    <span class="keyword">this</span>.mvcProperties.checkConfiguration();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</li>
<li>WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</li>
<li>ListableBeanFactory beanFactory Spring的beanFactory</li>
<li>HttpMessageConverters 找到所有的HttpMessageConverters</li>
<li>ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。</li>
<li>DispatcherServletPath</li>
<li>ServletRegistrationBean   给应用注册Servlet、Filter….</li>
</ul>
<h3 id="资源处理的默认规则"><a href="#资源处理的默认规则" class="headerlink" title="资源处理的默认规则"></a>资源处理的默认规则</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ServletContext servletContext = getServletContext();</span><br><span class="line">            addResourceHandler(registry, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">            addResourceHandler(registry, <span class="keyword">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">                registration.addResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">                <span class="keyword">if</span> (servletContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    registration.addResourceLocations(<span class="keyword">new</span> ServletContextResource(servletContext, SERVLET_LOCATION));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据上述代码，我们可以同过配置禁止所有静态资源规则。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">add-mappings:</span> <span class="literal">false</span>   <span class="comment">#禁用所有静态资源规则</span></span><br></pre></td></tr></table></figure>
<p>静态资源规则：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Locations of static resources. Defaults to classpath:[/META-INF/resources/,</span></span><br><span class="line"><span class="comment">     * /resources/, /static/, /public/].</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="欢迎页的处理规则"><a href="#欢迎页的处理规则" class="headerlink" title="欢迎页的处理规则"></a>欢迎页的处理规则</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="function"><span class="params">                FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">            WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line">                    <span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line">                    <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">            welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">            welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line">            <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p><code>WelcomePageHandlerMapping</code>的构造方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class="line">                          ApplicationContext applicationContext, Resource welcomePage, String staticPathPattern) &#123;</span><br><span class="line">    <span class="keyword">if</span> (welcomePage != <span class="keyword">null</span> &amp;&amp; <span class="string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;</span><br><span class="line">        <span class="comment">//要用欢迎页功能，必须是/**</span></span><br><span class="line">        logger.info(<span class="string">&quot;Adding welcome page: &quot;</span> + welcomePage);</span><br><span class="line">        setRootViewName(<span class="string">&quot;forward:index.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">        <span class="comment">//调用Controller /index</span></span><br><span class="line">        logger.info(<span class="string">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class="line">        setRootViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这构造方法内的代码也解释了<a href="#">web场景-welcome与favicon功能</a>中配置<code>static-path-pattern</code>了，welcome页面和小图标失效的问题。</p>
<h1 id="Rest映射及源码解析"><a href="#Rest映射及源码解析" class="headerlink" title="Rest映射及源码解析"></a>Rest映射及源码解析</h1><h3 id="请求映射"><a href="#请求映射" class="headerlink" title="请求映射"></a>请求映射</h3><ul>
<li><p>@xxxMapping;</p>
<ul>
<li>@GetMapping</li>
<li>@PostMapping</li>
<li>@PutMapping</li>
<li>@DeleteMapping</li>
</ul>
</li>
<li><p>Rest风格支持（使用<strong>HTTP</strong>请求方式动词来表示对资源的操作）</p>
<ul>
<li>以前：<ul>
<li>/getUser 获取用户</li>
<li>/deleteUser 删除用户</li>
<li>/editUser 修改用户</li>
<li>/saveUser保存用户</li>
</ul>
</li>
<li>现在： /user <ul>
<li>GET-获取用户</li>
<li>DELETE-删除用户</li>
<li>PUT-修改用户</li>
<li>POST-保存用户</li>
</ul>
</li>
<li>核心Filter；<strong>HiddenHttpMethodFilter</strong></li>
</ul>
</li>
<li><p><strong>用法</strong></p>
<ul>
<li>开启页面表单的Rest功能</li>
<li>页面 form的属性<code>method=pos</code>t，隐藏域<code> \_method=put</code>、<code>delete</code>等（如果直接get或post，无需隐藏域）</li>
<li>编写请求映射</li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>   <span class="comment">#开启页面表单的Rest功能</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-GET提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-POST提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-DELETE 提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-PUT提交&quot;</span><span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;GET-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;POST-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;PUT-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;DELETE-张三&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Rest原理（表单提交要使用REST的时候）<ul>
<li>表单提交会带上<code>\_method=PUT</code></li>
<li><strong>请求过来被</strong><code>HiddenHttpMethodFilter</code>拦截<ul>
<li>请求是否正常，并且是POST<ul>
<li>获取到<code>\_method</code>的值。</li>
<li>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li>
<li><strong>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。</strong></li>
<li><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用requestWrapper的。</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiddenHttpMethodFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; ALLOWED_METHODS =</span><br><span class="line">            Collections.unmodifiableList(Arrays.asList(HttpMethod.PUT.name(),</span><br><span class="line">                    HttpMethod.DELETE.name(), HttpMethod.PATCH.name()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Default method parameter: &#123;<span class="doctag">@code</span> _method&#125;. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_METHOD_PARAM = <span class="string">&quot;_method&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String methodParam = DEFAULT_METHOD_PARAM;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the parameter name to look for HTTP methods.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #DEFAULT_METHOD_PARAM</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethodParam</span><span class="params">(String methodParam)</span> </span>&#123;</span><br><span class="line">        Assert.hasText(methodParam, <span class="string">&quot;&#x27;methodParam&#x27; must not be empty&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.methodParam = methodParam;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest requestToUse = request;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            String paramValue = request.getParameter(<span class="keyword">this</span>.methodParam);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line">                String method = paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line">                <span class="keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;</span><br><span class="line">                    requestToUse = <span class="keyword">new</span> HttpMethodRequestWrapper(request, method);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(requestToUse, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Simple &#123;<span class="doctag">@link</span> HttpServletRequest&#125; wrapper that returns the supplied method for</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> HttpServletRequest#getMethod()&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpMethodRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String method;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HttpMethodRequestWrapper</span><span class="params">(HttpServletRequest request, String method)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(request);</span><br><span class="line">            <span class="keyword">this</span>.method = method;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.method;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Rest使用客户端工具。<ul>
<li>如PostMan可直接发送put、delete等方式请求。</li>
</ul>
</li>
</ul>
<h2 id="怎么改变默认的-method"><a href="#怎么改变默认的-method" class="headerlink" title="怎么改变默认的_method"></a>怎么改变默认的_method</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">        ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title">hiddenHttpMethodFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderedHiddenHttpMethodFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</code>意味着在没有<code>HiddenHttpMethodFilter</code>时，才执行<code>hiddenHttpMethodFilter()</code>。因此，我们可以自定义filter，改变默认的<code>\_method</code>。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span></span>&#123;</span><br><span class="line">    <span class="comment">//自定义filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HiddenHttpMethodFilter <span class="title">hiddenHttpMethodFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HiddenHttpMethodFilter methodFilter = <span class="keyword">new</span> HiddenHttpMethodFilter();</span><br><span class="line">        methodFilter.setMethodParam(<span class="string">&quot;_m&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> methodFilter;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将<code>\_method</code>改成<code>_m</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_m&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-DELETE 提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="请求映射原理"><a href="#请求映射原理" class="headerlink" title="请求映射原理"></a>请求映射原理</h2><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205005703527.png" width="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">请求映射</div>
</center>

<p>SpringMVC功能分析都从 <code>org.springframework.web.servlet.DispatcherServlet</code> -&gt; <code>doDispatch()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    HttpServletRequest processedRequest = request;</span><br><span class="line">    HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">        Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 找到当前请求使用哪个Handler（Controller的方法）处理</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//HandlerMapping：处理器映射。/xxx-&gt;&gt;xxxx</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>getHandler()</code>方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (HandlerMapping mapping : <span class="keyword">this</span>.handlerMappings) &#123;</span><br><span class="line">            HandlerExecutionChain handler = mapping.getHandler(request);</span><br><span class="line">            <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> handler;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>this.handlerMappings</code>在Debug模式下展现的内容：</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205005802305.png" width="90%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Debug模式</div>
</center>

<p>其中，保存了所有<code>@RequestMapping</code> 和<code>handler</code>的映射规则。</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205005926474.png" width="90%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Debug模式</div>
</center>

<p>所有的请求映射都在HandlerMapping中：</p>
<ul>
<li><p>SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 /能访问到index.html；</p>
</li>
<li><p>SpringBoot自动配置了默认 的 RequestMappingHandlerMapping</p>
</li>
<li><p>请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。</p>
<ul>
<li>如果有就找到这个请求对应的handler</li>
<li>如果没有就是下一个 HandlerMapping</li>
</ul>
</li>
<li><p>我们需要一些自定义的映射处理，我们也可以自己给容器中放<strong>HandlerMapping</strong>。自定义 <strong>HandlerMapping</strong></p>
</li>
</ul>
<hr>
<p>IDEA快捷键：</p>
<ul>
<li>Ctrl + Alt + U : 以UML的类图展现类有哪些继承类，派生类以及实现哪些接口。</li>
<li>Crtl + Alt + Shift + U : 同上，区别在于上条快捷键结果在新页展现，而本条快捷键结果在弹窗展现。</li>
<li>Ctrl + H : 以树形方式展现类层次结构图。</li>
</ul>
<h1 id="常用参数注解使用"><a href="#常用参数注解使用" class="headerlink" title="常用参数注解使用"></a>常用参数注解使用</h1><p>注解：</p>
<ul>
<li><code>@PathVariable</code> 路径变量</li>
<li><code>@RequestHeader</code> 获取请求头</li>
<li><code>@RequestParam</code> 获取请求参数（指问号后的参数，url?a=1&amp;b=2）</li>
<li><code>@CookieValue</code> 获取Cookie值</li>
<li><code>@RequestAttribute</code> 获取request域属性</li>
<li><code>@RequestBody</code> 获取请求体[POST]</li>
<li><code>@MatrixVariable</code> 矩阵变量</li>
<li><code>@ModelAttribute</code></li>
</ul>
<p>使用用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  car/2/owner/zhangsan</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@PathVariable(&quot;username&quot;)</span> String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam</span> Map&lt;String,String&gt; params,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@CookieValue(&quot;_ga&quot;)</span> String _ga,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@CookieValue(&quot;_ga&quot;)</span> Cookie cookie)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        map.put(&quot;id&quot;,id);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;name&quot;,name);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;pv&quot;,pv);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;userAgent&quot;,userAgent);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;headers&quot;,header);</span></span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        map.put(<span class="string">&quot;inters&quot;</span>,inters);</span><br><span class="line">        map.put(<span class="string">&quot;params&quot;</span>,params);</span><br><span class="line">        map.put(<span class="string">&quot;_ga&quot;</span>,_ga);</span><br><span class="line">        System.out.println(cookie.getName()+<span class="string">&quot;===&gt;&quot;</span>+cookie.getValue());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">postMethod</span><span class="params">(<span class="meta">@RequestBody</span> String content)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;content&quot;</span>,content);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="请求处理-RequestAttribute"><a href="#请求处理-RequestAttribute" class="headerlink" title="请求处理-@RequestAttribute"></a>请求处理-@RequestAttribute</h2><p>用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goto&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">goToPage</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;成功了...&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;code&quot;</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;  <span class="comment">//转发到  /success请求</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/params&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">(Map&lt;String,Object&gt; map,</span></span></span><br><span class="line"><span class="function"><span class="params">                            Model model,</span></span></span><br><span class="line"><span class="function"><span class="params">                            HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                            HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        map.put(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world666&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;world&quot;</span>,<span class="string">&quot;hello666&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;c1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">///&lt;-----------------主角@RequestAttribute在这个方法</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/success&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">success</span><span class="params">(<span class="meta">@RequestAttribute(value = &quot;msg&quot;,required = false)</span> String msg,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="meta">@RequestAttribute(value = &quot;code&quot;,required = false)</span>Integer code,</span></span></span><br><span class="line"><span class="function"><span class="params">                       HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        Object msg1 = request.getAttribute(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Object hello = request.getAttribute(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        Object world = request.getAttribute(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        Object message = request.getAttribute(<span class="string">&quot;message&quot;</span>);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;reqMethod_msg&quot;</span>,msg1);</span><br><span class="line">        map.put(<span class="string">&quot;annotation_msg&quot;</span>,msg);</span><br><span class="line">        map.put(<span class="string">&quot;hello&quot;</span>,hello);</span><br><span class="line">        map.put(<span class="string">&quot;world&quot;</span>,world);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>,message);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="请求处理-MatrixVariable与UrlPathHelper"><a href="#请求处理-MatrixVariable与UrlPathHelper" class="headerlink" title="请求处理-@MatrixVariable与UrlPathHelper"></a>请求处理-@MatrixVariable与UrlPathHelper</h2><ol>
<li><p>语法： 请求路径：<code>/cars/sell;low=34;brand=byd,audi,yd</code></p>
</li>
<li><p>SpringBoot默认是禁用了矩阵变量的功能</p>
<ul>
<li>手动开启：原理。对于路径的处理。UrlPathHelper的removeSemicolonContent设置为false，让其支持矩阵变量的。</li>
</ul>
</li>
<li><p>矩阵变量<strong>必须</strong>有url路径变量才能被解析</p>
</li>
</ol>
<p><strong>手动开启矩阵变量</strong>：</p>
<ul>
<li>实现<code>WebMvcConfigurer</code>接口：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">        <span class="comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span></span><br><span class="line">        urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">        configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建返回<code>WebMvcConfigurer</code>Bean：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">                UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">                <span class="comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span></span><br><span class="line">                urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">                configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><code>@MatrixVariable</code>的用例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">///cars/sell;low=34;brand=byd,audi,yd</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/cars/&#123;path&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">carsSell</span><span class="params">(<span class="meta">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="meta">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="meta">@PathVariable(&quot;path&quot;)</span> String path)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;low&quot;</span>,low);</span><br><span class="line">        map.put(<span class="string">&quot;brand&quot;</span>,brand);</span><br><span class="line">        map.put(<span class="string">&quot;path&quot;</span>,path);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// /boss/1;age=20/2;age=10</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">boss</span><span class="params">(<span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;bossAge&quot;</span>,bossAge);</span><br><span class="line">        map.put(<span class="string">&quot;empAge&quot;</span>,empAge);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="请求处理-各种类型参数解析原理"><a href="#请求处理-各种类型参数解析原理" class="headerlink" title="请求处理-各种类型参数解析原理"></a>请求处理-各种类型参数解析原理</h2><p>这要从<code>DispatcherServlet</code>开始说起：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpServletRequest processedRequest = request;</span><br><span class="line">        HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">            Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                processedRequest = checkMultipart(request);</span><br><span class="line">                multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">                mappedHandler = getHandler(processedRequest);</span><br><span class="line">                <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    noHandlerFound(processedRequest, response);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">                HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">                ...</span><br></pre></td></tr></table></figure>
<ul>
<li><code>HandlerMapping</code>中找到能处理请求的<code>Handler</code>（Controller.method()）。</li>
<li>为当前Handler 找一个适配器 <code>HandlerAdapter</code>，用的最多的是<strong>RequestMappingHandlerAdapter</strong>。</li>
<li>适配器执行目标方法并确定方法参数的每一个值。</li>
</ul>
<h3 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h3><p>默认会加载所有<code>HandlerAdapter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Detect all HandlerAdapters or just expect &quot;handlerAdapter&quot; bean?. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> detectAllHandlerAdapters = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandlerAdapters</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.handlerAdapters = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.detectAllHandlerAdapters) &#123;</span><br><span class="line">            <span class="comment">// Find all HandlerAdapters in the ApplicationContext, including ancestor contexts.</span></span><br><span class="line">            Map&lt;String, HandlerAdapter&gt; matchingBeans =</span><br><span class="line">                BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerAdapter.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (!matchingBeans.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.handlerAdapters = <span class="keyword">new</span> ArrayList&lt;&gt;(matchingBeans.values());</span><br><span class="line">                <span class="comment">// We keep HandlerAdapters in sorted order.</span></span><br><span class="line">                AnnotationAwareOrderComparator.sort(<span class="keyword">this</span>.handlerAdapters);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure>
<p>有这些<code>HandlerAdapter</code>：</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205010047654.png" width="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">HandlerAdapter</div>
</center>

<ol start="0">
<li><p>支持方法上标注<code>@RequestMapping</code> </p>
</li>
<li><p>支持函数式编程的</p>
</li>
<li><p>…</p>
</li>
<li><p>…</p>
</li>
</ol>
<h3 id="执行目标方法"><a href="#执行目标方法" class="headerlink" title="执行目标方法"></a>执行目标方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">        mappedHandler = getHandler(processedRequest);</span><br><span class="line">        <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            noHandlerFound(processedRequest, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">        HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//本节重点</span></span><br><span class="line">        <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>
<p><code>HandlerAdapter</code>接口实现类<code>RequestMappingHandlerAdapter</code>（主要用来处理<code>@RequestMapping</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMethodAdapter</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AbstractHandlerMethodAdapter类的方法，RequestMappingHandlerAdapter继承AbstractHandlerMethodAdapter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleInternal</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView mav;</span><br><span class="line">        <span class="comment">//handleInternal的核心</span></span><br><span class="line">        mav = invokeHandlerMethod(request, response, handlerMethod);<span class="comment">//解释看下节</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参数解析器"><a href="#参数解析器" class="headerlink" title="参数解析器"></a>参数解析器</h3><p>确定将要执行的目标方法的每一个参数的值是什么;</p>
<p>SpringMVC目标方法能写多少种参数类型。取决于<strong>参数解析器argumentResolvers</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">        ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line"></span><br><span class="line">        ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;<span class="comment">//&lt;-----关注点</span></span><br><span class="line">            invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>
<p><code>this.argumentResolvers</code>在<code>afterPropertiesSet()</code>方法内初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMethodAdapter</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> HandlerMethodArgumentResolverComposite argumentResolvers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers == <span class="keyword">null</span>) &#123;<span class="comment">//初始化argumentResolvers</span></span><br><span class="line">            List&lt;HandlerMethodArgumentResolver&gt; resolvers = getDefaultArgumentResolvers();</span><br><span class="line">            <span class="keyword">this</span>.argumentResolvers = <span class="keyword">new</span> HandlerMethodArgumentResolverComposite().addResolvers(resolvers);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化了一堆的实现HandlerMethodArgumentResolver接口的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;HandlerMethodArgumentResolver&gt; <span class="title">getDefaultArgumentResolvers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;HandlerMethodArgumentResolver&gt; resolvers = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Annotation-based argument resolution</span></span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMethodArgumentResolver(getBeanFactory(), <span class="keyword">false</span>));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMapMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> PathVariableMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> PathVariableMapMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> MatrixVariableMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> MatrixVariableMapMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletModelAttributeMethodProcessor(<span class="keyword">false</span>));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestResponseBodyMethodProcessor(getMessageConverters(), <span class="keyword">this</span>.requestResponseBodyAdvice));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestPartMethodArgumentResolver(getMessageConverters(), <span class="keyword">this</span>.requestResponseBodyAdvice));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestHeaderMethodArgumentResolver(getBeanFactory()));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestHeaderMapMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletCookieValueMethodArgumentResolver(getBeanFactory()));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ExpressionValueMethodArgumentResolver(getBeanFactory()));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> SessionAttributeMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestAttributeMethodArgumentResolver());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Type-based argument resolution</span></span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletRequestMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletResponseMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> HttpEntityMethodProcessor(getMessageConverters(), <span class="keyword">this</span>.requestResponseBodyAdvice));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RedirectAttributesMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ModelMethodProcessor());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> MapMethodProcessor());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ErrorsMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> SessionStatusMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> UriComponentsBuilderMethodArgumentResolver());</span><br><span class="line">        <span class="keyword">if</span> (KotlinDetector.isKotlinPresent()) &#123;</span><br><span class="line">            resolvers.add(<span class="keyword">new</span> ContinuationHandlerMethodArgumentResolver());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Custom arguments</span></span><br><span class="line">        <span class="keyword">if</span> (getCustomArgumentResolvers() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            resolvers.addAll(getCustomArgumentResolvers());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Catch-all</span></span><br><span class="line">        resolvers.add(<span class="keyword">new</span> PrincipalMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMethodArgumentResolver(getBeanFactory(), <span class="keyword">true</span>));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletModelAttributeMethodProcessor(<span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resolvers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>HandlerMethodArgumentResolverComposite</code>类如下：（众多<strong>参数解析器argumentResolvers</strong>的包装类）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerMethodArgumentResolverComposite</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HandlerMethodArgumentResolverComposite <span class="title">addResolvers</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@Nullable</span> HandlerMethodArgumentResolver... resolvers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Collections.addAll(<span class="keyword">this</span>.argumentResolvers, resolvers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们看看<code>HandlerMethodArgumentResolver</code>的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前解析器是否支持解析这种参数</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span><span class="comment">//如果支持，就调用 resolveArgument</span></span><br><span class="line">    <span class="function">Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">            NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="返回值处理器"><a href="#返回值处理器" class="headerlink" title="返回值处理器"></a>返回值处理器</h3><p><strong>ValueHandler</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">        ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line"></span><br><span class="line">        ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>) &#123;<span class="comment">//&lt;---关注点</span></span><br><span class="line">            invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</span><br><span class="line">        &#125;</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure>
<p><code>this.returnValueHandlers</code>在<code>afterPropertiesSet()</code>方法内初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMethodAdapter</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> HandlerMethodReturnValueHandlerComposite returnValueHandlers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers == <span class="keyword">null</span>) &#123;</span><br><span class="line">            List&lt;HandlerMethodReturnValueHandler&gt; handlers = getDefaultReturnValueHandlers();</span><br><span class="line">            <span class="keyword">this</span>.returnValueHandlers = <span class="keyword">new</span> HandlerMethodReturnValueHandlerComposite().addHandlers(handlers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化了一堆的实现HandlerMethodReturnValueHandler接口的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;HandlerMethodReturnValueHandler&gt; <span class="title">getDefaultReturnValueHandlers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;HandlerMethodReturnValueHandler&gt; handlers = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Single-purpose return value types</span></span><br><span class="line">        handlers.add(<span class="keyword">new</span> ModelAndViewMethodReturnValueHandler());</span><br><span class="line">        handlers.add(<span class="keyword">new</span> ModelMethodProcessor());</span><br><span class="line">        handlers.add(<span class="keyword">new</span> ViewMethodReturnValueHandler());</span><br><span class="line">        handlers.add(<span class="keyword">new</span> ResponseBodyEmitterReturnValueHandler(getMessageConverters(),</span><br><span class="line">                <span class="keyword">this</span>.reactiveAdapterRegistry, <span class="keyword">this</span>.taskExecutor, <span class="keyword">this</span>.contentNegotiationManager));</span><br><span class="line">        handlers.add(<span class="keyword">new</span> StreamingResponseBodyReturnValueHandler());</span><br><span class="line">        handlers.add(<span class="keyword">new</span> HttpEntityMethodProcessor(getMessageConverters(),</span><br><span class="line">                <span class="keyword">this</span>.contentNegotiationManager, <span class="keyword">this</span>.requestResponseBodyAdvice));</span><br><span class="line">        handlers.add(<span class="keyword">new</span> HttpHeadersReturnValueHandler());</span><br><span class="line">        handlers.add(<span class="keyword">new</span> CallableMethodReturnValueHandler());</span><br><span class="line">        handlers.add(<span class="keyword">new</span> DeferredResultMethodReturnValueHandler());</span><br><span class="line">        handlers.add(<span class="keyword">new</span> AsyncTaskMethodReturnValueHandler(<span class="keyword">this</span>.beanFactory));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Annotation-based return value types</span></span><br><span class="line">        handlers.add(<span class="keyword">new</span> ServletModelAttributeMethodProcessor(<span class="keyword">false</span>));</span><br><span class="line">        handlers.add(<span class="keyword">new</span> RequestResponseBodyMethodProcessor(getMessageConverters(),</span><br><span class="line">                <span class="keyword">this</span>.contentNegotiationManager, <span class="keyword">this</span>.requestResponseBodyAdvice));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Multi-purpose return value types</span></span><br><span class="line">        handlers.add(<span class="keyword">new</span> ViewNameMethodReturnValueHandler());</span><br><span class="line">        handlers.add(<span class="keyword">new</span> MapMethodProcessor());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Custom return value types</span></span><br><span class="line">        <span class="keyword">if</span> (getCustomReturnValueHandlers() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            handlers.addAll(getCustomReturnValueHandlers());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Catch-all</span></span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(getModelAndViewResolvers())) &#123;</span><br><span class="line">            handlers.add(<span class="keyword">new</span> ModelAndViewResolverMethodReturnValueHandler(getModelAndViewResolvers()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            handlers.add(<span class="keyword">new</span> ServletModelAttributeMethodProcessor(<span class="keyword">true</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> handlers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>HandlerMethodReturnValueHandlerComposite</code>类如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerMethodReturnValueHandlerComposite</span> <span class="keyword">implements</span> <span class="title">HandlerMethodReturnValueHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;HandlerMethodReturnValueHandler&gt; returnValueHandlers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HandlerMethodReturnValueHandlerComposite <span class="title">addHandlers</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@Nullable</span> List&lt;? extends HandlerMethodReturnValueHandler&gt; handlers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (handlers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.returnValueHandlers.addAll(handlers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>HandlerMethodReturnValueHandler</code>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerMethodReturnValueHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">supportsReturnType</span><span class="params">(MethodParameter returnType)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span></span><br><span class="line"><span class="function"><span class="params">            ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="回顾执行目标方法"><a href="#回顾执行目标方法" class="headerlink" title="回顾执行目标方法"></a>回顾执行目标方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">        ...</span><br><span class="line">        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>
<p><code>RequestMappingHandlerAdapter</code>的<code>handle()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMethodAdapter</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AbstractHandlerMethodAdapter类的方法，RequestMappingHandlerAdapter继承AbstractHandlerMethodAdapter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleInternal</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView mav;</span><br><span class="line">        <span class="comment">//handleInternal的核心</span></span><br><span class="line">        mav = invokeHandlerMethod(request, response, handlerMethod);<span class="comment">//解释看下节</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>RequestMappingHandlerAdapter</code>的<code>invokeHandlerMethod()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMethodAdapter</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关注点：执行目标方法</span></span><br><span class="line">            invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            webRequest.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><code>invokeAndHandle()</code>方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInvocableHandlerMethod</span> <span class="keyword">extends</span> <span class="title">InvocableHandlerMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">            Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//returnValue存储起来</span></span><br><span class="line">            <span class="keyword">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class="line">                    returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span><span class="comment">//InvocableHandlerMethod类的，ServletInvocableHandlerMethod类继承InvocableHandlerMethod类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invokeForRequest</span><span class="params">(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">            Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">////获取方法的参数值</span></span><br><span class="line">        Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> doInvoke(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">doInvoke</span><span class="params">(Object... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Method method = getBridgedMethod();<span class="comment">//@RequestMapping的方法</span></span><br><span class="line">        ReflectionUtils.makeAccessible(method);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (KotlinDetector.isSuspendingFunction(method)) &#123;</span><br><span class="line">                <span class="keyword">return</span> CoroutinesUtils.invokeSuspendingFunction(method, getBean(), args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//通过反射调用</span></span><br><span class="line">            <span class="keyword">return</span> method.invoke(getBean(), args);<span class="comment">//getBean()指@RequestMapping的方法所在类的对象。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
<h3 id="如何确定目标方法每一个参数的值"><a href="#如何确定目标方法每一个参数的值" class="headerlink" title="如何确定目标方法每一个参数的值"></a>如何确定目标方法每一个参数的值</h3><p>重点分析<code>ServletInvocableHandlerMethod</code>的<code>getMethodArgumentValues</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInvocableHandlerMethod</span> <span class="keyword">extends</span> <span class="title">InvocableHandlerMethod</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span><span class="comment">//InvocableHandlerMethod类的，ServletInvocableHandlerMethod类继承InvocableHandlerMethod类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invokeForRequest</span><span class="params">(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">            Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">////获取方法的参数值</span></span><br><span class="line">        Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> doInvoke(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本节重点，获取方法的参数值</span></span><br><span class="line">    <span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="line">            Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        MethodParameter[] parameters = getMethodParameters();</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;</span><br><span class="line">            <span class="keyword">return</span> EMPTY_ARGS;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object[] args = <span class="keyword">new</span> Object[parameters.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">            MethodParameter parameter = parameters[i];</span><br><span class="line">            parameter.initParameterNameDiscovery(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line">            args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line">            <span class="keyword">if</span> (args[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//查看resolvers是否有支持</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(formatArgumentError(parameter, <span class="string">&quot;No suitable resolver&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//支持的话就开始解析吧</span></span><br><span class="line">                args[i] = <span class="keyword">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="keyword">this</span>.dataBinderFactory);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                ....</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>this.resolvers</code>的类型为<code>HandlerMethodArgumentResolverComposite</code>（在<a href="#">参数解析器</a>章节提及）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerMethodArgumentResolverComposite</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getArgumentResolver(parameter) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">            NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        HandlerMethodArgumentResolver resolver = getArgumentResolver(parameter);</span><br><span class="line">        <span class="keyword">if</span> (resolver == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unsupported parameter type [&quot;</span> +</span><br><span class="line">                    parameter.getParameterType().getName() + <span class="string">&quot;]. supportsParameter should be called first.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> HandlerMethodArgumentResolver <span class="title">getArgumentResolver</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">        HandlerMethodArgumentResolver result = <span class="keyword">this</span>.argumentResolverCache.get(parameter);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//挨个判断所有参数解析器那个支持解析这个参数</span></span><br><span class="line">            <span class="keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="keyword">this</span>.argumentResolvers) &#123;</span><br><span class="line">                <span class="keyword">if</span> (resolver.supportsParameter(parameter)) &#123;</span><br><span class="line">                    result = resolver;</span><br><span class="line">                    <span class="keyword">this</span>.argumentResolverCache.put(parameter, result);<span class="comment">//找到了，resolver就缓存起来，方便稍后resolveArgument()方法使用</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本节描述，一个请求发送到DispatcherServlet后的具体处理流程，也就是SpringMVC的主要原理。</p>
<p>本节内容较多且硬核，对日后编程很有帮助，需耐心对待。</p>
<p>可以运行一个示例，打断点，在Debug模式下，查看程序流程。</p>
<h1 id="Servlet-API参数解析原理"><a href="#Servlet-API参数解析原理" class="headerlink" title="Servlet API参数解析原理"></a>Servlet API参数解析原理</h1><ul>
<li>WebRequest</li>
<li>ServletRequest</li>
<li>MultipartRequest</li>
<li>HttpSession</li>
<li>javax.servlet.http.PushBuilder</li>
<li>Principal</li>
<li>InputStream</li>
<li>Reader</li>
<li>HttpMethod</li>
<li>Locale</li>
<li>TimeZone</li>
<li>ZoneId</li>
</ul>
<p><strong>ServletRequestMethodArgumentResolver</strong>用来处理以上的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletRequestMethodArgumentResolver</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; pushBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pushBuilder = ClassUtils.forName(<span class="string">&quot;javax.servlet.http.PushBuilder&quot;</span>,</span><br><span class="line">                    ServletRequestMethodArgumentResolver.class.getClassLoader());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="comment">// Servlet 4.0 PushBuilder not found - not supported for injection</span></span><br><span class="line">            pushBuilder = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; paramType = parameter.getParameterType();</span><br><span class="line">        <span class="keyword">return</span> (WebRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">                ServletRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">                MultipartRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">                HttpSession.class.isAssignableFrom(paramType) ||</span><br><span class="line">                (pushBuilder != <span class="keyword">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) ||</span><br><span class="line">                (Principal.class.isAssignableFrom(paramType) &amp;&amp; !parameter.hasParameterAnnotations()) ||</span><br><span class="line">                InputStream.class.isAssignableFrom(paramType) ||</span><br><span class="line">                Reader.class.isAssignableFrom(paramType) ||</span><br><span class="line">                HttpMethod.class == paramType ||</span><br><span class="line">                Locale.class == paramType ||</span><br><span class="line">                TimeZone.class == paramType ||</span><br><span class="line">                ZoneId.class == paramType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">            NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; paramType = parameter.getParameterType();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// WebRequest / NativeWebRequest / ServletWebRequest</span></span><br><span class="line">        <span class="keyword">if</span> (WebRequest.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!paramType.isInstance(webRequest)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        <span class="string">&quot;Current request is not of type [&quot;</span> + paramType.getName() + <span class="string">&quot;]: &quot;</span> + webRequest);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> webRequest;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ServletRequest / HttpServletRequest / MultipartRequest / MultipartHttpServletRequest</span></span><br><span class="line">        <span class="keyword">if</span> (ServletRequest.class.isAssignableFrom(paramType) || MultipartRequest.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> resolveNativeRequest(webRequest, paramType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HttpServletRequest required for all further argument types</span></span><br><span class="line">        <span class="keyword">return</span> resolveArgument(paramType, resolveNativeRequest(webRequest, HttpServletRequest.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">resolveNativeRequest</span><span class="params">(NativeWebRequest webRequest, Class&lt;T&gt; requiredType)</span> </span>&#123;</span><br><span class="line">        T nativeRequest = webRequest.getNativeRequest(requiredType);</span><br><span class="line">        <span class="keyword">if</span> (nativeRequest == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">&quot;Current request is not of type [&quot;</span> + requiredType.getName() + <span class="string">&quot;]: &quot;</span> + webRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nativeRequest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">resolveArgument</span><span class="params">(Class&lt;?&gt; paramType, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (HttpSession.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line">            HttpSession session = request.getSession();</span><br><span class="line">            <span class="keyword">if</span> (session != <span class="keyword">null</span> &amp;&amp; !paramType.isInstance(session)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        <span class="string">&quot;Current session is not of type [&quot;</span> + paramType.getName() + <span class="string">&quot;]: &quot;</span> + session);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> session;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pushBuilder != <span class="keyword">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> PushBuilderDelegate.resolvePushBuilder(request, paramType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (InputStream.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line">            InputStream inputStream = request.getInputStream();</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span> &amp;&amp; !paramType.isInstance(inputStream)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        <span class="string">&quot;Request input stream is not of type [&quot;</span> + paramType.getName() + <span class="string">&quot;]: &quot;</span> + inputStream);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> inputStream;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Reader.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line">            Reader reader = request.getReader();</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span> &amp;&amp; !paramType.isInstance(reader)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        <span class="string">&quot;Request body reader is not of type [&quot;</span> + paramType.getName() + <span class="string">&quot;]: &quot;</span> + reader);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> reader;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Principal.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line">            Principal userPrincipal = request.getUserPrincipal();</span><br><span class="line">            <span class="keyword">if</span> (userPrincipal != <span class="keyword">null</span> &amp;&amp; !paramType.isInstance(userPrincipal)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        <span class="string">&quot;Current user principal is not of type [&quot;</span> + paramType.getName() + <span class="string">&quot;]: &quot;</span> + userPrincipal);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> userPrincipal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (HttpMethod.class == paramType) &#123;</span><br><span class="line">            <span class="keyword">return</span> HttpMethod.resolve(request.getMethod());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Locale.class == paramType) &#123;</span><br><span class="line">            <span class="keyword">return</span> RequestContextUtils.getLocale(request);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (TimeZone.class == paramType) &#123;</span><br><span class="line">            TimeZone timeZone = RequestContextUtils.getTimeZone(request);</span><br><span class="line">            <span class="keyword">return</span> (timeZone != <span class="keyword">null</span> ? timeZone : TimeZone.getDefault());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ZoneId.class == paramType) &#123;</span><br><span class="line">            TimeZone timeZone = RequestContextUtils.getTimeZone(request);</span><br><span class="line">            <span class="keyword">return</span> (timeZone != <span class="keyword">null</span> ? timeZone.toZoneId() : ZoneId.systemDefault());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Should never happen...</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;Unknown parameter type: &quot;</span> + paramType.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inner class to avoid a hard dependency on Servlet API 4.0 at runtime.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PushBuilderDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">resolvePushBuilder</span><span class="params">(HttpServletRequest request, Class&lt;?&gt; paramType)</span> </span>&#123;</span><br><span class="line">            PushBuilder pushBuilder = request.newPushBuilder();</span><br><span class="line">            <span class="keyword">if</span> (pushBuilder != <span class="keyword">null</span> &amp;&amp; !paramType.isInstance(pushBuilder)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        <span class="string">&quot;Current push builder is not of type [&quot;</span> + paramType.getName() + <span class="string">&quot;]: &quot;</span> + pushBuilder);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> pushBuilder;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goto&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">goToPage</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;成功了...&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;code&quot;</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;  <span class="comment">//转发到  /success请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Model、Map原理"><a href="#Model、Map原理" class="headerlink" title="Model、Map原理"></a>Model、Map原理</h1><p>复杂参数：</p>
<ul>
<li><p><strong>Map</strong></p>
</li>
<li><p><strong>Model（map、model里面的数据会被放在request的请求域  request.setAttribute）</strong></p>
</li>
<li><p>Errors/BindingResult</p>
</li>
<li><p><strong>RedirectAttributes（ 重定向携带数据）</strong></p>
</li>
<li><p><strong>ServletResponse（response）</strong></p>
</li>
<li><p>SessionStatus</p>
</li>
<li><p>UriComponentsBuilder</p>
</li>
<li><p>ServletUriComponentsBuilder</p>
</li>
</ul>
<p>用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/params&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">(Map&lt;String,Object&gt; map,</span></span></span><br><span class="line"><span class="function"><span class="params">                        Model model,</span></span></span><br><span class="line"><span class="function"><span class="params">                        HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                        HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    <span class="comment">//下面三位都是可以给request域中放数据</span></span><br><span class="line">    map.put(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world666&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;world&quot;</span>,<span class="string">&quot;hello666&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;c1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/success&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">success</span><span class="params">(<span class="meta">@RequestAttribute(value = &quot;msg&quot;,required = false)</span> String msg,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="meta">@RequestAttribute(value = &quot;code&quot;,required = false)</span>Integer code,</span></span></span><br><span class="line"><span class="function"><span class="params">                   HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    Object msg1 = request.getAttribute(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    Object hello = request.getAttribute(<span class="string">&quot;hello&quot;</span>);<span class="comment">//得出testParam方法赋予的值 world666</span></span><br><span class="line">    Object world = request.getAttribute(<span class="string">&quot;world&quot;</span>);<span class="comment">//得出testParam方法赋予的值 hello666</span></span><br><span class="line">    Object message = request.getAttribute(<span class="string">&quot;message&quot;</span>);<span class="comment">//得出testParam方法赋予的值 HelloWorld</span></span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;reqMethod_msg&quot;</span>,msg1);</span><br><span class="line">    map.put(<span class="string">&quot;annotation_msg&quot;</span>,msg);</span><br><span class="line">    map.put(<span class="string">&quot;hello&quot;</span>,hello);</span><br><span class="line">    map.put(<span class="string">&quot;world&quot;</span>,world);</span><br><span class="line">    map.put(<span class="string">&quot;message&quot;</span>,message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>Map&lt;String,Object&gt; map</code></p>
</li>
<li><p><code>Model model</code></p>
</li>
<li><p><code>HttpServletRequest request</code> </p>
</li>
</ul>
<p>上面三位都是可以给request域中放数据，用<code>request.getAttribute()</code>获取</p>
<p>接下来我们看看，<code>Map&lt;String,Object&gt; map</code>与<code>Model model</code>用什么参数处理器。</p>
<hr>
<p><code>Map&lt;String,Object&gt; map</code>参数用<code>MapMethodProcessor</code>处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapMethodProcessor</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span>, <span class="title">HandlerMethodReturnValueHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Map.class.isAssignableFrom(parameter.getParameterType()) &amp;&amp;</span><br><span class="line">                parameter.getParameterAnnotations().length == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">            NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Assert.state(mavContainer != <span class="keyword">null</span>, <span class="string">&quot;ModelAndViewContainer is required for model exposure&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mavContainer.getModel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>mavContainer.getModel()</code>如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelAndViewContainer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ModelMap defaultModel = <span class="keyword">new</span> BindingAwareModelMap();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> ModelMap redirectModel;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelMap <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (useDefaultModel()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.defaultModel;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.redirectModel == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.redirectModel = <span class="keyword">new</span> ModelMap();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.redirectModel;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">useDefaultModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (!<span class="keyword">this</span>.redirectModelScenario || (<span class="keyword">this</span>.redirectModel == <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.ignoreDefaultModelOnRedirect));</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><code>Model model</code>用<code>ModelMethodProcessor</code>处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelMethodProcessor</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span>, <span class="title">HandlerMethodReturnValueHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Model.class.isAssignableFrom(parameter.getParameterType());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">            NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Assert.state(mavContainer != <span class="keyword">null</span>, <span class="string">&quot;ModelAndViewContainer is required for model exposure&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mavContainer.getModel();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>return mavContainer.getModel();</code>这跟<code>MapMethodProcessor</code>的一致</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205010247689.png" width="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Model也是另一种意义的Map</div>
</center>

<p><code>Model</code>也是另一种意义的<code>Map</code>。</p>
<hr>
<p><strong>接下来看看</strong><code>Map&lt;String,Object&gt; map</code>与<code>Model model</code>值是如何做到用<code>request.getAttribute()</code>获取的。</p>
<p>众所周知，所有的数据都放在 <strong>ModelAndView</strong>包含要去的页面地址View，还包含Model数据。</p>
<p>先看<strong>ModelAndView</strong>接下来是如何处理的？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                dispatchException = ex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">                <span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line">                <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">                dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//处理分发结果</span></span><br><span class="line">            processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">        <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">            render(mv, request, response);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        View view;</span><br><span class="line">        String viewName = mv.getViewName();</span><br><span class="line">        <span class="keyword">if</span> (viewName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// We need to resolve the view name.</span></span><br><span class="line">            view = resolveViewName(viewName, mv.getModelInternal(), locale, request);</span><br><span class="line">            <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;Could not resolve view with name &#x27;&quot;</span> + mv.getViewName() +</span><br><span class="line">                        <span class="string">&quot;&#x27; in servlet with name &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No need to lookup: the ModelAndView object contains the actual View object.</span></span><br><span class="line">            view = mv.getView();</span><br><span class="line">            <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;ModelAndView [&quot;</span> + mv + <span class="string">&quot;] neither contains a view name nor a &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;View object in servlet with name &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        view.render(mv.getModelInternal(), request, response);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Debug模式下，<code>view</code>属为<code>InternalResourceView</code>类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalResourceView</span> <span class="keyword">extends</span> <span class="title">AbstractUrlBasedView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span><span class="comment">//该方法在AbstractView，AbstractUrlBasedView继承了AbstractView</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(<span class="meta">@Nullable</span> Map&lt;String, ?&gt; model, HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; mergedModel = createMergedOutputModel(model, request, response);</span><br><span class="line">        prepareResponse(request, response);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//看下一个方法实现</span></span><br><span class="line">        renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">renderMergedOutputModel</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Expose the model object as request attributes.</span></span><br><span class="line">        <span class="comment">// 暴露模型作为请求域属性</span></span><br><span class="line">        exposeModelAsRequestAttributes(model, request);<span class="comment">//&lt;---重点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Expose helpers as request attributes, if any.</span></span><br><span class="line">        exposeHelpers(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine the path for the request dispatcher.</span></span><br><span class="line">        String dispatcherPath = prepareForRendering(request, response);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Obtain a RequestDispatcher for the target resource (typically a JSP).</span></span><br><span class="line">        RequestDispatcher rd = getRequestDispatcher(request, dispatcherPath);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法在AbstractView，AbstractUrlBasedView继承了AbstractView</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">exposeModelAsRequestAttributes</span><span class="params">(Map&lt;String, Object&gt; model,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        model.forEach((name, value) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                request.setAttribute(name, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                request.removeAttribute(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>exposeModelAsRequestAttributes</code>方法看出，<code>Map&lt;String,Object&gt; map</code>，<code>Model model</code>这两种类型数据可以给request域中放数据，用<code>request.getAttribute()</code>获取。</p>
<h1 id="自定义参数绑定原理"><a href="#自定义参数绑定原理" class="headerlink" title="自定义参数绑定原理"></a>自定义参数绑定原理</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据绑定：页面提交的请求数据（GET、POST）都可以和对象属性进行绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> person</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/saveuser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">saveuser</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *     姓名： &lt;input name=&quot;userName&quot;/&gt; &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     年龄： &lt;input name=&quot;age&quot;/&gt; &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     生日： &lt;input name=&quot;birth&quot;/&gt; &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     宠物姓名：&lt;input name=&quot;pet.name&quot;/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     宠物年龄：&lt;input name=&quot;pet.age&quot;/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>封装过程用到<code>ServletModelAttributeMethodProcessor</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletModelAttributeMethodProcessor</span> <span class="keyword">extends</span> <span class="title">ModelAttributeMethodProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//本方法在ModelAttributeMethodProcessor类，</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (parameter.hasParameterAnnotation(ModelAttribute.class) ||</span><br><span class="line">                (<span class="keyword">this</span>.annotationNotRequired &amp;&amp; !BeanUtils.isSimpleProperty(parameter.getParameterType())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span><span class="comment">//本方法在ModelAttributeMethodProcessor类，</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">            NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        String name = ModelFactory.getNameForParameter(parameter);</span><br><span class="line">        ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class);</span><br><span class="line">        <span class="keyword">if</span> (ann != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mavContainer.setBinding(name, ann.binding());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object attribute = <span class="keyword">null</span>;</span><br><span class="line">        BindingResult bindingResult = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mavContainer.containsAttribute(name)) &#123;</span><br><span class="line">            attribute = mavContainer.getModel().get(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Create attribute instance</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                attribute = createAttribute(name, parameter, binderFactory, webRequest);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (BindException ex) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bindingResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Bean property binding and validation;</span></span><br><span class="line">            <span class="comment">// skipped in case of binding failure on construction.</span></span><br><span class="line">            WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);</span><br><span class="line">            <span class="keyword">if</span> (binder.getTarget() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</span><br><span class="line">                    <span class="comment">//web数据绑定器，将请求参数的值绑定到指定的JavaBean里面**</span></span><br><span class="line">                    bindRequestParameters(binder, webRequest);</span><br><span class="line">                &#125;</span><br><span class="line">                validateIfApplicable(binder, parameter);</span><br><span class="line">                <span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BindException(binder.getBindingResult());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Value type adaptation, also covering java.util.Optional</span></span><br><span class="line">            <span class="keyword">if</span> (!parameter.getParameterType().isInstance(attribute)) &#123;</span><br><span class="line">                attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);</span><br><span class="line">            &#125;</span><br><span class="line">            bindingResult = binder.getBindingResult();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add resolved attribute and BindingResult at the end of the model</span></span><br><span class="line">        Map&lt;String, Object&gt; bindingResultModel = bindingResult.getModel();</span><br><span class="line">        mavContainer.removeAttributes(bindingResultModel);</span><br><span class="line">        mavContainer.addAllAttributes(bindingResultModel);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> attribute;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>WebDataBinder 利用它里面的 Converters 将请求数据转成指定的数据类型。再次封装到JavaBean中</strong></p>
<p><strong>在过程当中，用到GenericConversionService：在设置每一个值的时候，找它里面的所有converter那个可以将这个数据类型（request带来参数的字符串）转换到指定的类型</strong></p>
<h1 id="自定义Converter原理"><a href="#自定义Converter原理" class="headerlink" title="自定义Converter原理"></a>自定义Converter原理</h1><p>未来我们可以给WebDataBinder里面放自己的Converter；</p>
<p>下面演示将字符串<code>“啊猫,3”</code>转换成<code>Pet</code>对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、WebMvcConfigurer定制化SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">            registry.addConverter(<span class="keyword">new</span> Converter&lt;String, Pet&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Pet <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 啊猫,3</span></span><br><span class="line">                    <span class="keyword">if</span>(!StringUtils.isEmpty(source))&#123;</span><br><span class="line">                        Pet pet = <span class="keyword">new</span> Pet();</span><br><span class="line">                        String[] split = source.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                        pet.setName(split[<span class="number">0</span>]);</span><br><span class="line">                        pet.setAge(Integer.parseInt(split[<span class="number">1</span>]));</span><br><span class="line">                        <span class="keyword">return</span> pet;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="ReturnValueHandler原理"><a href="#ReturnValueHandler原理" class="headerlink" title="ReturnValueHandler原理"></a>ReturnValueHandler原理</h1><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205010403920.jpg" width="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">ReturnValueHandler原理</div>
</center>

<p>假设给前端自动返回json数据，需要引入相关的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- web场景自动引入了json场景 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>控制层代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span>  <span class="comment">//利用返回值处理器里面的消息转换器进行处理</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test/person&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setAge(<span class="number">28</span>);</span><br><span class="line">        person.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line">        person.setUserName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="#">32、请求处理-【源码分析】-各种类型参数解析原理 - 返回值处理器</a>有讨论<strong>ReturnValueHandler</strong>。现在直接看看重点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMethodAdapter</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>) &#123;<span class="comment">//&lt;----关注点</span></span><br><span class="line">                invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            invocableMethod.invokeAndHandle(webRequest, mavContainer);<span class="comment">//看下块代码</span></span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            webRequest.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInvocableHandlerMethod</span> <span class="keyword">extends</span> <span class="title">InvocableHandlerMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">            Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//看下块代码</span></span><br><span class="line">            <span class="keyword">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class="line">                    returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerMethodReturnValueHandlerComposite</span> <span class="keyword">implements</span> <span class="title">HandlerMethodReturnValueHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span></span><br><span class="line"><span class="function"><span class="params">            ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//selectHandler()实现在下面</span></span><br><span class="line">        HandlerMethodReturnValueHandler handler = selectHandler(returnValue, returnType);</span><br><span class="line">        <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unknown return value type: &quot;</span> + returnType.getParameterType().getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//开始处理</span></span><br><span class="line">        handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> HandlerMethodReturnValueHandler <span class="title">selectHandler</span><span class="params">(<span class="meta">@Nullable</span> Object value, MethodParameter returnType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isAsyncValue = isAsyncReturnValue(value, returnType);</span><br><span class="line">        <span class="keyword">for</span> (HandlerMethodReturnValueHandler handler : <span class="keyword">this</span>.returnValueHandlers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isAsyncValue &amp;&amp; !(handler <span class="keyword">instanceof</span> AsyncHandlerMethodReturnValueHandler)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (handler.supportsReturnType(returnType)) &#123;</span><br><span class="line">                <span class="keyword">return</span> handler;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><code>@ResponseBody</code> 注解，即<code>RequestResponseBodyMethodProcessor</code>，它实现<code>HandlerMethodReturnValueHandler</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestResponseBodyMethodProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractMessageConverterMethodProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span></span><br><span class="line"><span class="function"><span class="params">            ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line"></span><br><span class="line">        mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line">        ServletServerHttpRequest inputMessage = createInputMessage(webRequest);</span><br><span class="line">        ServletServerHttpResponse outputMessage = createOutputMessage(webRequest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用消息转换器进行写出操作，本方法下一章节介绍：</span></span><br><span class="line">        <span class="comment">// Try even with null return value. ResponseBodyAdvice could get involved.</span></span><br><span class="line">        writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="HTTPMessageConverter原理"><a href="#HTTPMessageConverter原理" class="headerlink" title="HTTPMessageConverter原理"></a>HTTPMessageConverter原理</h1><p>返回值处理器<code>ReturnValueHandler</code>原理：</p>
<ol>
<li>返回值处理器判断是否支持这种类型返回值 <code>supportsReturnType</code></li>
<li>返回值处理器调用 <code>handleReturnValue</code> 进行处理</li>
<li><code>RequestResponseBodyMethodProcessor</code> 可以处理返回值标了<code>@ResponseBody</code> 注解的。<ul>
<li>利用 <code>MessageConverters</code> 进行处理 将数据写为json<ol>
<li>内容协商（浏览器默认会以请求头的方式告诉服务器他能接受什么样的内容类型）</li>
<li>服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据，</li>
<li>SpringMVC会挨个遍历所有容器底层的 <code>HttpMessageConverter</code> ，看谁能处理？<ol>
<li>得到<code>MappingJackson2HttpMessageConverter</code>可以将对象写为json</li>
<li>利用<code>MappingJackson2HttpMessageConverter</code>将对象转为json再写出去。</li>
</ol>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RequestResponseBodyMethodProcessor继承这类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMessageConverterMethodProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractMessageConverterMethodArgumentResolver</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">HandlerMethodReturnValueHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//承接上一节内容</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">writeWithMessageConverters</span><span class="params">(<span class="meta">@Nullable</span> T value, MethodParameter returnType,</span></span></span><br><span class="line"><span class="function"><span class="params">                ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line"></span><br><span class="line">            Object body;</span><br><span class="line">            Class&lt;?&gt; valueType;</span><br><span class="line">            Type targetType;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> CharSequence) &#123;</span><br><span class="line">                body = value.toString();</span><br><span class="line">                valueType = String.class;</span><br><span class="line">                targetType = String.class;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                body = value;</span><br><span class="line">                valueType = getReturnValueType(body, returnType);</span><br><span class="line">                targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            <span class="comment">//内容协商（浏览器默认会以请求头(参数Accept)的方式告诉服务器他能接受什么样的内容类型）</span></span><br><span class="line">            MediaType selectedMediaType = <span class="keyword">null</span>;</span><br><span class="line">            MediaType contentType = outputMessage.getHeaders().getContentType();</span><br><span class="line">            <span class="keyword">boolean</span> isContentTypePreset = contentType != <span class="keyword">null</span> &amp;&amp; contentType.isConcrete();</span><br><span class="line">            <span class="keyword">if</span> (isContentTypePreset) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">&quot;Found &#x27;Content-Type:&quot;</span> + contentType + <span class="string">&quot;&#x27; in response&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                selectedMediaType = contentType;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                HttpServletRequest request = inputMessage.getServletRequest();</span><br><span class="line">                List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);</span><br><span class="line">                <span class="comment">//服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据</span></span><br><span class="line">                List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (body != <span class="keyword">null</span> &amp;&amp; producibleTypes.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> HttpMessageNotWritableException(</span><br><span class="line">                            <span class="string">&quot;No converter found for return value of type: &quot;</span> + valueType);</span><br><span class="line">                &#125;</span><br><span class="line">                List&lt;MediaType&gt; mediaTypesToUse = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (MediaType requestedType : acceptableTypes) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (MediaType producibleType : producibleTypes) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;</span><br><span class="line">                            mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mediaTypesToUse.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (body != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HttpMediaTypeNotAcceptableException(producibleTypes);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                        logger.debug(<span class="string">&quot;No match for &quot;</span> + acceptableTypes + <span class="string">&quot;, supported: &quot;</span> + producibleTypes);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                MediaType.sortBySpecificityAndQuality(mediaTypesToUse);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//选择一个MediaType</span></span><br><span class="line">                <span class="keyword">for</span> (MediaType mediaType : mediaTypesToUse) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mediaType.isConcrete()) &#123;</span><br><span class="line">                        selectedMediaType = mediaType;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) &#123;</span><br><span class="line">                        selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">&quot;Using &#x27;&quot;</span> + selectedMediaType + <span class="string">&quot;&#x27;, given &quot;</span> +</span><br><span class="line">                            acceptableTypes + <span class="string">&quot; and supported &quot;</span> + producibleTypes);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (selectedMediaType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                selectedMediaType = selectedMediaType.removeQualityValue();</span><br><span class="line">                <span class="comment">//本节主角：HttpMessageConverter</span></span><br><span class="line">                <span class="keyword">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class="keyword">this</span>.messageConverters) &#123;</span><br><span class="line">                    GenericHttpMessageConverter genericConverter = (converter <span class="keyword">instanceof</span> GenericHttpMessageConverter ?</span><br><span class="line">                            (GenericHttpMessageConverter&lt;?&gt;) converter : <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//判断是否可写</span></span><br><span class="line">                    <span class="keyword">if</span> (genericConverter != <span class="keyword">null</span> ?</span><br><span class="line">                            ((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :</span><br><span class="line">                            converter.canWrite(valueType, selectedMediaType)) &#123;</span><br><span class="line">                        body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,</span><br><span class="line">                                (Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt;) converter.getClass(),</span><br><span class="line">                                inputMessage, outputMessage);</span><br><span class="line">                        <span class="keyword">if</span> (body != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            Object theBody = body;</span><br><span class="line">                            LogFormatUtils.traceDebug(logger, traceOn -&gt;</span><br><span class="line">                                    <span class="string">&quot;Writing [&quot;</span> + LogFormatUtils.formatValue(theBody, !traceOn) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                            addContentDispositionHeader(inputMessage, outputMessage);</span><br><span class="line">                            <span class="comment">//开始写入</span></span><br><span class="line">                            <span class="keyword">if</span> (genericConverter != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                genericConverter.write(body, targetType, selectedMediaType, outputMessage);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                ((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                                logger.debug(<span class="string">&quot;Nothing to write: null body&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p><code>HTTPMessageConverter</code>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Strategy interface for converting from and to HTTP requests and responses.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpMessageConverter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Indicates whether the given class can be read by this converter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">(Class&lt;?&gt; clazz, <span class="meta">@Nullable</span> MediaType mediaType)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Indicates whether the given class can be written by this converter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">(Class&lt;?&gt; clazz, <span class="meta">@Nullable</span> MediaType mediaType)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the list of &#123;<span class="doctag">@link</span> MediaType&#125; objects supported by this converter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;MediaType&gt; <span class="title">getSupportedMediaTypes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read an object of the given type from the given input message, and returns it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">read</span><span class="params">(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, HttpMessageNotReadableException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Write an given object to the given output message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T t, <span class="meta">@Nullable</span> MediaType contentType, HttpOutputMessage outputMessage)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, HttpMessageNotWritableException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>HttpMessageConverter</code>: 看是否支持将 此 <code>Class</code>类型的对象，转为<code>MediaType</code>类型的数据。</p>
<p>例子：<code>Person</code>对象转为JSON，或者 JSON转为<code>Person</code>，这将用到<code>MappingJackson2HttpMessageConverter</code></p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringBoot2/image/20210205010509984.png" width="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">MappingJackson2HttpMessageConverter</div>
</center>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MappingJackson2HttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">AbstractJackson2HttpMessageConverter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于<code>MappingJackson2HttpMessageConverter</code>的实例化请看下节。</p>
<h3 id="关于HttpMessageConverters的初始化"><a href="#关于HttpMessageConverters的初始化" class="headerlink" title="关于HttpMessageConverters的初始化"></a>关于HttpMessageConverters的初始化</h3><p><code>DispatcherServlet</code>的初始化时会调用<code>initHandlerAdapters(ApplicationContext context)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandlerAdapters</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.handlerAdapters = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.detectAllHandlerAdapters) &#123;</span><br><span class="line">            <span class="comment">// Find all HandlerAdapters in the ApplicationContext, including ancestor contexts.</span></span><br><span class="line">            Map&lt;String, HandlerAdapter&gt; matchingBeans =</span><br><span class="line">                    BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerAdapter.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (!matchingBeans.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.handlerAdapters = <span class="keyword">new</span> ArrayList&lt;&gt;(matchingBeans.values());</span><br><span class="line">                <span class="comment">// We keep HandlerAdapters in sorted order.</span></span><br><span class="line">                AnnotationAwareOrderComparator.sort(<span class="keyword">this</span>.handlerAdapters);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ...</span><br></pre></td></tr></table></figure>
<p>上述代码会加载<code>ApplicationContext</code>的所有<code>HandlerAdapter</code>，用来处理<code>@RequestMapping</code>的<code>RequestMappingHandlerAdapter</code>实现<code>HandlerAdapter</code>接口，<code>RequestMappingHandlerAdapter</code>也被实例化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMethodAdapter</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestMappingHandlerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageConverters = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> ByteArrayHttpMessageConverter());</span><br><span class="line">        <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> StringHttpMessageConverter());</span><br><span class="line">        <span class="keyword">if</span> (!shouldIgnoreXml) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> SourceHttpMessageConverter&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line">                <span class="comment">// Ignore when no TransformerFactory implementation is available</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> AllEncompassingFormHttpMessageConverter());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在构造器中看到<strong>一堆</strong><code>HttpMessageConverter</code>。接着，重点查看<code>AllEncompassingFormHttpMessageConverter</code>类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllEncompassingFormHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">FormHttpMessageConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Boolean flag controlled by a &#123;<span class="doctag">@code</span> spring.xml.ignore&#125; system property that instructs Spring to</span></span><br><span class="line"><span class="comment">     * ignore XML, i.e. to not initialize the XML-related infrastructure.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The default is &quot;false&quot;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> shouldIgnoreXml = SpringProperties.getFlag(<span class="string">&quot;spring.xml.ignore&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jaxb2Present;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jackson2Present;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jackson2XmlPresent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jackson2SmilePresent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> gsonPresent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jsonbPresent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> kotlinSerializationJsonPresent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ClassLoader classLoader = AllEncompassingFormHttpMessageConverter.class.getClassLoader();</span><br><span class="line">        jaxb2Present = ClassUtils.isPresent(<span class="string">&quot;javax.xml.bind.Binder&quot;</span>, classLoader);</span><br><span class="line">        jackson2Present = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span>, classLoader) &amp;&amp;</span><br><span class="line">                        ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.core.JsonGenerator&quot;</span>, classLoader);</span><br><span class="line">        jackson2XmlPresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;</span>, classLoader);</span><br><span class="line">        jackson2SmilePresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.smile.SmileFactory&quot;</span>, classLoader);</span><br><span class="line">        gsonPresent = ClassUtils.isPresent(<span class="string">&quot;com.google.gson.Gson&quot;</span>, classLoader);</span><br><span class="line">        jsonbPresent = ClassUtils.isPresent(<span class="string">&quot;javax.json.bind.Jsonb&quot;</span>, classLoader);</span><br><span class="line">        kotlinSerializationJsonPresent = ClassUtils.isPresent(<span class="string">&quot;kotlinx.serialization.json.Json&quot;</span>, classLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AllEncompassingFormHttpMessageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!shouldIgnoreXml) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                addPartConverter(<span class="keyword">new</span> SourceHttpMessageConverter&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line">                <span class="comment">// Ignore when no TransformerFactory implementation is available</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (jaxb2Present &amp;&amp; !jackson2XmlPresent) &#123;</span><br><span class="line">                addPartConverter(<span class="keyword">new</span> Jaxb2RootElementHttpMessageConverter());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jackson2Present) &#123;</span><br><span class="line">            addPartConverter(<span class="keyword">new</span> MappingJackson2HttpMessageConverter());<span class="comment">//&lt;----重点看这里</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (gsonPresent) &#123;</span><br><span class="line">            addPartConverter(<span class="keyword">new</span> GsonHttpMessageConverter());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (jsonbPresent) &#123;</span><br><span class="line">            addPartConverter(<span class="keyword">new</span> JsonbHttpMessageConverter());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (kotlinSerializationJsonPresent) &#123;</span><br><span class="line">            addPartConverter(<span class="keyword">new</span> KotlinSerializationJsonHttpMessageConverter());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jackson2XmlPresent &amp;&amp; !shouldIgnoreXml) &#123;</span><br><span class="line">            addPartConverter(<span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jackson2SmilePresent) &#123;</span><br><span class="line">            addPartConverter(<span class="keyword">new</span> MappingJackson2SmileHttpMessageConverter());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormHttpMessageConverter</span> <span class="keyword">implements</span> <span class="title">HttpMessageConverter</span>&lt;<span class="title">MultiValueMap</span>&lt;<span class="title">String</span>, ?&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; partConverters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPartConverter</span><span class="params">(HttpMessageConverter&lt;?&gt; partConverter)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(partConverter, <span class="string">&quot;&#x27;partConverter&#x27; must not be null&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.partConverters.add(partConverter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>AllEncompassingFormHttpMessageConverter</code>类构造器看到<code>MappingJackson2HttpMessageConverter</code>类的实例化，<code>AllEncompassingFormHttpMessageConverter</code><strong>包含</strong><code>MappingJackson2HttpMessageConverter</code>。</p>
<p> <code>ReturnValueHandler</code>是怎么与<code>MappingJackson2HttpMessageConverter</code>关联起来？请看下节。</p>
<h2 id="ReturnValueHandler与MappingJackson2HttpMessageConverter关联"><a href="#ReturnValueHandler与MappingJackson2HttpMessageConverter关联" class="headerlink" title="ReturnValueHandler与MappingJackson2HttpMessageConverter关联"></a>ReturnValueHandler与MappingJackson2HttpMessageConverter关联</h2><p>再次回顾<code>RequestMappingHandlerAdapter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMethodAdapter</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> HandlerMethodReturnValueHandlerComposite returnValueHandlers;<span class="comment">//我们关注的returnValueHandlers</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span><span class="comment">//本方法在AbstractHandlerMethodAdapter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleInternal</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView mav;</span><br><span class="line">        ...</span><br><span class="line">        mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">            ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line"></span><br><span class="line">            ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>) &#123;<span class="comment">//&lt;---我们关注的returnValueHandlers</span></span><br><span class="line">                invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            webRequest.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do this first, it may add ResponseBody advice beans</span></span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers == <span class="keyword">null</span>) &#123;<span class="comment">//赋值returnValueHandlers</span></span><br><span class="line">            List&lt;HandlerMethodReturnValueHandler&gt; handlers = getDefaultReturnValueHandlers();</span><br><span class="line">            <span class="keyword">this</span>.returnValueHandlers = <span class="keyword">new</span> HandlerMethodReturnValueHandlerComposite().addHandlers(handlers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;HandlerMethodReturnValueHandler&gt; <span class="title">getDefaultReturnValueHandlers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;HandlerMethodReturnValueHandler&gt; handlers = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// Annotation-based return value types</span></span><br><span class="line">        <span class="comment">//这里就是 ReturnValueHandler与 MappingJackson2HttpMessageConverter关联 的关键点</span></span><br><span class="line">        handlers.add(<span class="keyword">new</span> RequestResponseBodyMethodProcessor(getMessageConverters(),<span class="comment">//&lt;---MessageConverters也就传参传进来的</span></span><br><span class="line">                <span class="keyword">this</span>.contentNegotiationManager, <span class="keyword">this</span>.requestResponseBodyAdvice));<span class="comment">//</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> handlers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; getMessageConverters() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.messageConverters;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//RequestMappingHandlerAdapter构造器已初始化部分messageConverters</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">RequestMappingHandlerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageConverters = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> ByteArrayHttpMessageConverter());</span><br><span class="line">        <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> StringHttpMessageConverter());</span><br><span class="line">        <span class="keyword">if</span> (!shouldIgnoreXml) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> SourceHttpMessageConverter&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line">                <span class="comment">// Ignore when no TransformerFactory implementation is available</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> AllEncompassingFormHttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>应用中<code>WebMvcAutoConfiguration</code>（底层是<code>WebMvcConfigurationSupport</code>实现）传入更多<code>messageConverters</code>，其中就包含<code>MappingJackson2HttpMessageConverter</code>。</p>
<h1 id="内容协商原理"><a href="#内容协商原理" class="headerlink" title="内容协商原理"></a>内容协商原理</h1><p>根据客户端接收能力不同，返回不同媒体类型的数据。</p>
<p>引入XML依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可用Postman软件分别测试返回json和xml：只需要改变请求头中Accept字段（application/json、application/xml）。</p>
<p>Http协议中规定的，Accept字段告诉服务器本客户端可以接收的数据类型。</p>
<p><strong>内容协商原理</strong>：</p>
<ol>
<li>判断当前响应头中是否已经有确定的媒体类型<code>MediaType</code>。</li>
<li>获取客户端（PostMan、浏览器）支持接收的内容类型。（获取客户端Accept请求头字段application/xml）（这一步在下一节有详细介绍）<ul>
<li><code>contentNegotiationManager</code> 内容协商管理器 默认使用基于请求头的策略</li>
<li><code>HeaderContentNegotiationStrategy</code>  确定客户端可以接收的内容类型 </li>
</ul>
</li>
<li>遍历循环所有当前系统的 <code>MessageConverter</code>，看谁支持操作这个对象（Person）</li>
<li>找到支持操作Person的converter，把converter支持的媒体类型统计出来。</li>
<li>客户端需要application/xml，服务端有10种MediaType。</li>
<li>进行内容协商的最佳匹配媒体类型</li>
<li>用 支持 将对象转为 最佳匹配媒体类型 的converter。调用它进行转化 。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RequestResponseBodyMethodProcessor继承这类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMessageConverterMethodProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractMessageConverterMethodArgumentResolver</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">HandlerMethodReturnValueHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跟上一节的代码一致</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">writeWithMessageConverters</span><span class="params">(<span class="meta">@Nullable</span> T value, MethodParameter returnType,</span></span></span><br><span class="line"><span class="function"><span class="params">                ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line"></span><br><span class="line">            Object body;</span><br><span class="line">            Class&lt;?&gt; valueType;</span><br><span class="line">            Type targetType;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> CharSequence) &#123;</span><br><span class="line">                body = value.toString();</span><br><span class="line">                valueType = String.class;</span><br><span class="line">                targetType = String.class;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                body = value;</span><br><span class="line">                valueType = getReturnValueType(body, returnType);</span><br><span class="line">                targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            <span class="comment">//本节重点</span></span><br><span class="line">            <span class="comment">//内容协商（浏览器默认会以请求头(参数Accept)的方式告诉服务器他能接受什么样的内容类型）</span></span><br><span class="line">            MediaType selectedMediaType = <span class="keyword">null</span>;</span><br><span class="line">            MediaType contentType = outputMessage.getHeaders().getContentType();</span><br><span class="line">            <span class="keyword">boolean</span> isContentTypePreset = contentType != <span class="keyword">null</span> &amp;&amp; contentType.isConcrete();</span><br><span class="line">            <span class="keyword">if</span> (isContentTypePreset) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">&quot;Found &#x27;Content-Type:&quot;</span> + contentType + <span class="string">&quot;&#x27; in response&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                selectedMediaType = contentType;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                HttpServletRequest request = inputMessage.getServletRequest();</span><br><span class="line">                List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);</span><br><span class="line">                <span class="comment">//服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据</span></span><br><span class="line">                List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (body != <span class="keyword">null</span> &amp;&amp; producibleTypes.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> HttpMessageNotWritableException(</span><br><span class="line">                            <span class="string">&quot;No converter found for return value of type: &quot;</span> + valueType);</span><br><span class="line">                &#125;</span><br><span class="line">                List&lt;MediaType&gt; mediaTypesToUse = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (MediaType requestedType : acceptableTypes) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (MediaType producibleType : producibleTypes) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;</span><br><span class="line">                            mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mediaTypesToUse.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (body != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HttpMediaTypeNotAcceptableException(producibleTypes);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                        logger.debug(<span class="string">&quot;No match for &quot;</span> + acceptableTypes + <span class="string">&quot;, supported: &quot;</span> + producibleTypes);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                MediaType.sortBySpecificityAndQuality(mediaTypesToUse);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//选择一个MediaType</span></span><br><span class="line">                <span class="keyword">for</span> (MediaType mediaType : mediaTypesToUse) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mediaType.isConcrete()) &#123;</span><br><span class="line">                        selectedMediaType = mediaType;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) &#123;</span><br><span class="line">                        selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">&quot;Using &#x27;&quot;</span> + selectedMediaType + <span class="string">&quot;&#x27;, given &quot;</span> +</span><br><span class="line">                            acceptableTypes + <span class="string">&quot; and supported &quot;</span> + producibleTypes);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (selectedMediaType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                selectedMediaType = selectedMediaType.removeQualityValue();</span><br><span class="line">                <span class="comment">//本节主角：HttpMessageConverter</span></span><br><span class="line">                <span class="keyword">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class="keyword">this</span>.messageConverters) &#123;</span><br><span class="line">                    GenericHttpMessageConverter genericConverter = (converter <span class="keyword">instanceof</span> GenericHttpMessageConverter ?</span><br><span class="line">                            (GenericHttpMessageConverter&lt;?&gt;) converter : <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//判断是否可写</span></span><br><span class="line">                    <span class="keyword">if</span> (genericConverter != <span class="keyword">null</span> ?</span><br><span class="line">                            ((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :</span><br><span class="line">                            converter.canWrite(valueType, selectedMediaType)) &#123;</span><br><span class="line">                        body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,</span><br><span class="line">                                (Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt;) converter.getClass(),</span><br><span class="line">                                inputMessage, outputMessage);</span><br><span class="line">                        <span class="keyword">if</span> (body != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            Object theBody = body;</span><br><span class="line">                            LogFormatUtils.traceDebug(logger, traceOn -&gt;</span><br><span class="line">                                    <span class="string">&quot;Writing [&quot;</span> + LogFormatUtils.formatValue(theBody, !traceOn) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                            addContentDispositionHeader(inputMessage, outputMessage);</span><br><span class="line">                            <span class="comment">//开始写入</span></span><br><span class="line">                            <span class="keyword">if</span> (genericConverter != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                genericConverter.write(body, targetType, selectedMediaType, outputMessage);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                ((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                                logger.debug(<span class="string">&quot;Nothing to write: null body&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h2 id="基于请求参数的内容协商原理"><a href="#基于请求参数的内容协商原理" class="headerlink" title="基于请求参数的内容协商原理"></a>基于请求参数的内容协商原理</h2><p>上一节内容协商原理的第二步：</p>
<p>获取客户端（PostMan、浏览器）支持接收的内容类型。（获取客户端Accept请求头字段application/xml）</p>
<ul>
<li><code>contentNegotiationManager</code> 内容协商管理器 默认使用基于请求头的策略</li>
<li><code>HeaderContentNegotiationStrategy</code>  确定客户端可以接收的内容类型 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RequestResponseBodyMethodProcessor继承这类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMessageConverterMethodProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractMessageConverterMethodArgumentResolver</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">HandlerMethodReturnValueHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跟上一节的代码一致</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">writeWithMessageConverters</span><span class="params">(<span class="meta">@Nullable</span> T value, MethodParameter returnType,</span></span></span><br><span class="line"><span class="function"><span class="params">                ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line"></span><br><span class="line">            Object body;</span><br><span class="line">            Class&lt;?&gt; valueType;</span><br><span class="line">            Type targetType;</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//本节重点</span></span><br><span class="line">            <span class="comment">//内容协商（浏览器默认会以请求头(参数Accept)的方式告诉服务器他能接受什么样的内容类型）</span></span><br><span class="line">            MediaType selectedMediaType = <span class="keyword">null</span>;</span><br><span class="line">            MediaType contentType = outputMessage.getHeaders().getContentType();</span><br><span class="line">            <span class="keyword">boolean</span> isContentTypePreset = contentType != <span class="keyword">null</span> &amp;&amp; contentType.isConcrete();</span><br><span class="line">            <span class="keyword">if</span> (isContentTypePreset) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">&quot;Found &#x27;Content-Type:&quot;</span> + contentType + <span class="string">&quot;&#x27; in response&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                selectedMediaType = contentType;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                HttpServletRequest request = inputMessage.getServletRequest();</span><br><span class="line">                List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);</span><br><span class="line">                <span class="comment">//服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据</span></span><br><span class="line">                List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在AbstractMessageConverterMethodArgumentResolver类内</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> List&lt;MediaType&gt; <span class="title">getAcceptableMediaTypes</span><span class="params">(HttpServletRequest request)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> HttpMediaTypeNotAcceptableException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//内容协商管理器 默认使用基于请求头的策略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.contentNegotiationManager.resolveMediaTypes(<span class="keyword">new</span> ServletWebRequest(request));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentNegotiationManager</span> <span class="keyword">implements</span> <span class="title">ContentNegotiationStrategy</span>, <span class="title">MediaTypeFileExtensionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContentNegotiationManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">new</span> HeaderContentNegotiationStrategy());<span class="comment">//内容协商管理器 默认使用基于请求头的策略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;MediaType&gt; <span class="title">resolveMediaTypes</span><span class="params">(NativeWebRequest request)</span> <span class="keyword">throws</span> HttpMediaTypeNotAcceptableException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ContentNegotiationStrategy strategy : <span class="keyword">this</span>.strategies) &#123;</span><br><span class="line">            List&lt;MediaType&gt; mediaTypes = strategy.resolveMediaTypes(request);</span><br><span class="line">            <span class="keyword">if</span> (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> mediaTypes;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> MEDIA_TYPE_ALL_LIST;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基于请求头的策略</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderContentNegotiationStrategy</span> <span class="keyword">implements</span> <span class="title">ContentNegotiationStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> HttpMediaTypeNotAcceptableException if the &#x27;Accept&#x27; header cannot be parsed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;MediaType&gt; <span class="title">resolveMediaTypes</span><span class="params">(NativeWebRequest request)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> HttpMediaTypeNotAcceptableException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String[] headerValueArray = request.getHeaderValues(HttpHeaders.ACCEPT);</span><br><span class="line">        <span class="keyword">if</span> (headerValueArray == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> MEDIA_TYPE_ALL_LIST;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; headerValues = Arrays.asList(headerValueArray);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;MediaType&gt; mediaTypes = MediaType.parseMediaTypes(headerValues);</span><br><span class="line">            MediaType.sortBySpecificityAndQuality(mediaTypes);</span><br><span class="line">            <span class="keyword">return</span> !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InvalidMediaTypeException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpMediaTypeNotAcceptableException(</span><br><span class="line">                    <span class="string">&quot;Could not parse &#x27;Accept&#x27; header &quot;</span> + headerValues + <span class="string">&quot;: &quot;</span> + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="开启浏览器参数方式内容协商功能"><a href="#开启浏览器参数方式内容协商功能" class="headerlink" title="开启浏览器参数方式内容协商功能"></a>开启浏览器参数方式内容协商功能</h3><p>为了方便内容协商，开启基于请求参数的内容协商功能。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">contentnegotiation:</span></span><br><span class="line">      <span class="attr">favor-parameter:</span> <span class="literal">true</span>  <span class="comment">#开启请求参数内容协商模式</span></span><br></pre></td></tr></table></figure>
<p>内容协商管理器，就会多了一个<code>ParameterContentNegotiationStrategy</code>（由Spring容器注入）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterContentNegotiationStrategy</span> <span class="keyword">extends</span> <span class="title">AbstractMappingContentNegotiationStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String parameterName = <span class="string">&quot;format&quot;</span>;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create an instance with the given map of file extensions and media types.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParameterContentNegotiationStrategy</span><span class="params">(Map&lt;String, MediaType&gt; mediaTypes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediaTypes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the name of the parameter to use to determine requested media types.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;By default this is set to &#123;<span class="doctag">@code</span> &quot;format&quot;&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameterName</span><span class="params">(String parameterName)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(parameterName, <span class="string">&quot;&#x27;parameterName&#x27; is required&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.parameterName = parameterName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameterName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.parameterName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getMediaTypeKey</span><span class="params">(NativeWebRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getParameter(getParameterName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//---以下方法在AbstractMappingContentNegotiationStrategy类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;MediaType&gt; <span class="title">resolveMediaTypes</span><span class="params">(NativeWebRequest webRequest)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> HttpMediaTypeNotAcceptableException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resolveMediaTypeKey(webRequest, getMediaTypeKey(webRequest));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An alternative to &#123;<span class="doctag">@link</span> #resolveMediaTypes(NativeWebRequest)&#125; that accepts</span></span><br><span class="line"><span class="comment">     * an already extracted key.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.2.16</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;MediaType&gt; <span class="title">resolveMediaTypeKey</span><span class="params">(NativeWebRequest webRequest, <span class="meta">@Nullable</span> String key)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> HttpMediaTypeNotAcceptableException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(key)) &#123;</span><br><span class="line">            MediaType mediaType = lookupMediaType(key);</span><br><span class="line">            <span class="keyword">if</span> (mediaType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                handleMatch(key, mediaType);</span><br><span class="line">                <span class="keyword">return</span> Collections.singletonList(mediaType);</span><br><span class="line">            &#125;</span><br><span class="line">            mediaType = handleNoMatch(webRequest, key);</span><br><span class="line">            <span class="keyword">if</span> (mediaType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                addMapping(key, mediaType);</span><br><span class="line">                <span class="keyword">return</span> Collections.singletonList(mediaType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> MEDIA_TYPE_ALL_LIST;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，浏览器地址输入带format参数的URL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;test&#x2F;person?format&#x3D;json</span><br><span class="line">或</span><br><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;test&#x2F;person?format&#x3D;xml</span><br></pre></td></tr></table></figure>
<p>这样，后端会根据参数format的值，返回对应json或xml格式的数据。</p>
<h2 id="自定义MessageConverter"><a href="#自定义MessageConverter" class="headerlink" title="自定义MessageConverter"></a>自定义MessageConverter</h2><p><strong>实现多协议数据兼容。json、xml、x-guigu</strong>（这个是自创的）</p>
<ol>
<li><p><code>@ResponseBody</code> 响应数据出去 调用 <code>RequestResponseBodyMethodProcessor</code> 处理</p>
</li>
<li><p>Processor 处理方法返回值。通过 <code>MessageConverter</code>处理</p>
</li>
<li><p>所有 <code>MessageConverter</code> 合起来可以支持各种媒体类型数据的操作（读、写）</p>
</li>
<li><p>内容协商找到最终的 <code>messageConverter</code></p>
</li>
</ol>
<p>SpringMVC的什么功能，一个入口给容器中添加一个  <code>WebMvcConfigurer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">                converters.add(<span class="keyword">new</span> GuiguMessageConverter());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的Converter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuiguMessageConverter</span> <span class="keyword">implements</span> <span class="title">HttpMessageConverter</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clazz.isAssignableFrom(Person.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务器要统计所有MessageConverter都能写出哪些内容类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * application/x-guigu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;MediaType&gt; <span class="title">getSupportedMediaTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MediaType.parseMediaTypes(<span class="string">&quot;application/x-guigu&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">read</span><span class="params">(Class&lt;? extends Person&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Person person, MediaType contentType, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line">        <span class="comment">//自定义协议数据的写出</span></span><br><span class="line">        String data = person.getUserName()+<span class="string">&quot;;&quot;</span>+person.getAge()+<span class="string">&quot;;&quot;</span>+person.getBirth();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//写出去</span></span><br><span class="line">        OutputStream body = outputMessage.getBody();</span><br><span class="line">        body.write(data.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、浏览器发请求直接返回 xml    [application/xml]        jacksonXmlConverter</span></span><br><span class="line"><span class="comment">     * 2、如果是ajax请求 返回 json   [application/json]      jacksonJsonConverter</span></span><br><span class="line"><span class="comment">     * 3、如果硅谷app发请求，返回自定义协议数据  [appliaction/x-guigu]   xxxxConverter</span></span><br><span class="line"><span class="comment">     *          属性值1;属性值2;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 步骤：</span></span><br><span class="line"><span class="comment">     * 1、添加自定义的MessageConverter进系统底层</span></span><br><span class="line"><span class="comment">     * 2、系统底层就会统计出所有MessageConverter能操作哪些类型</span></span><br><span class="line"><span class="comment">     * 3、客户端内容协商 [guigu---&gt;guigu]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 作业：如何以参数的方式进行内容协商</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span>  <span class="comment">//利用返回值处理器里面的消息转换器进行处理</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test/person&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setAge(<span class="number">28</span>);</span><br><span class="line">        person.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line">        person.setUserName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用Postman发送<code>/test/person</code>（请求头<code>Accept:application/x-guigu</code>)，将返回自定义协议数据的写出。</p>
<h2 id="浏览器与PostMan内容协商完全适配"><a href="#浏览器与PostMan内容协商完全适配" class="headerlink" title="浏览器与PostMan内容协商完全适配"></a>浏览器与PostMan内容协商完全适配</h2><p>假设你想基于自定义请求参数的自定义内容协商功能。</p>
<p>换句话，在地址栏输入<code>http://localhost:8080/test/person?format=gg</code>返回数据，跟<code>http://localhost:8080/test/person</code>且请求头参数<code>Accept:application/x-guigu</code>的返回自定义协议数据的一致。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> /*<span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span>*/ </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、WebMvcConfigurer定制化SpringMVC的功能</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 自定义内容协商策略</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> configurer</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//Map&lt;String, MediaType&gt; mediaTypes</span></span><br><span class="line">                Map&lt;String, MediaType&gt; mediaTypes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                mediaTypes.put(<span class="string">&quot;json&quot;</span>,MediaType.APPLICATION_JSON);</span><br><span class="line">                mediaTypes.put(<span class="string">&quot;xml&quot;</span>,MediaType.APPLICATION_XML);</span><br><span class="line">                <span class="comment">//自定义媒体类型</span></span><br><span class="line">                mediaTypes.put(<span class="string">&quot;gg&quot;</span>,MediaType.parseMediaType(<span class="string">&quot;application/x-guigu&quot;</span>));</span><br><span class="line">                <span class="comment">//指定支持解析哪些参数对应的哪些媒体类型</span></span><br><span class="line">                ParameterContentNegotiationStrategy parameterStrategy = <span class="keyword">new</span> ParameterContentNegotiationStrategy(mediaTypes);</span><br><span class="line"><span class="comment">//                parameterStrategy.setParameterName(&quot;ff&quot;);</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//还需添加请求头处理策略，否则accept:application/json、application/xml则会失效</span></span><br><span class="line">                HeaderContentNegotiationStrategy headeStrategy = <span class="keyword">new</span> HeaderContentNegotiationStrategy();</span><br><span class="line"></span><br><span class="line">                configurer.strategies(Arrays.asList(parameterStrategy, headeStrategy));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>日后开发要注意，<strong>有可能我们添加的自定义的功能会覆盖默认很多功能，导致一些默认的功能失效。</strong></p>
<h1 id="视图解析-Thymeleaf初体验"><a href="#视图解析-Thymeleaf初体验" class="headerlink" title="视图解析-Thymeleaf初体验"></a>视图解析-Thymeleaf初体验</h1><blockquote>
<p><strong>Thymeleaf</strong> is a modern server-side Java template engine for both web and standalone environments.</p>
<p>Thymeleaf’s main goal is to bring elegant <em>natural templates</em> to your development workflow — HTML that can be correctly displayed in browsers and also work as static prototypes, allowing for stronger collaboration in development teams.</p>
<p>With modules for Spring Framework, a host of integrations with your favourite tools, and the ability to plug in your own functionality, Thymeleaf is ideal for modern-day HTML5 JVM web development — although there is much more it can do.——<a href="https://www.thymeleaf.org/">Link</a></p>
</blockquote>
<p><a href="https://www.thymeleaf.org/documentation.html">Thymeleaf官方文档</a></p>
<h2 id="thymeleaf使用"><a href="#thymeleaf使用" class="headerlink" title="thymeleaf使用"></a>thymeleaf使用</h2><h4 id="引入Starter"><a href="#引入Starter" class="headerlink" title="引入Starter"></a>引入Starter</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="自动配置好了thymeleaf"><a href="#自动配置好了thymeleaf" class="headerlink" title="自动配置好了thymeleaf"></a>自动配置好了thymeleaf</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ThymeleafProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; TemplateMode.class, SpringTemplateEngine.class &#125;)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafAutoConfiguration</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自动配好的策略</p>
<ol>
<li><p>所有thymeleaf的配置值都在 ThymeleafProperties</p>
</li>
<li><p>配置好了 <strong>SpringTemplateEngine</strong> </p>
</li>
<li><p>配好了 <strong>ThymeleafViewResolver</strong> </p>
</li>
<li><p>我们只需要直接开发页面</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;<span class="comment">//模板放置处</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;<span class="comment">//文件的后缀名</span></span><br></pre></td></tr></table></figure>
<p>编写一个控制层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewTestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//model中的数据会被放在请求域中 request.setAttribute(&quot;a&quot;,aa)</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;一定要大力发展工业文化&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;link&quot;</span>,<span class="string">&quot;http://www.baidu.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>/templates/success.html</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>nice<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;$&#123;link&#125;&quot;</span>&gt;</span>去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.google.com&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/link&#125;&quot;</span>&gt;</span>去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/app</span> <span class="comment">#设置应用名</span></span><br></pre></td></tr></table></figure>
<p>这个设置后，URL要插入<code>/app</code>,  如<code>http://localhost:8080/app/hello.html</code>。</p>
<h2 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h2><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><table>
<thead>
<tr>
<th>表达式名字</th>
<th>语法</th>
<th align="center">用途</th>
</tr>
</thead>
<tbody><tr>
<td>变量取值</td>
<td>${…}</td>
<td align="center">获取请求域、session域、对象等值</td>
</tr>
<tr>
<td>选择变量</td>
<td>*{…}</td>
<td align="center">获取上下文对象值</td>
</tr>
<tr>
<td>消息</td>
<td>#{…}</td>
<td align="center">获取国际化等值</td>
</tr>
<tr>
<td>链接</td>
<td>@{…}</td>
<td align="center">生成链接</td>
</tr>
<tr>
<td>片段表达式</td>
<td>~{…}</td>
<td align="center">jsp:include 作用，引入公共页面片段</td>
</tr>
</tbody></table>
<h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><ul>
<li>文本值: <strong>‘one text’</strong> <strong>,</strong> <strong>‘Another one!’</strong> <strong>,…</strong></li>
<li>数字: <strong>0</strong> <strong>,</strong> <strong>34</strong> <strong>,</strong> <strong>3.0</strong> <strong>,</strong> <strong>12.3</strong> <strong>,…</strong></li>
<li>布尔值: <strong>true</strong> <strong>,</strong> <strong>false</strong></li>
<li>空值: <strong>null</strong></li>
<li>变量： one，two，…. 变量不能有空格</li>
</ul>
<h4 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h4><ul>
<li>字符串拼接: <strong>+</strong></li>
<li>变量替换: <strong>|The name is ${name}|</strong> </li>
</ul>
<h4 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h4><ul>
<li>运算符: + , - , * , / , %</li>
</ul>
<h4 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h4><ul>
<li>运算符:  <strong>and</strong> <strong>,</strong> <strong>or</strong></li>
<li>一元运算: <strong>!</strong> <strong>,</strong> <strong>not</strong> </li>
</ul>
<h4 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h4><ul>
<li>比较: <strong>&gt;</strong> <strong>,</strong> <strong>&lt;** **,** **&gt;=</strong> <strong>,</strong> <strong>&lt;=</strong> <strong>(</strong> <strong>gt</strong> <strong>,</strong> <strong>lt</strong> <strong>,</strong> <strong>ge</strong> <strong>,</strong> <strong>le</strong> <strong>)</strong></li>
<li>等式: <strong>==</strong> <strong>,</strong> <strong>!=</strong> <strong>(</strong> <strong>eq</strong> <strong>,</strong> <strong>ne</strong> <strong>)</strong> </li>
</ul>
<h4 id="条件运算"><a href="#条件运算" class="headerlink" title="条件运算"></a>条件运算</h4><ul>
<li>If-then: <strong>(if) ? (then)</strong></li>
<li>If-then-else: <strong>(if) ? (then) : (else)</strong></li>
<li>Default: (value) <strong>?: (defaultvalue)</strong> </li>
</ul>
<h4 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h4><ul>
<li>无操作： _</li>
</ul>
<h2 id="设置属性值-th-attr"><a href="#设置属性值-th-attr" class="headerlink" title="设置属性值-th:attr"></a>设置属性值-th:attr</h2><ul>
<li>设置单个值</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;subscribe.html&quot;</span> <span class="attr">th:attr</span>=<span class="string">&quot;action=@&#123;/subscribe&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Subscribe!&quot;</span> <span class="attr">th:attr</span>=<span class="string">&quot;value=#&#123;subscribe.submit&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>设置多个值</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../images/gtvglogo.png&quot;</span>  </span></span><br><span class="line"><span class="tag">     <span class="attr">th:attr</span>=<span class="string">&quot;src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-attribute-values">官方文档 - 5 Setting Attribute Values</a></p>
<h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;prod : $&#123;prods&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.name&#125;&quot;</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.price&#125;&quot;</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;prod,iterStat : $&#123;prods&#125;&quot;</span> <span class="attr">th:class</span>=<span class="string">&quot;$&#123;iterStat.odd&#125;? &#x27;odd&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.name&#125;&quot;</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.price&#125;&quot;</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="条件运算-1"><a href="#条件运算-1" class="headerlink" title="条件运算"></a>条件运算</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;comments.html&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/product/comments(prodId=$&#123;prod.id&#125;)&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #lists.isEmpty(prod.comments)&#125;&quot;</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;user.role&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;admin&#x27;&quot;</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;#&#123;roles.manager&#125;&quot;</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;*&quot;</span>&gt;</span>User is some other thing<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="属性优先级"><a href="#属性优先级" class="headerlink" title="属性优先级"></a>属性优先级</h2><table>
<thead>
<tr>
<th align="left">Order</th>
<th align="left">Feature</th>
<th align="left">Attributes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">Fragment inclusion</td>
<td align="left"><code>th:insert</code> <code>th:replace</code></td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">Fragment iteration</td>
<td align="left"><code>th:each</code></td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">Conditional evaluation</td>
<td align="left"><code>th:if</code> <code>th:unless</code> <code>th:switch</code> <code>th:case</code></td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">Local variable definition</td>
<td align="left"><code>th:object</code> <code>th:with</code></td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">General attribute modification</td>
<td align="left"><code>th:attr</code> <code>th:attrprepend</code> <code>th:attrappend</code></td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">Specific attribute modification</td>
<td align="left"><code>th:value</code> <code>th:href</code> <code>th:src</code> <code>...</code></td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">Text (tag body modification)</td>
<td align="left"><code>th:text</code> <code>th:utext</code></td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">Fragment specification</td>
<td align="left"><code>th:fragment</code></td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">Fragment removal</td>
<td align="left"><code>th:remove</code></td>
</tr>
</tbody></table>
<p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence">官方文档 - 10 Attribute Precedence</a></p>
<h1 id="后台管理系统基本功能"><a href="#后台管理系统基本功能" class="headerlink" title="后台管理系统基本功能"></a>后台管理系统基本功能</h1><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>使用IDEA的Spring Initializr。</p>
<ul>
<li>thymeleaf、</li>
<li>web-starter、</li>
<li>devtools、</li>
<li>lombok</li>
</ul>
<h2 id="登陆页面"><a href="#登陆页面" class="headerlink" title="登陆页面"></a>登陆页面</h2><ul>
<li><p><code>/static</code> 放置 css，js等静态资源</p>
</li>
<li><p><code>/templates/login.html</code> 登录页</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="comment">&lt;!-- 要加这玩意thymeleaf才能用 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-signin&quot;</span> <span class="attr">action</span>=<span class="string">&quot;index.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消息提醒 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;User ID&quot;</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-login btn-block&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-check&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>/templates/main.html</code> 主页</li>
</ul>
<p>thymeleaf内联写法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, [[$&#123;session.user.name&#125;]]!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="登录控制层"><a href="#登录控制层" class="headerlink" title="登录控制层"></a>登录控制层</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 来登录页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &#123;&quot;/&quot;,&quot;/login&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loginPage</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">main</span><span class="params">(User user, HttpSession session, Model model)</span></span>&#123; <span class="comment">//RedirectAttributes</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.hasLength(user.getUserName()) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(user.getPassword()))&#123;</span><br><span class="line">            <span class="comment">//把登陆成功的用户保存起来</span></span><br><span class="line">            session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,user);</span><br><span class="line">            <span class="comment">//登录成功重定向到main.html;  重定向防止表单重复提交</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/main.html&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;账号密码错误&quot;</span>);</span><br><span class="line">            <span class="comment">//回到登录页面</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 去main页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/main.html&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">mainPage</span><span class="params">(HttpSession session, Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最好用拦截器,过滤器</span></span><br><span class="line">        Object loginUser = session.getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(loginUser != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//session过期，没有登陆过</span></span><br><span class="line">            <span class="comment">//回到登录页面</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;请重新登录&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习乱记</title>
    <url>/2022/07/02/Mybatis-dict/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h1><h2 id="MyBatis历史"><a href="#MyBatis历史" class="headerlink" title="MyBatis历史"></a>MyBatis历史</h2><ul>
<li><p>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下，iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github</p>
</li>
<li><p>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</p>
</li>
</ul>
<a id="more"></a>

<h2 id="MyBatis特性"><a href="#MyBatis特性" class="headerlink" title="MyBatis特性"></a>MyBatis特性</h2><ol>
<li><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</p>
</li>
<li><p>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</p>
</li>
<li><p>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</p>
</li>
<li><p>MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</p>
</li>
</ol>
<h2 id="MyBatis下载"><a href="#MyBatis下载" class="headerlink" title="MyBatis下载"></a>MyBatis下载</h2><ul>
<li><a href="https://github.com/mybatis/mybatis-3">MyBatis下载地址</a></li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/MyBatis下载.png" width="90%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">下载</div>
</center>

<h2 id="和其它持久化层技术对比"><a href="#和其它持久化层技术对比" class="headerlink" title="和其它持久化层技术对比"></a>和其它持久化层技术对比</h2><ul>
<li><p>JDBC  </p>
<ul>
<li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤  </li>
<li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见  </li>
<li>代码冗长，开发效率低</li>
</ul>
</li>
<li><p>Hibernate 和 JPA</p>
<ul>
<li>操作简便，开发效率高  </li>
<li>程序中的长难复杂 SQL 需要绕过框架  </li>
<li>内部自动生产的 SQL，不容易做特殊优化  </li>
<li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。  </li>
<li>反射操作太多，导致数据库性能下降</li>
</ul>
</li>
<li><p>MyBatis</p>
<ul>
<li><p>轻量级，性能出色  </p>
</li>
<li><p>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据  </p>
</li>
<li><p>开发效率稍逊于HIbernate，但是完全能够接受</p>
</li>
</ul>
</li>
</ul>
<h1 id="搭建MyBatis"><a href="#搭建MyBatis" class="headerlink" title="搭建MyBatis"></a>搭建MyBatis</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul>
<li><p>IDE：idea 2019.2  </p>
</li>
<li><p>构建工具：maven 3.5.4  </p>
</li>
<li><p>MySQL版本：MySQL 5.7  </p>
</li>
<li><p>MyBatis版本：MyBatis 3.5.7</p>
</li>
</ul>
<h2 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h2><ul>
<li><p>打包方式：jar</p>
</li>
<li><p>引入依赖</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="创建MyBatis的核心配置文件"><a href="#创建MyBatis的核心配置文件" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h2><blockquote>
<p>习惯上命名为<code>mybatis-config.xml</code>，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。<br>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息<br>核心配置文件存放的位置是src/main/resources目录下</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>  </span><br><span class="line">  <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  </span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!--设置连接数据库的环境--&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span>  </span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span>  </span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/MyBatis&quot;</span>/&gt;</span>  </span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>  </span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">environment</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!--引入映射文件--&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="创建mapper接口"><a href="#创建mapper接口" class="headerlink" title="创建mapper接口"></a>创建mapper接口</h2><blockquote>
<p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mybatis.mapper;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * 添加用户信息  </span></span><br><span class="line"><span class="comment">    */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建MyBatis的映射文件"><a href="#创建MyBatis的映射文件" class="headerlink" title="创建MyBatis的映射文件"></a>创建MyBatis的映射文件</h2><ul>
<li>相关概念：ORM（Object Relationship Mapping）对象关系映射。  <ul>
<li>对象：Java的实体类对象  </li>
<li>关系：关系型数据库  </li>
<li>映射：二者之间的对应关系</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>Java概念</th>
<th>数据库概念</th>
</tr>
</thead>
<tbody><tr>
<td>类</td>
<td>表</td>
</tr>
<tr>
<td>属性</td>
<td>字段/列</td>
</tr>
<tr>
<td>对象</td>
<td>记录/行</td>
</tr>
</tbody></table>
<ul>
<li>映射文件的命名规则<ul>
<li>表所对应的实体类的类名+Mapper.xml</li>
<li>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml </li>
<li>因此一个映射文件对应一个实体类，对应一张表的操作</li>
<li>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</li>
<li>MyBatis映射文件存放的位置是src/main/resources/mappers目录下</li>
</ul>
</li>
<li>MyBatis中可以面向接口操作数据，要保证两个一致<ul>
<li>mapper接口的全类名和映射文件的命名空间（namespace）保持一致</li>
<li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>  </span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--int insertUser();--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span>  </span><br><span class="line">        insert into t_user values(null,&#x27;张三&#x27;,&#x27;123&#x27;,23,&#x27;女&#x27;)  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="通过junit测试功能"><a href="#通过junit测试功能" class="headerlink" title="通过junit测试功能"></a>通过junit测试功能</h2><ul>
<li><p>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</p>
</li>
<li><p>SqlSessionFactory：是“生产”SqlSession的“工厂”</p>
</li>
<li><p>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//读取MyBatis的核心配置文件</span></span><br><span class="line">        InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactoryBuilder对象</span></span><br><span class="line">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        <span class="comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is);</span><br><span class="line">        <span class="comment">//获取sqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class="line">        <span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line">        <span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交  </span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span></span><br><span class="line">        <span class="keyword">int</span> result = userMapper.insertUser();</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        <span class="comment">//sqlSession.commit();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>此时需要手动提交事务，如果要自动提交事务，则在获取sqlSession对象时，使用<code>SqlSession sqlSession = sqlSessionFactory.openSession(true);</code>，传入一个Boolean类型的参数，值为true，这样就可以自动提交</li>
</ul>
<h2 id="加入log4j日志功能"><a href="#加入log4j日志功能" class="headerlink" title="加入log4j日志功能"></a>加入log4j日志功能</h2><ol>
<li><p>加入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>加入log4j的配置文件</p>
<ul>
<li><p>log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下</p>
</li>
<li><p>日志的级别：FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试) 从左到右打印的内容越来越详细</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">log4j</span>:configuration <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="核心配置文件详解"><a href="#核心配置文件详解" class="headerlink" title="核心配置文件详解"></a>核心配置文件详解</h1></li>
</ul>
</li>
</ol>
<blockquote>
<p>核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)：<br>properties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">   <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//MyBatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">   <span class="meta-string">&quot;http://MyBatis.org/dtd/MyBatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--引入properties文件，此时就可以$&#123;属性名&#125;的方式访问属性值--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   typeAlias：设置某个具体的类型的别名</span></span><br><span class="line"><span class="comment">   属性：</span></span><br><span class="line"><span class="comment">   type：需要设置别名的类型的全类名</span></span><br><span class="line"><span class="comment">   alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot; alias=&quot;user&quot;&gt;</span></span><br><span class="line"><span class="comment">   &lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.bean&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> environments：设置多个连接数据库的环境</span></span><br><span class="line"><span class="comment"> 属性：</span></span><br><span class="line"><span class="comment">   default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   environment：设置具体的连接数据库的环境信息</span></span><br><span class="line"><span class="comment">   属性：</span></span><br><span class="line"><span class="comment">       id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       transactionManager：设置事务管理方式</span></span><br><span class="line"><span class="comment">       属性：</span></span><br><span class="line"><span class="comment">           type：设置事务管理方式，type=&quot;JDBC|MANAGED&quot;</span></span><br><span class="line"><span class="comment">           type=&quot;JDBC&quot;：设置当前环境的事务管理都必须手动处理</span></span><br><span class="line"><span class="comment">           type=&quot;MANAGED&quot;：设置事务被管理，例如spring中的AOP</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       dataSource：设置数据源</span></span><br><span class="line"><span class="comment">       属性：</span></span><br><span class="line"><span class="comment">           type：设置数据源的类型，type=&quot;POOLED|UNPOOLED|JNDI&quot;</span></span><br><span class="line"><span class="comment">           type=&quot;POOLED&quot;：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建</span></span><br><span class="line"><span class="comment">           type=&quot;UNPOOLED&quot;：不使用数据库连接池，即每次使用连接都需要重新创建</span></span><br><span class="line"><span class="comment">           type=&quot;JNDI&quot;：调用上下文中的数据源</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--设置驱动类的全类名--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;mapper resource=&quot;UserMapper.xml&quot;/&gt; --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   以包为单位，将包下所有的映射文件引入核心配置文件</span></span><br><span class="line"><span class="comment">   注意：</span></span><br><span class="line"><span class="comment">       1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下</span></span><br><span class="line"><span class="comment">       2. mapper接口要和mapper映射文件的名字一致</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/mapper接口和mapper映射文件在同一包下.png" width="50%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">mapper接口和mapper映射文件在同一包下</div>
</center>

<h1 id="默认的类型别名"><a href="#默认的类型别名" class="headerlink" title="默认的类型别名"></a>默认的类型别名</h1><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/默认的类型别名1.png" width="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">默认的类型别名</div>
</center>

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/默认的类型别名2.png" width="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">默认的类型别名</div>
</center>

<h1 id="MyBatis的增删改查"><a href="#MyBatis的增删改查" class="headerlink" title="MyBatis的增删改查"></a>MyBatis的增删改查</h1><ol>
<li><p>添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>删除</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">    delete from t_user where id = 6</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int updateUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">    update t_user set username = &#x27;张三&#x27; where id = 5</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>查询一个实体类对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span>  </span><br><span class="line">    select * from t_user where id = 2  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>查询集合</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>注意：</p>
<ol>
<li><p>查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系  </p>
<ul>
<li>resultType：自动映射，用于属性名和表中字段名一致的情况  </li>
<li>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况  </li>
</ul>
</li>
<li><p>当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</p>
</li>
</ol>
</li>
</ul>
<h1 id="MyBatis获取参数值的两种方式（重点）"><a href="#MyBatis获取参数值的两种方式（重点）" class="headerlink" title="MyBatis获取参数值的两种方式（重点）"></a>MyBatis获取参数值的两种方式（重点）</h1><ul>
<li><p>MyBatis获取参数值的两种方式：${}和#{}  </p>
</li>
<li><p>${}的本质就是字符串拼接，#{}的本质就是占位符赋值  </p>
</li>
<li><p>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</p>
</li>
</ul>
<h2 id="单个字面量类型的参数"><a href="#单个字面量类型的参数" class="headerlink" title="单个字面量类型的参数"></a>单个字面量类型的参数</h2><ul>
<li><p>若mapper接口中的方法参数为单个的字面量类型，此时可以使用${}和#{}以任意的名称（最好见名识意）获取参数的值，注意${}需要手动加单引号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select * from t_user where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">  select * from t_user where username = &#x27;$&#123;username&#125;&#x27;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="多个字面量类型的参数"><a href="#多个字面量类型的参数" class="headerlink" title="多个字面量类型的参数"></a>多个字面量类型的参数</h2></li>
<li><p>若mapper接口中的方法参数为多个时，此时MyBatis会自动将这些参数放在一个map集合中</p>
<ol>
<li>以arg0,arg1…为键，以参数为值；</li>
<li>以param1,param2…为键，以参数为值；</li>
</ol>
</li>
<li><p>因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号。</p>
</li>
<li><p>使用arg或者param都行，要注意的是，arg是从arg0开始的，param是从param1开始的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLogin(String username,String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">  select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLogin(String username,String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select * from t_user where username = &#x27;$&#123;param1&#125;&#x27; and password = &#x27;$&#123;param2&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="map集合类型的参数"><a href="#map集合类型的参数" class="headerlink" title="map集合类型的参数"></a>map集合类型的参数</h2></li>
<li><p>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLoginByMap(Map&lt;String,Object&gt; map);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkLoginByMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  SqlSession sqlSession = SqlSessionUtils.getSqlSession();</span><br><span class="line">  ParameterMapper mapper = sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">  Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  map.put(<span class="string">&quot;usermane&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">  map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">  User user = mapper.checkLoginByMap(map);</span><br><span class="line">  System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实体类类型的参数"><a href="#实体类类型的参数" class="headerlink" title="实体类类型的参数"></a>实体类类型的参数</h2></li>
<li><p>若mapper接口中的方法参数为实体类对象时此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">  insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  SqlSession sqlSession = SqlSessionUtils.getSqlSession();</span><br><span class="line">  ParameterMapper mapper = sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">  User user = <span class="keyword">new</span> User(<span class="keyword">null</span>,<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">12</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>);</span><br><span class="line">  mapper.insertUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用-Param标识参数"><a href="#使用-Param标识参数" class="headerlink" title="使用@Param标识参数"></a>使用@Param标识参数</h2></li>
<li><p>可以通过@Param注解标识mapper接口中的方法参数，此时，会将这些参数放在map集合中 </p>
<ol>
<li>以@Param注解的value属性值为键，以参数为值；</li>
<li>以param1,param2…为键，以参数为值；</li>
</ol>
</li>
<li><p>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User CheckLoginByParam(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;CheckLoginByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">      select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkLoginByParam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  SqlSession sqlSession = SqlSessionUtils.getSqlSession();</span><br><span class="line">  ParameterMapper mapper = sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">  mapper.CheckLoginByParam(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li>
<li><p>建议分成两种情况进行处理</p>
<ol>
<li><p>实体类类型的参数</p>
</li>
<li><p>使用@Param标识参数</p>
</li>
</ol>
</li>
</ul>
<h1 id="MyBatis的各种查询功能"><a href="#MyBatis的各种查询功能" class="headerlink" title="MyBatis的各种查询功能"></a>MyBatis的各种查询功能</h1><ol>
<li><p>如果查询出的数据只有一条，可以通过</p>
<ol>
<li>实体类对象接收</li>
<li>List集合接收</li>
<li>Map集合接收，结果<code>&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;</code></li>
</ol>
</li>
<li><p>如果查询出的数据有多条，一定不能用实体类对象接收，会抛异常TooManyResultsException，可以通过</p>
<ol>
<li><p>实体类类型的LIst集合接收</p>
</li>
<li><p>Map类型的LIst集合接收</p>
</li>
<li><p>在mapper接口的方法上添加@MapKey注解</p>
</li>
</ol>
</li>
</ol>
<h2 id="查询一个实体类对象"><a href="#查询一个实体类对象" class="headerlink" title="查询一个实体类对象"></a>查询一个实体类对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户id查询用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">User <span class="title">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="查询一个List集合"><a href="#查询一个List集合" class="headerlink" title="查询一个List集合"></a>查询一个List集合</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="查询单个数据"><a href="#查询单个数据" class="headerlink" title="查询单个数据"></a>查询单个数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment">* 查询用户的总记录数  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">* 在MyBatis中，对于Java中常用的类型都设置了类型别名  </span></span><br><span class="line"><span class="comment">* 例如：java.lang.Integer--&gt;int|integer  </span></span><br><span class="line"><span class="comment">* 例如：int--&gt;_int|_integer  </span></span><br><span class="line"><span class="comment">* 例如：Map--&gt;map,List--&gt;list  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int getCount();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;_integer&quot;</span>&gt;</span></span><br><span class="line">    select count(id) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="查询一条数据为map集合"><a href="#查询一条数据为map集合" class="headerlink" title="查询一条数据为map集合"></a>查询一条数据为map集合</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment">* 根据用户id查询用户信息为map集合  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getUserToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getUserToMap(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结果：&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;--&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="查询多条数据为map集合"><a href="#查询多条数据为map集合" class="headerlink" title="查询多条数据为map集合"></a>查询多条数据为map集合</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment">* 查询所有用户信息为map集合  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此时可以将这些map放在一个list集合中获取  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; getAllUserToMap();</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span>  </span><br><span class="line">    select * from t_user  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">[&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;]</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并且最终要以一个map的方式返回数据，此时需要通过<span class="doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的map集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getAllUserToMap</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="特殊SQL的执行"><a href="#特殊SQL的执行" class="headerlink" title="特殊SQL的执行"></a>特殊SQL的执行</h1><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户名进行模糊查询</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> username </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.User&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByLike</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByLike(@Param(&quot;username&quot;) String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)--&gt;</span>  </span><br><span class="line">    select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其中<code>select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</code>是最常用的</li>
</ul>
<h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><ul>
<li>只能使用${}，如果使用#{}，则解析后的sql语句为<code>delete from t_user where id in (&#39;1,2,3&#39;)</code>，这样是将<code>1,2,3</code>看做是一个整体，只有id为<code>1,2,3</code>的数据会被删除。正确的语句应该是<code>delete from t_user where id in (1,2,3)</code>，或者<code>delete from t_user where id in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据id批量删除</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> ids </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteMore</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">    delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  SqlSession sqlSession = SqlSessionUtils.getSqlSession();</span><br><span class="line">  SQLMapper mapper = sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">  <span class="keyword">int</span> result = mapper.deleteMore(<span class="string">&quot;1,2,3,8&quot;</span>);</span><br><span class="line">  System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="动态设置表名"><a href="#动态设置表名" class="headerlink" title="动态设置表名"></a>动态设置表名</h2><ul>
<li>只能使用${}，因为表名不能加单引号</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询指定表中的数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> tableName </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.User&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByTable</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByTable(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByTable&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="添加功能–获取自增的主键"><a href="#添加功能–获取自增的主键" class="headerlink" title="添加功能–获取自增的主键"></a>添加功能–获取自增的主键</h2><ul>
<li><p>使用场景</p>
<ul>
<li>t_clazz(clazz_id,clazz_name)  </li>
<li>t_student(student_id,student_name,clazz_id)  </li>
</ul>
<ol>
<li>添加班级信息  </li>
<li>获取新添加的班级的id  </li>
<li>为班级分配学生，即将某学的班级id修改为新添加的班级的id</li>
</ol>
</li>
<li><p>在mapper.xml中设置两个属性</p>
<ul>
<li>useGeneratedKeys：设置使用自增的主键  </li>
</ul>
<ul>
<li>keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--void insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user values (null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  SqlSession sqlSession = SqlSessionUtils.getSqlSession();</span><br><span class="line">  SQLMapper mapper = sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">  User user = <span class="keyword">new</span> User(<span class="keyword">null</span>, <span class="string">&quot;ton&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@321.com&quot;</span>);</span><br><span class="line">  mapper.insertUser(user);</span><br><span class="line">  System.out.println(user);</span><br><span class="line">  <span class="comment">//输出：user&#123;id=10, username=&#x27;ton&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@321.com&#x27;&#125;，自增主键存放到了user的id属性中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="自定义映射resultMap"><a href="#自定义映射resultMap" class="headerlink" title="自定义映射resultMap"></a>自定义映射resultMap</h1><h2 id="resultMap处理字段和属性的映射关系"><a href="#resultMap处理字段和属性的映射关系" class="headerlink" title="resultMap处理字段和属性的映射关系"></a>resultMap处理字段和属性的映射关系</h2><ul>
<li><p>resultMap：设置自定义映射  </p>
<ul>
<li>属性：  <ul>
<li>id：表示自定义映射的唯一标识，不能重复</li>
<li>type：查询的数据要映射的实体类的类型  </li>
</ul>
</li>
<li>子标签：  <ul>
<li>id：设置主键的映射关系  </li>
<li>result：设置普通字段的映射关系  </li>
<li>子标签属性：  <ul>
<li>property：设置映射关系中实体类中的属性名  </li>
<li>column：设置映射关系中表中的字段名</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射，即使字段名和属性名一致的属性也要映射，也就是全部属性都要列出来</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">  select * from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性名符合Java的规则（使用驼峰）。此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系  </p>
<ol>
<li><p>可以通过为字段起别名的方式，保证和实体类中的属性名保持一致  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select eid,emp_name empName,age,sex,email from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以在MyBatis的核心配置文件中的<code>setting</code>标签中，设置一个全局配置信息mapUnderscoreToCamelCase，可以在查询表中数据时，自动将_类型的字段名转换为驼峰，例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为userName。<a href="#%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3">核心配置文件详解</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="多对一映射处理"><a href="#多对一映射处理" class="headerlink" title="多对一映射处理"></a>多对一映射处理</h2></li>
</ol>
</li>
</ul>
<blockquote>
<p>查询员工信息以及员工所对应的部门信息</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;  </span><br><span class="line">   <span class="keyword">private</span> Integer eid;  </span><br><span class="line">   <span class="keyword">private</span> String empName;  </span><br><span class="line">   <span class="keyword">private</span> Integer age;  </span><br><span class="line">   <span class="keyword">private</span> String sex;  </span><br><span class="line">   <span class="keyword">private</span> String email;  </span><br><span class="line">   <span class="keyword">private</span> Dept dept;</span><br><span class="line">   <span class="comment">//...构造器、get、set方法等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="级联方式处理映射关系"><a href="#级联方式处理映射关系" class="headerlink" title="级联方式处理映射关系"></a>级联方式处理映射关系</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span>&gt;</span></span><br><span class="line">     select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用association处理映射关系"><a href="#使用association处理映射关系" class="headerlink" title="使用association处理映射关系"></a>使用association处理映射关系</h3><ul>
<li><p>association：处理多对一的映射关系</p>
</li>
<li><p>property：需要处理多对的映射关系的属性名</p>
</li>
<li><p>javaType：该属性的类型</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span>&gt;</span></span><br><span class="line">  select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="分步查询"><a href="#分步查询" class="headerlink" title="分步查询"></a>分步查询</h3><h4 id="1-查询员工信息"><a href="#1-查询员工信息" class="headerlink" title="1. 查询员工信息"></a>1. 查询员工信息</h4><ul>
<li><p>select：设置分布查询的sql的唯一标识（namespace.SQLId或mapper接口的全类名.方法名）</p>
</li>
<li><p>column：设置分步查询的条件</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EmpMapper里的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过分步查询，员工及所对应的部门信息</span></span><br><span class="line"><span class="comment">* 分步查询第一步：查询员工信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Emp</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Emp <span class="title">getEmpAndDeptByStepOne</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> Integer eid)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByStepOne(@Param(&quot;eid&quot;) Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-查询部门信息"><a href="#2-查询部门信息" class="headerlink" title="2. 查询部门信息"></a>2. 查询部门信息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DeptMapper里的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过分步查询，员工及所对应的部门信息</span></span><br><span class="line"><span class="comment">* 分步查询第二步：通过did查询员工对应的部门信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Emp</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Dept <span class="title">getEmpAndDeptByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--此处的resultMap仅是处理字段和属性的映射关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getEmpAndDeptByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="一对多映射处理"><a href="#一对多映射处理" class="headerlink" title="一对多映射处理"></a>一对多映射处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Integer did;</span><br><span class="line">  <span class="keyword">private</span> String deptName;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Emp&gt; emps;</span><br><span class="line">  <span class="comment">//...构造器、get、set方法等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h3><ul>
<li><p>collection：用来处理一对多的映射关系</p>
</li>
<li><p>ofType：表示该属性对饮的集合中存储的数据的类型</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmp(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="分步查询-1"><a href="#分步查询-1" class="headerlink" title="分步查询"></a>分步查询</h3><h4 id="1-查询部门信息"><a href="#1-查询部门信息" class="headerlink" title="1. 查询部门信息"></a>1. 查询部门信息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过分步查询，查询部门及对应的所有员工信息</span></span><br><span class="line"><span class="comment">* 分步查询第一步：查询部门信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> did </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Dept</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Dept <span class="title">getDeptAndEmpByStepOne</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmpByStepOne(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-根据部门id查询部门中的所有员工"><a href="#2-根据部门id查询部门中的所有员工" class="headerlink" title="2. 根据部门id查询部门中的所有员工"></a>2. 根据部门id查询部门中的所有员工</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过分步查询，查询部门及对应的所有员工信息</span></span><br><span class="line"><span class="comment">* 分步查询第二步：根据部门id查询部门中的所有员工</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.Emp&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;Emp&gt; <span class="title">getDeptAndEmpByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getDeptAndEmpByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><ul>
<li><p>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：</p>
<ul>
<li>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载  </li>
<li>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载  </li>
</ul>
</li>
<li><p>此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载，fetchType=”lazy(延迟加载)|eager(立即加载)”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getEmpAndDeptByStepOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = SqlSessionUtils.getSqlSession();</span><br><span class="line">    EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    Emp emp = mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp.getEmpName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>关闭延迟加载，两条SQL语句都运行了</p>
</li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/延迟加载测试1.png" width="90%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">延迟加载测试1</div>
</center>

<ul>
<li>开启延迟加载，只运行获取emp的SQL语句</li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/延迟加载测试2.png" width="90%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">延迟加载测试2</div>
</center>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getEmpAndDeptByStepOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  SqlSession sqlSession = SqlSessionUtils.getSqlSession();</span><br><span class="line">  EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">  Emp emp = mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">  System.out.println(emp.getEmpName());</span><br><span class="line">  System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">  System.out.println(emp.getDept());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>开启后，需要用到查询dept的时候才会调用相应的SQL语句</li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/延迟加载测试3.png" width="90%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">延迟加载测试3</div>
</center>

<ul>
<li>fetchType：当开启了全局的延迟加载之后，可以通过该属性手动控制延迟加载的效果，fetchType=”lazy(延迟加载)|eager(立即加载)”</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">column</span>=<span class="string">&quot;did&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><ul>
<li>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决拼接SQL语句字符串时的痛点问题</li>
</ul>
<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul>
<li><p>if标签可通过test属性（即传递过来的数据）的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行</p>
</li>
<li><p>在where后面添加一个恒成立条件<code>1=1</code></p>
<ul>
<li><p>这个恒成立条件并不会影响查询的结果</p>
</li>
<li><p>这个<code>1=1</code>可以用来拼接<code>and</code>语句，例如：当empName为null时</p>
<ul>
<li><p>如果不加上恒成立条件，则SQL语句为<code>select * from t_emp where and age = ? and sex = ? and email = ?</code>，此时<code>where</code>会与<code>and</code>连用，SQL语句会报错</p>
</li>
<li><p>如果加上一个恒成立条件，则SQL语句为<code>select * from t_emp where 1= 1 and age = ? and sex = ? and email = ?</code>，此时不报错</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where 1=1</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and emp_name = #&#123;empName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><ul>
<li><p>where和if一般结合使用：</p>
<ul>
<li><p>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字  </p>
</li>
<li><p>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and/or去掉  </p>
</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      emp_name = #&#123;empName&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and age = #&#123;age&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and sex = #&#123;sex&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and email = #&#123;email&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>注意：where标签不能去掉条件后多余的and/or</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这种用法是错误的，只能去掉条件前面的and/or，条件后面的不行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2></li>
<li><p>trim用于去掉或添加标签中的内容  </p>
</li>
<li><p>常用属性</p>
<ul>
<li>prefix：在trim标签中的内容的前面添加某些内容  </li>
<li>suffix：在trim标签中的内容的后面添加某些内容 </li>
<li>prefixOverrides：在trim标签中的内容的前面去掉某些内容  </li>
<li>suffixOverrides：在trim标签中的内容的后面去掉某些内容</li>
</ul>
</li>
<li><p>若trim中的标签都不满足条件，则trim标签没有任何效果，也就是只剩下<code>select * from t_emp</code></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        emp_name = #&#123;empName&#125; and</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        age = #&#123;age&#125; and</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        sex = #&#123;sex&#125; or</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        email = #&#123;email&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getEmpByCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  SqlSession sqlSession = SqlSessionUtils.getSqlSession();</span><br><span class="line">  DynamicSQLMapper mapper = sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">  List&lt;Emp&gt; emps= mapper.getEmpByCondition(<span class="keyword">new</span> Emp(<span class="keyword">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">  System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/trim测试结果.png" width="90%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">trim测试结果</div>
</center>

<h2 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h2><ul>
<li><p><code>choose、when、otherwise</code>相当于<code>if...else if..else</code></p>
</li>
<li><p>when至少要有一个，otherwise至多只有一个</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            emp_name = #&#123;empName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            sex = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            email = #&#123;email&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            did = 1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getEmpByChoose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  SqlSession sqlSession = SqlSessionUtils.getSqlSession();</span><br><span class="line">  DynamicSQLMapper mapper = sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">  List&lt;Emp&gt; emps = mapper.getEmpByChoose(<span class="keyword">new</span> Emp(<span class="keyword">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>, <span class="keyword">null</span>));</span><br><span class="line">  System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/choose测试结果.png" width="90%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">choose测试结果</div>
</center>

<ul>
<li>相当于<code>if a else if b else if c else d</code>，<strong>只会执行其中一个</strong></li>
</ul>
<h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><ul>
<li><p>属性：  </p>
<ul>
<li>collection：设置要循环的数组或集合  </li>
<li>item：表示集合或数组中的每一个数据  </li>
<li>separator：设置循环体之间的分隔符，分隔符前后默认有一个空格，如<code>,</code></li>
<li>open：设置foreach标签中的内容的开始符  </li>
<li>close：设置foreach标签中的内容的结束符</li>
</ul>
</li>
<li><p>批量删除</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(Integer[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">  delete from t_emp where eid in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">      #&#123;eid&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMoreByArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  SqlSession sqlSession = SqlSessionUtils.getSqlSession();</span><br><span class="line">  DynamicSQLMapper mapper = sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">  <span class="keyword">int</span> result = mapper.deleteMoreByArray(<span class="keyword">new</span> Integer[]&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;);</span><br><span class="line">  System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/foreach测试结果1.png" width="90%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">foreach测试结果1</div>
</center>

<ul>
<li>批量添加</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertMoreByList(@Param(&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreByList&quot;</span>&gt;</span></span><br><span class="line">  insert into t_emp values</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">    (null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertMoreByList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  SqlSession sqlSession = SqlSessionUtils.getSqlSession();</span><br><span class="line">  DynamicSQLMapper mapper = sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">  Emp emp1 = <span class="keyword">new</span> Emp(<span class="keyword">null</span>,<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">  Emp emp2 = <span class="keyword">new</span> Emp(<span class="keyword">null</span>,<span class="string">&quot;b&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">  Emp emp3 = <span class="keyword">new</span> Emp(<span class="keyword">null</span>,<span class="string">&quot;c&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">  List&lt;Emp&gt; emps = Arrays.asList(emp1, emp2, emp3);</span><br><span class="line">  <span class="keyword">int</span> result = mapper.insertMoreByList(emps);</span><br><span class="line">  System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/foreach测试结果2.png" width="90%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">foreach测试结果2</div>
</center>

<h2 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h2><ul>
<li><p>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</p>
</li>
<li><p>声明sql片段：<code>&lt;sql&gt;</code>标签</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span>eid,emp_name,age,sex,email<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>引用sql片段：<code>&lt;include&gt;</code>标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">  select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="MyBatis的缓存"><a href="#MyBatis的缓存" class="headerlink" title="MyBatis的缓存"></a>MyBatis的缓存</h1><h2 id="MyBatis的一级缓存"><a href="#MyBatis的一级缓存" class="headerlink" title="MyBatis的一级缓存"></a>MyBatis的一级缓存</h2><ul>
<li><p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问  </p>
</li>
<li><p>使一级缓存失效的四种情况：  </p>
<ol>
<li><p>不同的SqlSession对应不同的一级缓存  </p>
</li>
<li><p>同一个SqlSession但是查询条件不同</p>
</li>
<li><p>同一个SqlSession两次查询期间执行了任何一次增删改操作</p>
</li>
<li><p>同一个SqlSession两次查询期间手动清空了缓存</p>
</li>
</ol>
</li>
</ul>
<h2 id="MyBatis的二级缓存"><a href="#MyBatis的二级缓存" class="headerlink" title="MyBatis的二级缓存"></a>MyBatis的二级缓存</h2><ul>
<li><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取  </p>
</li>
<li><p>二级缓存开启的条件</p>
<ol>
<li>在核心配置文件中，设置全局配置属性cacheEnabled=”true”，默认为true，不需要设置</li>
<li>在映射文件中设置标签<cache /></li>
<li>二级缓存必须在SqlSession关闭或提交之后有效</li>
<li>查询的数据所转换的实体类类型必须实现序列化的接口</li>
</ol>
</li>
<li><p>使二级缓存失效的情况：两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p>
</li>
</ul>
<h2 id="二级缓存的相关配置"><a href="#二级缓存的相关配置" class="headerlink" title="二级缓存的相关配置"></a>二级缓存的相关配置</h2><ul>
<li><p>在mapper配置文件中添加的cache标签可以设置一些属性</p>
</li>
<li><p>eviction属性：缓存回收策略  </p>
<ul>
<li>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。  </li>
<li>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。  </li>
<li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。  </li>
<li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li>
<li>默认的是 LRU</li>
</ul>
</li>
<li><p>flushInterval属性：刷新间隔，单位毫秒</p>
<ul>
<li>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句（增删改）时刷新</li>
</ul>
</li>
<li><p>size属性：引用数目，正整数</p>
<ul>
<li>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li>
</ul>
</li>
<li><p>readOnly属性：只读，true/false</p>
<ul>
<li><p>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。  </p>
</li>
<li><p>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false</p>
</li>
</ul>
</li>
</ul>
<h2 id="MyBatis缓存查询的顺序"><a href="#MyBatis缓存查询的顺序" class="headerlink" title="MyBatis缓存查询的顺序"></a>MyBatis缓存查询的顺序</h2><ul>
<li><p>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用  </p>
</li>
<li><p>如果二级缓存没有命中，再查询一级缓存  </p>
</li>
<li><p>如果一级缓存也没有命中，则查询数据库  </p>
</li>
<li><p>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</p>
</li>
</ul>
<h2 id="整合第三方缓存EHCache（了解）"><a href="#整合第三方缓存EHCache（了解）" class="headerlink" title="整合第三方缓存EHCache（了解）"></a>整合第三方缓存EHCache（了解）</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="各个jar包的功能"><a href="#各个jar包的功能" class="headerlink" title="各个jar包的功能"></a>各个jar包的功能</h3><table>
<thead>
<tr>
<th>jar包名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>mybatis-ehcache</td>
<td>Mybatis和EHCache的整合包</td>
</tr>
<tr>
<td>ehcache</td>
<td>EHCache核心包</td>
</tr>
<tr>
<td>slf4j-api</td>
<td>SLF4J日志门面包</td>
</tr>
<tr>
<td>logback-classic</td>
<td>支持SLF4J门面接口的一个具体实现</td>
</tr>
</tbody></table>
<h3 id="创建EHCache的配置文件ehcache-xml"><a href="#创建EHCache的配置文件ehcache-xml" class="headerlink" title="创建EHCache的配置文件ehcache.xml"></a>创建EHCache的配置文件ehcache.xml</h3><ul>
<li>名字必须叫<code>ehcache.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span></span><br><span class="line">&lt;defaultCache</span><br><span class="line">        maxElementsInMemory=&quot;1000&quot;</span><br><span class="line">        maxElementsOnDisk=&quot;10000000&quot;</span><br><span class="line">        eternal=&quot;false&quot;</span><br><span class="line">        overflowToDisk=&quot;true&quot;</span><br><span class="line">        timeToIdleSeconds=&quot;120&quot;</span><br><span class="line">        timeToLiveSeconds=&quot;120&quot;</span><br><span class="line">        diskExpiryThreadIntervalSeconds=&quot;120&quot;</span><br><span class="line">        memoryStoreEvictionPolicy=&quot;LRU&quot;&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="设置二级缓存的类型"><a href="#设置二级缓存的类型" class="headerlink" title="设置二级缓存的类型"></a>设置二级缓存的类型</h3><ul>
<li>在xxxMapper.xml文件中设置二级缓存类型</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="加入logback日志"><a href="#加入logback日志" class="headerlink" title="加入logback日志"></a>加入logback日志</h3><ul>
<li>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。创建logback的配置文件<code>logback.xml</code>，名字固定，不可改变</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="EHCache配置文件说明"><a href="#EHCache配置文件说明" class="headerlink" title="EHCache配置文件说明"></a>EHCache配置文件说明</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>是否必须</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>maxElementsInMemory</td>
<td>是</td>
<td>在内存中缓存的element的最大数目</td>
</tr>
<tr>
<td>maxElementsOnDisk</td>
<td>是</td>
<td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td>
</tr>
<tr>
<td>eternal</td>
<td>是</td>
<td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td>
</tr>
<tr>
<td>overflowToDisk</td>
<td>是</td>
<td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td>
</tr>
<tr>
<td>timeToIdleSeconds</td>
<td>否</td>
<td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td>
</tr>
<tr>
<td>timeToLiveSeconds</td>
<td>否</td>
<td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td>
</tr>
<tr>
<td>diskSpoolBufferSizeMB</td>
<td>否</td>
<td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td>
</tr>
<tr>
<td>diskPersistent</td>
<td>否</td>
<td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false</td>
</tr>
<tr>
<td>diskExpiryThreadIntervalSeconds</td>
<td>否</td>
<td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td>
</tr>
<tr>
<td>memoryStoreEvictionPolicy</td>
<td>否</td>
<td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出</td>
</tr>
</tbody></table>
<h1 id="MyBatis的逆向工程"><a href="#MyBatis的逆向工程" class="headerlink" title="MyBatis的逆向工程"></a>MyBatis的逆向工程</h1><ul>
<li><p>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的</p>
</li>
<li><p>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：  </p>
<ul>
<li><p>Java实体类  </p>
</li>
<li><p>Mapper接口  </p>
</li>
<li><p>Mapper映射文件</p>
</li>
</ul>
</li>
</ul>
<h2 id="创建逆向工程的步骤"><a href="#创建逆向工程的步骤" class="headerlink" title="创建逆向工程的步骤"></a>创建逆向工程的步骤</h2><h3 id="添加依赖和插件"><a href="#添加依赖和插件" class="headerlink" title="添加依赖和插件"></a>添加依赖和插件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MyBatis核心依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建MyBatis的核心配置文件-1"><a href="#创建MyBatis的核心配置文件-1" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建逆向工程的配置文件"><a href="#创建逆向工程的配置文件" class="headerlink" title="创建逆向工程的配置文件"></a>创建逆向工程的配置文件</h3><ul>
<li>文件名必须是：<code>generatorConfig.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="执行MBG插件的generate目标"><a href="#执行MBG插件的generate目标" class="headerlink" title="执行MBG插件的generate目标"></a>执行MBG插件的generate目标</h3><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/执行MBG插件的generate目标.png" width="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">执行MBG插件的generate目标</div>
</center>

<ul>
<li><p>如果出现报错：<code>Exception getting JDBC Driver</code>，可能是pom.xml中，数据库驱动配置错误</p>
<ul>
<li>dependency中的驱动</li>
</ul>
</li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/dependency中的驱动.png" width="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">dependency中的驱动</div>
</center>

<ul>
<li>mybatis-generator-maven-plugin插件中的驱动</li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/插件中的驱动.png" width="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">插件中的驱动</div>
</center>

<ul>
<li>两者的驱动版本应该相同</li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/逆向执行结果.png" width="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">逆向执行结果</div>
</center>

<h2 id="QBC"><a href="#QBC" class="headerlink" title="QBC"></a>QBC</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul>
<li><p><code>selectByExample</code>：按条件查询，需要传入一个example对象或者null；如果传入一个null，则表示没有条件，也就是查询所有数据</p>
</li>
<li><p><code>example.createCriteria().xxx</code>：创建条件对象，通过andXXX方法为SQL添加查询添加，每个条件之间是and关系</p>
</li>
<li><p><code>example.or().xxx</code>：将之前添加的条件通过or拼接其他条件</p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/example的方法.png" width="80%">
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">example的方法</div>
</center>

</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMBG</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">  SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">  SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is);</span><br><span class="line">  SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">  EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">  EmpExample example = <span class="keyword">new</span> EmpExample();</span><br><span class="line">  <span class="comment">//名字为张三，且年龄大于等于20</span></span><br><span class="line">  example.createCriteria().andEmpNameEqualTo(<span class="string">&quot;张三&quot;</span>).andAgeGreaterThanOrEqualTo(<span class="number">20</span>);</span><br><span class="line">  <span class="comment">//或者did不为空</span></span><br><span class="line">  example.or().andDidIsNotNull();</span><br><span class="line">  List&lt;Emp&gt; emps = mapper.selectByExample(example);</span><br><span class="line">  emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/example测试结果.png" width="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">example测试结果</div>
</center>

<h3 id="增改"><a href="#增改" class="headerlink" title="增改"></a>增改</h3><ul>
<li><p><code>updateByPrimaryKey</code>：通过主键进行数据修改，如果某一个值为null，也会将对应的字段改为null</p>
<ul>
<li><code>mapper.updateByPrimaryKey(new Emp(1,&quot;admin&quot;,22,null,&quot;456@qq.com&quot;,3));</code></li>
</ul>
</li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/增删改测试结果1.png" width="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">增删改测试结果1</div>
</center>

<ul>
<li><p><code>updateByPrimaryKeySelective()</code>：通过主键进行选择性数据修改，如果某个值为null，则不修改这个字段</p>
<ul>
<li><code>mapper.updateByPrimaryKeySelective(new Emp(2,&quot;admin2&quot;,22,null,&quot;456@qq.com&quot;,3));</code></li>
</ul>
</li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/增删改测试结果2.png" width="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">增删改测试结果2</div>
</center>

<h1 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h1><h2 id="分页插件使用步骤"><a href="#分页插件使用步骤" class="headerlink" title="分页插件使用步骤"></a>分页插件使用步骤</h2><h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置分页插件"><a href="#配置分页插件" class="headerlink" title="配置分页插件"></a>配置分页插件</h3><ul>
<li>在MyBatis的核心配置文件（mybatis-config.xml）中配置插件</li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/配置分页插件.png" width="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">配置分页插件</div>
</center>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--设置分页插件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="分页插件的使用"><a href="#分页插件的使用" class="headerlink" title="分页插件的使用"></a>分页插件的使用</h2><h3 id="开启分页功能"><a href="#开启分页功能" class="headerlink" title="开启分页功能"></a>开启分页功能</h3><ul>
<li><p>在查询功能之前使用<code>PageHelper.startPage(int pageNum, int pageSize)</code>开启分页功能</p>
<ul>
<li><p>pageNum：当前页的页码  </p>
</li>
<li><p>pageSize：每页显示的条数</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">  SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">  SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is);</span><br><span class="line">  SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">  EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">  <span class="comment">//访问第一页，每页四条数据</span></span><br><span class="line">  PageHelper.startPage(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">  List&lt;Emp&gt; emps = mapper.selectByExample(<span class="keyword">null</span>);</span><br><span class="line">  emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/MyBatis/Resources/分页测试结果.png" width="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">分页测试结果</div>
</center>

<h3 id="分页相关数据"><a href="#分页相关数据" class="headerlink" title="分页相关数据"></a>分页相关数据</h3><h4 id="方法一：直接输出"><a href="#方法一：直接输出" class="headerlink" title="方法一：直接输出"></a>方法一：直接输出</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    <span class="comment">//访问第一页，每页四条数据</span></span><br><span class="line">    Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    List&lt;Emp&gt; emps = mapper.selectByExample(<span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//在查询到List集合后，打印分页数据</span></span><br><span class="line">    System.out.println(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>分页相关数据：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Page&#123;count&#x3D;true, pageNum&#x3D;1, pageSize&#x3D;4, startRow&#x3D;0, endRow&#x3D;4, total&#x3D;8, pages&#x3D;2, reasonable&#x3D;false, pageSizeZero&#x3D;false&#125;[Emp&#123;eid&#x3D;1, empName&#x3D;&#39;admin&#39;, age&#x3D;22, sex&#x3D;&#39;男&#39;, email&#x3D;&#39;456@qq.com&#39;, did&#x3D;3&#125;, Emp&#123;eid&#x3D;2, empName&#x3D;&#39;admin2&#39;, age&#x3D;22, sex&#x3D;&#39;男&#39;, email&#x3D;&#39;456@qq.com&#39;, did&#x3D;3&#125;, Emp&#123;eid&#x3D;3, empName&#x3D;&#39;王五&#39;, age&#x3D;12, sex&#x3D;&#39;女&#39;, email&#x3D;&#39;123@qq.com&#39;, did&#x3D;3&#125;, Emp&#123;eid&#x3D;4, empName&#x3D;&#39;赵六&#39;, age&#x3D;32, sex&#x3D;&#39;男&#39;, email&#x3D;&#39;123@qq.com&#39;, did&#x3D;1&#125;]</span><br></pre></td></tr></table></figure>
<h4 id="方法二：使用PageInfo"><a href="#方法二：使用PageInfo" class="headerlink" title="方法二：使用PageInfo"></a>方法二：使用PageInfo</h4><ul>
<li><p>在查询获取list集合之后，使用<code>PageInfo&lt;T&gt; pageInfo = new PageInfo&lt;&gt;(List&lt;T&gt; list, intnavigatePages)</code>获取分页相关数据</p>
<ul>
<li><p>list：分页之后的数据  </p>
</li>
<li><p>navigatePages：导航分页的页码数</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">  SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">  SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is);</span><br><span class="line">  SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">  EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">  PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">  List&lt;Emp&gt; emps = mapper.selectByExample(<span class="keyword">null</span>);</span><br><span class="line">  PageInfo&lt;Emp&gt; page = <span class="keyword">new</span> PageInfo&lt;&gt;(emps,<span class="number">5</span>);</span><br><span class="line">  System.out.println(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>分页相关数据：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PageInfo&#123;</span><br><span class="line">  pageNum&#x3D;1, pageSize&#x3D;4, size&#x3D;4, startRow&#x3D;1, endRow&#x3D;4, total&#x3D;8, pages&#x3D;2, </span><br><span class="line">  list&#x3D;Page&#123;count&#x3D;true, pageNum&#x3D;1, pageSize&#x3D;4, startRow&#x3D;0, endRow&#x3D;4, total&#x3D;8, pages&#x3D;2, reasonable&#x3D;false, pageSizeZero&#x3D;false&#125;[Emp&#123;eid&#x3D;1, empName&#x3D;&#39;admin&#39;, age&#x3D;22, sex&#x3D;&#39;男&#39;, email&#x3D;&#39;456@qq.com&#39;, did&#x3D;3&#125;, Emp&#123;eid&#x3D;2, empName&#x3D;&#39;admin2&#39;, age&#x3D;22, sex&#x3D;&#39;男&#39;, email&#x3D;&#39;456@qq.com&#39;, did&#x3D;3&#125;, Emp&#123;eid&#x3D;3, empName&#x3D;&#39;王五&#39;, age&#x3D;12, sex&#x3D;&#39;女&#39;, email&#x3D;&#39;123@qq.com&#39;, did&#x3D;3&#125;, Emp&#123;eid&#x3D;4, empName&#x3D;&#39;赵六&#39;, age&#x3D;32, sex&#x3D;&#39;男&#39;, email&#x3D;&#39;123@qq.com&#39;, did&#x3D;1&#125;], </span><br><span class="line">  prePage&#x3D;0, nextPage&#x3D;2, isFirstPage&#x3D;true, isLastPage&#x3D;false, hasPreviousPage&#x3D;false, hasNextPage&#x3D;true, navigatePages&#x3D;5, navigateFirstPage&#x3D;1, navigateLastPage&#x3D;2, navigatepageNums&#x3D;[1, 2]&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>其中list中的数据等同于方法一中直接输出的page数据</li>
</ul>
<h4 id="常用数据："><a href="#常用数据：" class="headerlink" title="常用数据："></a>常用数据：</h4><ul>
<li><p>pageNum：当前页的页码  </p>
</li>
<li><p>pageSize：每页显示的条数  </p>
</li>
<li><p>size：当前页显示的真实条数  </p>
</li>
<li><p>total：总记录数  </p>
</li>
<li><p>pages：总页数  </p>
</li>
<li><p>prePage：上一页的页码  </p>
</li>
<li><p>nextPage：下一页的页码</p>
</li>
<li><p>isFirstPage/isLastPage：是否为第一页/最后一页  </p>
</li>
<li><p>hasPreviousPage/hasNextPage：是否存在上一页/下一页  </p>
</li>
<li><p>navigatePages：导航分页的页码数  </p>
</li>
<li><p>navigatepageNums：导航分页的页码，[1,2,3,4,5]</p>
</li>
</ul>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Mybatis</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC学习杂记</title>
    <url>/2022/07/02/Spring-dict/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、SpringMVC简介"><a href="#一、SpringMVC简介" class="headerlink" title="一、SpringMVC简介"></a>一、SpringMVC简介</h1><h3 id="1、什么是MVC"><a href="#1、什么是MVC" class="headerlink" title="1、什么是MVC"></a>1、什么是MVC</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p>
<p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p>
<p>JavaBean分为两类：</p>
<ul>
<li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li>
<li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li>
</ul>
<p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p>
<p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p>
<p>MVC的工作流程 <strong>（详情见最后一章节）</strong>：<br>用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p>
<a id="more"></a>

<h3 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h3><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p>
<p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。</p>
<blockquote>
<p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet</p>
</blockquote>
<h3 id="3、SpringMVC的特点"><a href="#3、SpringMVC的特点" class="headerlink" title="3、SpringMVC的特点"></a>3、SpringMVC的特点</h3><ul>
<li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li>
<li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理</li>
<li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li>
<li><strong>代码清新简洁</strong>，大幅度提升开发效率</li>
<li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li>
<li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li>
</ul>
<h1 id="二、HelloWorld"><a href="#二、HelloWorld" class="headerlink" title="二、HelloWorld"></a>二、HelloWorld</h1><h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><p>IDE：idea 2019.2</p>
<p>构建工具：maven3.5.4</p>
<p>服务器：tomcat7</p>
<p>Spring版本：5.3.1</p>
<h3 id="2、创建maven工程"><a href="#2、创建maven工程" class="headerlink" title="2、创建maven工程"></a>2、创建maven工程</h3><h5 id="a-gt-添加web模块"><a href="#a-gt-添加web模块" class="headerlink" title="a&gt;添加web模块"></a>a&gt;添加web模块</h5><h5 id="b-gt-打包方式：war"><a href="#b-gt-打包方式：war" class="headerlink" title="b&gt;打包方式：war"></a>b&gt;打包方式：war</h5><h5 id="c-gt-引入依赖"><a href="#c-gt-引入依赖" class="headerlink" title="c&gt;引入依赖"></a>c&gt;引入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringMVC/img/img001.png" width="50%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Maven依赖</div>
</center>

<h3 id="3、配置web-xml"><a href="#3、配置web-xml" class="headerlink" title="3、配置web.xml"></a>3、配置web.xml</h3><p>注册SpringMVC的前端控制器DispatcherServlet</p>
<h5 id="a-gt-默认配置方式"><a href="#a-gt-默认配置方式" class="headerlink" title="a&gt;默认配置方式"></a>a&gt;默认配置方式</h5><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为&lt;servlet-name&gt;-servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="b-gt-扩展配置方式"><a href="#b-gt-扩展配置方式" class="headerlink" title="b&gt;扩展配置方式"></a>b&gt;扩展配置方式</h5><p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">         作为框架的核心组件，在启动过程中有大量的初始化操作要做</span></span><br><span class="line"><span class="comment">        而这些操作放在第一次请求时才执行会严重影响访问速度</span></span><br><span class="line"><span class="comment">        因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<p>&lt;url-pattern&gt;标签中使用/和/*的区别：</p>
<p>/所匹配的请求可以是/login或.html或.js或.css方式的请求路径，但是/不能匹配.jsp请求路径的请求</p>
<p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p>
<p>/<em>则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用/\</em>的写法</p>
</blockquote>
<h3 id="4、创建请求控制器"><a href="#4、创建请求控制器" class="headerlink" title="4、创建请求控制器"></a>4、创建请求控制器</h3><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p>
<p>请求控制器中每一个处理请求的方法成为控制器方法</p>
<p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5、创建springMVC的配置文件"><a href="#5、创建springMVC的配置文件" class="headerlink" title="5、创建springMVC的配置文件"></a>5、创建springMVC的配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   处理静态资源，例如html、js、css、jpg</span></span><br><span class="line"><span class="comment">  若只设置该标签，则只能访问静态资源，其他请求则无法访问</span></span><br><span class="line"><span class="comment">  此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultCharset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="6、测试HelloWorld"><a href="#6、测试HelloWorld" class="headerlink" title="6、测试HelloWorld"></a>6、测试HelloWorld</h3><h5 id="a-gt-实现对首页的访问"><a href="#a-gt-实现对首页的访问" class="headerlink" title="a&gt;实现对首页的访问"></a>a&gt;实现对首页的访问</h5><p>在请求控制器中创建处理请求的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span></span><br><span class="line"><span class="comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span></span><br><span class="line"><span class="comment">// localhost:8080/springMVC/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="b-gt-通过超链接跳转到指定页面"><a href="#b-gt-通过超链接跳转到指定页面" class="headerlink" title="b&gt;通过超链接跳转到指定页面"></a>b&gt;通过超链接跳转到指定页面</h5><p>在主页index.html中设置超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在请求控制器中创建处理请求的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">HelloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h3><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p>
<h1 id="三、-RequestMapping注解"><a href="#三、-RequestMapping注解" class="headerlink" title="三、@RequestMapping注解"></a>三、@RequestMapping注解</h1><h3 id="1、-RequestMapping注解的功能"><a href="#1、-RequestMapping注解的功能" class="headerlink" title="1、@RequestMapping注解的功能"></a>1、@RequestMapping注解的功能</h3><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p>
<p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p>
<h3 id="2、-RequestMapping注解的位置"><a href="#2、-RequestMapping注解的位置" class="headerlink" title="2、@RequestMapping注解的位置"></a>2、@RequestMapping注解的位置</h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p>
<p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、-RequestMapping注解的value属性"><a href="#3、-RequestMapping注解的value属性" class="headerlink" title="3、@RequestMapping注解的value属性"></a>3、@RequestMapping注解的value属性</h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p>
<p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p>
<p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4、-RequestMapping注解的method属性"><a href="#4、-RequestMapping注解的method属性" class="headerlink" title="4、@RequestMapping注解的method属性"></a>4、@RequestMapping注解的method属性</h3><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p>
<p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p>
<p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request method ‘POST’ not supported</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p>
<p>处理get请求的映射–&gt;@GetMapping</p>
<p>处理post请求的映射–&gt;@PostMapping</p>
<p>处理put请求的映射–&gt;@PutMapping</p>
<p>处理delete请求的映射–&gt;@DeleteMapping</p>
<p>2、常用的请求方式有get，post，put，delete</p>
<p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p>
<p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p>
</blockquote>
<h3 id="5、-RequestMapping注解的params属性（了解）"><a href="#5、-RequestMapping注解的params属性（了解）" class="headerlink" title="5、@RequestMapping注解的params属性（了解）"></a>5、@RequestMapping注解的params属性（了解）</h3><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p>
<p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p>
<p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p>
<p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p>
<p>“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value</p>
<p>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span>&gt;</span>测试@RequestMapping的params属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter conditions “username, password!=123456” not met for actual request parameters: username={admin}, password={123456}</p>
</blockquote>
<h3 id="6、-RequestMapping注解的headers属性（了解）"><a href="#6、-RequestMapping注解的headers属性（了解）" class="headerlink" title="6、@RequestMapping注解的headers属性（了解）"></a>6、@RequestMapping注解的headers属性（了解）</h3><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p>
<p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p>
<p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p>
<p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p>
<p>“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value</p>
<p>“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</p>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p>
<h3 id="7、SpringMVC支持ant风格的路径"><a href="#7、SpringMVC支持ant风格的路径" class="headerlink" title="7、SpringMVC支持ant风格的路径"></a>7、SpringMVC支持ant风格的路径</h3><p>？：表示任意的单个字符</p>
<p>*：表示任意的0个或多个字符</p>
<p>**：表示任意的一层或多层目录</p>
<p>注意：在使用**时，只能使用/**/xxx的方式</p>
<h3 id="8、SpringMVC支持路径中的占位符（重点）"><a href="#8、SpringMVC支持路径中的占位符（重点）" class="headerlink" title="8、SpringMVC支持路径中的占位符（重点）"></a>8、SpringMVC支持路径中的占位符（重点）</h3><p>原始方式：/deleteUser?id=1</p>
<p>rest方式：/deleteUser/1</p>
<p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRest</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="meta">@PathVariable(&quot;username&quot;)</span> String username)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span>+id+<span class="string">&quot;,username:&quot;</span>+username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终输出的内容为--&gt;id:1,username:admin</span></span><br></pre></td></tr></table></figure>
<h1 id="四、SpringMVC获取请求参数"><a href="#四、SpringMVC获取请求参数" class="headerlink" title="四、SpringMVC获取请求参数"></a>四、SpringMVC获取请求参数</h1><h3 id="1、通过ServletAPI获取"><a href="#1、通过ServletAPI获取" class="headerlink" title="1、通过ServletAPI获取"></a>1、通过ServletAPI获取</h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、通过控制器方法的形参获取请求参数"><a href="#2、通过控制器方法的形参获取请求参数" class="headerlink" title="2、通过控制器方法的形参获取请求参数"></a>2、通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--&gt;/testParam<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">(String username, String password)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p>
<p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p>
<p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p>
</blockquote>
<h3 id="3、-RequestParam"><a href="#3、-RequestParam" class="headerlink" title="3、@RequestParam"></a>3、@RequestParam</h3><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p>
<p>@RequestParam注解一共有三个属性：</p>
<p>value：指定为形参赋值的请求参数的参数名</p>
<p>required：设置是否必须传输此请求参数，默认值为true</p>
<p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p>
<p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p>
<h3 id="4、-RequestHeader"><a href="#4、-RequestHeader" class="headerlink" title="4、@RequestHeader"></a>4、@RequestHeader</h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p>
<p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<h3 id="5、-CookieValue"><a href="#5、-CookieValue" class="headerlink" title="5、@CookieValue"></a>5、@CookieValue</h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p>
<p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<h3 id="6、通过POJO获取请求参数"><a href="#6、通过POJO获取请求参数" class="headerlink" title="6、通过POJO获取请求参数"></a>6、通过POJO获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testpojo&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testPOJO</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="7、解决获取请求参数的乱码问题"><a href="#7、解决获取请求参数的乱码问题" class="headerlink" title="7、解决获取请求参数的乱码问题"></a>7、解决获取请求参数的乱码问题</h3><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p>
</blockquote>
<h1 id="五、域对象共享数据"><a href="#五、域对象共享数据" class="headerlink" title="五、域对象共享数据"></a>五、域对象共享数据</h1><h3 id="1、使用ServletAPI向request域对象共享数据"><a href="#1、使用ServletAPI向request域对象共享数据" class="headerlink" title="1、使用ServletAPI向request域对象共享数据"></a>1、使用ServletAPI向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testServletAPI</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、使用ModelAndView向request域对象共享数据"><a href="#2、使用ModelAndView向request域对象共享数据" class="headerlink" title="2、使用ModelAndView向request域对象共享数据"></a>2、使用ModelAndView向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">//向请求域共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、使用Model向request域对象共享数据"><a href="#3、使用Model向request域对象共享数据" class="headerlink" title="3、使用Model向request域对象共享数据"></a>3、使用Model向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModel</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4、使用map向request域对象共享数据"><a href="#4、使用map向request域对象共享数据" class="headerlink" title="4、使用map向request域对象共享数据"></a>4、使用map向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5、使用ModelMap向request域对象共享数据"><a href="#5、使用ModelMap向request域对象共享数据" class="headerlink" title="5、使用ModelMap向request域对象共享数据"></a>5、使用ModelMap向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelMap</span><span class="params">(ModelMap modelMap)</span></span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6、Model、ModelMap、Map的关系"><a href="#6、Model、ModelMap、Map的关系" class="headerlink" title="6、Model、ModelMap、Map的关系"></a>6、Model、ModelMap、Map的关系</h3><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface Model&#123;&#125;</span><br><span class="line">public class ModelMap extends LinkedHashMap&lt;String, Object&gt; &#123;&#125;</span><br><span class="line">public class ExtendedModelMap extends ModelMap implements Model &#123;&#125;</span><br><span class="line">public class BindingAwareModelMap extends ExtendedModelMap &#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7、向session域共享数据"><a href="#7、向session域共享数据" class="headerlink" title="7、向session域共享数据"></a>7、向session域共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testSession</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8、向application域共享数据"><a href="#8、向application域共享数据" class="headerlink" title="8、向application域共享数据"></a>8、向application域共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testApplication</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">    ServletContext application = session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>, <span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="六、SpringMVC的视图"><a href="#六、SpringMVC的视图" class="headerlink" title="六、SpringMVC的视图"></a>六、SpringMVC的视图</h1><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p>
<p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p>
<p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p>
<p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p>
<h3 id="1、ThymeleafView"><a href="#1、ThymeleafView" class="headerlink" title="1、ThymeleafView"></a>1、ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testHello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringMVC/img/img002.png" width="100%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">ThymeleadView解析</div>
</center>

<h3 id="2、转发视图"><a href="#2、转发视图" class="headerlink" title="2、转发视图"></a>2、转发视图</h3><p>SpringMVC中默认的转发视图是InternalResourceView</p>
<p>SpringMVC中创建转发视图的情况：</p>
<p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p>
<p>例如”forward:/“，”forward:/employee”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForward</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringMVC/img/img003.png" width="100%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">forward转发解析</div>
</center>

<h3 id="3、重定向视图"><a href="#3、重定向视图" class="headerlink" title="3、重定向视图"></a>3、重定向视图</h3><p>SpringMVC中默认的重定向视图是RedirectView</p>
<p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p>
<p>例如”redirect:/“，”redirect:/employee”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRedirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringMVC/img/img004.png" width="100%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Redirect转发解析</div>
</center>

<blockquote>
<p>注：</p>
<p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以/开头，若是则会自动拼接上下文路径</p>
</blockquote>
<h3 id="4、视图控制器view-controller"><a href="#4、视图控制器view-controller" class="headerlink" title="4、视图控制器view-controller"></a>4、视图控制器view-controller</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">    view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/testView&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p>
<p>&lt;mvc:annotation-driven /&gt;</p>
</blockquote>
<h1 id="七、RESTful"><a href="#七、RESTful" class="headerlink" title="七、RESTful"></a>七、RESTful</h1><h3 id="1、RESTful简介"><a href="#1、RESTful简介" class="headerlink" title="1、RESTful简介"></a>1、RESTful简介</h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p>
<h5 id="a-gt-资源"><a href="#a-gt-资源" class="headerlink" title="a&gt;资源"></a>a&gt;资源</h5><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p>
<h5 id="b-gt-资源的表述"><a href="#b-gt-资源的表述" class="headerlink" title="b&gt;资源的表述"></a>b&gt;资源的表述</h5><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML/XML/JSON/纯文本/图片/视频/音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p>
<h5 id="c-gt-状态转移"><a href="#c-gt-状态转移" class="headerlink" title="c&gt;状态转移"></a>c&gt;状态转移</h5><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p>
<h3 id="2、RESTful的实现"><a href="#2、RESTful的实现" class="headerlink" title="2、RESTful的实现"></a>2、RESTful的实现</h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p>
<p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p>
<p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>传统方式</th>
<th>REST风格</th>
</tr>
</thead>
<tbody><tr>
<td>查询操作</td>
<td>getUserById?id=1</td>
<td>user/1–&gt;get请求方式</td>
</tr>
<tr>
<td>保存操作</td>
<td>saveUser</td>
<td>user–&gt;post请求方式</td>
</tr>
<tr>
<td>删除操作</td>
<td>deleteUser?id=1</td>
<td>user/1–&gt;delete请求方式</td>
</tr>
<tr>
<td>更新操作</td>
<td>updateUser</td>
<td>user–&gt;put请求方式</td>
</tr>
</tbody></table>
<h3 id="3、HiddenHttpMethodFilter"><a href="#3、HiddenHttpMethodFilter" class="headerlink" title="3、HiddenHttpMethodFilter"></a>3、HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p>
<p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p>
<p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p>
<p>a&gt;当前请求的请求方式必须为post</p>
<p>b&gt;当前请求必须传输请求参数_method</p>
<p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p>
<p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong> </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p>
<p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p>
<p>原因：</p>
<ul>
<li><p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</p>
</li>
<li><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p>
</li>
<li><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p>
</li>
<li><p><code>String paramValue = request.getParameter(this.methodParam);</code></p>
</li>
</ul>
</blockquote>
<h1 id="八、RESTful案例"><a href="#八、RESTful案例" class="headerlink" title="八、RESTful案例"></a>八、RESTful案例</h1><h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><p>和传统 CRUD 一样，实现对员工信息的增删改查。</p>
<ul>
<li><p>搭建环境</p>
</li>
<li><p>准备实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mvc.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Integer id;</span><br><span class="line">   <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String email;</span><br><span class="line">   <span class="comment">//1 male, 0 female</span></span><br><span class="line">   <span class="keyword">private</span> Integer gender;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> lastName;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> email;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.email = email;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> gender;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Integer gender)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.gender = gender;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(Integer id, String lastName, String email, Integer gender)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>();</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">      <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">      <span class="keyword">this</span>.email = email;</span><br><span class="line">      <span class="keyword">this</span>.gender = gender;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>准备dao模拟数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mvc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.mvc.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">static</span>&#123;</span><br><span class="line">            employees = <span class="keyword">new</span> H1ashMap&lt;Integer, Employee&gt;();</span><br><span class="line"></span><br><span class="line">            employees.put(<span class="number">1001</span>, <span class="keyword">new</span> Employee(<span class="number">1001</span>, <span class="string">&quot;E-AA&quot;</span>, <span class="string">&quot;aa@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">            employees.put(<span class="number">1002</span>, <span class="keyword">new</span> Employee(<span class="number">1002</span>, <span class="string">&quot;E-BB&quot;</span>, <span class="string">&quot;bb@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">            employees.put(<span class="number">1003</span>, <span class="keyword">new</span> Employee(<span class="number">1003</span>, <span class="string">&quot;E-CC&quot;</span>, <span class="string">&quot;cc@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">            employees.put(<span class="number">1004</span>, <span class="keyword">new</span> Employee(<span class="number">1004</span>, <span class="string">&quot;E-DD&quot;</span>, <span class="string">&quot;dd@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">            employees.put(<span class="number">1005</span>, <span class="keyword">new</span> Employee(<span class="number">1005</span>, <span class="string">&quot;E-EE&quot;</span>, <span class="string">&quot;ee@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Integer initId = <span class="number">1006</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(employee.getId() == <span class="keyword">null</span>)&#123;</span><br><span class="line">                employee.setId(initId++);</span><br><span class="line">            &#125;</span><br><span class="line">            employees.put(employee.getId(), employee);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> employees.values();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Employee <span class="title">get</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> employees.get(id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">            employees.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、功能清单"><a href="#2、功能清单" class="headerlink" title="2、功能清单"></a>2、功能清单</h3></li>
</ul>
<table>
<thead>
<tr>
<th>功能</th>
<th>URL 地址</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>访问首页√</td>
<td>/</td>
<td>GET</td>
</tr>
<tr>
<td>查询全部数据√</td>
<td>/employee</td>
<td>GET</td>
</tr>
<tr>
<td>删除√</td>
<td>/employee/2</td>
<td>DELETE</td>
</tr>
<tr>
<td>跳转到添加数据页面√</td>
<td>/toAdd</td>
<td>GET</td>
</tr>
<tr>
<td>执行保存√</td>
<td>/employee</td>
<td>POST</td>
</tr>
<tr>
<td>跳转到更新数据页面√</td>
<td>/employee/2</td>
<td>GET</td>
</tr>
<tr>
<td>执行更新√</td>
<td>/employee</td>
<td>PUT</td>
</tr>
</tbody></table>
<h3 id="3、具体功能：访问首页"><a href="#3、具体功能：访问首页" class="headerlink" title="3、具体功能：访问首页"></a>3、具体功能：访问首页</h3><h5 id="a-gt-配置view-controller"><a href="#a-gt-配置view-controller" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="b-gt-创建页面"><a href="#b-gt-创建页面" class="headerlink" title="b&gt;创建页面"></a>b&gt;创建页面</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>访问员工信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4、具体功能：查询所有员工数据"><a href="#4、具体功能：查询所有员工数据" class="headerlink" title="4、具体功能：查询所有员工数据"></a>4、具体功能：查询所有员工数据</h3><h5 id="a-gt-控制器方法"><a href="#a-gt-控制器方法" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmployeeList</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employeeList&quot;</span>, employeeList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="b-gt-创建employee-list-html"><a href="#b-gt-创建employee-list-html" class="headerlink" title="b&gt;创建employee_list.html"></a>b&gt;创建employee_list.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataTable&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>options(<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5、具体功能：删除"><a href="#5、具体功能：删除" class="headerlink" title="5、具体功能：删除"></a>5、具体功能：删除</h3><h5 id="a-gt-创建处理delete请求方式的表单"><a href="#a-gt-创建处理delete请求方式的表单" class="headerlink" title="a&gt;创建处理delete请求方式的表单"></a>a&gt;创建处理delete请求方式的表单</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;delete_form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="b-gt-删除超链接绑定点击事件"><a href="#b-gt-删除超链接绑定点击事件" class="headerlink" title="b&gt;删除超链接绑定点击事件"></a>b&gt;删除超链接绑定点击事件</h5><p>引入vue.js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>删除超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过vue处理点击事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#dataTable&quot;</span>,</span></span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//event表示当前事件</span></span></span><br><span class="line"><span class="javascript">            deleteEmployee:<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//通过id获取表单标签</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> delete_form = <span class="built_in">document</span>.getElementById(<span class="string">&quot;delete_form&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//将触发事件的超链接的href属性为表单的action属性赋值</span></span></span><br><span class="line">                delete_form.action = event.target.href;</span><br><span class="line"><span class="javascript">                <span class="comment">//提交表单</span></span></span><br><span class="line">                delete_form.submit();</span><br><span class="line"><span class="javascript">                <span class="comment">//阻止超链接的默认跳转行为</span></span></span><br><span class="line">                event.preventDefault();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="c-gt-控制器方法"><a href="#c-gt-控制器方法" class="headerlink" title="c&gt;控制器方法"></a>c&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6、具体功能：跳转到添加数据页面"><a href="#6、具体功能：跳转到添加数据页面" class="headerlink" title="6、具体功能：跳转到添加数据页面"></a>6、具体功能：跳转到添加数据页面</h3><h5 id="a-gt-配置view-controller-1"><a href="#a-gt-配置view-controller-1" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/toAdd&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;employee_add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="b-gt-创建employee-add-html"><a href="#b-gt-创建employee-add-html" class="headerlink" title="b&gt;创建employee_add.html"></a>b&gt;创建employee_add.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Add Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="7、具体功能：执行保存"><a href="#7、具体功能：执行保存" class="headerlink" title="7、具体功能：执行保存"></a>7、具体功能：执行保存</h3><h5 id="a-gt-控制器方法-1"><a href="#a-gt-控制器方法-1" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addEmployee</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8、具体功能：跳转到更新数据页面"><a href="#8、具体功能：跳转到更新数据页面" class="headerlink" title="8、具体功能：跳转到更新数据页面"></a>8、具体功能：跳转到更新数据页面</h3><h5 id="a-gt-修改超链接"><a href="#a-gt-修改超链接" class="headerlink" title="a&gt;修改超链接"></a>a&gt;修改超链接</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="b-gt-控制器方法"><a href="#b-gt-控制器方法" class="headerlink" title="b&gt;控制器方法"></a>b&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmployeeById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span></span>&#123;</span><br><span class="line">    Employee employee = employeeDao.get(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employee&quot;</span>, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="c-gt-创建employee-update-html"><a href="#c-gt-创建employee-update-html" class="headerlink" title="c&gt;创建employee_update.html"></a>c&gt;创建employee_update.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Update Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        th:field=&quot;$&#123;employee.gender&#125;&quot;可用于单选框或复选框的回显</span></span><br><span class="line"><span class="comment">        若单选框的value和employee.gender的值一致，则添加checked=&quot;checked&quot;属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="9、具体功能：执行更新"><a href="#9、具体功能：执行更新" class="headerlink" title="9、具体功能：执行更新"></a>9、具体功能：执行更新</h3><h5 id="a-gt-控制器方法-2"><a href="#a-gt-控制器方法-2" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateEmployee</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="八、HttpMessageConverter"><a href="#八、HttpMessageConverter" class="headerlink" title="八、HttpMessageConverter"></a>八、HttpMessageConverter</h1><p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p>
<p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，</p>
<p>ResponseEntity</p>
<h3 id="1、-RequestBody"><a href="#1、-RequestBody" class="headerlink" title="1、@RequestBody"></a>1、@RequestBody</h3><p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<p>requestBody:username=admin&amp;password=123456</p>
<h3 id="2、RequestEntity"><a href="#2、RequestEntity" class="headerlink" title="2、RequestEntity"></a>2、RequestEntity</h3><p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：<br>requestHeader:[host:”localhost:8080”, connection:”keep-alive”, content-length:”27”, cache-control:”max-age=0”, sec-ch-ua:”” Not A;Brand”;v=”99”, “Chromium”;v=”90”, “Google Chrome”;v=”90””, sec-ch-ua-mobile:”?0”, upgrade-insecure-requests:”1”, origin:”<a href="http://localhost:8080&quot;">http://localhost:8080&quot;</a>, user-agent:”Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36”]<br>requestBody:username=admin&amp;password=123</p>
<h3 id="3、-ResponseBody"><a href="#3、-ResponseBody" class="headerlink" title="3、@ResponseBody"></a>3、@ResponseBody</h3><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testResponseBody</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：浏览器页面显示success</p>
<h3 id="4、SpringMVC处理json"><a href="#4、SpringMVC处理json" class="headerlink" title="4、SpringMVC处理json"></a>4、SpringMVC处理json</h3><p>@ResponseBody处理json的步骤：</p>
<p>a&gt;导入jackson的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven &#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p>
<p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">testResponseUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">1001</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器的页面中展示的结果：</p>
<p>{“id”:1001,”username”:”admin”,”password”:”123456”,”age”:23,”sex”:”男”}</p>
<h3 id="5、SpringMVC处理ajax"><a href="#5、SpringMVC处理ajax" class="headerlink" title="5、SpringMVC处理ajax"></a>5、SpringMVC处理ajax</h3><p>a&gt;请求超链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testAjax&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;testAjax&quot;</span>&gt;</span>testAjax<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>b&gt;通过vue和axios处理点击事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="javascript">            testAjax:<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line">                axios(&#123;</span><br><span class="line"><span class="javascript">                    method:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line">                    url:event.target.href,</span><br><span class="line">                    params:&#123;</span><br><span class="line"><span class="javascript">                        username:<span class="string">&quot;admin&quot;</span>,</span></span><br><span class="line"><span class="javascript">                        password:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line">                    alert(response.data);</span><br><span class="line">                &#125;);</span><br><span class="line">                event.preventDefault();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>c&gt;控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testAjax&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testAjax</span><span class="params">(String username, String password)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello,ajax&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6、-RestController注解"><a href="#6、-RestController注解" class="headerlink" title="6、@RestController注解"></a>6、@RestController注解</h3><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p>
<h3 id="7、ResponseEntity"><a href="#7、ResponseEntity" class="headerlink" title="7、ResponseEntity"></a>7、ResponseEntity</h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p>
<h1 id="九、文件上传和下载"><a href="#九、文件上传和下载" class="headerlink" title="九、文件上传和下载"></a>九、文件上传和下载</h1><h3 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h3><p>使用ResponseEntity实现下载文件的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    ServletContext servletContext = session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    String realPath = servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    InputStream is = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    HttpStatus statusCode = HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> ResponseEntity&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype=”multipart/form-data”</p>
<p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p>
<p>上传步骤：</p>
<p>a&gt;添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>b&gt;在SpringMVC的配置文件中添加配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>c&gt;控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testUp</span><span class="params">(MultipartFile photo, HttpSession session)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取上传的文件的文件名</span></span><br><span class="line">    String fileName = photo.getOriginalFilename();</span><br><span class="line">    <span class="comment">//处理文件重名问题</span></span><br><span class="line">    String hzName = fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    fileName = UUID.randomUUID().toString() + hzName;</span><br><span class="line">    <span class="comment">//获取服务器中photo目录的路径</span></span><br><span class="line">    ServletContext servletContext = session.getServletContext();</span><br><span class="line">    String photoPath = servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>);</span><br><span class="line">    File file = <span class="keyword">new</span> File(photoPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    String finalPath = photoPath + File.separator + fileName;</span><br><span class="line">    <span class="comment">//实现上传功能</span></span><br><span class="line">    photo.transferTo(<span class="keyword">new</span> File(finalPath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十、拦截器"><a href="#十、拦截器" class="headerlink" title="十、拦截器"></a>十、拦截器</h1><h3 id="1、拦截器的配置"><a href="#1、拦截器的配置" class="headerlink" title="1、拦截器的配置"></a>1、拦截器的配置</h3><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p>
<p>SpringMVC中的拦截器需要实现HandlerInterceptor</p>
<p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2、拦截器的三个抽象方法"><a href="#2、拦截器的三个抽象方法" class="headerlink" title="2、拦截器的三个抽象方法"></a>2、拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p>
<p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p>
<p>postHandle：控制器方法执行之后执行postHandle()</p>
<p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p>
<h3 id="3、多个拦截器的执行顺序"><a href="#3、多个拦截器的执行顺序" class="headerlink" title="3、多个拦截器的执行顺序"></a>3、多个拦截器的执行顺序</h3><p>a&gt;若每个拦截器的preHandle()都返回true</p>
<p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p>
<p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p>
<p>b&gt;若某个拦截器的preHandle()返回了false</p>
<p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p>
<h1 id="十一、异常处理器"><a href="#十一、异常处理器" class="headerlink" title="十一、异常处理器"></a>十一、异常处理器</h1><h3 id="1、基于配置的异常处理"><a href="#1、基于配置的异常处理" class="headerlink" title="1、基于配置的异常处理"></a>1、基于配置的异常处理</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p>
<p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p>
<p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                properties的键表示处理器方法执行过程中出现的异常</span></span><br><span class="line"><span class="comment">                properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2、基于注解的异常处理"><a href="#2、基于注解的异常处理" class="headerlink" title="2、基于注解的异常处理"></a>2、基于注解的异常处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@ControllerAdvice将当前类标识为异常处理的组件</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置所标识方法处理的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="comment">//ex表示当前请求处理中出现的异常对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleArithmeticException</span><span class="params">(Exception ex, Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;ex&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十二、注解配置SpringMVC"><a href="#十二、注解配置SpringMVC" class="headerlink" title="十二、注解配置SpringMVC"></a>十二、注解配置SpringMVC</h1><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p>
<h3 id="1、创建初始化类，代替web-xml"><a href="#1、创建初始化类，代替web-xml" class="headerlink" title="1、创建初始化类，代替web.xml"></a>1、创建初始化类，代替web.xml</h3><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。<br>Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebInit</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        CharacterEncodingFilter encodingFilter = <span class="keyword">new</span> CharacterEncodingFilter();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="keyword">true</span>);</span><br><span class="line">        HiddenHttpMethodFilter hiddenHttpMethodFilter = <span class="keyword">new</span> HiddenHttpMethodFilter();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Filter[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、创建SpringConfig配置类，代替spring的配置文件"><a href="#2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="2、创建SpringConfig配置类，代替spring的配置文件"></a>2、创建SpringConfig配置类，代替spring的配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>3、创建WebConfig配置类，代替SpringMVC的配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启MVC注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用默认的servlet处理静态资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonsMultipartResolver <span class="title">multipartResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonsMultipartResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        FirstInterceptor firstInterceptor = <span class="keyword">new</span> FirstInterceptor();</span><br><span class="line">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置视图控制</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置异常映射</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span></span><br><span class="line"><span class="comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span></span><br><span class="line"><span class="comment">        Properties prop = new Properties();</span></span><br><span class="line"><span class="comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span></span><br><span class="line"><span class="comment">        //设置异常映射</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionMappings(prop);</span></span><br><span class="line"><span class="comment">        //设置共享异常信息的键</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span></span><br><span class="line"><span class="comment">        resolvers.add(exceptionResolver);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ITemplateResolver <span class="title">templateResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        ServletContextTemplateResolver templateResolver = <span class="keyword">new</span> ServletContextTemplateResolver(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringTemplateEngine <span class="title">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> </span>&#123;</span><br><span class="line">        SpringTemplateEngine templateEngine = <span class="keyword">new</span> SpringTemplateEngine();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> </span>&#123;</span><br><span class="line">        ThymeleafViewResolver viewResolver = <span class="keyword">new</span> ThymeleafViewResolver();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4、测试功能"><a href="#4、测试功能" class="headerlink" title="4、测试功能"></a>4、测试功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十三、SpringMVC执行流程"><a href="#十三、SpringMVC执行流程" class="headerlink" title="十三、SpringMVC执行流程"></a>十三、SpringMVC执行流程</h1><h3 id="1、SpringMVC常用组件"><a href="#1、SpringMVC常用组件" class="headerlink" title="1、SpringMVC常用组件"></a>1、SpringMVC常用组件</h3><ul>
<li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p>
<ul>
<li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p>
<ul>
<li>Handler：<strong>处理器</strong>，需要工程师开发</li>
</ul>
<p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p>
<ul>
<li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p>
<ul>
<li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p>
<ul>
<li>View：<strong>视图</strong></li>
</ul>
<p>作用：将模型数据通过页面展示给用户</p>
<h3 id="2、DispatcherServlet初始化过程"><a href="#2、DispatcherServlet初始化过程" class="headerlink" title="2、DispatcherServlet初始化过程"></a>2、DispatcherServlet初始化过程</h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringMVC/img/img005.png" width="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">DispatcherServelet初始化</div>
</center>

<h5 id="a-gt-初始化WebApplicationContext"><a href="#a-gt-初始化WebApplicationContext" class="headerlink" title="a&gt;初始化WebApplicationContext"></a>a&gt;初始化WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">initWebApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    WebApplicationContext rootContext =</span><br><span class="line">        WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">    WebApplicationContext wac = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.webApplicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// A context instance was injected at construction time -&gt; use it</span></span><br><span class="line">        wac = <span class="keyword">this</span>.webApplicationContext;</span><br><span class="line">        <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;</span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">                <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">                <span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class="line">                    <span class="comment">// the root application context (if any; may be null) as the parent</span></span><br><span class="line">                    cwac.setParent(rootContext);</span><br><span class="line">                &#125;</span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class="line">        <span class="comment">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class="line">        <span class="comment">// that the parent context (if any) has already been set and that the</span></span><br><span class="line">        <span class="comment">// user has performed any initialization such as setting the context id</span></span><br><span class="line">        wac = findWebApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class="line">        <span class="comment">// 创建WebApplicationContext</span></span><br><span class="line">        wac = createWebApplicationContext(rootContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.refreshEventReceived) &#123;</span><br><span class="line">        <span class="comment">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class="line">        <span class="comment">// support or the context injected at construction time had already been</span></span><br><span class="line">        <span class="comment">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.onRefreshMonitor) &#123;</span><br><span class="line">            <span class="comment">// 刷新WebApplicationContext</span></span><br><span class="line">            onRefresh(wac);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.publishContext) &#123;</span><br><span class="line">        <span class="comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">        <span class="comment">// 将IOC容器在应用域共享</span></span><br><span class="line">        String attrName = getServletContextAttributeName();</span><br><span class="line">        getServletContext().setAttribute(attrName, wac);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="b-gt-创建WebApplicationContext"><a href="#b-gt-创建WebApplicationContext" class="headerlink" title="b&gt;创建WebApplicationContext"></a>b&gt;创建WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = getContextClass();</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(</span><br><span class="line">            <span class="string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +</span><br><span class="line">            <span class="string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +</span><br><span class="line">            <span class="string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过反射创建 IOC 容器对象</span></span><br><span class="line">    ConfigurableWebApplicationContext wac =</span><br><span class="line">        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line"></span><br><span class="line">    wac.setEnvironment(getEnvironment());</span><br><span class="line">    <span class="comment">// 设置父容器</span></span><br><span class="line">    wac.setParent(parent);</span><br><span class="line">    String configLocation = getContextConfigLocation();</span><br><span class="line">    <span class="keyword">if</span> (configLocation != <span class="keyword">null</span>) &#123;</span><br><span class="line">        wac.setConfigLocation(configLocation);</span><br><span class="line">    &#125;</span><br><span class="line">    configureAndRefreshWebApplicationContext(wac);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="c-gt-DispatcherServlet初始化策略"><a href="#c-gt-DispatcherServlet初始化策略" class="headerlink" title="c&gt;DispatcherServlet初始化策略"></a>c&gt;DispatcherServlet初始化策略</h5><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p>
<p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">   initMultipartResolver(context);</span><br><span class="line">   initLocaleResolver(context);</span><br><span class="line">   initThemeResolver(context);</span><br><span class="line">   initHandlerMappings(context);</span><br><span class="line">   initHandlerAdapters(context);</span><br><span class="line">   initHandlerExceptionResolvers(context);</span><br><span class="line">   initRequestToViewNameTranslator(context);</span><br><span class="line">   initViewResolvers(context);</span><br><span class="line">   initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、DispatcherServlet调用组件处理请求"><a href="#3、DispatcherServlet调用组件处理请求" class="headerlink" title="3、DispatcherServlet调用组件处理请求"></a>3、DispatcherServlet调用组件处理请求</h3><h5 id="a-gt-processRequest"><a href="#a-gt-processRequest" class="headerlink" title="a&gt;processRequest()"></a>a&gt;processRequest()</h5><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p>
<p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    Throwable failureCause = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class="line">    LocaleContext localeContext = buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">    RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">    ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> RequestBindingInterceptor());</span><br><span class="line"></span><br><span class="line">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span></span><br><span class="line">        doService(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Request processing failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">        <span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            requestAttributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">        logResult(request, response, failureCause, asyncManager);</span><br><span class="line">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="b-gt-doService"><a href="#b-gt-doService" class="headerlink" title="b&gt;doService()"></a>b&gt;doService()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    logRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">    <span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">    Map&lt;String, Object&gt; attributesSnapshot = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">        attributesSnapshot = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">        <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">            String attrName = (String) attrNames.nextElement();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">                attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.localeResolver);</span><br><span class="line">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.themeResolver);</span><br><span class="line">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.flashMapManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> FlashMap());</span><br><span class="line">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="keyword">this</span>.flashMapManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RequestPath requestPath = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;</span><br><span class="line">        requestPath = ServletRequestPathUtils.parseAndCache(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理请求和响应</span></span><br><span class="line">        doDispatch(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">            <span class="keyword">if</span> (attributesSnapshot != <span class="keyword">null</span>) &#123;</span><br><span class="line">                restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestPath != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ServletRequestPathUtils.clearParsedRequestPath(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="c-gt-doDispatch"><a href="#c-gt-doDispatch" class="headerlink" title="c&gt;doDispatch()"></a>c&gt;doDispatch()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    HttpServletRequest processedRequest = request;</span><br><span class="line">    HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">        Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                mappedHandler：调用链</span></span><br><span class="line"><span class="comment">                包含handler、interceptorList、interceptorIndex</span></span><br><span class="line"><span class="comment">                handler：浏览器发送的请求所匹配的控制器方法</span></span><br><span class="line"><span class="comment">                interceptorList：处理控制器方法的所有拦截器集合</span></span><br><span class="line"><span class="comment">                interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                noHandlerFound(processedRequest, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">               <span class="comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span></span><br><span class="line">            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">            String method = request.getMethod();</span><br><span class="line">            <span class="keyword">boolean</span> isGet = <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">            <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                <span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用拦截器的preHandle()</span></span><br><span class="line">            <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">            <span class="comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span></span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            applyDefaultViewName(processedRequest, mv);</span><br><span class="line">            <span class="comment">// 调用拦截器的postHandle()</span></span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            dispatchException = ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            <span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line">            <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">            dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 后续处理：处理模型数据和渲染视图</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                               <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">            <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="d-gt-processDispatchResult"><a href="#d-gt-processDispatchResult" class="headerlink" title="d&gt;processDispatchResult()"></a>d&gt;processDispatchResult()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</span><br><span class="line">            mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">            errorView = (mv != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">    <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">        <span class="comment">// 处理模型数据和渲染视图</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        <span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">        <span class="comment">// 调用拦截器的afterCompletion()</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4、SpringMVC的执行流程"><a href="#4、SpringMVC的执行流程" class="headerlink" title="4、SpringMVC的执行流程"></a>4、SpringMVC的执行流程</h3><ol>
<li><p>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</p>
</li>
<li><p>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p>
</li>
</ol>
<p>a) 不存在</p>
<p>i. 再判断是否配置了<code>mvc:default-servlet-handler</code></p>
<p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringMVC/img/img006.png" width="100%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">服务器后台输出</div>
</center>

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringMVC/img/img007.png" width="90%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">客户端404</div>
</center>

<p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringMVC/img/img008.png" width="100%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">控制台输出</div>
</center>

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/SpringMVC/img/img009.png" width="90%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">客户端显示404</div>
</center>

<p>b) 存在则执行下面的流程</p>
<ol start="3">
<li><p>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p>
</li>
<li><p>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p>
</li>
<li><p>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</p>
</li>
<li><p>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p>
</li>
</ol>
<p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p>
<p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p>
<p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p>
<p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p>
<ol start="7">
<li><p>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p>
</li>
<li><p>此时将开始执行拦截器的postHandle(…)方法【逆向】。</p>
</li>
<li><p>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</p>
</li>
<li><p>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p>
</li>
<li><p>将渲染结果返回给客户端。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Geforce Now 配置指北</title>
    <url>/2022/06/30/geforce-now-setup/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>Geforce Now，一个姣好的云游戏平台解决方案</p>
</blockquote>
<a id="more"></a>

<h1 id="1-Geforce-Now下载"><a href="#1-Geforce-Now下载" class="headerlink" title="1. Geforce Now下载"></a>1. Geforce Now下载</h1><p><a href="https://www.nvidia.com/en-us/geforce-now/download/">Download GeForce NOW | NVIDIA GeForce NOW</a>点击链接后点击<code>WINDOWS PC</code>栏目下的<code>Download</code>下载GN Windows版</p>
<p>随后按照指引安装即可</p>
<h1 id="2-VPN配置"><a href="#2-VPN配置" class="headerlink" title="2. VPN配置"></a>2. VPN配置</h1><blockquote>
<p>VPN这里仅仅是为了登录Geforce Now账号，<strong>登陆完成后即可关闭VPN</strong></p>
</blockquote>
<p>点击<a href="https://wwp.lanzouv.com/iAf13076ducj">v2ray-Core.zip - 蓝奏云 (lanzouv.com)</a>下载并解压后，点击<code>v2rayN-Core.exe</code>运行，在右下角任务栏找到图标双击打开主页面。然后参照<a href="https://help.loliloli.live/jiao-cheng/windows/v2rayn-v2ray-xie-yi-xin-shou">V2rayN[Vmess/Trojan] - 教程WIKI</a>配置即可。</p>
<p>因为Geforce Now的账号为台湾区的，这里要找到<strong>台湾的节点</strong>，回车选定之后<strong>在任务栏右击图标</strong>开启代理服务（自动配置代理服务的选项）。注意要开启<strong>代理模式为全局模式</strong>。</p>
<blockquote>
<p>如果不好用的话可能是因为节点不行，可以尝试换个台湾的节点。注意此时加速器关闭，VPN开启。其实可以事先在v2rayN界面右击选定节点进行测速。</p>
</blockquote>
<h1 id="3-设置默认浏览器为Chrome并登录GN"><a href="#3-设置默认浏览器为Chrome并登录GN" class="headerlink" title="3. 设置默认浏览器为Chrome并登录GN"></a>3. 设置默认浏览器为Chrome并登录GN</h1><p>在游戏菜单中（网吧环境）找到谷歌浏览器，启动之后按照弹窗提示设置为默认浏览器。如果没有弹窗，可以在右上角菜单里面找到设置 -&gt; 默认浏览器，在系统弹窗内设置默认浏览器为Chrome</p>
<p>或者直接点击Geforce Now中的登录跳转到IE浏览器，复制地址栏URL到Chrome中进行访问，然后登陆。</p>
<p>登录的时候<strong>不要开加速器加速</strong>Geforce Now，开VPN就行。</p>
<blockquote>
<p>如果还是提示中国不提供服务，那就选择其他地区服务商。找到台湾大哥大点击进入后使用提供的账号密码登陆即可。</p>
</blockquote>
<h1 id="4-加速器加速GN"><a href="#4-加速器加速GN" class="headerlink" title="4. 加速器加速GN"></a>4. 加速器加速GN</h1><p><strong>登陆完成后</strong>，雷神加速器可以加速Geforce Now，搜索之后选择台湾服，任意节点加速即可。</p>
<h1 id="5-启动游戏"><a href="#5-启动游戏" class="headerlink" title="5. 启动游戏"></a>5. 启动游戏</h1><p>此时即可在Geforce Now中启动相应的游戏，此时可以关闭VPN代理，但是加速器不能关。需要注意的是，Geforce Now比较吃网络环境，如果断开连接重连即可。另外，每次登陆游戏的<strong>单次会话时长最长为 6 小时</strong>。超时重新登陆游戏即可。</p>
]]></content>
      <categories>
        <category>新手指北</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 5 新特性</title>
    <url>/2022/04/04/spring5-new/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="升级到-Java-SE-8-和-Java-EE-7"><a href="#升级到-Java-SE-8-和-Java-EE-7" class="headerlink" title="升级到 Java SE 8 和 Java EE 7"></a>升级到 Java SE 8 和 Java EE 7</h1><p>直到现在，Spring Framework 仍支持一些弃用的 Java 版本，但 Spring 5 已从旧包袱中解放出来。为了充分利用 Java 8 特性，它的代码库已进行了改进，而且该框架要求将 Java 8 作为最低的 JDK 版本。</p>
<p>Spring 5 在类路径（和模块路径）上完全兼容 Java 9，而且它通过了 JDK 9 测试套件的测试。对 Java 9 爱好者而言，这是一条好消息，因为在 Java 9 发布后，Spring 能立即使用它。</p>
<p>在 API 级别上，Spring 5 兼容 Java EE 8 技术，满足对 Servlet 4.0、Bean Validation 2.0 和全新的 JSON Binding API 的需求。对 Java EE API 的最低要求为 V7，该版本引入了针对 Servlet、JPA 和 Bean Validation API 的次要版本。</p>
<a id="more"></a>

<h1 id="反应式编程模型"><a href="#反应式编程模型" class="headerlink" title="反应式编程模型"></a>反应式编程模型</h1><p>Spring 5 最令人兴奋的新特性是它的反应式编程模型。Spring 5 Framework 基于一种反应式基础而构建，而且是完全异步和非阻塞的。只需少量的线程，新的事件循环执行模型就可以垂直扩展。</p>
<p>该框架采用反应式流来提供在反应式组件中传播负压的机制。<em>负压</em>是一个确保来自多个生产者的数据不会让使用者不堪重负的概念。</p>
<p>Spring WebFlux 是 Spring 5 的反应式核心，它为开发人员提供了两种为 Spring Web 编程而设计的编程模型：一种基于注解的模型和 Functional Web Framework (<code>WebFlux.fn</code>)。</p>
<p>基于注解的模型是 Spring WebMVC 的现代替代方案，该模型基于反应式基础而构建，而 Functional Web Framework 是基于 <code>@Controller</code> 注解的编程模型的替代方案。这些模型都通过同一种反应式基础来运行，后者调整非阻塞 HTTP 来适应反应式流 API。</p>
<h1 id="使用注解进行编程"><a href="#使用注解进行编程" class="headerlink" title="使用注解进行编程"></a>使用注解进行编程</h1><p>WebMVC 程序员应该对 Spring 5 的基于注解的编程模型非常熟悉。Spring 5 调整了 WebMVC 的<code>@Controller</code> 编程模型，采用了相同的注解。</p>
<p>在清单 1 中，<code>BookController</code> 类提供了两个方法，分别响应针对某个图书列表的 HTTP 请求，以及针对具有给定 <code>id</code> 的图书的 HTTP 请求。请注意 resource 方法返回的对象（<code>Mono</code> 和 <code>Flux</code>）。这些对象是实现<a href="http://www.reactive-streams.org/">反应式流</a>规范中的 <code>Publisher</code> 接口的反应式类型。它们的职责是处理数据流。<code>Mono</code> 对象处理一个仅含 1 个元素的流，而 Flux 表示一个包含 N 个元素的流。</p>
<p>清单 1. 反应式控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/book&quot;)</span></span><br><span class="line">    <span class="function">Flux&lt;Book&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.repository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/book/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Mono&lt;Book&gt; <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.repository.findOne(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Plumbing code omitted for brevity</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是针对 Spring Web 编程的注解。现在我们使用函数式 Web 框架来解决同一个问题。</p>
<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><p>Spring 5 的新函数式方法将请求委托给处理函数，这些函数接受一个服务器请求实例并返回一种反应式类型。清单 2 演示了这一过程，其中 <code>listBook</code> 和 <code>getBook</code> 方法类似于清单 1 中的功能。</p>
<p>清单 2. 清单 2.BookHandler 函数类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">listBooks</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok()</span><br><span class="line">            .contentType(APPLICATION_JSON)</span><br><span class="line">            .body(repository.allPeople(), Book.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">getBook</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> repository.getBook(request.pathVariable(<span class="string">&quot;id&quot;</span>))</span><br><span class="line">            .then(book -&gt; ServerResponse.ok()</span><br><span class="line">            .contentType(APPLICATION_JSON)</span><br><span class="line">            .body(fromObject(book)))</span><br><span class="line">            .otherwiseIfEmpty(ServerResponse.notFound().build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Plumbing code omitted for brevity</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过路由函数来匹配 HTTP 请求谓词与媒体类型，将客户端请求路由到处理函数。清单 3 展示了图书资源端点 URI 将调用委托给合适的处理函数：</p>
<p>清单 3. Router 函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BookHandler handler = <span class="keyword">new</span> BookHandler();</span><br><span class="line">RouterFunction&lt;ServerResponse&gt; personRoute =</span><br><span class="line">    route(</span><br><span class="line">        GET(<span class="string">&quot;/books/&#123;id&#125;&quot;</span>)</span><br><span class="line">        .and(accept(APPLICATION_JSON)), handler::getBook)</span><br><span class="line">        .andRoute(</span><br><span class="line">    GET(<span class="string">&quot;/books&quot;</span>)</span><br><span class="line">        .and(accept(APPLICATION_JSON)), handler::listBooks);</span><br></pre></td></tr></table></figure>
<p>这些示例背后的数据存储库也支持完整的反应式体验，该体验是通过 Spring Data 对反应式 Couchbase、Reactive MongoDB 和 Cassandra 的支持来实现的。</p>
<h1 id="使用-REST-端点执行响应式编程"><a href="#使用-REST-端点执行响应式编程" class="headerlink" title="使用 REST 端点执行响应式编程"></a>使用 REST 端点执行响应式编程</h1><p>新的编程模型脱离了传统的 Spring WebMVC 模型，引入了一些很不错的新特性。</p>
<p>举例来说，WebFlux 模块为 <code>RestTemplate</code> 提供了一种完全非阻塞、反应式的替代方案，名为<code>WebClient</code>。清单 4 创建了一个 <code>WebClient</code>，并调用 <code>books</code> 端点来请求一本给定 <code>id</code> 为 <code>1234</code> 的图书。</p>
<p>清单 4. 通过 WebClient 调用 REST 端点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Mono&lt;Book&gt; book = WebClient.create(<span class="string">&quot;http://localhost:8080&quot;</span>)</span><br><span class="line">      .get()</span><br><span class="line">      .url(<span class="string">&quot;/books/&#123;id&#125;&quot;</span>, <span class="number">1234</span>)</span><br><span class="line">      .accept(APPLICATION_JSON)</span><br><span class="line">      .exchange(request)</span><br><span class="line">      .then(response -&gt; response.bodyToMono(Book.class));</span><br></pre></td></tr></table></figure>
<h1 id="HTTP-2-支持"><a href="#HTTP-2-支持" class="headerlink" title="HTTP/2 支持"></a>HTTP/2 支持</h1><p><strong>HTTP/2 幕后原理：</strong>要了解 HTTP/2 如何提高传输性能，减少延迟，并帮助提高应用程序吞吐量，从而提供经过改进的丰富 Web 体验，请查阅<a href="https://www.ibm.com/developerworks/cn/web/wa-http2-under-the-hood/index.html">我的有关这项期待已久的升级的文章</a>。</p>
<p>Spring Framework 5.0 将提供专门的 <a href="https://www.ibm.com/developerworks/cn/web/wa-http2-under-the-hood/index.html">HTTP/2 特性</a>支持，还支持人们期望出现在 JDK 9 中的新 HTTP 客户端。尽管 HTTP/2 的服务器推送功能已通过 Jetty servlet 引擎的 <code>ServerPushFilter</code> 类向 Spring 开发人员公开了很长一段时间，但如果发现 Spring 5 中开箱即用地提供了 <a href="https://www.ibm.com/developerworks/cn/web/wa-http2-under-the-hood/index.html">HTTP/2</a>性能增强，Web 优化者们一定会为此欢呼雀跃。</p>
<p>Java EE Servlet 规范预计将于 2017 年第 4 季度发布，Servlet 4.0 支持将在 Spring 5.1 中提供。到那时，<a href="https://www.ibm.com/developerworks/cn/web/wa-http2-under-the-hood/index.html">HTTP/2 特性</a>将由 Tomcat 9.0、Jetty 9.3 和 Undertow 1.4 原生提供。</p>
<h1 id="Kotlin-和-Spring-WebFlux"><a href="#Kotlin-和-Spring-WebFlux" class="headerlink" title="Kotlin 和 Spring WebFlux"></a>Kotlin 和 Spring WebFlux</h1><p>Kotlin 是一种来自 <a href="https://blog.jetbrains.com/kotlin/">JetBrains</a> 的面向对象的语言，它支持函数式编程。它的主要优势之一是与 Java 有非常高的互操作性。通过引入对 Kotlin 的专门支持，Spring 在 V5 中全面吸纳了这一优势。它的函数式编程风格与 Spring WebFlux 模块完美匹配，它的新路由 DSL 利用了函数式 Web 框架以及干净且符合语言习惯的代码。可以像清单 5 中这样简单地表达端点路由：</p>
<p>清单 5. Kotlin 的用于定义端点的路由 DSL</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">fun <span class="title">apiRouter</span><span class="params">()</span> </span>= router &#123;</span><br><span class="line">    (accept(APPLICATION_JSON) and <span class="string">&quot;/api&quot;</span>).nest &#123;</span><br><span class="line">        <span class="string">&quot;/book&quot;</span>.nest &#123;</span><br><span class="line">            GET(<span class="string">&quot;/&quot;</span>, bookHandler::findAll)</span><br><span class="line">            GET(<span class="string">&quot;/&#123;id&#125;&quot;</span>, bookHandler::findOne)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">&quot;/video&quot;</span>.nest &#123;</span><br><span class="line">            GET(<span class="string">&quot;/&quot;</span>, videoHandler::findAll)</span><br><span class="line">            GET(<span class="string">&quot;/&#123;genre&#125;&quot;</span>, videoHandler::findByGenre)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 Kotlin 1.1.4+ 时，还添加了对 Kotlin 的不可变类的支持（通过带默认值的可选参数），以及对完全支持 null 的 API 的支持。</p>
<h1 id="使用-Lambda-表达式注册-bean"><a href="#使用-Lambda-表达式注册-bean" class="headerlink" title="使用 Lambda 表达式注册 bean"></a>使用 Lambda 表达式注册 bean</h1><p>作为传统 XML 和 JavaConfig 的替代方案，现在可以使用 lambda 表达式注册 Spring bean，使 bean 可以实际注册为提供者。清单 6 使用 lambda 表达式注册了一个 <code>Book</code> bean。</p>
<p>清单 6. 将 Bean 注册为提供者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line">context.registerBean(Book.class, () -&gt; <span class="keyword">new</span></span><br><span class="line">              Book(context.getBean(Author.class))</span><br><span class="line">        );</span><br></pre></td></tr></table></figure>
<h1 id="Spring-WebMVC-支持最新的-API"><a href="#Spring-WebMVC-支持最新的-API" class="headerlink" title="Spring WebMVC 支持最新的 API"></a>Spring WebMVC 支持最新的 API</h1><p>全新的 WebFlux 模块提供了许多新的、令人兴奋的功能，但 Spring 5 也迎合了愿意继续使用 Spring MVC 的开发人员的需求。Spring 5 中更新了模型-视图-控制器框架，以兼容 WebFlux 和最新版的<a href="https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9">Jackson 2.9</a> 和 <a href="https://github.com/google/protobuf/releases?after=v3.0.0-alpha-3">Protobuf 3.0</a>，甚至包括对新的 <a href="http://json-b.net/">Java EE 8 JSON-Binding API</a> 的支持。</p>
<p>除了 <a href="https://www.ibm.com/developerworks/cn/web/wa-http2-under-the-hood/index.html">HTTP/2 特性</a>的基础服务器实现之外，Spring WebMVC 还通过 MVC 控制器方法的一个参数来支持 Servlet 4.0 的 <code>PushBuilder</code>。最后，WebMVC 全面支持 Reactor 3.1 的 <code>Flux</code> 和 <code>Mono</code> 对象，以及 <a href="https://github.com/ReactiveX/RxJava/wiki">RxJava</a>1.3 和 2.1，它们被视为来自 MVC 控制器方法的返回值。这项支持的最终目的是支持 Spring Data 中的新的反应式 WebClient 和反应式存储库。</p>
<h1 id="使用-JUnit-5-执行条件和并发测试"><a href="#使用-JUnit-5-执行条件和并发测试" class="headerlink" title="使用 JUnit 5 执行条件和并发测试"></a>使用 JUnit 5 执行条件和并发测试</h1><p><strong>JUnit 和 Spring 5</strong>：Spring 5 全面接纳了函数式范例，并支持 JUnit 5 及其新的函数式测试风格。还提供了对 JUnit 4 的向后兼容性，以确保不会破坏旧代码。</p>
<p>Spring 5 的测试套件通过多种方式得到了增强，但最明显的是它对<a href="http://junit.org/junit5/">JUnit 5</a> 的支持。现在可以在您的单元测试中利用 Java 8 中提供的函数式编程特性。清单 7 演示了这一支持：</p>
<p>清单 7. 清单 7.JUnit 5 全面接纳了 Java 8 流和 lambda 表达式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">givenStreamOfInts_SumShouldBeMoreThanFive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertTrue(Stream.of(<span class="number">20</span>, <span class="number">40</span>, <span class="number">50</span>)</span><br><span class="line">      .stream()</span><br><span class="line">      .mapToInt(i -&gt; i)</span><br><span class="line">      .sum() &gt; <span class="number">110</span>, () -&gt; <span class="string">&quot;Total should be more than 100&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>迁移到 JUnit 5：</strong>如果您对升级到 JUnit 5 持观望态度，Steve Perry 的<a href="https://www.ibm.com/developerworks/cn/views/global/libraryview.jsp?sort_by=&show_abstract=true&show_all=&search_flag=&contentarea_by=%E6%89%80%E6%9C%89%E4%B8%93%E5%8C%BA&search_by=JUnit+5+%E7%AE%80%E4%BB%8B&product_by=-1&topic_by=-1&type_by=%E6%89%80%E6%9C%89%E7%B1%BB%E5%88%AB&ibm-search=%E6%90%9C%E7%B4%A2">分两部分的深入剖析教程</a>将说服您冒险尝试。</p>
<p>Spring 5 继承了 <a href="https://www.ibm.com/developerworks/cn/java/j-introducing-junit5-part1-jupiter-api/index.html">JUnit 5</a> 在 Spring TestContext Framework 内实现多个扩展 API 的灵活性。举例而言，开发人员可以使用 JUnit 5 的条件测试执行注解 <code>@EnabledIf</code> 和 <code>@DisabledIf</code> 来自动计算一个 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html">SpEL</a> (Spring Expression Language) 表达式，并适当地启用或禁用测试。借助这些注解，Spring 5 支持以前很难实现的复杂的条件测试方案。Spring TextContext Framework 现在能够并发执行测试。</p>
<h1 id="使用-Spring-WebFlux-执行集成测试"><a href="#使用-Spring-WebFlux-执行集成测试" class="headerlink" title="使用 Spring WebFlux 执行集成测试"></a>使用 Spring WebFlux 执行集成测试</h1><p>Spring Test 现在包含一个 <code>WebTestClient</code>，后者支持对 Spring WebFlux 服务器端点执行集成测试。<code>WebTestClient</code> 使用模拟请求和响应来避免耗尽服务器资源，并能直接绑定到 WebFlux 服务器基础架构。</p>
<p><code>WebTestClient</code> 可绑定到真实的服务器，或者使用控制器或函数。在清单 8 中，<code>WebTestClient</code> 被绑定到 localhost：</p>
<p>清单 8. 绑定到 localhost 的 <code>WebTestClient</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WebTestClient testClient = WebTestClient</span><br><span class="line">  .bindToServer()</span><br><span class="line">  .baseUrl(<span class="string">&quot;http://localhost:8080&quot;</span>)</span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure>
<p>在清单 9 中，测试了 <code>RouterFunction</code>：</p>
<p>清单 9. 将 <code>WebTestClient</code> 绑定到 <code>RouterFunction</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RouterFunction bookRouter = RouterFunctions.route(</span><br><span class="line">  RequestPredicates.GET(<span class="string">&quot;/books&quot;</span>),</span><br><span class="line">  request -&gt; ServerResponse.ok().build()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">WebTestClient</span><br><span class="line">  .bindToRouterFunction(bookRouter)</span><br><span class="line">  .build().get().uri(<span class="string">&quot;/books&quot;</span>)</span><br><span class="line">  .exchange()</span><br><span class="line">  .expectStatus().isOk()</span><br><span class="line">  .expectBody().isEmpty();</span><br></pre></td></tr></table></figure>
<h1 id="包清理和弃用"><a href="#包清理和弃用" class="headerlink" title="包清理和弃用"></a>包清理和弃用</h1><p>Spring 5 中止了对一些过时 API 的支持。遭此厄运的还有 Hibernate 3 和 4，为了支持 Hibernate 5，它们遭到了弃用。另外，对 Portlet、Velocity、JasperReports、XMLBeans、JDO 和 Guava 的支持也已中止。</p>
<p>包级别上的清理工作仍在继续：Spring 5 不再支持<code>beans.factory.access</code>、<code>jdbc.support.nativejdbc</code>、<code>mock.staticmock</code>（来自 spring-aspects 模块）或 <code>web.view.tiles2M</code>。Tiles 3 现在是 Spring 的最低要求。</p>
<h1 id="对-Spring-核心和容器的一般更新"><a href="#对-Spring-核心和容器的一般更新" class="headerlink" title="对 Spring 核心和容器的一般更新"></a>对 Spring 核心和容器的一般更新</h1><p>Spring Framework 5 改进了扫描和识别组件的方法，使大型项目的性能得到提升。目前，扫描是在编译时执行的，而且向 <a href="https://jira.spring.io/browse/SPR-11890">META-INF/spring.components</a> 文件中的索引文件添加了组件坐标。该索引是通过一个为项目定义的特定于平台的应用程序构建任务来生成的。</p>
<p>标有来自 <a href="https://docs.oracle.com/javase/8/docs/api/overview-summary.html">javax 包</a>的注解的组件会添加到索引中，任何带 <code>@Index</code> 注解的类或接口都会添加到索引中。Spring 的传统类路径扫描方式没有删除，而是保留为一种后备选择。有许多针对大型代码库的明显性能优势，而托管许多 Spring 项目的服务器也会缩短启动时间。</p>
<p>Spring 5 还添加了对 <code>@Nullable</code> 的支持，后者可用于指示可选的注入点。使用者现在必须准备接受 null 值。此外，还可以使用此注解来标记可以为 null 的参数、字段和返回值。<code>@Nullable</code> 主要用于 IntelliJ IDEA 等 IDE，但也可用于 Eclipse 和 FindBugs，它使得在编译时处理 null 值变得更方便，而无需在运行时发送 <code>NullPointerExceptions</code>。</p>
<p>Spring Logging 还提升了性能，自带开箱即用的 Commons Logging 桥接器。现在已通过<code>资源抽象</code>支持防御性编程，为 <code>getFile</code> 访问提供了 <code>isFile</code> 指示器。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Transaction 初探</title>
    <url>/2022/04/03/spring-transaction-intro/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="事务概念"><a href="#事务概念" class="headerlink" title="事务概念"></a>事务概念</h1><ol>
<li><p>什么是事务</p>
<p>事务是数据库操作的最基本单元，逻辑上一组操作。要么都成功，要么全部失败（即使只有一个操作失败）。</p>
</li>
<li><p>经典场景：银行转账</p>
<ul>
<li><p>Lucy转账￥100给Mary</p>
</li>
<li><p>Lucy少100，Mary多100</p>
</li>
</ul>
</li>
<li><p>事务四大特性（ACID）：</p>
<ul>
<li><p>原子性（Atomic）：全部成功或全部失败</p>
</li>
<li><p>一致性（Consistency）：操作前后的总量不变</p>
</li>
<li><p>隔离性（Isolation）：多事务操作之间不会产生影响</p>
</li>
<li><p>持久性（Duration）：提交后表中数据就会发生变化</p>
</li>
</ul>
</li>
</ol>
<a id="more"></a>

<h1 id="搭建事务操作环境"><a href="#搭建事务操作环境" class="headerlink" title="搭建事务操作环境"></a>搭建事务操作环境</h1><ul>
<li>以转账过程为例，需要在Dao层（数据库操作层）创建两个方法：扣钱和加钱；并且需要在Service层（业务操作）创建转账的方法来调用Dao层的两个方法。</li>
</ul>
<ol>
<li><p>创建相关数据库以及表</p>
</li>
<li><p>创建Service，搭建Dao，完成对象创建和注入关系</p>
<ul>
<li><p>Service注入Dao，在Dao注入<code>JdbcTemplate</code>，在<code>JdbcTemplate</code>注入<code>DataSource</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.shimmerjordan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;class.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverclass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="comment">// 注入Dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserDaoImpl.java</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>在Dao创建两个方法：加钱和扣钱，在service中创建转账方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserDaoImpl.java</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update t_account set money=money+? where username=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, <span class="number">100</span>, <span class="string">&quot;Mary&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduceMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update t_account set money=money-? where username=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, <span class="number">100</span>, <span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="comment">// 注入Dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transferMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.reduceMoney();</span><br><span class="line">        userDao.addMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>上面的代码如果正常能够执行完毕是没有问题的，但是倮代码执行过程中出现异常便会有问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="comment">// 注入Dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transferMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.reduceMoney();</span><br><span class="line">        <span class="comment">// 模拟异常（诸如断电断网等情况）</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        userDao.addMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这会导致Lucy钱少了，但是Mary没有收到转账。<strong>使用事务</strong>解决以上问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="comment">// 注入Dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transferMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 第一步 开启事务</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第二步 进行业务操作</span></span><br><span class="line">            userDao.reduceMoney();</span><br><span class="line">            <span class="comment">// 模拟异常（诸如断电断网等情况）</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            userDao.addMoney();</span><br><span class="line">            <span class="comment">// 第三步 没有发生异常，提交事务</span></span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            <span class="comment">// 第四步 出现异常，事务回滚</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Spring事务管理介绍"><a href="#Spring事务管理介绍" class="headerlink" title="Spring事务管理介绍"></a>Spring事务管理介绍</h1></li>
<li><p>事务一般添加到JavaEE三层结构中的Service层（业务逻辑层）</p>
</li>
<li><p>在Spring进行事务管理操作</p>
<p>两种方式：编程式事务管理（一般不采用）以及声明式事务管理（包括基于注解方式以及基于xml配置文件方式）</p>
</li>
<li><p>在Spring进行声明式事务管理，底层使用AOP原理</p>
</li>
<li><p>Spring事务管理API</p>
<p>1）提供一个接口，代表<strong>事务管理器</strong>，这个接口针对不同的框架提供不同的实现类。</p>
<ul>
<li><code>PlatformTransactionManager</code>接口，实现类有<code>DataSourceTransactionManager</code>(JDBC, Mybatis etc.)，<code>HibernateTransactionManager</code>(Hibernate etc.)</li>
</ul>
</li>
</ol>
<h1 id="注解声明式事务管理"><a href="#注解声明式事务管理" class="headerlink" title="注解声明式事务管理"></a>注解声明式事务管理</h1><ol>
<li><p>在Spring配置文件配置事务管理器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1）在Spring配置文件中引入名称空间<code>tx</code></p>
<p>2）开启事务注解</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在Service类（Service类中方法）上面添加事务注解<code>@Transactional</code></p>
</li>
</ol>
<h1 id="声明式事务管理参数配置"><a href="#声明式事务管理参数配置" class="headerlink" title="声明式事务管理参数配置"></a>声明式事务管理参数配置</h1><p>在Service类上面添加注解<code>@Transactional</code>，在这个注解里面可以配置事务相关参数</p>
<ul>
<li><p><code>propagation</code>表示事务传播行为</p>
<p>1）多<strong>事务方法</strong>直接进行调用，这个过程中事务是如何进行管理的</p>
<ul>
<li><p>事务方法：对数据库表数据进行变化的操作</p>
</li>
<li><p><code>PROPAGATION_REQUIRED</code> 如果存在一个事务，则支持当前事务（当前的方法就在这个事务内运行）。否则，开启一个新的事务并在自己事务内运行。</p>
</li>
<li><p><code>PROPAGATION_SUPPORTS</code> 如果存在一个事务，支持当前事务。如果没有事务，则非事务的执行。但是对于事务同步的事务管理器，PROPAGATION_SUPPORTS与不使用事务有少许不同。</p>
</li>
<li><p><code>PROPAGATION_MANDATORY</code> 如果已经存在一个事务，支持当前事务。如果没有一个活动的事务，则抛出异常。</p>
</li>
<li><p><code>PROPAGATION_REQUIRES_NEW</code> 总是开启一个新的事务。如果一个事务已经存在，则将这个存在的事务挂起</p>
</li>
<li><p><code>PROPAGATION_NOT_SUPPORTED</code> 总是非事务地执行，并挂起任何存在的事务。</p>
</li>
<li><p><code>PROPAGATION_NEVER</code> 总是非事务地执行，如果存在一个活动事务，则抛出异常</p>
</li>
<li><p><code>PROPAGATION_NESTED</code> 如果一个活动的事务存在，则运行在一个嵌套的事务中. 如果没有活动事务, 则按<code>TransactionDefinition.PROPAGATION_REQUIRED</code> 属性执行</p>
</li>
</ul>
</li>
<li><p><code>isolation</code>事务隔离级别</p>
<p>1）事务有一个特性称为隔离性，多事务操作之间不会产生影响。不考虑隔离性会产生三个读问题：脏读、不可重复读、虚（幻）度：</p>
<ul>
<li><p><strong>脏读</strong>：是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中。这时，另外一个事务也访问这个数据，然后使用了这个数据。</p>
</li>
<li><p><strong>不可以重复读</strong>：是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。</p>
</li>
<li><p><strong>幻读</strong>：是指当事务不是独立执行时发生的一种现象。例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。</p>
</li>
<li><p><code>ISOLATION_DEFAULT</code> 这是一个<code>PlatfromTransactionManager</code>默认的隔离级别，使用数据库默认的事务隔离级别。另外四个与JDBC的隔离级别相对应</p>
</li>
<li><p><code>ISOLATION_READ_UNCOMMITTED</code> 这是事务最低的隔离级别，它充许别外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻像读</p>
</li>
<li><p><code>ISOLATION_READ_COMMITTED</code> 保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。可以避免脏读出现，但是可能会出现不可重复读和幻像读。通过<strong>对修改的行进行加锁</strong>，避免脏读。</p>
</li>
<li><p><code>ISOLATION_REPEATABLE_READ</code> 这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻读。它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)。通过<strong>对查询所有的行进行加锁</strong>，避免了不可重复读。</p>
</li>
<li><p><code>ISOLATION_SERIALIZABLE</code> 这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻像读。通过<strong>对表加锁</strong>实现。</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>ISOLATION_READ_UNCOMMITTED</code></td>
<td>有</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td align="center"><code>ISOLATION_READ_COMMITTED</code></td>
<td>无</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td align="center"><code>ISOLATION_REPEATABLE_READ</code></td>
<td>无</td>
<td>无</td>
<td>有</td>
</tr>
<tr>
<td align="center"><code>ISOLATION_SERIALIZABLE</code></td>
<td>无</td>
<td>无</td>
<td>无</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><code>timeout</code>超时时间：事务需要在一定时间（s）内提交，否则回滚，默认<code>-1</code></p>
</li>
<li><p><code>readOnly</code>是否只读，默认<code>false</code></p>
</li>
<li><p><code>rollbackFor</code>回滚：设置查询哪些异常进行事务回滚</p>
</li>
<li><p><code>norollbackFor</code>不回滚：设置出现哪些异常不进行事务回滚</p>
</li>
</ul>
<h1 id="xml声明式事务管理"><a href="#xml声明式事务管理" class="headerlink" title="xml声明式事务管理"></a>xml声明式事务管理</h1><ol>
<li><p>在Spring配置文件中进行配置</p>
<p>第一步 配置事务管理器（已在上面的步骤中完成）</p>
<p>第二步 配置通知</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txadvice&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定哪种规则的方法上面添加事务 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transferMoney&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;tx:method name=&quot;transfer*&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第三步 配置切入点和切面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.shimmerjordan.service.UserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="完全注解事务管理"><a href="#完全注解事务管理" class="headerlink" title="完全注解事务管理"></a>完全注解事务管理</h2></li>
</ol>
<p>在配置类中配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TxConfig.java</span></span><br><span class="line"><span class="meta">@Configuration</span>    <span class="comment">// 配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.shimmerjordan&quot;)</span>    <span class="comment">// 开启扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>    <span class="comment">// 开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建数据库连接池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">getDruidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource datasource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.cj.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql:///user_db&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建JdbcTemplate对象</span></span><br><span class="line">    <span class="comment">// 到IOC容器中根据类型找到dataSource</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">(DataSource dataSouce)</span></span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSouce);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">getDataSourceTransactionManager</span><span class="params">(DataSource dataSouce)</span></span>&#123;</span><br><span class="line">        DataSourceTransactionManager dataSourceTransactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Interview</tag>
        <tag>Transaction</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Dynamic Proxy Introduction</title>
    <url>/2022/04/01/ynamic-proxy/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h1><ol>
<li><p>理解动态代理：基于反射机制</p>
</li>
<li><p>什么是动态代理，动态代理能做什么</p>
</li>
</ol>
<a id="more"></a>

<h1 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h1><blockquote>
<p>代理模式：为其它对象提供一种代理以控制对这个对象的访问。换句话说，使用代理对象，是为了在不修改目标对象的基础上，增强业务逻辑。</p>
</blockquote>
<p>客户类真正<strong>想要访问</strong>的对象是目标对象，但客户类真正<strong>可以访问</strong>的对象是代理对象。</p>
<ol>
<li><p>在开发中会有这样的情况，有A类，本来是调用B类的方法完成某个功能，但是B不让A直接调用。因此需要在Ａ和B之间创建一个C代理，使得Ａ能够通过C访问B。</p>
</li>
<li><p>一个工程如果依赖另一个工程给的接口，但是另一个工程的接口不稳定，经常变更协议，就可以使用一个代理，接口变更时，只需要修改代理，不需要一一修改业务代码。从这个意义上说，所有调外界的接口，我们都可以这么做，不让外界的代码对我们的代码有侵入，这叫防御式编程。</p>
</li>
</ol>
<h1 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h1><p>jdk动态代理是jre提供给我们的类库，可以直接使用，不依赖第三方。先看下jdk动态代理的使用代码，再理解原理。</p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ol>
<li><p>首先有个<code>Star</code>接口类，有<code>sing</code>、<code>dance</code>两个功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Star</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sing</span><span class="params">(String name)</span></span>;    </span><br><span class="line">    <span class="function">String <span class="title">dance</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>再有一个<code>Star</code>实现类<code>LiuDeHua</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiuDeHua</span> <span class="keyword">implements</span> <span class="title">Star</span></span>&#123;   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sing</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;给我一杯忘情水&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;唱完&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dance</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开心的马骝&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;跳完&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>明星演出前需要有人收钱，由于要准备演出，自己不做这个工作，一般交给一个经纪人。便于理解，它的名字以<code>Proxy</code>结尾，但他不是代理类，原因是它没有实现我们的明星接口，无法对外服务，它仅仅是一个<strong>wrapper</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="comment">// 目标类，也就是被代理对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        <span class="comment">// 这里可以做增强</span></span><br><span class="line">        System.out.println(<span class="string">&quot;收钱&quot;</span>);        </span><br><span class="line">        Object result = method.invoke(target, args);        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">CreatProxyedObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述例子中，方法<code>CreatProxyedObj</code>返回的对象才是我们的代理类，它需要三个参数，前两个参数的意思是在同一个<code>classloader</code>下通过接口创建出一个对象，该对象需要一个属性，也就是<strong>第三个参数</strong>，它是一个<code>InvocationHandler</code>。需要注意的是这个<code>CreatProxyedObj</code>方法不一定非得在我们的<code>StarProxy</code>类中，往往放在一个工厂类中。</p>
</li>
</ol>
<p>上述代理的代码使用过程一般如下：</p>
<ol>
<li><p>new一个目标对象</p>
</li>
<li><p>new一个<code>InvocationHandler</code>，将目标对象<code>set</code>进去</p>
</li>
<li><p>通过<code>CreatProxyedObj</code>创建代理对象，强转为目标对象的接口类型即可使用，实际上生成的代理对象实现了目标接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Star ldh = <span class="keyword">new</span> LiuDeHua();</span><br><span class="line">StarProxy proxy = <span class="keyword">new</span> StarProxy();</span><br><span class="line">proxy.setTarget(ldh); </span><br><span class="line">Object obj = proxy.CreatProxyedObj();</span><br><span class="line">Star star = (Star)obj;</span><br></pre></td></tr></table></figure>
<p><code>Proxy</code>（jdk类库提供）根据B的接口生成一个实现类，我们称之为C，它就是动态代理类（该类型是 <code>$Proxy+数字</code> 的“新的类型”）。</p>
</li>
</ol>
<p>生成过程是：由于拿到了接口，便可以获知接口的所有信息（主要是方法的定义），也就能声明一个新的类型去实现该接口的所有方法。这些方法显然都是“虚”的，它调用另一个对象的方法。当然这个被调用的对象不能是对象B，如果是对象B，我们就没法增强了，等于饶了一圈又回来了。</p>
<p>所以它调用的是B的包装类，这个包装类需要我们来实现，但是jdk给出了约束，它必须实现<code>InvocationHandler</code>，上述例子中就是<code>StarProxy</code>， 这个接口里面有个方法，它是所有<code>Target</code>的<strong>所有方法</strong>的调用入口（<code>invoke</code>），<strong>调用之前我们可以加自己的代码增强</strong>。</p>
<p>再看下我们的实现，我们在<code>InvocationHandler</code>里调用了对象B（<code>target</code>）的方法，调用之前增强了B的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">    <span class="comment">// 这里增强</span></span><br><span class="line">    System.out.println(<span class="string">&quot;收钱&quot;</span>);   </span><br><span class="line">    Object result = method.invoke(target, args);        </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以可以这么认为：C代理了<code>InvocationHandler</code>，<code>InvocationHandler</code>代理了我们的类B，<strong>两级代理</strong>。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>整个JDK动态代理的秘密也就这些。简单一句话，动态代理就是要生成一个包装类对象，由于代理的<strong>对象是动态</strong>的，所以叫动态代理。</p>
<p>由于我们需要增强，这个增强是需要留给开发人员开发代码的，因此代理类不能直接包含被代理对象，而是一个<code>InvocationHandler</code>，该<code>InvocationHandler</code>包含被代理对象，并负责分发请求给被代理对象，分发前后均可以做增强。从原理可以看出，JDK动态代理是“对象”的代理。</p>
<h2 id="动态代理原理"><a href="#动态代理原理" class="headerlink" title="动态代理原理"></a>动态代理原理</h2><p>下面看下动态代理类到底如何调用的<code>InvocationHandler</code>的，为什么<code>InvocationHandler</code>的一个<code>invoke</code>方法能为分发<code>target</code>的<strong>所有方法</strong>。C中的部分代码示例如下，通过反编译生成后的代码查看，摘自<a href="https://blog.csdn.net/jiankunking/article/details/52143504">JDK 动态代理（AOP）使用及实现原理分析</a>。<code>Proxy</code>创造的C是自己（<code>Proxy</code>）的子类，且实现了B的接口，一般都是这么修饰的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">XXX</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">XXX</span></span></span><br></pre></td></tr></table></figure>
<h3 id="方法代码如下："><a href="#方法代码如下：" class="headerlink" title="方法代码如下："></a>方法代码如下：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">SayHello</span><span class="params">(String paramString)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m4, <span class="keyword">new</span> Object[] &#123; paramString &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Error|RuntimeException localError)                          &#123;</span><br><span class="line">        <span class="keyword">throw</span> localError;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable localThrowable)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(localThrowable);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，C中的方法全部通过调用<code>h</code>实现，其中<code>h</code>就是<code>InvocationHandler</code>，是我们在生成C时传递的第三个参数。这里还有个关键就是<code>SayHello</code>方法（业务方法）跟调用<code>invoke</code>方法时传递的参数<code>m4</code>一定要是一一对应的。但是这些对我们来说都是透明的，由<code>Proxy</code>在<code>newProxyInstance</code>时保证的。留心看到C在<code>invoke``时把自己</code>this<code>传递了过去，</code>InvocationHandler<code>的``invoke</code>的第一个方法也就是我们的动态代理实例类，业务上有需要就可以使用它。（所以千万不要在<code>invoke</code>方法里把请求分发给第一个参数，否则很明显就死循环了）</p>
<h3 id="C类中有B中所有方法的成员变量"><a href="#C类中有B中所有方法的成员变量" class="headerlink" title="C类中有B中所有方法的成员变量"></a>C类中有B中所有方法的成员变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br></pre></td></tr></table></figure>
<p>这些变量在static静态代码块初始化，这些变量是在调用<code>invocationhander</code>时必要的入参，也让我们依稀看到<code>Proxy</code>在生成C时留下的痕迹。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, <span class="keyword">new</span> Class[] &#123; Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>) &#125;);</span><br><span class="line">        m3 = Class.forName(<span class="string">&quot;jiankunking.Subject&quot;</span>).getMethod(<span class="string">&quot;SayGoodBye&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">        m4 = Class.forName(<span class="string">&quot;jiankunking.Subject&quot;</span>).getMethod(<span class="string">&quot;SayHello&quot;</span>, <span class="keyword">new</span> Class[] &#123; Class.forName(<span class="string">&quot;java.lang.String&quot;</span>) &#125;);</span><br><span class="line">        m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">        m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (NoSuchMethodException localNoSuchMethodException)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(localNoSuchMethodException.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ClassNotFoundException localClassNotFoundException)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(localClassNotFoundException.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h1><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><p>我们了解到，“代理”的目的是构造一个和被代理的对象有同样行为的对象，一个对象的行为是在类中定义的，对象只是类的实例。所以构造代理，<strong>不一定非得通过持有、包装对象</strong>这一种方式。</p>
<p>通过“继承”可以<strong>继承父类</strong>所有的公开方法，然后可以重写这些方法，在重写时对这些方法增强，这就是cglib的思想。根据里氏代换原则（LSP），父类需要出现的地方，子类可以出现，所以cglib实现的代理也是可以被正常使用的。</p>
<p>先看代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line">    <span class="comment">// 根据一个类型产生代理类，此方法不要求一定放在MethodInterceptor中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">CreatProxyedObj</span><span class="params">(Class&lt;?&gt; clazz)</span></span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();     </span><br><span class="line">        enhancer.setSuperclass(clazz);        </span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);        </span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object arg0, Method arg1, Object[] arg2, MethodProxy arg3)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        <span class="comment">// 这里增强</span></span><br><span class="line">        System.out.println(<span class="string">&quot;收钱&quot;</span>);        </span><br><span class="line">        <span class="keyword">return</span> arg3.invokeSuper(arg0, arg2);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从代码可以看出，它和jdk动态代理有所不同，对外表现上看<code>CreatProxyedObj</code>，它只需要一个类型<code>clazz</code>就可以产生一个代理对象， 所以说是“类的代理”，且创造的对象通过打印类型发现也是一个新的类型。不同于jdk动态代理，<strong>jdk动态代理要求对象必须实现接口（三个参数的第二个参数），cglib对此没有要求。</strong></p>
<p>cglib的原理是这样，它生成一个继承B的类型C（代理类），这个代理类持有一个<code>MethodInterceptor</code>，我们<code>setCallback</code>时传入的。 C重写<strong>所有</strong>B中的方法（方法名一致），然后在C中，构建名叫<code>&quot;CGLIB&quot;+&quot;父类方法名&quot;</code>的方法（下面叫cglib方法，所有非<code>private</code>的方法都会被构建），方法体里只有一句话<code>super.方法名()</code>，可以简单的认为保持了对父类方法的一个引用，方便调用。</p>
<p>这样的话，C中就有了重写方法、cglib方法、父类方法（不可见），还有一个统一的拦截方法（增强方法<code>intercept</code>）。其中重写方法和cglib方法肯定是有映射关系的。</p>
<p>C的重写方法是外界调用的入口（LSP原则），它调用<code>MethodInterceptor</code>的<code>intercept</code>方法，调用时会传递四个参数，第一个参数传递的是<code>this</code>，代表代理类本身，第二个参数标示拦截的方法，第三个参数是入参，第四个参数是cglib方法，<code>intercept</code>方法完成增强后，我们调用cglib方法间接调用父类方法完成整个方法链的调用。</p>
<h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><ol>
<li><p><code>intercept</code>的四个参数，为什么我们使用的是<code>arg3</code>而不是<code>arg1</code>?</p>
<p>因为如果我们通过反射<code>arg1.invoke(arg0, ...)</code>这种方式是无法调用到父类的方法的，子类有方法重写，隐藏了父类的方法，父类的方法已经不可见，如果硬调<code>arg1.invoke(arg0, ...)</code>很明显会死循环。</p>
<p>所以调用的是cglib开头的方法，但是，我们使用<code>arg3</code>也不是简单的<code>invoke</code>，而是用的<code>invokeSuper</code>方法，这是因为cglib采用了<em>fastclass</em>机制，不仅巧妙的避开了调不到父类方法的问题，还加速了方法的调用。</p>
<p><em>fastclass</em>基本原理是，给每个方法编号，通过编号找到方法执行。避免了通过反射调用。</p>
</li>
</ol>
<h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>对比JDK动态代理，cglib依然需要一个第三者分发请求。只不过jdk动态代理分发给了目标对象，cglib最终分发给了自己，通过给method编号完成调用。cglib是继承的极致发挥，本身还是很简单的，只是<em>fastclass</em>需要另行理解。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> times = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">    Star ldh = <span class="keyword">new</span> LiuDeHua();</span><br><span class="line">    StarProxy proxy = <span class="keyword">new</span> StarProxy();</span><br><span class="line">    proxy.setTarget(ldh);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> time1 = System.currentTimeMillis();</span><br><span class="line">    Star star = (Star)proxy.CreatProxyedObj();</span><br><span class="line">    <span class="keyword">long</span> time2 = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;jdk创建时间：&quot;</span> + (time2 - time1));</span><br><span class="line"></span><br><span class="line">    CglibProxy proxy2 = <span class="keyword">new</span> CglibProxy();</span><br><span class="line">    <span class="keyword">long</span> time5 = System.currentTimeMillis();</span><br><span class="line">    Star star2 = (Star)proxy2.CreatProxyedObj(LiuDeHua.class);</span><br><span class="line">    <span class="keyword">long</span> time6 = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;cglib创建时间：&quot;</span> + (time6 - time5));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> time3 = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= times; i++) &#123;</span><br><span class="line">        star.sing(<span class="string">&quot;ss&quot;</span>);</span><br><span class="line">        star.dance(<span class="string">&quot;ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> time4 = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;jdk执行时间&quot;</span> + (time4 - time3));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> time7 = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= times; i++) &#123;</span><br><span class="line">        star2.sing(<span class="string">&quot;ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">        star2.dance(<span class="string">&quot;ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> time8 = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;cglib执行时间&quot;</span> + (time8 - time7));   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经测试，jdk<strong>创建</strong>对象的速度远大于cglib，这是由于cglib创建对象时需要操作字节码。cglib<strong>执行</strong>速度略大于jdk，所以比较适合单例模式。</p>
<p>另外由于CGLIB的大部分类是直接对Java字节码进行操作，这样生成的类会在Java的永久堆中。如果动态代理操作过多，容易造成<strong>永久堆满</strong>，触发<code>OutOfMemory</code>异常。</p>
<p>Spring默认使用jdk动态代理，如果类没有接口，则使用cglib。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring AOP 初探</title>
    <url>/2022/04/01/spring-aop-intro/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="AOP概述"><a href="#AOP概述" class="headerlink" title="AOP概述"></a>AOP概述</h1><ol>
<li><p>AOP为面向切面编程，利用AOP可以<strong>隔离业务逻辑</strong>的各个部分，进一步<strong>解耦</strong>并提高程序<strong>可重用性</strong>，以此来提高<strong>开发效率</strong>。</p>
</li>
<li><p>通俗描述：不通过修改源代码的方式，添加新功能（类似python装饰器）</p>
</li>
</ol>
<a id="more"></a>

<h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><ol>
<li><p>AOP底层使用动态代理实现</p>
<ul>
<li><p>有两种情况的动态代理：</p>
<ul>
<li><p>第一种 有接口情况，使用JDK动态代理</p>
<p>创建<strong>接口实现类</strong>的代理对象，增强类的方法</p>
</li>
<li><p>第二种 没有接口情况，使用CGLIB动态代理</p>
<p>创建<strong>子类</strong>的代理对象，增强类的方法</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>1）调用<code>newProxyInstance</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, 类&lt;?&gt;[] interfaces, InvocationHandler h)</span></span></span><br></pre></td></tr></table></figure>
<p>2）方法有三个参数：</p>
<ul>
<li><p><code>arg0</code>：类加载器</p>
</li>
<li><p><code>arg1</code>：增强方法所在的类，这个类实现的接口（支持多个接口）</p>
</li>
<li><p><code>arg2</code>：实现这个接口<code>InvocationHandler</code>，创建代理对象，添加增强方法。</p>
</li>
</ul>
<h3 id="JDK动态代理代码"><a href="#JDK动态代理代码" class="headerlink" title="JDK动态代理代码"></a>JDK动态代理代码</h3><ol>
<li><p>创建接口，定义方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserDao.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建接口实现类，实现方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserDaoImpl.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用<code>Proxy</code>类创建接口代理对象</p>
<ul>
<li>匿名内部类（<code>InvocationHandler</code>）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JDKProxy.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建接口实现类代理对象</span></span><br><span class="line">        Class[] interfaces = (UserDao.class);</span><br><span class="line">        Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), <span class="keyword">new</span> InvocationHandler()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建代理对象类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JDKProxy.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        UserDaoImpl userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">        UserDao da = (UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), <span class="keyword">new</span> UserDaoProxy(userDao ));</span><br><span class="line">        <span class="keyword">int</span> result = dao.add(a:<span class="number">1</span>, b:<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result: &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建代理对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="comment">// 把创建的是谁的代理对象，把这个”谁“传递过来</span></span><br><span class="line">    <span class="comment">// 方法1（有参构造传递）</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoProxy</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 增强的逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.prinln(<span class="string">&quot;执行方法之前执行&quot;</span> + method.getName() + <span class="string">&quot;；传递的参数：&quot;</span> + Arrarys.toString(args));</span><br><span class="line">        Object res = method.invoke(obj, args);</span><br><span class="line">        System.out.prinln(<span class="string">&quot;执行方法之后执行&quot;</span> + obj);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h1></li>
<li><p>连接点</p>
<p>类里面的哪些方法<strong>可以被增强</strong>，这些方法被称为连接点</p>
</li>
<li><p>切入点</p>
<p>实际被<strong>真正增强</strong>的方法称为切入点</p>
</li>
<li><p>通知（增强）</p>
<ul>
<li><p>实际被增强的逻辑部分成为通知（增强）</p>
</li>
<li><p>通知有多种类型：</p>
<ul>
<li><p>前置通知：在需要方法之前进行增强</p>
</li>
<li><p>后置通知</p>
</li>
<li><p>环绕通知</p>
</li>
<li><p>异常通知：执行方法出现异常的增强方法</p>
</li>
<li><p>最终通知：类似<code>finally</code>，一定会执行</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>切面（是一个动作）</p>
<p>把通知应用到切入点的过程</p>
</li>
</ol>
<h1 id="AOP操作（准备）"><a href="#AOP操作（准备）" class="headerlink" title="AOP操作（准备）"></a>AOP操作（准备）</h1><ol>
<li><p>Spring框架一般基于<code>AspectJ</code>实现AOP操作</p>
<ul>
<li>什么是<code>AspectJ</code>：不是Spring组成部分，是一个独立的AOP框架。一般把<code>AspectJ</code>和SPring框架一起使用，进行AOP操作。</li>
</ul>
</li>
<li><p>基于<code>AspectJ</code>实现AOP操作</p>
<p>1）基于xml配置文件</p>
<p>2）基于注解方式实现（一般使用此方式）</p>
</li>
<li><p>在项目工程引入相关依赖</p>
<p><code>spring-aop-x.x.x.RELEASE.jar</code>, <code>spring-aspects-x.x.x.RELEASE.jar</code>, <code>com.springsource.net.sf.cglib-x.x.x.jar</code>, <code>com.springsource.org.aopalliance-x.x.x.jar</code>, <code>com.springsource.org.aspectj.weaver-x.x.x.RELEASE.jar</code></p>
</li>
<li><p>切入点表达式</p>
<p>1）切入点表达式作用：知道对哪个类里面的哪个方法进行增强</p>
<p>2）语法结构：</p>
<ul>
<li><code>execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]))</code></li>
</ul>
<p>3）案例：</p>
<ol>
<li><p>对<code>com.shimmerjordan.dao.BookDao</code>类里面的<code>add</code>方法进行增强</p>
<p><code>execution(* com.shimmerjordan.dao.BookDao.add(..))</code></p>
</li>
<li><p>对<code>com.shimmerjordan.dao.BookDao</code>类里面所有方法进行增强</p>
<p><code>execution(* com.shimmerjordan.dao.BookDao.*(..))</code></p>
</li>
<li><p>对<code>com.shimmerjordan.dao</code>包里面的所有类里面所有方法进行增强</p>
<p><code>execution(* com.shimmerjordan.dao.*.*(..))</code></p>
</li>
</ol>
</li>
</ol>
<h1 id="注解实现AOP操作"><a href="#注解实现AOP操作" class="headerlink" title="注解实现AOP操作"></a>注解实现AOP操作</h1><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><ol>
<li><p>创建类（被增强类），在类里面定义方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User.java</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建增强类（编写增强逻辑）</p>
<ul>
<li><p>在增强类里面，创建方法，让不同方法代表不同通知类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserProxy.java</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>进行通知的配置</p>
<p>1）在Spring配置文件中，开启注解扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在&lt;beans ...&gt;中添加context和aop空间使其成为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.shimmerjordan.aopanno&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）使用注解创建<code>User</code>和<code>UserProxy</code>对象</p>
<p>如1，2中代码，使用<code>@Component</code>分别注解被增强类和增强类</p>
<p>3）在增强类上面添加注解<code>@Aspect</code></p>
<p>如2中代码，使用<code>@Aspect</code>注解表示生成代理对象</p>
<p>4）在Spring配置文件中开启生成代理对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启Aspect生成代理对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>若是使用配置类的注解方法开启，则是使用<code>@EnableAspectJAutoProxy</code></p>
</li>
<li><p>配置不同类型通知</p>
<ul>
<li><p>在增强类里面，在作为通知的方法上面添加通知类型注解，使用切入点表达式配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserProxy.java</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.shimmerjodan.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 环绕通知</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.shimmerjodan.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint p)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before around...&quot;</span>);</span><br><span class="line">        p.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;after around...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>@After</code>为最终通知的注解，<code>@AfterReturning</code>为后置通知的注解</p>
</li>
</ul>
</li>
</ol>
<h2 id="细节问题"><a href="#细节问题" class="headerlink" title="细节问题"></a>细节问题</h2><ol>
<li><p>公共切入点抽取（重用切入点）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相同切入点抽取</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;execution(* com.shimmerjordan.aopanno.User.add(..))&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointdemo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(value = &quot;pointdemo()&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>有多个增强类对同一个方法进行增强，设置增强类优先级</p>
<ul>
<li>在增强类上面添加注解<code>@Order(数字类型值)</code>，数字类型值越小优先级别越高</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrersonProxy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.shimmerjordan.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enhencement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person Before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="xml配置文件实现AOP操作"><a href="#xml配置文件实现AOP操作" class="headerlink" title="xml配置文件实现AOP操作"></a>xml配置文件实现AOP操作</h1></li>
</ol>
<h2 id="操作流程-1"><a href="#操作流程-1" class="headerlink" title="操作流程"></a>操作流程</h2><ol>
<li><p>创建两个类和被增强类并创建方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Book.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;buy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BookProxy.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookProxy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在Spring配置文件中创建两个类对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在&lt;beans ...&gt;中添加context和aop空间（此处省略） --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimmerjordan.aopxml.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimmerjordan.aopxml.BookProxy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在Spring配置文件中配置切入点</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置aop增强 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切入点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.shimmerjordan.aopxml.Book.buy(..)&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;bookProxy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  增强作用在具体的方法上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;p&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring IOC底层原理</title>
    <url>/2022/03/28/spring-ioc-intro/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="IOC概念和原理"><a href="#IOC概念和原理" class="headerlink" title="IOC概念和原理"></a>IOC概念和原理</h1><h2 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h2><ol>
<li><p>控制反转：把对象创建和对象之间的调用过程，交给Spring进行管理</p>
</li>
<li><p>使用IOC的目的：为了耦合度降低</p>
</li>
</ol>
<a id="more"></a>

<h2 id="IOC底层原理"><a href="#IOC底层原理" class="headerlink" title="IOC底层原理"></a>IOC底层原理</h2><ol>
<li><p>xml解析、工厂模式、反射</p>
</li>
<li><p>工厂模式利用工厂一定程度降低耦合</p>
</li>
<li><p>IOC过程：</p>
<ol>
<li><p>xml配置文件，配置创建的对象：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimmerjordan.UserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>有Service类和Dao类，创建工厂类（进一步降低耦合）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">getDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String classValue = <span class="class"><span class="keyword">class</span>属性值</span>;    <span class="comment">//1. xml解析</span></span><br><span class="line">        <span class="comment">// 2. 通过反射创建对象（反射：得到类的字节码文件）</span></span><br><span class="line">        Class clazz = Class.forName(classValue);</span><br><span class="line">        <span class="keyword">return</span> (UserDao) clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="IOC接口"><a href="#IOC接口" class="headerlink" title="IOC接口"></a>IOC接口</h2></li>
</ol>
</li>
<li><p>IOC思想基于IOC容器完成，IOC容器底层就是对象工厂</p>
</li>
<li><p>Spring提供IOC容器实现的两种方式（两个接口）：</p>
<ol>
<li><p><code>BeanFactory</code>：IOC容器基本实现，是Spring内部使用接口，不提供开发人员使用。<strong>加载配置文件的时候不会创建对象，在获取对象（使用）的时候才会创建</strong></p>
</li>
<li><p><code>ApplicationContext</code>：BeanFactory接口的子接口，提供更多更强大的功能（继承），一般由开发人员使用。<strong>在加载配置文件的时候就会把在配置文件中的对象进行创建</strong></p>
</li>
</ol>
</li>
<li><p><code>ApplicationContext</code>接口有很多实现类，包括<code>FileSystemXmlApplicationContext</code>和<code>ClassPathXmlApplicationContext</code></p>
</li>
</ol>
<h1 id="IOC操作Bean管理"><a href="#IOC操作Bean管理" class="headerlink" title="IOC操作Bean管理"></a>IOC操作Bean管理</h1><h2 id="什么是Bean管理（指两个操作）"><a href="#什么是Bean管理（指两个操作）" class="headerlink" title="什么是Bean管理（指两个操作）"></a>什么是Bean管理（指两个操作）</h2><ol>
<li><p>Spring创建对象（实例化）</p>
</li>
<li><p>Spring注入属性（初始化）</p>
</li>
</ol>
<h2 id="Bean管理操作的两种方式"><a href="#Bean管理操作的两种方式" class="headerlink" title="Bean管理操作的两种方式"></a>Bean管理操作的两种方式</h2><ol>
<li><p>基于xml配置文件方式实现</p>
</li>
<li><p>基于注解方式实现</p>
</li>
</ol>
<h2 id="基于xml配置文件方式进行Bean管理"><a href="#基于xml配置文件方式进行Bean管理" class="headerlink" title="基于xml配置文件方式进行Bean管理"></a>基于xml配置文件方式进行Bean管理</h2><ol>
<li><p>基于xml配置文件进行对象创建</p>
<ul>
<li>在Spring配置文件中，使用<code>bean</code>标签，标签里面添加对应属性即可完成对象创建：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimmerjordan.UserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>bean</code>标签包含很多属性，常用属性：</p>
<ul>
<li><p><code>id</code>：唯一标识</p>
</li>
<li><p><code>class</code>：类全路径（包含路径）</p>
</li>
<li><p><code>name</code>：类似于<code>id</code>，但<code>name</code>可以包含特殊符号</p>
</li>
</ul>
</li>
<li><p>创建对象的时候，默认执行无参构造方法完成对象创建</p>
</li>
</ul>
</li>
<li><p>基于xml方式注入属性</p>
<ol>
<li><p>DI：依赖注入：就是注入属性，需要在创建对象的基础上完成。<strong>是IOC中的一种具体实现</strong>。</p>
<ul>
<li><p><code>set</code>方法注入</p>
<ol>
<li><p>创建类，定义属性和对应的set方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Book.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建属性</span></span><br><span class="line">    <span class="keyword">private</span> String bname;</span><br><span class="line">    <span class="keyword">private</span> String bauthor;</span><br><span class="line">    <span class="comment">// 创建属性对应的set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBname</span><span class="params">(String bname)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bname = bname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBauthor</span><span class="params">(String bauthor)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bauthor = nauthor</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Spring配置文件配置对象的创建，配置属性的注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- xml文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- set方法注入属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimmerjordan.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;balabala&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;muximuxi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>有参构造注入</p>
<ol>
<li><p>创建类，定义属性，创建属性对应有参数构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Book.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建属性</span></span><br><span class="line">    <span class="keyword">private</span> String bname;</span><br><span class="line">    <span class="keyword">private</span> String bauthor;</span><br><span class="line">    <span class="comment">// 有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String bname, String bauthor)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bname = bname;</span><br><span class="line">        <span class="keyword">this</span>.bauthor = bauthor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Spring配置文件配置对象的创建，配置属性的注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- xml文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 有参构造注入属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimmerjordan.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;balabala&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;muximuxi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 若使用index=&quot;k&quot;属性，则是有参构造中第k个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>p名称空间注入</p>
<p>使用p名称空间注入，可以简化基于xml配置方式（底层依旧是set方法）</p>
<ul>
<li>添加p名称空间在配置文件中</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在&lt;beans ...&gt;中添加p空间使其成为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>进行属性注入，在bean标签里进行操作</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimmerjordan.Book&quot;</span> <span class="attr">p:bname</span>=<span class="string">&quot;balabala&quot;</span> <span class="attr">p:bauthor</span>=<span class="string">&quot;muximuxi&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Bean管理（xml注入其他类型属性）"><a href="#Bean管理（xml注入其他类型属性）" class="headerlink" title="Bean管理（xml注入其他类型属性）"></a>Bean管理（xml注入其他类型属性）</h2></li>
</ul>
</li>
</ol>
</li>
<li><p>字面量：属性的静态预设值</p>
<ol>
<li><p>Null值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>包含特殊符号</p>
<ul>
<li><p>转义</p>
</li>
<li><p>使用<code>CDATA</code>数据结构</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span> &lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt; <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>注入属性-外部Bean</p>
<p>（1）创建两个类<code>service</code>类和<code>dao</code>类</p>
<p>（2）在<code>service</code>调用<code>dao</code>里面的方法</p>
<p>（3）在Spring配置文件中进行配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建UserDao类型属性，生成set方法</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add&quot;</span>);</span><br><span class="line">        userDao.update();</span><br><span class="line">        <span class="comment">// 原始方法</span></span><br><span class="line">        <span class="comment">//    UserDao userDao = new UserDaoImpl();</span></span><br><span class="line">        <span class="comment">//    userDao.update();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- service和dao对象创建 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimmerjordan.service.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入userDao对象</span></span><br><span class="line"><span class="comment">        name属性：类里面属性名称</span></span><br><span class="line"><span class="comment">        ref属性：创建userDao对象bean标签的id值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span>&lt;/property &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimmerjordan.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>注入属性-内部Bean</p>
<ul>
<li><p>一对多关系：部门和员工。</p>
</li>
<li><p>在实体类之间表示一对多的关系</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dept.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Emp.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">// 员工属于某一个部门，使用对象形式表示、</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String ename)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename= ename;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender= gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimemrjordan.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置对象类型属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimmerjordan.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HR&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>级联赋值</p>
<ul>
<li>第一种写法</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimemrjordan.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置对象类型属性（级联赋值） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimmerjordan.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HR&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>第二种写法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要在Emp.java中添加生成dept的get方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimemrjordan.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置对象类型属性（级联赋值） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HR&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Bean管理（xml注入集合属性）"><a href="#Bean管理（xml注入集合属性）" class="headerlink" title="Bean管理（xml注入集合属性）"></a>Bean管理（xml注入集合属性）</h2></li>
<li><p>注入数组类型属性 </p>
</li>
<li><p>注入List集合类型属性</p>
</li>
<li><p>注入Map集合类型属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Stu.java</span></span><br><span class="line"><span class="keyword">package</span> com.shimmerjrodan.collectiontype</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] courses;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line">    <span class="comment">// 各自set方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimemrjordan.collectiontype.Stu&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组类型属性注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- List类型属性注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Map类型属性注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;JAVA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;PYTHON&quot;</span> <span class="attr">value</span>=<span class="string">&quot;python&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- Set类型属性注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>注入集合属性的值为对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimemrjordan.collectiontype.Stu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimemrjordan.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;balabala&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimemrjordan.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;muximuxi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>提取集合类型属性注入（<code>util</code>）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在&lt;beans ...&gt;中添加    util空间使其成为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 提取list集合类型属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注入使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimemrjordan.collectiontype.Book&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Bean管理（FactoryBean）"><a href="#Bean管理（FactoryBean）" class="headerlink" title="Bean管理（FactoryBean）"></a>Bean管理（FactoryBean）</h2></li>
<li><p>Spring有两种类型的bean，普通bean以及FactoryBean</p>
<ul>
<li><p>普通bean：在配置文件中定义bean类型就是返回类型</p>
</li>
<li><p>FactoryBean：在配置文件中定义bean类型可以和返回类型不一样</p>
<p>. 具体流程</p>
<p>  第一步：创建类，让这个类作为工厂bean，实现接口FactoryBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Course</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 定义返回bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Course course = <span class="keyword">new</span> Course();</span><br><span class="line">        course.setCname(<span class="string">&quot;Python&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimmerjordan.factorybean.MyBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  第二步：实现接口里面的方法，在实现的方法中定义返回的bean类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TestDemo.java</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = </span><br><span class="line">        <span class="keyword">new</span> ClassPathXmlApplicationContext(configLocation:<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">    Course course = context.getBean(s:<span class="string">&quot;myBean&quot;</span>, Course.class);</span><br><span class="line">    System.out.println(course);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Bean管理（作用域）"><a href="#Bean管理（作用域）" class="headerlink" title="Bean管理（作用域）"></a>Bean管理（作用域）</h2></li>
</ul>
</li>
<li><p>在Spring里面，设置创建bean实例是单实例还是多实例。</p>
</li>
<li><p>Spring默认创建单实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Book book1 = context.getBean(s:<span class="string">&quot;book&quot;</span>, Book.class);</span><br><span class="line">Book book2 = context.getBean(s:<span class="string">&quot;book&quot;</span>, Book.class);</span><br><span class="line">System.out.println(book1);</span><br><span class="line">System.out.println(book2);</span><br></pre></td></tr></table></figure>

<p>将输出同一地址（默认创建单实例）</p>
</li>
<li><p>如何设置多实例或者单实例</p>
<ul>
<li><p>通过配置文件bean标签中<code>scope</code>属性进行设置</p>
</li>
<li><p>常用<code>scope</code>值：</p>
<ul>
<li><p><code>singleton</code>（默认单实例），<strong>加载</strong>Spring配置文件时候就会创建单实例对象</p>
</li>
<li><p><code>prototype</code>（多实例），不在加载时创建，而是在<strong>调用</strong><code>getBean</code>方法的时候创建多实例对象</p>
</li>
<li><p><code>request</code>, <code>session</code></p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="Bean管理（生命周期）"><a href="#Bean管理（生命周期）" class="headerlink" title="Bean管理（生命周期）"></a>Bean管理（生命周期）</h2><ol>
<li><p>生命周期：从对象创建到对象销毁的过程</p>
</li>
<li><p>bean生命周期</p>
<ul>
<li><p>1）通过构造器创建bean实例（执行无参构造）</p>
</li>
<li><p>2）为bean的属性设置值和对其它bean的引用（调用set方法）</p>
</li>
<li><p>3）调用bean的初始化方法（需要进行配置）</p>
</li>
<li><p>4）bean可以使用（获取得对象）</p>
</li>
<li><p>5）当容器关闭时，调用bean的销毁方法（需要进行配置销毁方法）</p>
</li>
</ul>
<p><strong>bean生命周期演示</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Order.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span></span>&#123;</span><br><span class="line">    <span class="comment">// 无参数构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步 执行无参构造创建bean实例&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOname</span><span class="params">(String onam)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oname = oname;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二步 调用set方法设置属性值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建执行的初始化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> viud <span class="title">initMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步 执行初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行bean的销毁方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第五步 执行销毁的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimmerjordan.bean.Orders&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destory-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;phone&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Test.java</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context =</span><br><span class="line">        <span class="keyword">new</span> ClassPathXmlApplicationContext(configLocation:<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">    Orders orders = context.getBean(s:<span class="string">&quot;orders&quot;</span>, Orders.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;第四步 获取创建bean实例对象&quot;</span>);</span><br><span class="line">    System.out.println(course);</span><br><span class="line">    <span class="comment">// 手动销毁bean</span></span><br><span class="line">    ((ClassPathXmlApplicationContext) context).close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Bean的后置处理器（BeanPostProcessor）</p>
<p>若使用后置处理器，则为<strong>七步</strong>生命周期：</p>
<ul>
<li><p>1）通过构造器创建bean实例（执行无参构造）</p>
</li>
<li><p>2）为bean的属性设置值和对其它bean的引用（调用set方法）</p>
</li>
<li><p><strong>2.1）把bean实例传递bean后置处理器的方法<code>postProcessBeforeInitialization</code></strong></p>
</li>
<li><p>3）调用bean的初始化方法（需要进行配置）</p>
</li>
<li><p><strong>3.1）把bean实例传递bean后置处理器的方法<code>postProcessAfterInitialization</code></strong></p>
</li>
<li><p>4）bean可以使用（获取得对象）</p>
</li>
<li><p>5）当容器关闭时，调用bean的销毁方法（需要进行配置销毁方法）</p>
</li>
</ul>
<p><strong>生命周期演示：</strong></p>
<p>创建类，实现接口<code>BeanPostProcessor</code>，创建后置处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyBeanPost.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPost</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2.1 在初始化之前执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3.1 在初始化之后执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml文件中需要加入后置处理器的配置，为<strong>所有</strong>实例添加此后置处理器。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPost&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimmerjordan.bean.MyBeanPost&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Bean管理（xml自动装配）"><a href="#Bean管理（xml自动装配）" class="headerlink" title="Bean管理（xml自动装配）"></a>Bean管理（xml自动装配）</h2></li>
<li><p>什么是自动装配：根据指定装配规则（属性名称或者属性类型），Spring自动将匹配的属性值进行注入。</p>
</li>
<li><p>演示自动装配过程：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实现自动装配</span></span><br><span class="line"><span class="comment">     bean标签属性autowire配置自动装配</span></span><br><span class="line"><span class="comment">     autowire属性常用两个值：</span></span><br><span class="line"><span class="comment">        byName：根据属性名称注入，注入值bean的id值和类属性名称一致</span></span><br><span class="line"><span class="comment">        byType：根据属性类型注入（多个相同类型可能导致错误）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimmerjordan.bean.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shimmerjordan.bean.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Bean管理（外部属性文件）"><a href="#Bean管理（外部属性文件）" class="headerlink" title="Bean管理（外部属性文件）"></a>Bean管理（外部属性文件）</h2></li>
<li><p>直接配置数据库信息：</p>
<ul>
<li><p>配置<code>druid</code>连接池</p>
</li>
<li><p>引入<code>druid.jar</code>并创建连接池对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DruidDataSource dataSource = new DruidDataSource(); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;class.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- dataSource.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line"><span class="comment">        set方法注入</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 获取propertied文件内容，根据key获取，使用Spring表达式获取 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverclass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>引入外部属性文件配置数据库连接池</p>
<ul>
<li><p>创建</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jdbc.properties</span></span><br><span class="line"><span class="meta">jdbc.driverclass</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/userDb</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">password</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在xml文件中引入外部属性文件</p>
<ul>
<li><p>加入<code>context</code>名称空间：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在&lt;beans ...&gt;中添加context空间使其成为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>引入配置属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Bean管理（基于注解方式）"><a href="#Bean管理（基于注解方式）" class="headerlink" title="Bean管理（基于注解方式）"></a>Bean管理（基于注解方式）</h2></li>
</ul>
</li>
</ul>
</li>
<li><p>什么是注解</p>
<ul>
<li><p>注解是代码的特殊标记</p>
</li>
<li><p>格式：<code>@注解名称(属性名称=属性值, 属性名称=属性值...)</code></p>
</li>
<li><p>注解可以作用在类、方法、属性上</p>
</li>
<li><p>注解的目的：简化xml配置</p>
</li>
</ul>
</li>
<li><p>Spring针对Bean管理中创建对象提供注解</p>
<ul>
<li><p><code>@Component</code></p>
</li>
<li><p><code>@Service</code></p>
</li>
<li><p><code>@Controller</code></p>
</li>
<li><p><code>@Repository</code></p>
</li>
</ul>
<p><em>以上四个注解的功能一样，都可以用来创建bean实例</em></p>
</li>
<li><p>基于注解方式实现对象创建</p>
<p>1）引入依赖：<code>spring-aop-x.x.x.RELEASE.jar</code></p>
<p>2）开启组件扫描</p>
<ul>
<li><p>引入<code>context</code>名称空间</p>
</li>
<li><p>开启组件扫描</p>
<ul>
<li><p>多个属性使用<code>,</code>分割，例如<code>base-package=&quot;com.shimmerjordan.dao,com.shimmerjordan.service&quot;</code></p>
</li>
<li><p>多个属性配置共同上层目录，例如<code>base-package=&quot;com.shimmerjordan&quot;&gt;</code></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.shimmerjordan.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>3）创建类，在类上面添加创建对象注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="comment">// 注解里value属性值可以省略，默认是类名称的首字母小写</span></span><br><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span>    <span class="comment">// &lt;bean id=&quot;userService&quot; class=&quot;..&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>开启组件扫描的细节配置</p>
<p>示例一：</p>
<ul>
<li><p><code>use-default-filters=&quot;false&quot;</code>表示不适用默认<code>filter</code>，需要自己配置<code>filter</code>规则</p>
</li>
<li><p>使用<code>context:include-filter</code>设置扫描内容</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.shimmerjordan&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 只扫描带Controller注解的类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>示例二：</p>
<ul>
<li>扫描所有内容，但是使用<code>context:exclude-filter</code><strong>排除</strong>特定扫描内容</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.shimmerjordan&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 不扫描带Controller注解的类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>实现属性的注入</p>
<ul>
<li><p><code>@AutoWired</code>：根据属性类型进行自动装配</p>
<p>1） 创建service和dao对象，在service和dao类添加创建对象注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserDaoImpl.java</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao add&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）在serive注入dao对象，在service类添加dao类型属性，在属性上面使用注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义dao类型属性</span></span><br><span class="line">    <span class="comment">// 不需要添加set方法</span></span><br><span class="line">    <span class="comment">// 添加注入属性注解</span></span><br><span class="line">    <span class="meta">@AutoWired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>@Qualifier</code>：根据属性名称进行注入</p>
<p>需要和<code>@AutoWired</code>一起使用，类似bean标签中autowire配置的<code>byName</code></p>
<p>若<code>UserDao</code>有多个实现类，需要在实现类上加注解<code>@Repository(value = &quot;userDaoImpl1&quot;)</code>进行标识（默认<code>value</code>为类名首字母小写）。并在<code>UserService</code>类的属性上添加<code>@Qualifier(value=&quot;userDaoImpl1&quot;)</code>（搭配<code>@Autowired</code>同时存在</p>
</li>
<li><p><code>@Resource</code>：可以根据属性类型进行注入，也可以根据属性名称进行注入。默认按照属性名注入，按照类型注入要使用<code>@Resource(type=UserDao)</code>。（此注解属于javax包，jdk11移除了此注解）</p>
</li>
<li><p><code>@Value</code>：注入普通类型属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;AD&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String uname;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>完全注解开发</p>
<ol>
<li><p>创建配置类，替代xml文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SpringConfig.java</span></span><br><span class="line"><span class="meta">@Configuration</span>    <span class="comment">// 作为配置类替代xml文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.shimmerjordan&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试类</p>
<ul>
<li><code>ClassPathXmlApplicationContext</code>需要改写为<code>AnnotationConfigApplicationContext</code>方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TestDemo.java</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 加载配置类</span></span><br><span class="line">    ApplicationContext context = </span><br><span class="line">        <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">    Course userService= context.getBean(s:<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    System.out.println(userService);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>IOC</tag>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to Spring Framework</title>
    <url>/2022/03/27/springintro/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring框架概述"><a href="#Spring框架概述" class="headerlink" title="Spring框架概述"></a>Spring框架概述</h1><ol>
<li><p>Spring是轻量级的开源JavaEE框架</p>
</li>
<li><p>Spring可以解决企业应用开发的复杂性</p>
</li>
<li><p>Spring两个核心部分：</p>
</li>
</ol>
<a id="more"></a>

<ol>
<li><p>IOC：控制反转，把创建对象的过程交给Spring进行管理</p>
</li>
<li><p>Aop：面向切面，不修改源代码进行功能增强</p>
</li>
<li><p>Spring特点</p>
<ol>
<li><p>方便解耦（IOC），简化开发</p>
</li>
<li><p>Aop编程支持</p>
</li>
<li><p>方便程序测试</p>
</li>
<li><p>方便整合集成其他框架</p>
</li>
<li><p>支持声明式事务操作</p>
</li>
<li><p>降低API开发难度（封装，例如JDBC）</p>
</li>
</ol>
</li>
</ol>
<h1 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h1>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>TopK算法杂记</title>
    <url>/2022/02/26/topk-algo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>TopK的字面意思很简单，就是求给定序列的前$k$大（or小）的元素。本文由简单思路入手，对解决方案逐步发散与优化。为简化叙述，本文讨论的均为最大标准下的TopK（最小标准同理）。</p>
<a id="more"></a>

<h1 id="1-全局排序"><a href="#1-全局排序" class="headerlink" title="1. 全局排序"></a>1. 全局排序</h1><p>这是最基础的想法，也是最容易实现的。只需要将给定序列进行全局排序后，取出最大的前$k$个即为所求。这里的排序算法选择可以参考<a href="https://shimmerjordan.site/2022/02/25/8SortingAlgorithms/">八大排序算法笔记</a>，其最优的时间复杂度为$O(nlogn)$。</p>
<h1 id="2-局部排序"><a href="#2-局部排序" class="headerlink" title="2. 局部排序"></a>2. 局部排序</h1><p>全局排序的时间复杂度之所以高，是因为对给定序列中除TopK的元素外进行了不必要的排序。那么我们就可以考虑使用局部排序的思想来优化算法。</p>
<p>我们需要尽可能只对前$k$个最大数进行排序操作，或者只进行找到前$k$个最大数的操作。显然冒泡是一个很好的选择，因为每一趟的冒泡都可以找到当前序列的子序列最大值，也就可以保证在$k$趟冒泡的时间内找出TopK。</p>
<p><strong>代码实现：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleTopk</span>(<span class="params">target, k</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(target)):</span><br><span class="line">        <span class="keyword">if</span> i == k-<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> target[-k:][::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(target)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> target[j] &gt; target[j+<span class="number">1</span>]:</span><br><span class="line">                target[j], target[j+<span class="number">1</span>] = target[j+<span class="number">1</span>], target[j]</span><br><span class="line"></span><br><span class="line">target = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">8</span>]</span><br><span class="line">print(bubbleTopk(target,<span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p><strong>时间复杂度：</strong>$O(nk)$</p>
<h1 id="3-堆"><a href="#3-堆" class="headerlink" title="3. 堆"></a>3. 堆</h1><p>可以发现，在上面的冒泡过程中，我们还是对TopK进行了排序，但实际上只需要取出TopK而不需要进行TopK的排序。这就引出利用堆优化的TopK算法：</p>
<p><strong>基本思路：</strong></p>
<ol>
<li><p>先用前$k$个元素生成一个小顶堆，这个小顶堆用于存储，当前最大的$k$个元素；</p>
</li>
<li><p>接着，从第$k+1$个元素开始扫描，和堆顶（堆中最小的元素）比较，如果被扫描的元素大于堆顶，则替换堆顶的元素，并调整堆，以保证堆内的$k$个元素，总是当前最大的$k$个元素；</p>
</li>
<li><p>直到扫描完所有$n-k$个元素，最终堆中的$k$个元素，就是所需的TopK。</p>
</li>
</ol>
<p><strong>代码实现：</strong></p>
<p>这里直接调用了python库<a href="https://docs.python.org/zh-cn/3/library/heapq.html"><code>heapq</code></a>，其中<code>replace</code>方法弹出并返回 <code>heap</code>中最小的一项，同时推入新的<code>item</code>。 堆的大小不变。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapqTopk</span>(<span class="params">target, k</span>):</span></span><br><span class="line">    heap = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        heapq.heappush(heap, target[i])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k+<span class="number">1</span>,<span class="built_in">len</span>(target)):</span><br><span class="line">        <span class="keyword">if</span> target[j] &gt; heap[<span class="number">0</span>]:</span><br><span class="line">            heapq.heapreplace(heap, target[j])</span><br><span class="line">    <span class="keyword">return</span> heap</span><br></pre></td></tr></table></figure>
<p><strong>时间复杂度：</strong></p>
<p>$n$个元素扫一遍，假设运气很差，每次都入堆调整，调整时间复杂度为堆的高度，即$log(k)$，故整体时间复杂度是$O(nlogk)$。</p>
<h1 id="4-随机选择-partition"><a href="#4-随机选择-partition" class="headerlink" title="4. 随机选择+partition"></a>4. 随机选择+partition</h1><p>堆，将冒泡的TopK排序优化为了TopK不排序，节省了计算资源。堆，是求TopK的经典算法，那还有没有更快的方案呢？</p>
<p>我们知道快速排序的核心思想是<strong>分治法</strong>：</p>
<blockquote>
<p>分治法（Divide&amp;Conquer），把一个大的问题，转化为若干个子问题（Divide），每个子问题“都”解决，大的问题便随之解决（Conquer）。这里的关键词是“都”。从伪代码里可以看到，快速排序递归时，先通过partition把数组分隔为两个部分，两个部分“都”要再次递归。</p>
</blockquote>
<p>分治法有一个特例，叫<strong>减治法</strong>:</p>
<blockquote>
<p><strong>减治法</strong>（Reduce&amp;Conquer），把一个大的问题，转化为若干个子问题（Reduce），这些子问题中“<strong>只</strong>”解决一个，大的问题便随之解决（Conquer）。这里的关键词是 <strong>“只”</strong> 。</p>
</blockquote>
<p>通过分治法与减治法的描述，可以发现，分治法（快排$O(nlogn)$）的复杂度一般来说是大于减治法（二分$O(logn)$）的。我们或许可以利用利用减治法来简化分治法的终止边界条件，最终达到简化算法的目的。</p>
<p>我们知道，<strong>快排</strong>的算法核心<code>partition(arr, low, high)</code>会把序列<code>arr</code>分为两个部分（默认<code>privot = arr[low]</code>作为划分依据）：左半部分都比<code>privot</code>大，右半部分都比<code>privot</code>小。而且<code>partition</code>返回的是<code>privot</code>的最终位置<code>index</code>。</p>
<p><strong><code>partition</code>和TopK问题有什么关系呢？</strong></p>
<p>TopK是希望求出<code>arr[1,n]</code>中最大的k个数，那如果找到了<strong>第$k$大</strong>的数，做一次<code>partition</code>，不就一次性找到最大的$k$个数了么？问题变成了<code>arr[1, n]</code>中找到第$k$大的数。</p>
<p>再回过头来看看<strong>第一次</strong><code>partition</code>，划分之后：</p>
<p><code>index = partition(arr, 1, n);</code></p>
<p>如果<code>index</code>大于<code>k</code>，则说明<code>arr[index]</code>左边的元素都大于<code>k</code>，于是只递归<code>arr[1, index-1]</code>里第k大的元素即可；</p>
<p>如果<code>index</code>小于<code>k</code>，则说明说明第<code>k</code>大的元素在<code>arr[index]</code>的右边，于是只递归<code>arr[index+1, n]</code>里第<code>k-index</code>大的元素即可；</p>
<p>这就是<strong>随机选择</strong>算法Randomized Select，其<strong>代码实现</strong>如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">target, low, high</span>):</span></span><br><span class="line">    privot = target[low]</span><br><span class="line">    i, j = low, high</span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> target[j] &lt;= privot:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> target[i] &gt;= privot:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        target[i], target[j] = target[j], target[i]</span><br><span class="line">    target[i], target[low] = target[low], target[i]</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randomSelectTopk</span>(<span class="params">target, k</span>):</span></span><br><span class="line">    left, right = <span class="number">0</span>, <span class="built_in">len</span>(target)-<span class="number">1</span></span><br><span class="line">    index = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k != index+<span class="number">1</span>:</span><br><span class="line">        index = partition(target, left, right)</span><br><span class="line">        <span class="keyword">if</span> index &gt; k:</span><br><span class="line">            right = index - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> index &lt; k:</span><br><span class="line">            left = index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> target[:k]</span><br><span class="line"></span><br><span class="line">target = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">8</span>]</span><br><span class="line">print(randomSelectTopk(target,<span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p><strong>时间复杂度：</strong> 这是一个典型的减治算法，递归内的两个分支，最终只会执行一个，它的时间复杂度是$O(n)$。</p>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>TopK不难；其思路优化过程不简单：知其然，知其所以然。思路比结论重要。</p>
<ul>
<li><p>全局排序，$O(nlogn)$</p>
</li>
<li><p>局部排序，只排序TopK个数，$O(nk)$</p>
</li>
<li><p>堆，TopK个数也不排序了，$O(nlogk)$</p>
</li>
<li><p>随机选择+<code>partition</code>：利用分治和减治思想优化，$O(n)$</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>八大排序算法笔记</title>
    <url>/2022/02/25/8SortingAlgorithms/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>排序有内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。这里介绍的是内部排序中的八大主流排序算法：</p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/8SortingAlg/1.jpg" width='70%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">算法结构</div>
</center>

<p>当$n$较大，则应采用时间复杂度为$O(nlog2n)$的排序方法：快速排序、堆排序或归并排序序。其中快速排序是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的<strong>平均</strong>时间最短<strong>但不稳定</strong>。</p>
<a id="more"></a>

<h1 id="插入排序—直接插入排序"><a href="#插入排序—直接插入排序" class="headerlink" title="插入排序—直接插入排序"></a><a id="insertSort">插入排序—直接插入排序</a></h1><p>Note：设立一个作为临时存储和判断数组边界的哨兵。</p>
<p><strong>基本思想</strong></p>
<p>将一个记录插入到已排序好的有序表中，从而得到一个有序子表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止（$n-1$次操作）。</p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/8SortingAlg/2.jpg" width='50%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">直接插入排序</div>
</center>

<p>Tip：如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，<strong>所以插入排序是稳定的。</strong></p>
<p><strong>算法实现</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertSort</span>(<span class="params">target</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(target)):</span><br><span class="line">        <span class="keyword">if</span> target[i] &lt; target[i-<span class="number">1</span>]:     <span class="comment"># 若第i个元素大于i-1元素，直接插入。小于的话，移动有序表后插入</span></span><br><span class="line">            temp = target[i]            <span class="comment"># 复制为哨兵，即存储待排序元素</span></span><br><span class="line">            target[i] = target[i-<span class="number">1</span>]</span><br><span class="line">            j = i - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> temp &lt; target[j]:     <span class="comment"># 查找在有序表的插入位置</span></span><br><span class="line">                target[j+<span class="number">1</span>] = target[j]</span><br><span class="line">                j -= <span class="number">1</span>                  <span class="comment"># 元素后移</span></span><br><span class="line">                <span class="keyword">if</span> j &lt; <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">            target[j+<span class="number">1</span>] = temp          <span class="comment"># 插入到正确位置</span></span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line"></span><br><span class="line">target = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>]</span><br><span class="line">print(insertSort(target))</span><br></pre></td></tr></table></figure>
<p>时间复杂度为$O(n^2)$，其它的插入排序有二分插入排序，2-路插入排序。</p>
<h1 id="插入排序—希尔排序"><a href="#插入排序—希尔排序" class="headerlink" title="插入排序—希尔排序"></a>插入排序—希尔排序</h1><p>1959 年由D.L.Shell 提出来的，相对直接排序有较大的改进，又称<strong>缩小增量排序</strong></p>
<p><strong>基本思想</strong></p>
<p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p>
<ol>
<li><p>选择一个增量序列$t_1,t_2, \dots ,t_k$，其中$t_i&gt;t_j$，$t_k=1$；</p>
</li>
<li><p>按增量序列个数$k$，对序列进行$k$趟排序；</p>
</li>
<li><p>每趟排序，根据对应的增量$t_i$，将待排序列分割成若干长度为$m$的子序列，分别对各子表进行直接插入排序。仅增量因子为$1$时，整个序列作为一个表来处理，表长度即为整个序列的长度。</p>
</li>
</ol>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/8SortingAlg/3.jpg" width='70%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">希尔排序</div>
</center>

<p><strong>算法实现</strong></p>
<p>我们简单处理增量序列：增量序列$d = {n/2,n/4,n/8, \cdots, 1}$，$n$为要排序数的个数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellInsertSort</span>(<span class="params">target, dk</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dk, <span class="built_in">len</span>(target)):</span><br><span class="line">        <span class="keyword">if</span> target[i] &lt; target[i-dk]:</span><br><span class="line">            j = i-dk</span><br><span class="line">            temp = target[i]</span><br><span class="line">            target[i] = target[i-dk]</span><br><span class="line">            <span class="keyword">while</span> temp &lt; target[j]:</span><br><span class="line">                target[j+dk] = target[j]</span><br><span class="line">                j -= dk</span><br><span class="line">                <span class="keyword">if</span> j &lt; <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">            target[j+dk] = temp</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellSort</span>(<span class="params">target</span>):</span></span><br><span class="line">    dk = <span class="built_in">len</span>(target) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> dk &gt;= <span class="number">1</span>:</span><br><span class="line">        shellInsertSort(target, dk)</span><br><span class="line">        dk //= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line"></span><br><span class="line">target = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>]</span><br><span class="line">print(shellSort(target))</span><br></pre></td></tr></table></figure>
<p><strong>复杂度</strong>：希尔排序时效分析很难，关键码的比较次数与记录移动次数依赖于增量因子序列$d$的选取，特定情况下可以准确估算出关键码的比较次数和记录的移动次数。目前还没有人给出选取最好的增量因子序列的方法。增量因子序列可以有各种取法，有取奇数的，也有取质数的，但需要注意：增量因子中除$1$外没有公因子，且最后一个增量因子必须为$1$。希尔排序方法是一个<strong>不稳定的排序方法</strong>。</p>
<h1 id="选择排序—简单选择排序"><a href="#选择排序—简单选择排序" class="headerlink" title="选择排序—简单选择排序"></a>选择排序—简单选择排序</h1><p><strong>基本思想</strong></p>
<p>在要排序的一组数中，选出最小（或者最大）的一个数与第$1$个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第$2$个位置的数交换，依次类推，直到第 $n-1$个元素（倒数第二个数）和第$n$个元素（最后一个数）比较为止。</p>
<p>第$1$趟，从$n$个记录中找出关键码最小的记录与第$1$个记录交换；</p>
<p>第$2$趟，从第$2$个记录开始的$n-1$个记录中再选出关键码最小的记录与第$2$个记录交换；</p>
<p>$\cdots$</p>
<p>第$i$趟，则从第$i$个记录开始的$n-i+1$个记录中选出关键码最小的记录与第$i$个记录交换，直到整个序列按关键码有序。<br><strong>算法实现</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minIndex</span>(<span class="params">target, start</span>):</span></span><br><span class="line">    res = start </span><br><span class="line">    min_num = target[start]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(target)):</span><br><span class="line">        <span class="keyword">if</span> target[i] &lt; min_num:</span><br><span class="line">            min_num = target[i]</span><br><span class="line">            res = i</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectSort</span>(<span class="params">target</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(target)):</span><br><span class="line">        key = minIndex(target, i)</span><br><span class="line">        <span class="keyword">if</span> key != i:</span><br><span class="line">            target[i], target[key] = target[key], target[i]</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line"></span><br><span class="line">target = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>]</span><br><span class="line">print(selectSort(target))</span><br></pre></td></tr></table></figure>
<p><strong>简单选择排序的改进——二元选择排序</strong></p>
<p>简单选择排序，每趟循环只能确定一个元素排序后的定位。我们可以考虑改进为每趟循环确定两个元素（当前趟最大和最小记录）的位置,从而减少排序所需的循环次数。改进后对$n$个数据进行排序，最多只需进行$[n/2]$趟循环即可。具体实现不再赘述。</p>
<h1 id="选择排序—堆排序"><a href="#选择排序—堆排序" class="headerlink" title="选择排序—堆排序"></a>选择排序—堆排序</h1><p>堆排序是一种树形选择排序，是对直接选择排序的有效改进。<code>python</code>内部实现了最小堆<a href="https://docs.python.org/zh-cn/3/library/heapq.html">heapq优先队列</a></p>
<p><strong>基本思想</strong></p>
<p>初始时把要排序的$n$个数的序列看作是一棵顺序存储的二叉树（一维数组存储二叉树），调整它们的存储序，使之成为一个堆，将堆顶元素输出，得到$n$个元素中最小(或最大)的元素，这时堆的根节点的数最小（或者最大）。然后对前面$n-1$个元素重新调整使之成为堆，输出堆顶元素，得到$n$个元素中次小(或次大)的元素。依此类推，直到只有两个节点的堆，并对它们作交换，最后得到有$n$个节点的有序序列。称这个过程为<strong>堆排序</strong>。<br>因此，实现堆排序需解决两个问题：  </p>
<ol>
<li>如何将$n$个待排序的数建成堆；  </li>
<li>输出堆顶元素后，怎样调整剩余$n-1$个元素，使其成为一个新堆。</li>
</ol>
<p>首先讨论第二个问题：输出堆顶元素后，对剩余$n-1$元素重新建成堆的调整过程。<br><strong>调整小顶堆的方法：</strong></p>
<ol>
<li><p>设有$m$个元素的堆，输出堆顶元素后，剩下$m-1$个元素。将堆底元素送入堆顶（最后一个元素与堆顶进行交换），堆被破坏，其原因仅是根结点不满足堆的性质。</p>
</li>
<li><p>将根结点与左、右子树中较小元素的进行交换。</p>
</li>
<li><p>若与左子树交换：如果左子树堆被破坏，即左子树的根结点不满足堆的性质，则重复方法<code>2</code>.</p>
</li>
<li><p>若与右子树交换：如果右子树堆被破坏，即右子树的根结点不 满足堆的性质。则重复方法<code>2</code>.</p>
</li>
<li><p>继续对不满足堆性质的子树进行上述交换操作，直到叶子结点，堆被建成。</p>
</li>
</ol>
<p>再讨论对$n$个元素初始建堆的过程。</p>
<p><strong>建堆方法：</strong> 对初始序列建堆的过程，就是一个反复进行筛选的过程。</p>
<ol>
<li><p>$n$个结点的完全二叉树，则最后一个结点是第$[n/2]$个结点的子树。</p>
</li>
<li><p>筛选从第$[n/2]$个结点为根的子树开始，该子树成为堆。</p>
</li>
<li><p>之后向前依次对各结点为根的子树进行筛选，使之成为堆，直到根结点。</p>
</li>
</ol>
<p><strong>算法的实现：</strong></p>
<p>从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆的渗透函数，二是反复调用渗透函数实现排序的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构造最小堆 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinHeap</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, maxSize=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.maxSize = maxSize </span><br><span class="line">        self.array = [<span class="literal">None</span>] * maxSize </span><br><span class="line">        self._count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._count </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self._count &lt;= <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&#x27;null&#x27;</span>)</span><br><span class="line">        print(self.array[: self._count], end=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="comment"># 增加元素</span></span><br><span class="line">        <span class="keyword">if</span> self._count &gt;= self.maxSize:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;The array is Full&#x27;</span>)</span><br><span class="line">        self.array[self._count] = value</span><br><span class="line">        self._shift_up(self._count)</span><br><span class="line">        self._count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_shift_up</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        <span class="comment"># 比较结点与根节点的大小， 较小的为根结点</span></span><br><span class="line">        <span class="keyword">if</span> index &gt; <span class="number">0</span>:</span><br><span class="line">            parent = (index - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> self.array[parent] &gt; self.array[index]:</span><br><span class="line">                self.array[parent], self.array[index] = self.array[index], self.array[parent]</span><br><span class="line">                self._shift_up(parent)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extract</span>(<span class="params">self</span>):</span>           </span><br><span class="line">        <span class="comment"># 获取最小值，并更新数组</span></span><br><span class="line">        <span class="keyword">if</span> self._count &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;The array is Empty&#x27;</span>)</span><br><span class="line">        value = self.array[<span class="number">0</span>]</span><br><span class="line">        self._count -= <span class="number">1</span> <span class="comment"># 更新数组的长度</span></span><br><span class="line">        self.array[<span class="number">0</span>] = self.array[self._count] <span class="comment"># 将最后一个结点放在前面</span></span><br><span class="line">        self._shift_down(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_shift_down</span>(<span class="params">self, index</span>):</span>  </span><br><span class="line">        <span class="comment"># 此时index 是根结点</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; self._count:</span><br><span class="line">            left = <span class="number">2</span> * index + <span class="number">1</span></span><br><span class="line">            right = <span class="number">2</span> * index + <span class="number">2</span></span><br><span class="line">            <span class="comment"># 判断左右结点是否越界，是否小于根结点，如果是就交换</span></span><br><span class="line">            <span class="keyword">if</span> left &lt; self._count <span class="keyword">and</span> right &lt; self._count <span class="keyword">and</span> self.array[left] &lt; self.array[index] <span class="keyword">and</span> self.array[left] &lt; self.array[right]:</span><br><span class="line">                self.array[index], self.array[left] = self.array[left], self.array[index] <span class="comment">#交换得到较小的值</span></span><br><span class="line">                self._shift_down(left)</span><br><span class="line">            <span class="keyword">elif</span> left &lt; self._count <span class="keyword">and</span> right &lt; self._count <span class="keyword">and</span> self.array[right] &lt; self.array[left] <span class="keyword">and</span> self.array[right] &lt; self.array[index]:</span><br><span class="line">                self.array[right], self.array[index] = self.array[index], self.array[right]</span><br><span class="line">                self._shift_down(right)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 特殊情况： 如果只有做叶子结点</span></span><br><span class="line">            <span class="keyword">if</span> left &lt; self._count <span class="keyword">and</span> right &gt; self._count <span class="keyword">and</span> self.array[left] &lt; self.array[index]:</span><br><span class="line">                self.array[left], self.array[index] = self.array[index], self.array[left]</span><br><span class="line">                self._shift_down(left)</span><br><span class="line"></span><br><span class="line">mi = MinHeap(<span class="number">10</span>)</span><br><span class="line">num = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">8</span>]</span><br><span class="line">print(<span class="string">&#x27;---------小顶堆----------&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> num:</span><br><span class="line">    mi.add(i)</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">    res.append(mi.extract())</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<p><strong>复杂度：</strong></p>
<p>设树深度为$k=[log_2n]+1$，从根到叶的筛选，元素比较次数至多$2(k-1)$次，交换记录至多$k$次。所以，在建好堆后，排序过程中的筛选次数不超过:</p>
<p>$$<br>2(\lfloor log_2(n-1)\rfloor+\lfloor log_2(n-2)\rfloor+,\cdots,+\lfloor log_22\rfloor)&lt;2n(\lfloor log_2n\rfloor)<br>$$</p>
<p>而建堆时的比较次数不超过$4n$次，因此堆排序最坏情况下，时间复杂度也为：$O(nlogn )$</p>
<h1 id="交换排序—冒泡排序"><a href="#交换排序—冒泡排序" class="headerlink" title="交换排序—冒泡排序"></a>交换排序—冒泡排序</h1><p><strong>基本思想：</strong></p>
<p>在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。</p>
<p><strong>算法的实现：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span>(<span class="params">target</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(target)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(target)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> target[j] &gt; target[j+<span class="number">1</span>]:</span><br><span class="line">                target[j], target[j+<span class="number">1</span>] = target[j+<span class="number">1</span>], target[j]</span><br><span class="line">    <span class="keyword">return</span> target  </span><br><span class="line">target = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">8</span>]</span><br><span class="line">print(bubbleSort(target))</span><br></pre></td></tr></table></figure>
<p><strong>冒泡排序算法的改进:</strong></p>
<p>对冒泡排序常见的改进方法是加入一标志性变量<code>exchange</code>，用于标志某一趟排序过程中是否有数据交换，如果进行某一趟排序时并没有进行数据交换，则说明数据已经按要求排列好，可立即结束排序，避免不必要的比较过程。本文再提供以下两种改进算法：</p>
<p>1．设置一标志性变量<code>pos</code>,用于记录每趟排序中最后一次进行交换的位置。由于<code>pos</code>位置之后的记录均已交换到位,故在进行下一趟排序时只要扫描到<code>pos</code>位置即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort_1</span>(<span class="params">target</span>):</span></span><br><span class="line">    i = <span class="built_in">len</span>(target) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">        pos = <span class="number">0</span>         <span class="comment"># 每趟开始前，无记录交换</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            <span class="keyword">if</span> target[j] &gt; target[j+<span class="number">1</span>]:</span><br><span class="line">                pos = j</span><br><span class="line">                target[j], target[j+<span class="number">1</span>] = target[j+<span class="number">1</span>], target[j]</span><br><span class="line">        i = pos</span><br><span class="line">    <span class="keyword">return</span> target</span><br></pre></td></tr></table></figure>
<p>2．传统冒泡排序中每一趟排序操作只能找到一个最大值或最小值,我们考虑利用在每趟排序中进行正向和反向两遍冒泡的方法一次可以得到两个最终值(最大者和最小者) , 从而使排序趟数几乎减少了一半。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort_2</span>(<span class="params">target</span>):</span></span><br><span class="line">    low, high = <span class="number">0</span>, <span class="built_in">len</span>(target) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(low, high):        <span class="comment"># 正向冒泡寻找最大</span></span><br><span class="line">            <span class="keyword">if</span> target[j] &gt; target[j+<span class="number">1</span>]:</span><br><span class="line">                target[j], target[j+<span class="number">1</span>] = target[j+<span class="number">1</span>], target[j]</span><br><span class="line">        high -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(high, low, -<span class="number">1</span>):    <span class="comment"># 反向冒泡寻找最小</span></span><br><span class="line">            <span class="keyword">if</span> target[j] &lt; target[j-<span class="number">1</span>]:</span><br><span class="line">                target[j], target[j-<span class="number">1</span>] = target[j-<span class="number">1</span>], target[j]</span><br><span class="line">        low += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> target</span><br></pre></td></tr></table></figure>
<h1 id="交换排序—快速排序"><a href="#交换排序—快速排序" class="headerlink" title="交换排序—快速排序"></a>交换排序—快速排序</h1><p><strong>基本思想：</strong></p>
<ol>
<li><p>选择一个基准元素,通常选择第一个元素或者最后一个元素；</p>
</li>
<li><p>通过一趟排序讲待排序的记录分割成独立的两部分，其中一部分记录的元素值均比基准元素值小。另一部分记录的元素值比基准值大；</p>
</li>
<li><p>此时基准元素在其排好序后的正确位置；</p>
</li>
<li><p>然后分别对这两部分记录用同样的方法继续进行排序，直到整个序列有序。</p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/8SortingAlg/1.gif">
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">快速排序</div>
</center>

</li>
</ol>
<p><strong>算法实现：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">target, low, high</span>):</span></span><br><span class="line">    privot = target[low]</span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> target[high] &gt;= privot:</span><br><span class="line">            high -= <span class="number">1</span></span><br><span class="line">        target[low], target[high] = target[high], target[low]</span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> target[low] &lt;= privot:</span><br><span class="line">            low += <span class="number">1</span></span><br><span class="line">        target[low], target[high] = target[high], target[low]</span><br><span class="line">    <span class="keyword">return</span> low</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span>(<span class="params">target, low, high</span>):</span></span><br><span class="line">    <span class="keyword">if</span> low &lt; high:</span><br><span class="line">        privotLoc = partition(target, low, high)</span><br><span class="line">        quickSort(target, low, privotLoc-<span class="number">1</span>)</span><br><span class="line">        quickSort(target, privotLoc+<span class="number">1</span>, high)</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line"></span><br><span class="line">target = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">8</span>]</span><br><span class="line">print(quickSort(target,<span class="number">0</span>,<span class="built_in">len</span>(target)-<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><strong>分析：</strong></p>
<p>快速排序是通常被认为在同数量级$O(nlog2n)$的排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。为改进之，通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录。快速排序是一个<strong>不稳定</strong>的排序方法。</p>
<p><strong>快速排序的改进：</strong></p>
<p>在本改进算法中，只对长度大于$k$的子序列递归调用快速排序，让原序列基本有序，然后再对整个基本有序序列用<a href="#insertSort">插入排序算法</a>排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort_improve</span>(<span class="params">target, low, high, k</span>):</span></span><br><span class="line">    <span class="keyword">if</span> high - low &gt; k:</span><br><span class="line">        privotLoc = partition(target, low, high)</span><br><span class="line">        quickSort_improve(target, low, privotLoc-<span class="number">1</span>, k)</span><br><span class="line">        quickSort_improve(target, privotLoc+<span class="number">1</span>, high, k)</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span>(<span class="params">target, k</span>):</span></span><br><span class="line">    target = quickSort_improve(target, <span class="number">0</span>, <span class="built_in">len</span>(target)-<span class="number">1</span>, k)</span><br><span class="line">    <span class="keyword">return</span> insertSort(target)</span><br><span class="line"></span><br><span class="line">target = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">8</span>]</span><br><span class="line">print(quickSort(target,<span class="number">8</span>))</span><br></pre></td></tr></table></figure>
<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p><strong>基本思想：</strong></p>
<p>归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</p>
<p><strong>合并方法：</strong></p>
<p>设<code>r[i…n]</code>由两个有序子表<code>r[i…m]</code>和<code>r[m+1…n]</code>组成，两个子表长度分别为<code>n-i +1</code>、<code>n-m</code>。</p>
<ol>
<li><p><code>j=m+1</code>；<code>k=i</code>；<code>i=i</code>；# 置两个子表的起始下标及辅助数组的起始下标；</p>
</li>
<li><p>若<code>i&gt;m</code> 或<code>j&gt;n</code>，转⑷；# 其中一个子表已合并完，比较选取结束；</p>
</li>
<li><p># 选取<code>r[i]</code>和<code>r[j]</code>较小的存入辅助数组<code>rf</code><br>如果<code>r[i]&lt;r[j]</code>，<code>rf[k]=r[i]</code>；<code>i++</code>； <code>k++</code>； 转⑵<br>否则，<code>rf[k]=r[j]</code>；<code> j++</code>；<code> k++</code>； 转⑵</p>
</li>
<li><p># 将尚未处理完的子表中元素存入rf<br>如果<code>i&lt;=m</code>，将<code>r[i…m]</code>存入<code>rf[k…n]</code>  # 前一子表非空<br>如果<code>j&lt;=n</code> ,  将<code>r[j…n]</code> 存入<code>rf[k…n]</code> # 后一子表非空</p>
</li>
<li><p>合并结束。</p>
</li>
</ol>
<p><strong>算法实现：</strong></p>
<p>这里直接实现两路归并的迭代版本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    c = []</span><br><span class="line">    h = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(a) <span class="keyword">and</span> h &lt; <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="keyword">if</span> a[j] &lt; b[h]:</span><br><span class="line">            c.append(a[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c.append(b[h])</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> j == <span class="built_in">len</span>(a):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> b[h:]: c.append(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> a[j:]: c.append(i)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">target</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(target) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    middle = <span class="built_in">len</span>(target) // <span class="number">2</span></span><br><span class="line">    left = merge_sort(target[:middle])</span><br><span class="line">    right = merge_sort(target[middle:])</span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br><span class="line"></span><br><span class="line">target = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">8</span>]</span><br><span class="line">print(merge_sort(target))</span><br></pre></td></tr></table></figure>
<h1 id="桶排序-基数排序"><a href="#桶排序-基数排序" class="headerlink" title="桶排序/基数排序"></a>桶排序/基数排序</h1><p>说基数排序之前，我们先说<strong>桶排序</strong>：</p>
<p><strong>基本思想：</strong> 是将阵列分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递回方式继续使用桶排序进行排序）。桶排序是鸽巢排序的一种归纳结果。当要被排序的阵列内的数值是均匀分配的时候，桶排序使用线性时间$Θ(n)$。但桶排序并不是比较排序，他不受到$Θ(nlogn)$下限的影响。</p>
<p>简单来说，就是把数据分组，放在一个个的桶中，然后对每个桶里面的在进行排序。  </p>
<p>例如要对大小为$[1,1000]$范围内的$n$个整数<code>A[1..n]</code>排序。首先，可以把桶设为大小为<code>10</code>的范围，具体而言，设集合<code>B[1]</code>存储$[1,10]$的整数，集合<code>B[2]</code>存储 $(10,20]$的整数，……集合<code>B[i]</code>存储$((i-1) \times 10, i \times 10]$的整数，$i=1,2,..100$。总共有$100$个桶。  </p>
<p>然后，对<code>A[1..n]</code>从头到尾扫描一遍，把每个<code>A[i]</code>放入对应的桶<code>B[j]</code>中。  再对这$100$个桶中每个桶里的数字排序，这时可用冒泡，选择，乃至快排，一般来说任何排序法都可以。</p>
<p>最后，依次输出每个桶里面的数字，且每个桶中的数字从小到大输出，这样就得到所有数字排好序的一个序列了。  </p>
<p>假设有$n$个数字，有$m$个桶，如果数字是平均分布的，则每个桶里面平均有$n/m$个数字。如果对每个桶中的数字采用快速排序，那么整个算法的复杂度是  </p>
<p>$$<br>O(n + m * n/m*log(n/m)) = O(n + nlogn - nlogm)<br>$$</p>
<p>$$</p>
<p>从上式看出，当$m$接近$n$的时候，桶排序复杂度接近$O(n)$。当然，以上复杂度的计算是基于输入的$n$个数字是平均分布这个假设的。这个假设是很强的  ，实际应用中效果并没有这么好。如果所有的数字都落在同一个桶中，那就退化成一般的排序了。  </p>
<p><strong>两种多关键码排序方法：</strong></p>
<p>多关键码排序按照从最主位关键码到最次位关键码或从最次位到最主位关键码的顺序逐次排序，分两种方法：</p>
<p>最高位优先(Most Significant Digit first)法，简称<strong>MSD</strong>法：</p>
<ol>
<li><p>先按<code>k1</code>排序分组，将序列分成若干子序列，同一组序列的记录中，关键码<code>k1</code>相等。</p>
</li>
<li><p>再对各组按<code>k2</code>排序分成子组，之后，对后面的关键码继续这样的排序分组，直到按最次位关键码<code>kd</code>对各子组排序后。</p>
</li>
<li><p>再将各组连接起来，便得到一个有序序列。扑克牌按花色、面值排序中介绍的方法一即是MSD法。</p>
</li>
</ol>
<p>最低位优先(Least Significant Digit first)法，简称<strong>LSD</strong>法：</p>
<ol>
<li><p>先从<code>kd</code>开始排序，再对<code>kd-1</code>进行排序，依次重复，直到按<code>k1</code>排序分组分成最小的子序列后。</p>
</li>
<li><p>最后将各个子序列连接起来，便可得到一个有序的序列，扑克牌按花色、面值排序中介绍的方法二即是LSD法。</p>
</li>
</ol>
<p><strong>基于LSD的基数排序:</strong></p>
<p>按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的。</p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/8SortingAlg/5.jpg" width='70%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">基数排序</div>
</center>

<p><strong>算法实现：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;基数排序&quot;&quot;&quot;</span></span><br><span class="line">    i = <span class="number">0</span> <span class="comment"># 记录当前正在排拿一位，最低位为1</span></span><br><span class="line">    max_num = <span class="built_in">max</span>(s)  <span class="comment"># 最大值</span></span><br><span class="line">    j = <span class="built_in">len</span>(<span class="built_in">str</span>(max_num))  <span class="comment"># 记录最大值的位数</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        bucket_list =[[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)] <span class="comment">#初始化桶数组</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> s:</span><br><span class="line">            bucket_list[<span class="built_in">int</span>(x / (<span class="number">10</span>**i)) % <span class="number">10</span>].append(x) <span class="comment"># 找到位置放入桶数组</span></span><br><span class="line">        print(bucket_list)</span><br><span class="line">        s.clear()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> bucket_list:   <span class="comment"># 放回原序列</span></span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> x:</span><br><span class="line">                s.append(y)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = [<span class="number">334</span>,<span class="number">5</span>,<span class="number">67</span>,<span class="number">345</span>,<span class="number">7</span>,<span class="number">345345</span>,<span class="number">99</span>,<span class="number">4</span>,<span class="number">23</span>,<span class="number">78</span>,<span class="number">45</span>,<span class="number">1</span>,<span class="number">3453</span>,<span class="number">23424</span>]</span><br><span class="line">    radix_sort(a)</span><br><span class="line">    print(a)</span><br></pre></td></tr></table></figure>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p><strong>各种排序的稳定性，时间复杂度和空间复杂度对比：</strong></p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/8SortingAlg/6.jpg" width='70%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">算法比较</div>
</center>

<p><strong>说明：</strong></p>
<ul>
<li><p>当原表有序或基本有序时，直接插入排序和冒泡排序将大大减少比较次数和移动记录的次数，时间复杂度可降至$O(n)$；</p>
</li>
<li><p>而快速排序则相反，当原表基本有序时，将退化为冒泡排序，时间复杂度提高为$O(n^2)$；</p>
</li>
<li><p>原表是否有序，对简单选择排序、堆排序、归并排序和基数排序的时间复杂度影响不大。</p>
</li>
</ul>
<p><strong>稳定性：</strong></p>
<p>排序算法的稳定性：若待排序的序列中，存在多个具有相同关键字的记录，经过排序， 这些记录的相对次序保持不变，则称该算法是稳定的；否则不稳定。 </p>
<p>排序算法如果是稳定的，那么从一个键上排序，然后再从另一个键上排序，第一个键排序的结果可以为第二个键排序所用。基数排序就是这样，先按低位排序，逐次按高位排序，低位相同的元素其顺序再高位也相同时是不会改变的。另外，如果排序算法稳定，可以避免多余的比较；</p>
<p><strong>稳定的排序算法：</strong> 冒泡排序、插入排序、归并排序和基数排序</p>
<p><strong>非稳定的排序算法：</strong> 选择排序、快速排序、希尔排序、堆排序</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Clever use of set</title>
    <url>/2021/11/01/clever-use-of-set/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>I noticed that we can use set to simplify algorithm in many problems, including <a href="https://leetcode-cn.com/problems/distribute-candies">distribute candies</a> and <a href="https://leetcode-cn.com/problems/keyboard-row/">keyboard row</a>. Thus, I conclude some clever use of <code>set</code> in python and do some comparison between <code>list</code>.</p>
<a id="more"></a>

<h1 id="1-Introduction-to-set"><a href="#1-Introduction-to-set" class="headerlink" title="1. Introduction to set"></a>1. Introduction to <code>set</code></h1><p>We know that the core of data structure <code>dict</code>  in Python is to map relationships between a set of <strong>key</strong> and <strong>value</strong>, while <strong>key</strong> can not be repeated. <code>Set</code> is similar to <code>dict</code> to some degree that elements in <code>set</code> is duplicate. Additionally, these elements are disorder, which means each print of <code>set</code> might be of different order inside.  Same as the <strong>key</strong> in <code>dict</code>, elements in <code>set</code> must be <strong>constant</strong> instead of any variable that can be changed.</p>
<p>To create a <code>set</code>, we can call <code>set()</code> and pass elements in a list into it: <code>s = set([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;])</code></p>
<h1 id="2-Methods-amp-Properties"><a href="#2-Methods-amp-Properties" class="headerlink" title="2. Methods &amp; Properties"></a>2. Methods &amp; Properties</h1><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ul>
<li><p>The set representation set is very similar to a list with differences:</p>
<ul>
<li>Sets can only store immutable objects</li>
<li>The objects stored in a <code>set</code> are unordered</li>
<li>Sets cannot have duplicate elements</li>
</ul>
</li>
<li><p>We can use <code>&#123;&#125;</code> to create sets</p>
</li>
<li><p><code>Set()</code> can be used to convert <code>sequences </code>and <code>dictionaries</code> into <code>sets</code>.</p>
</li>
<li><p>We can use <code>len()</code> to get the number of elements in a <code>set</code></p>
</li>
<li><p>We can use <code>add()</code> to add elements to a <code>set</code></p>
</li>
<li><p><code>update()</code> adds elements from one <code>set</code> to another</p>
</li>
<li><p><code>pop()</code> removes an element from a set <strong>at random</strong>, usually the last element.</p>
</li>
<li><p><code>remove()</code> removes the specified element from the set</p>
</li>
<li><p><code>clear()</code> clears the set</p>
</li>
</ul>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set_a=&#123;<span class="number">8</span>,<span class="number">7</span>,<span class="string">&#x27;pthon&#x27;</span>,<span class="literal">True</span>,<span class="number">8.8</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>&#125;  <span class="comment"># elements in set cannot be changed</span></span><br><span class="line">print(<span class="string">&#x27;1.&#x27;</span>,set_a,<span class="built_in">type</span>(set_a))    	<span class="comment"># elements in set in disordered and duplicate</span></span><br><span class="line">dict_a=&#123;<span class="string">&#x27;a1&#x27;</span>:<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;b2&#x27;</span>:<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">8</span>&#125;</span><br><span class="line">set_b =<span class="built_in">set</span>(dict_a)    				<span class="comment"># we can use set() to transform sequence to set (transform key in dict)</span></span><br><span class="line">print(<span class="string">&#x27;2.&#x27;</span>,set_b,<span class="built_in">type</span>(set_b))</span><br></pre></td></tr></table></figure>
<h2 id="Operations-on-sets"><a href="#Operations-on-sets" class="headerlink" title="Operations on sets"></a>Operations on sets</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&amp; 	<span class="comment"># Intersection</span></span><br><span class="line">| 	<span class="comment"># Concurrency</span></span><br><span class="line">- 	<span class="comment"># Difference set operations</span></span><br><span class="line">^ 	<span class="comment"># Also or set</span></span><br><span class="line"></span><br><span class="line">&lt;= 		<span class="comment"># Check if a set is a subset of another set</span></span><br><span class="line">&lt; 		<span class="comment"># Check if a set is a true subset of another set</span></span><br><span class="line">&gt;= 		<span class="comment"># Check if a set is a superset of another set</span></span><br><span class="line">&gt; 		<span class="comment"># Check if a set is a true superset of another set</span></span><br></pre></td></tr></table></figure>
<p>See  <a href="https://leetcode-cn.com/problems/keyboard-row/">keyboard row</a> for example.</p>
]]></content>
      <categories>
        <category>Data structures</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Data structures</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>The Framework of Backtracking Algorithm Problems (DFS)</title>
    <url>/2021/08/07/DFSFramework/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>This paper addresses several questions.</p>
<p>What is the backtracking algorithm? What are the techniques for solving problems related to backtracking algorithms? How do I learn backtracking algorithms? Is there a pattern to the backtracking algorithm code?</p>
<p>The backtracking algorithm is actually what we often call the <strong>DFS algorithm</strong>, which is essentially a violent exhaustive <strong>enumeration algorithm</strong>.</p>
<a id="more"></a>

<p><strong>Solving a backtracking problem is really a process of traversing a decision tree.</strong> You only need to think about 3 issues.</p>
<ol>
<li><p>The path: that is, the choices that have already been made.</p>
</li>
<li><p>The list of choices: that is, the choices you can currently make.</p>
</li>
<li><p>End condition: that is, the condition that you have reached the bottom of the decision tree and can no longer make a choice.</p>
</li>
</ol>
<p>If you don’t understand the explanation of these three terms, that’s fine, we’ll use the classic backtracking algorithm problems of ‘full permutation’ and ‘N queen problem’ later to help you understand what they mean, so for now you’ll stay with the impression.</p>
<h1 id="Framework-Code"><a href="#Framework-Code" class="headerlink" title="Framework Code"></a>Framework Code</h1><p>In terms of code, the framework of the backtracking algorithm:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrack</span>(<span class="params">paths, choice_list</span>):</span></span><br><span class="line">    <span class="keyword">if</span> Meeting the ending conditions:</span><br><span class="line">        result.add(path)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> choice <span class="keyword">in</span> choice_list:</span><br><span class="line">        make choices</span><br><span class="line">        backtrack(paths, choice_list)</span><br><span class="line">        undo choices</span><br></pre></td></tr></table></figure>
<p><strong>The core of this is the recursion inside the for loop, where you ‘make a choice’ before the recursive call and ‘undo the choice’ after the recursive call.</strong></p>
<p>What does it mean to select and deselect, and what is the underlying principle of this framework? Let’s go through the problem of ‘full permutation’ to clear up the confusion and explore the intricacies in detail!</p>
<h1 id="Ⅰ-Full-Permutation"><a href="#Ⅰ-Full-Permutation" class="headerlink" title="Ⅰ. Full Permutation"></a>Ⅰ. Full Permutation</h1><p>We have done maths problems with permutations in high school and we know that there are $n$ non-repeating numbers and that there are $n!$</p>
<p>PS: <strong>For the sake of simplicity and clarity, we are discussing permutations without repeating numbers.</strong></p>
<p>So how did we exhaust the full permutations then? If you are given three numbers <code>[1,2,3]</code>, you would not exhaust them in a random way.</p>
<p>First fix the first place as <code>1</code>, then the second place can be <code>2</code>, then the third place can only be <code>3</code>; then you can turn the second place into <code>3</code>, and the third place can only be <code>2</code>; then you can only change the first place into <code>2</code>, and then exhaust the last two places ……</p>
<p>In fact, this is the backtracking algorithm, which we use in high school without a teacher, or some students directly draw this backtracking tree as follows.</p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/DFSFramework/pic1.png" width='70%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">backtracking tree</div>
</center>

<p>Simply traverse the tree from the root and <strong>record the numbers on the path</strong>, which are in fact all the full permutations. We might <strong>call this tree the ‘decision tree’ of the backtracking algorithm.</strong></p>
<p><strong>Why do you call this a decision tree? Because you are actually making a decision at each node.</strong> Let’s say you are standing on the red node in the diagram below:</p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/DFSFramework/pic2.png" width='70%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">backtracking tree</div>
</center>

<p>You are now making a decision, either to choose the <code>1</code> branch or to choose the <code>3</code> branch. Why can you only choose between <code>1</code> and <code>3</code>? Because the branch <code>2</code> is behind you, a choice you have made before, and full permutation does not allow for repeated use of numbers.</p>
<p><strong>Now you can answer the first few terms-: <code>[2]</code> is the ‘path’, which records the choices you have already made; <code>[1,3]</code> is the ‘choice list’, which indicates the choices you can currently make; and the ‘end condition’ is the traversal to the bottom of the tree, in this case when the choice list is empty.</strong></p>
<p>If you understand these terms, you can <strong>use the ‘path’ and ‘choice’ lists as attributes of each node in the decision tree</strong>, the following diagram lists the attributes of several nodes:</p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/DFSFramework/pic3.png" width='70%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">attributes of several nodes</div>
</center>

<p><strong>The <code>backtrack</code> function we define is actually like a pointer that wanders around the tree, while maintaining the correct properties of each node, and whenever it reaches the bottom of the tree, its ‘path’ is a full alignment.</strong></p>
<p>Taking this a step further, how do you traverse a tree? This shouldn’t be too difficult. <strong>In fact, all kinds of search problems are in fact tree traversal problems</strong>, and the framework for traversing a multinomial tree is as follows.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode child : root.childern)</span><br><span class="line">        <span class="comment">// Operations required for pre-order traversal</span></span><br><span class="line">        traverse(child);</span><br><span class="line">        <span class="comment">// Operations required for post-order traversal</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And the so-called pre-order traversal and post-order traversal, they’re just two very useful points in time, as you’ll see if I draw you a diagram:</p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/DFSFramework/pic4.png" width='70%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">different traversal ways</div>
</center>

<p><strong>Pre-order traversal code is executed at the point in time before entering a node, and post-order traversal code is executed at the point in time after leaving a node.</strong></p>
<p>To recall what we said earlier, ‘path’ and ‘selection’ are properties of each node. And a function needs to properly maintain the properties of a node as it travels through the tree, it has to do something at these two particular times.</p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/DFSFramework/pic5.png" width='70%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">maintain the properties</div>
</center>

<p>Now, do you understand this core framework of the backtracking algorithm?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> choice <span class="keyword">in</span> choice_list:</span><br><span class="line">    <span class="comment"># make a choice</span></span><br><span class="line">    <span class="comment"># remove this choice from choice_list</span></span><br><span class="line">    path.add(choice)</span><br><span class="line">    backtrack(path, choice_list)</span><br><span class="line">    <span class="comment"># Undo a choice</span></span><br><span class="line">    path.remove(choice)</span><br><span class="line">    <span class="comment"># add this choice into choice_list</span></span><br></pre></td></tr></table></figure>
<p>We can get the correct list of choices and paths for each node by simply <strong>making the choices before the recursion and undoing the choices just made after the recursion.</strong></p>
<p>Below, look directly at the full alignment code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* main function: Enter a set of non-repeating numbers and return their full alignment */</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="comment">// record「path」</span></span><br><span class="line">    LinkedList&lt;Integer&gt; track = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    backtrack(nums, track);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// path：recorded in track</span></span><br><span class="line"><span class="comment">// Select list: those elements of nums that do not exist in track</span></span><br><span class="line"><span class="comment">// End condition: all elements in nums are present in track</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span>[] nums, LinkedList&lt;Integer&gt; track)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Trigger end conditions</span></span><br><span class="line">    <span class="keyword">if</span> (track.size() == nums.length) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> LinkedList(track));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="comment">// Excluding unlawful options</span></span><br><span class="line">        <span class="keyword">if</span> (track.contains(nums[i]))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// Make a choice</span></span><br><span class="line">        track.add(nums[i]);</span><br><span class="line">        <span class="comment">// Go to the next level of the decision tree</span></span><br><span class="line">        backtrack(nums, track);</span><br><span class="line">        <span class="comment">// Undo choice</span></span><br><span class="line">        track.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Instead of explicitly recording the 「selection list」, we have derived the current selection list from <code>nums</code> and <code>track</code>.</p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/DFSFramework/pic6.png" width='70%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">derived the current selection list</div>
</center>

<p>At this point, we have explained the underlying principle of the backtracking algorithm in detail through the full permutation problem. Of course, this algorithm is not very efficient in solving full permutations, as it requires an $O(N)$ time complexity to use the <code>contains</code> method on a linked table. There are better ways to achieve this by swapping elements, but they are harder to understand, so I won’t write about them here, so you can search for them yourself if you are interested.</p>
<p>However, it is important to note that no matter how it is optimised, it fits into the backtracking framework and the time complexity cannot be lower than $O(N!)$ because exhausting the whole decision tree is unavoidable. <strong>This is a feature of backtracking algorithms; unlike dynamic programming where there are overlapping subproblems that can be optimised, backtracking algorithms are purely violent exhaustive enumeration and the complexity is generally very high.</strong></p>
<p>Once the full permutation problem is understood, it is straightforward to apply the backtracking algorithm framework, and the following is a brief look at the N queen problem.</p>
<h1 id="Ⅱ-N-queen-problem"><a href="#Ⅱ-N-queen-problem" class="headerlink" title="Ⅱ. N queen problem"></a>Ⅱ. N queen problem</h1><p>This is a classic problem, to explain it simply: you are given an $N \times N$ board, and you are asked to place $N$ queens so that they cannot attack each other.</p>
<p>PS: Queens can attack any unit in the same row, column, top-left, bottom-left, top-right and bottom-four directions.</p>
<p>This problem is essentially like the full permutation problem, where each level of the decision tree represents each row on the board; each node can make the choice of placing a queen in any column of that row.</p>
<p>Apply code framework directly :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;string&gt;&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Enter the board edge length &#x27;n&#x27; and return all legal placements */</span></span><br><span class="line">vector&lt;vector&lt;string&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="comment">// &#x27;.&#x27; means empty, &#x27;Q&#x27; means queen, initializing empty board</span></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">board</span><span class="params">(n, string(n, <span class="string">&#x27;.&#x27;</span>)</span>)</span>;</span><br><span class="line">    backtrack(board, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Path: all rows in the &#x27;board&#x27; less than &#x27;row&#x27; have successfully placed queens</span></span><br><span class="line"><span class="comment">// selection list: all columns in row &#x27;row&#x27; are choices for placing the queen</span></span><br><span class="line"><span class="comment">// End condition: &#x27;row&#x27; exceeds the last row of &#x27;board&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(vector&lt;string&gt;&amp; board, <span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Trigger end conditions</span></span><br><span class="line">    <span class="keyword">if</span> (row == board.size()) &#123;</span><br><span class="line">        res.push_back(board);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n = board[row].size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">        <span class="comment">// Exclusion of unlawful options</span></span><br><span class="line">        <span class="keyword">if</span> (!isValid(board, row, col)) </span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// Make a choice</span></span><br><span class="line">        board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">        <span class="comment">// Go to the next line of decision making</span></span><br><span class="line">        backtrack(board, row + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// Undo choice</span></span><br><span class="line">        board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The main code in this section is actually similar to the full alignment problem, and the implementation of the <code>sValid</code> function is very simple:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Is it possible to place queens in &#x27;board[row][col]&#x27;  */</span></span><br><span class="line"><span class="function">bool <span class="title">isValid</span><span class="params">(vector&lt;string&gt;&amp; board, <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = board.size();</span><br><span class="line">    <span class="comment">// Check if the columns have conflicting queens</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][col] == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Check the top right for conflicting queens</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = row - <span class="number">1</span>, j = col + <span class="number">1</span>; </span><br><span class="line">            i &gt;= <span class="number">0</span> &amp;&amp; j &lt; n; i--, j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Check the top left for conflicting queens</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = row - <span class="number">1</span>, j = col - <span class="number">1</span>;</span><br><span class="line">            i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <code>backtrack</code> function is still like a pointer that wanders through the decision tree, with <code>row</code> and <code>col</code> representing the positions traversed by the function, and the <code>isValid</code> function pruning out the unqualified cases:</p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/DFSFramework/pic7.png" width='70%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">pruning out the unqualified cases</div>
</center>

<p>If you were given such a large piece of solution code straight away, it might be confusing. But now that you understand the framework of the backtracking algorithm, what’s so hard to understand? It’s just a matter of changing the way you make choices and eliminating illegitimate choices, and once you have the framework in mind, you’re left with a small problem.</p>
<p>When <code>N = 8</code>, it’s the eight queens problem. The mathematician Gauss has never been able to count the number of possible ways to place the eight queens problem in his lifetime, but our algorithm can work out all the possible outcomes in just one second.</p>
<p>But it’s not really Gauss’s fault. The complexity of the problem is very high indeed, and looking at our decision tree, despite the <code>isValid</code> function pruning, the worst time complexity is still $O(N^{N+1})$ and cannot be optimised. If <code>N = 10</code>, the computation is already time-consuming.</p>
<p><strong>There are times when we do not want to get all the legal answers, but only one answer.</strong> For example, in the algorithm for solving Sudoku, the complexity of finding all solutions is too high, and finding just one solution is fine.</p>
<p>In fact it is particularly simple, with a slight modification to the code of the backtracking algorithm.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The function returns `true` when it finds an answer</span></span><br><span class="line"><span class="function">bool <span class="title">backtrack</span><span class="params">(vector&lt;string&gt;&amp; board, <span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Trigger end conditions</span></span><br><span class="line">    <span class="keyword">if</span> (row == board.size()) &#123;</span><br><span class="line">        res.push_back(board);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">        ...</span><br><span class="line">        board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (backtrack(board, row + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>With this modification, any subsequent recursive exhaustion of the <code>for</code> loop will be blocked as soon as an answer is found. Perhaps you could write an algorithm for solving Sudoku with a slight modification to the code framework of the N Queen problem?</p>
<h1 id="Ⅲ-Conclusion"><a href="#Ⅲ-Conclusion" class="headerlink" title="Ⅲ. Conclusion"></a>Ⅲ. Conclusion</h1><p>The backtracking algorithm is a multinomial tree traversal problem, the key is to do some operations at the location of the preorder traversal and postorder traversal, the algorithm framework is as follows:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrack</span>(<span class="params">...</span>):</span></span><br><span class="line">    <span class="keyword">for</span> choice <span class="keyword">in</span> choice_list:</span><br><span class="line">        <span class="comment"># make choices</span></span><br><span class="line">        backtrack(...)</span><br><span class="line">        <span class="comment"># Undo choices</span></span><br></pre></td></tr></table></figure>
<p><strong>When writing the <code>backtrack</code> function, you need to maintain the ‘path’ travelled and the ‘list of choices’ that you can currently make, and when the ‘end condition’ is triggered, the ‘path’ is recorded in the result set.</strong></p>
<p>If you think about it, isn’t the backtracking algorithm a bit like dynamic programming? As we have emphasized many times in the dynamic programming series, the three points that need to be clarified in dynamic programming are “state”, “choice” and “base case”, does this not correspond to the “path” travelled, the current “choice list” and the “end condition”?</p>
<p>In a way, the violent solution phase of dynamic programming is a backtracking algorithm. It’s just that some problems have the nature of overlapping subproblems, and can be optimized with dp tables or memoization to prune the recursive tree significantly, which becomes dynamic programming. In today’s two problems, however, there are no overlapping subproblems, which means that the problem is a backtracking algorithm, and a very high complexity is inevitable.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>DFS</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Five shortest-circuit algorithms &amp; two ways to store maps</title>
    <url>/2021/08/02/LC743-shortestCircuit_mapsStorage/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>This article is a record of the answer to Leetcode 743, learning about the five shortest path solutions as follows: Floyd, Plain Dijkstra, Heap Optimization Dijkstra, Bellman Ford, SPFA. and three ways of storing graphs, including adjacency tables, adjacency matrices, and class &amp; adjacency tables.</p>
<a id="more"></a>

<h1 id="Original-question"><a href="#Original-question" class="headerlink" title="Original question"></a>Original question</h1><blockquote>
<p>You are given a network of <code>n</code> nodes, labeled from <code>1</code> to <code>n</code>. You are also given times, a list of travel times as directed edges <code>times[i] = (ui, vi, wi)</code>, where <code>ui</code> is the source node, <code>vi</code> is the target node, and <code>wi</code> is the time it takes for a signal to travel from source to target.</p>
<p>We will send a signal from a given node k. Return the time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return <code>-1</code>.</p>
<center>
<img style="border-radius: 0.3125em;
box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/LC743-shortestCircuit_mapsStorage/pic1.png" width='25%'>
<br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
display: inline-block;
color: #999;
padding: 2px;">Example 1</div>
</center>

<p><strong>Example 1:</strong></p>
<blockquote>
<p><strong>Input:</strong> times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2<br><strong>Output:</strong> 2</p>
</blockquote>
<p><strong>Example 2:</strong></p>
<blockquote>
<p><strong>Input:</strong> times = [[1,2,1]], n = 2, k = 1<br><strong>Output:</strong> 1</p>
</blockquote>
<p><strong>Example 3:</strong></p>
<blockquote>
<p><strong>Input:</strong> times = [[1,2,1]], n = 2, k = 2<br><strong>Output:</strong> -1</p>
</blockquote>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= k &lt;= n &lt;= 100</code></li>
<li><code>1 &lt;= times.length &lt;= 6000</code></li>
<li><code>times[i].length == 3</code></li>
<li><code>1 &lt;= ui, vi &lt;= n</code></li>
<li><code>ui != vi</code></li>
<li><code>0 &lt;= wi &lt;= 100</code></li>
<li>All the pairs <code>(ui, vi)</code> are <strong>unique</strong>. (i.e., no multiple edges.)</li>
</ul>
</blockquote>
<h1 id="Basic-analysis"><a href="#Basic-analysis" class="headerlink" title="Basic analysis"></a>Basic analysis</h1><p>For convenience, we have agreed that <code>n</code> is the number of points and <code>m</code> is the number of edges.</p>
<p>According to the question, the data range of <code>n</code> is <code>100</code> and the data range of <code>m</code> is <code>6000</code>, so the graph can be stored using either the ‘adjacency table’ or the ‘adjacency matrix’.</p>
<p>Also, the problem is <strong>‘the shortest time for all points to be visited from point <code>k</code>‘</strong>, which translates to <strong>‘the shortest distance from point <code>k</code> to other points <code>x</code>‘</strong>.</p>
<h1 id="Floyd-Adjacency-matrix"><a href="#Floyd-Adjacency-matrix" class="headerlink" title="Floyd (Adjacency matrix)"></a>Floyd (Adjacency matrix)</h1><p>Based on the <strong>Basic Analysis</strong>, we can use the Floyd algorithm, a multi-source sink shortest-circuit algorithm with complexity $O(n^3)$, to solve the problem, and the adjacency matrix to store the graph.</p>
<p>The computational effort at this point is about $10^6$ which can be passed.</p>
<p>Running through Floyd, we can obtain the ‘shortest distance from any starting point to any starting point’. Then take <code>max</code> from all <code>w[k][x]</code> which is ‘the maximum of the shortest distance from point <code>k</code> to other points <code>x</code>‘.</p>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">110</span>, M = <span class="number">6010</span>;</span><br><span class="line">    <span class="keyword">int</span>[][] w = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">    <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">networkDelayTime</span><span class="params">(<span class="keyword">int</span>[][] ts, <span class="keyword">int</span> _n, <span class="keyword">int</span> _k)</span> </span>&#123;</span><br><span class="line">        n = _n; k = _k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                w[i][j] = w[j][i] = i == j ? <span class="number">0</span> : INF;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] t : ts) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = t[<span class="number">0</span>], v = t[<span class="number">1</span>], c = t[<span class="number">2</span>];</span><br><span class="line">            w[u][v] = c;</span><br><span class="line">        &#125;</span><br><span class="line">        floyd();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ans = Math.max(ans, w[k][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans &gt; INF / <span class="number">2</span> ? -<span class="number">1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">1</span>; p &lt;= n; p++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                    w[i][j] = Math.min(w[i][j], w[i][p] + w[p][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Time complexity: stored graph plus shortest-circuit algorithm with complexity $O(m+n^3)$</li>
<li>Space complexity: $O(n^2)$</li>
</ul>
<h1 id="Plain-Dijkstra-Adjacency-matrix"><a href="#Plain-Dijkstra-Adjacency-matrix" class="headerlink" title="Plain Dijkstra (Adjacency matrix)"></a>Plain Dijkstra (Adjacency matrix)</h1><p>Let us now review the algorithm, the main idea of which is greed.</p>
<p>All nodes are divided into two categories: those for which the shortest path from the starting point to the current point has been determined, and those for which the shortest path from the starting point to the current point has not been determined (hereinafter referred to as ‘undetermined nodes’ and ‘determined nodes’).</p>
<p>Each time a point with the shortest distance from the starting point is taken from the Undetermined Node, it is classified as a Determined Node and used to ‘update’ the distance from the starting point to all other Undetermined Nodes. This is done until all points are classified as ‘identified nodes’.</p>
<p>To ‘update’ node <code>B</code> with node <code>A</code> means to compare the length of the shortest path from the starting point to node <code>A</code> with the length of the edge from node <code>A</code> to node <code>B</code>, and if the former is less than the latter, update the latter with the former. This operation is also called <strong>‘slackening’</strong>.</p>
<p>The implicit message here is that each time an ‘undetermined node’ is selected, the length of the shortest path from the starting point to it can be determined.</p>
<p>This can be understood as we have already updated the current node with every ‘determined node’ and do not need to update it again (as a point cannot be reached more than once). The current node is already the shortest distance to the starting point of all the ‘undetermined nodes’ and cannot be updated by any other ‘undetermined node’. Therefore the current node can be classified as a ‘determined node’.</p>
<h2 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h2><p>According to the question, the time it takes for the signal from node <code>k</code> to reach node <code>x</code> is the length of the shortest path from node <code>k</code> to node <code>x</code>. Therefore we need to find the shortest path from node <code>k</code> to all other points, the maximum of which is the answer. If there is a point that cannot be reached from <code>k</code>, then <code>-1</code> is returned.</p>
<p>The following code decreases the node number by <code>1</code> so that the node number lies in the range <code>[0,n-1]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">networkDelayTime</span>(<span class="params">self, times: List[List[<span class="built_in">int</span>]], n: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        g = [[<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="keyword">for</span> x, y, time <span class="keyword">in</span> times:</span><br><span class="line">            g[x - <span class="number">1</span>][y - <span class="number">1</span>] = time</span><br><span class="line"></span><br><span class="line">        dist = [<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * n</span><br><span class="line">        dist[k - <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">        used = [<span class="literal">False</span>] * n</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            x = -<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> y, u <span class="keyword">in</span> <span class="built_in">enumerate</span>(used):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> u <span class="keyword">and</span> (x == -<span class="number">1</span> <span class="keyword">or</span> dist[y] &lt; dist[x]):</span><br><span class="line">                    x = y</span><br><span class="line">            used[x] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> y, time <span class="keyword">in</span> <span class="built_in">enumerate</span>(g[x]):</span><br><span class="line">                dist[y] = <span class="built_in">min</span>(dist[y], dist[x] + time)</span><br><span class="line"></span><br><span class="line">        ans = <span class="built_in">max</span>(dist)</span><br><span class="line">        <span class="keyword">return</span> ans <span class="keyword">if</span> ans &lt; <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Time complexity: stored graph plus shortest-circuit algorithm with complexity $O(m+n^2)$</li>
<li>Space complexity: $O(n^2)$</li>
</ul>
<h1 id="Heap-optimised-Dijkstra-Adjacency-tables"><a href="#Heap-optimised-Dijkstra-Adjacency-tables" class="headerlink" title="Heap-optimised Dijkstra (Adjacency tables)"></a>Heap-optimised Dijkstra (Adjacency tables)</h1><p>Since the range of edge data is not too large, we can also use the <strong>heap-optimised</strong> Dijkstra algorithm with a complexity of $O(m\log{n})$.</p>
<p>Both heap-optimised Dijkstra and plain Dijkstra are ‘single-source shortest-circuit’ algorithms.</p>
<p>After running through the heap-optimised Dijkstra algorithm to find the shortest circuit, max is taken from all the shortest circuits to be the <strong>‘maximum of the shortest distance from point k to other points x’</strong>.</p>
<p>At this point, the complexity of the algorithm is $O(m\log{n})$, which can be passed.</p>
<h2 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">110</span>, M = <span class="number">6010</span>;</span><br><span class="line">    <span class="keyword">int</span>[] he = <span class="keyword">new</span> <span class="keyword">int</span>[N], e = <span class="keyword">new</span> <span class="keyword">int</span>[M], ne = <span class="keyword">new</span> <span class="keyword">int</span>[M], w = <span class="keyword">new</span> <span class="keyword">int</span>[M];</span><br><span class="line">    <span class="keyword">int</span>[] dist = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">boolean</span>[] vis = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line">    <span class="keyword">int</span> n, k, idx;</span><br><span class="line">    <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        e[idx] = b;</span><br><span class="line">        ne[idx] = he[a];</span><br><span class="line">        he[a] = idx;</span><br><span class="line">        w[idx] = c;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">networkDelayTime</span><span class="params">(<span class="keyword">int</span>[][] ts, <span class="keyword">int</span> _n, <span class="keyword">int</span> _k)</span> </span>&#123;</span><br><span class="line">        n = _n; k = _k;</span><br><span class="line">        Arrays.fill(he, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] t : ts) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = t[<span class="number">0</span>], v = t[<span class="number">1</span>], c = t[<span class="number">2</span>];</span><br><span class="line">            add(u, v, c);</span><br><span class="line">        &#125;</span><br><span class="line">        dijkstra();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ans = Math.max(ans, dist[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans &gt; INF / <span class="number">2</span> ? -<span class="number">1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Arrays.fill(vis, <span class="keyword">false</span>);</span><br><span class="line">        Arrays.fill(dist, INF);</span><br><span class="line">        dist[k] = <span class="number">0</span>;</span><br><span class="line">        PriorityQueue&lt;<span class="keyword">int</span>[]&gt; q = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a,b)-&gt;a[<span class="number">1</span>]-b[<span class="number">1</span>]);</span><br><span class="line">        q.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;k, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] poll = q.poll();</span><br><span class="line">            <span class="keyword">int</span> id = poll[<span class="number">0</span>], step = poll[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (vis[id]) <span class="keyword">continue</span>;</span><br><span class="line">            vis[id] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = he[id]; i != -<span class="number">1</span>; i = ne[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = e[i];</span><br><span class="line">                <span class="keyword">if</span> (dist[j] &gt; dist[id] + w[i]) &#123;</span><br><span class="line">                    dist[j] = dist[id] + w[i];</span><br><span class="line">                    q.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;j, dist[j]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(m\log{n}+n)$</li>
<li>Space complexity: $O(m)$</li>
</ul>
<h1 id="Bellman-Ford-Class-amp-Adjacency-table"><a href="#Bellman-Ford-Class-amp-Adjacency-table" class="headerlink" title="Bellman Ford (Class &amp; Adjacency table)"></a>Bellman Ford (Class &amp; Adjacency table)</h1><p>Although the title specifies that there are no ‘negatively weighted edges’, we can still use Bellman Ford, which can be solved by ‘shortest-circuiting in a negatively weighted graph’, which is also a <strong>‘single-source shortest-circuiting’</strong> algorithm with $O(n \cdot m)$ complexity.<br>Usually, to ensure $O(n \cdot m)$, a separate class can be constructed to represent the edges, and all edges can be stored in the set, and the set of edges can be traversed directly in the <code>n</code> times relaxation operations (see P1 for code).<br>Since the order of magnitude of edges in this problem is greater than the order of magnitude of points, it is also possible to continue to use the ‘adjacency table’ approach to edge traversal, with a lower bound of $O(n)$ on the complexity of traversing all edges and an upper bound that ensures that it does not exceed $O(m)$ (see P2 for code).</p>
<h2 id="code-3"><a href="#code-3" class="headerlink" title="code"></a>code</h2><h3 id="P1"><a href="#P1" class="headerlink" title="P1"></a>P1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Edge</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c;</span><br><span class="line">        Edge(<span class="keyword">int</span> _a, <span class="keyword">int</span> _b, <span class="keyword">int</span> _c) &#123;</span><br><span class="line">            a = _a; b = _b; c = _c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">110</span>, M = <span class="number">6010</span>;</span><br><span class="line">    <span class="keyword">int</span>[] dist = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">boolean</span>[] vis = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line">    <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    List&lt;Edge&gt; es = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">networkDelayTime</span><span class="params">(<span class="keyword">int</span>[][] ts, <span class="keyword">int</span> _n, <span class="keyword">int</span> _k)</span> </span>&#123;</span><br><span class="line">        n = _n; k = _k;</span><br><span class="line">        m = ts.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] t : ts) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = t[<span class="number">0</span>], v = t[<span class="number">1</span>], c = t[<span class="number">2</span>];</span><br><span class="line">            es.add(<span class="keyword">new</span> Edge(u, v, c));</span><br><span class="line">        &#125;</span><br><span class="line">        bf();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ans = Math.max(ans, dist[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans &gt; INF / <span class="number">2</span> ? -<span class="number">1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Arrays.fill(dist, INF);</span><br><span class="line">        dist[k] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">1</span>; p &lt;= n; p++) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] prev = dist.clone();</span><br><span class="line">            <span class="keyword">for</span> (Edge e : es) &#123;</span><br><span class="line">                <span class="keyword">int</span> a = e.a, b = e.b, c = e.c;</span><br><span class="line">                dist[b] = Math.min(dist[b], prev[a] + c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="P2"><a href="#P2" class="headerlink" title="P2"></a>P2</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">110</span>, M = <span class="number">6010</span>;</span><br><span class="line">    <span class="keyword">int</span>[] he = <span class="keyword">new</span> <span class="keyword">int</span>[N], e = <span class="keyword">new</span> <span class="keyword">int</span>[M], ne = <span class="keyword">new</span> <span class="keyword">int</span>[M], w = <span class="keyword">new</span> <span class="keyword">int</span>[M];</span><br><span class="line">    <span class="keyword">int</span>[] dist = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">boolean</span>[] vis = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line">    <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">int</span> n, m, k, idx;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        e[idx] = b;</span><br><span class="line">        ne[idx] = he[a];</span><br><span class="line">        he[a] = idx;</span><br><span class="line">        w[idx] = c;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">networkDelayTime</span><span class="params">(<span class="keyword">int</span>[][] ts, <span class="keyword">int</span> _n, <span class="keyword">int</span> _k)</span> </span>&#123;</span><br><span class="line">        n = _n; k = _k;</span><br><span class="line">        m = ts.length;</span><br><span class="line">        Arrays.fill(he, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] t : ts) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = t[<span class="number">0</span>], v = t[<span class="number">1</span>], c = t[<span class="number">2</span>];</span><br><span class="line">            add(u, v, c);</span><br><span class="line">        &#125;</span><br><span class="line">        bf();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ans = Math.max(ans, dist[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans &gt; INF / <span class="number">2</span> ? -<span class="number">1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Arrays.fill(dist, INF);</span><br><span class="line">        dist[k] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">1</span>; p &lt;= n; p++) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] prev = dist.clone();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= n; a++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = he[a]; i != -<span class="number">1</span>; i = ne[i]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> b = e[i];</span><br><span class="line">                    dist[b] = Math.min(dist[b], prev[a] + w[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(m \cdot n)$</li>
<li>Space complexity: $O(m)$</li>
</ul>
<h1 id="SPFA-Adjacent-Table"><a href="#SPFA-Adjacent-Table" class="headerlink" title="SPFA (Adjacent Table)"></a>SPFA (Adjacent Table)</h1><p>SPFA is an optimised implementation of Bellman Ford, <strong>either using a queue for optimisation or a stack for optimisation.</strong><br>The complexity is usually $O(k \cdot m)$, with <code>k</code> typically being <code>4</code> to <code>5</code>, and still $O(n \cdot m)$ in the worst case, degrading from $O(k \cdot m)$ to $O(n \cdot m)$ when the data is a grid graph.</p>
<h2 id="code-4"><a href="#code-4" class="headerlink" title="code"></a>code</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">110</span>, M = <span class="number">6010</span>;</span><br><span class="line">    <span class="keyword">int</span>[] he = <span class="keyword">new</span> <span class="keyword">int</span>[N], e = <span class="keyword">new</span> <span class="keyword">int</span>[M], ne = <span class="keyword">new</span> <span class="keyword">int</span>[M], w = <span class="keyword">new</span> <span class="keyword">int</span>[M];</span><br><span class="line">    <span class="keyword">int</span>[] dist = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">boolean</span>[] vis = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line">    <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">int</span> n, k, idx;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        e[idx] = b;</span><br><span class="line">        ne[idx] = he[a];</span><br><span class="line">        he[a] = idx;</span><br><span class="line">        w[idx] = c;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">networkDelayTime</span><span class="params">(<span class="keyword">int</span>[][] ts, <span class="keyword">int</span> _n, <span class="keyword">int</span> _k)</span> </span>&#123;</span><br><span class="line">        n = _n; k = _k;</span><br><span class="line">        Arrays.fill(he, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] t : ts) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = t[<span class="number">0</span>], v = t[<span class="number">1</span>], c = t[<span class="number">2</span>];</span><br><span class="line">            add(u, v, c);</span><br><span class="line">        &#125;</span><br><span class="line">        spfa();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ans = Math.max(ans, dist[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans &gt; INF / <span class="number">2</span> ? -<span class="number">1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Arrays.fill(vis, <span class="keyword">false</span>);</span><br><span class="line">        Arrays.fill(dist, INF);</span><br><span class="line">        dist[k] = <span class="number">0</span>;</span><br><span class="line">        Deque&lt;Integer&gt; d = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        d.addLast(k);</span><br><span class="line">        vis[k] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!d.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> poll = d.pollFirst();</span><br><span class="line">            vis[poll] = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = he[poll]; i != -<span class="number">1</span>; i = ne[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = e[i];</span><br><span class="line">                <span class="keyword">if</span> (dist[j] &gt; dist[poll] + w[i]) &#123;</span><br><span class="line">                    dist[j] = dist[poll] + w[i];</span><br><span class="line">                    <span class="keyword">if</span> (vis[j]) <span class="keyword">continue</span>;</span><br><span class="line">                    d.addLast(j);</span><br><span class="line">                    vis[j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Time complexity: $O(m \cdot n)$</li>
<li>Space complexity: $O(m)$</li>
</ul>
]]></content>
      <tags>
        <tag>SPFA</tag>
        <tag>graph</tag>
        <tag>shortest path</tag>
        <tag>Dijkstra</tag>
        <tag>Floyd</tag>
        <tag>Bellman-Ford</tag>
      </tags>
  </entry>
  <entry>
    <title>The Framework of Solving Dynamic Programming Problems</title>
    <url>/2021/07/31/DPFramwork/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Dynamic Programming is a problem for many people, but it is also one of the most skillful and interesting strategies. This article gives a partial overview of these problems, plus a framework for solving dynamic programming.</p>
<p><strong>This paper addresses several questions.</strong></p>
<p>What is dynamic programming? </p>
<p>What are the techniques for solving dynamic programming problems?</p>
<p>How can I learn dynamic programming?</p>
<a id="more"></a>

<h1 id="What-is-dynamic-programming"><a href="#What-is-dynamic-programming" class="headerlink" title="What is dynamic programming?"></a>What is dynamic programming?</h1><p>First of all, the general form of a dynamic programming problem is <strong>to find the optimal value</strong>. Dynamic programming is actually an <strong>optimisation method</strong> in operations research, but it is more commonly used in computer problems, such as asking you to find the longest increasing subsequence, the minimum edit distance, and so on.</p>
<p>Since it can be concluded into solving optimal problems, the core of dynamic programming is <strong>exhaustive enumeration</strong>, in which case we are required to  exhaust all possible answers and then find the best value among them.</p>
<p>To begin with, the exhaustion of dynamic programming is a bit special because these problems have ‘<strong>overlapping sub-problems’</strong>, which could be extremely inefficient if they were  violently exhausted, so <strong>‘memos’ or ‘DP tables’</strong> are needed to optimise the exhaustion process and avoid unnecessary computations.</p>
<p>Moreover, dynamic programming problems <strong>must have an ‘optimal sub-structure’</strong> in order to get to the optimal value of the original problem through the optimal value of the sub-problem.</p>
<p>In addition, although the core idea of dynamic programming is to exhaustively find the best value, the problem can be ever-changing. It is not an easy task to exhaust all feasible solutions. Only by listing the <strong>correct ‘state transition equations’</strong> can the exhaustion be correctly exhausted. .</p>
<p>The above-mentioned overlapping sub-problems, optimal sub-structures, and state transition equations are the three elements of dynamic programming. The specific meaning will be explained in detail with examples, but in the actual algorithm problem, <strong>it is the most difficult part to write the state transition equation</strong>. This is why many friends find the problem of dynamic programming difficult. Let me provide a thinking framework that I have researched to help you think about the state transition equation:</p>
<p><strong>Clear base case -&gt; clear ‘state’ -&gt; clear ‘choice’ -&gt; define the meaning of dp array/function.</strong></p>
<p>Follow the above routine, the final result can be set in this framework:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># initialize base case</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][...] = base</span><br><span class="line"><span class="comment"># State transition</span></span><br><span class="line"><span class="keyword">for</span> state1 <span class="keyword">in</span> all_values_in_state1:</span><br><span class="line">    <span class="keyword">for</span> state2 <span class="keyword">in</span> all_values_in_state2:</span><br><span class="line">        <span class="keyword">for</span> ...</span><br><span class="line">            dp[state1][state2][...] = optimise(choice1，choice2...)</span><br></pre></td></tr></table></figure>
<p>The following is a detailed explanation of the fundamentals of dynamic programming through the Fibonacci series problem and the rounding up of change problem. The former is mainly to give you an idea of what an overlapping subproblem is (the Fibonacci sequence does not have an optimum, so it is not strictly speaking a dynamic programming problem), and the latter is mainly cited to focus on how to list the state transfer equations.</p>
<h1 id="Ⅰ-Fibonacci-sequence"><a href="#Ⅰ-Fibonacci-sequence" class="headerlink" title="Ⅰ. Fibonacci sequence"></a>Ⅰ. Fibonacci sequence</h1><p>Please don’t mind the simplicity of this example. <strong>Only a simple example will allow you to concentrate fully on the general ideas and techniques behind the algorithm without being baffled by the obscure details.</strong> </p>
<h2 id="1-Violent-recursion"><a href="#1-Violent-recursion" class="headerlink" title="1. Violent recursion"></a>1. Violent recursion</h2><p>The mathematical form of the Fibonacci sequence is recursive, and is written in code like this：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N == <span class="number">1</span> || N == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fib(N - <span class="number">1</span>) + fib(N - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We also know that this is simple and easy to understand, but it is very inefficient. Assuming n = 20, draw the recursive tree:</p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/DynamicProgSolutionFramework/pic1.png" width='80%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">Recursive tree</div>
</center>

<p>PS: Whenever you encounter a problem that requires recursion, it is a good idea to draw a recursive tree, as this will help you enormously in analysing the complexity of the algorithm and finding the reasons for its inefficiency.</p>
<p>How do I understand this recursive tree? It means that if I want to compute the original problem <code>f(20)</code>, I have to first compute the subproblems <code>f(19)</code> and <code>f(18)</code>, then to compute <code>f(19)</code>, I have to first compute the subproblems <code>f(18)</code> and <code>f(17)</code>, and so on. Finally, when I encounter <code>f(1)</code> or <code>f(2)</code>, whose result is known, so I can return the result directly, and the recursive tree will not grow further down</p>
<p><strong>How is the time complexity of a recursive algorithm calculated? It is the number of sub-problems multiplied by the time it takes to solve a sub-problem.</strong></p>
<p>First, the number of subproblems is calculated, i.e. the total number of nodes in the recursive tree. Obviously the total number of nodes in a binary tree is exponential, so the number of subproblems is $O(2^n)$.</p>
<p>Then the time to solve a subproblem is calculated. In this algorithm, there is no loop and there is only one addition operation, <code>f(n - 1) + f(n - 2)</code>, in $O(1)$.</p>
<p>Therefore, the time complexity of this algorithm is the multiplication of the two, i.e. $O(2^n)$, which is at exponential explosion level.</p>
<p>Looking at the recursive tree, it is clear why the algorithm is inefficient: there are a lot of repeated calculations, for example <code>f(18)</code> is calculated twice, and you can see that this recursive tree, rooted at <code>f(18)</code>, is huge, and calculating it more than once can take a huge amount of time. What is more, more than one node, <code>f(18)</code>, is being repeated, so the algorithm is very inefficient.</p>
<p>This is the first property of the dynamic programming problem: <strong>the overlapping subproblem</strong>. Let’s find a way to solve this problem.</p>
<h2 id="2-Recursive-solution-with-memo"><a href="#2-Recursive-solution-with-memo" class="headerlink" title="2. Recursive solution with memo"></a>2. Recursive solution with memo</h2><p>Once the problem is clear, half of the problem is solved. If the reason for such time-consuming is repeated computation, we can create a ‘memo’, so that each time we have worked out the answer to a sub-problem, we don’t rush to return, but first write it down in the ‘memo’ and then return.</p>
<p>You can also use a hash table (dictionary), and the idea is the same.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Memo fully initialised to 0</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">memo</span><span class="params">(N + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">// Perform recursion with memo</span></span><br><span class="line">    <span class="keyword">return</span> helper(memo, N);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">helper</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; memo, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// Already calculated</span></span><br><span class="line">    <span class="keyword">if</span> (memo[n] != <span class="number">0</span>) <span class="keyword">return</span> memo[n];</span><br><span class="line">    memo[n] = helper(memo, n - <span class="number">1</span>) + helper(memo, n - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> memo[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now, draw the recursive tree so you know exactly what the ‘memo’ does:</p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/DynamicProgSolutionFramework/pic2.png" width='80%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">Recursive tree</div>
</center>

<p>In fact, the recursive algorithm with ‘memoization’ transforms a recursive tree with a huge amount of redundancy into a recursive graph without redundancy by ‘pruning’ it, greatly reducing the number of sub-problems (i.e. nodes in the recursive graph).</p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/DynamicProgSolutionFramework/pic3.png" width='70%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">Top-down</div>
</center>

<p><strong>How is the time complexity of a recursive algorithm calculated? It is actually the number of sub-problems multiplied by the time it takes to solve a sub-problem.</strong></p>
<p>The number of subproblems, i.e. the total number of nodes in the graph, is <code>f(1)</code>, <code>f(2)</code>, <code>f(3)</code> … <code>f(20)</code>, proportional to the input size <code>n = 20</code>, since there is no redundant computation in this algorithm, so the number of subproblems is $O(n)$.</p>
<p>The time to solve a subproblem, ditto above, without any loops, is $O(1)$.</p>
<p>Therefore, the time complexity of this algorithm is $O(n)$. It is a downscaling blow compared to the brute force algorithm.</p>
<p>Up to this point, the recursive solution with memoization has been as efficient as the iterative dynamic programming solution. In fact, this solution is already similar to iterative dynamic programming, except that this method is called ‘top-down’ and dynamic programming is called ‘bottom-up’.</p>
<p>What does <strong>‘top-down’</strong> mean? Note that the recursive tree (or graph) we just drew extends from the top down, from a larger original problem, such as <code>f(20)</code>, down to the base case of <code>f(1)</code> and <code>f(2)</code>, and then returns the answer layer by layer.</p>
<p>What do you mean by <strong>‘bottom-up’</strong>? On the contrary, we start from the bottom, the simplest and smallest problem, <code>f(1)</code> and <code>f(2)</code>, and work our way up until we get to the answer we want, <code>f(20)</code>. <strong>This is the idea behind dynamic planning, which is why it generally moves away from recursion and instead completes the calculation by loop iteration.</strong></p>
<h2 id="3-Iterative-solution-with-dp-arrays"><a href="#3-Iterative-solution-with-dp-arrays" class="headerlink" title="3. Iterative solution with dp arrays"></a>3. Iterative solution with dp arrays</h2><p>Inspired by the previous step, we can make this ‘memo’ a separate table, called a <strong>DP table</strong>, on which we can do the ‘bottom-up’ projection.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (N == <span class="number">1</span> || N == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(N + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    dp[<span class="number">1</span>] = dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= N; i++)</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> dp[N];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/DynamicProgSolutionFramework/pic4.png" width='70%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">Process demonstrationn</div>
</center>

<p>The DP table is particularly like the result of the previous ‘pruning’, only in reverse. In fact, the ‘memo’ in the recursive solution with memoization ends up being this DP table, so the two solutions are in fact similar and, in most cases, essentially the same in terms of efficiency.</p>
<p>Here, the term <strong>‘state transfer equation’</strong> is introduced, which is actually the mathematical form that describes the structure of the problem.<br>$$<br>f(n)=<br>\begin{cases}<br>1,\quad n=1,2 \\<br>f(n-1)+f(n-2),\quad n&gt;2<br>\end{cases}<br>$$<br>Why is it called the <strong>‘state transfer equation’</strong>? It’s just to sound high end. You think of <code>f(n)</code> as a state <code>n</code>, which is transferred by adding up states <code>n - 1</code> and <code>n - 2</code>, and that’s called a state transfer, and that’s it.</p>
<p>You will see that all the operations in the above solutions, such as<code> return f(n - 1) + f(n - 2)</code>, <code>dp[i] = dp[i - 1] + dp[i - 2]</code>, and the initialisation of memos or DP tables, are all different manifestations of the equation around which the equation revolves. This shows the importance of listing the ‘state transfer equation’, which is at the core of the problem. And it is easy to see that the state transfer equation actually represents a straightforward violent solution.</p>
<p><strong>Don’t look down on violent solutions. The most difficult part of a dynamic programming problem is to write the violent solution, i.e. the state transfer equation.</strong> As soon as the violent solution is written, the optimisation method is just a memoization or a DP table, and there is no more subtlety.</p>
<p>This example concludes with a detailed optimization. The careful reader will notice that, according to the Fibonacci sequence of state transfer equations, the current state is only related to the previous two states, so it is not necessary to have a DP table that long to store all the states. Therefore, the space complexity can be reduced to $O(1)$ by further optimisation.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span> || n == <span class="number">1</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> prev = <span class="number">1</span>, curr = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = prev + curr;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This technique is known as <strong>‘state compression’</strong>. If we find that only a portion of the DP table is needed for each state transfer, then we can try to reduce the size of the DP table by using state compression to record only the necessary data, as in the above example, which is equivalent to reducing the size of the DP table from <code>n</code> to <code>2</code>. We will see examples of this in subsequent chapters on dynamic programming, which generally compress a two-dimensional DP table into one dimension, i.e., reducing the space complexity from $O(n^2)$ to $O(n)$.</p>
<p>One may ask how another important feature of dynamic programming, ‘optimal substructures’, is not covered. It will be covered below. The Fibonacci sequence example is not strictly speaking dynamic programming, since it does not involve finding the optimal value. The above is intended to illustrate the elimination of overlapping subproblems, and to demonstrate the step-by-step process of obtaining the optimal solution. Next, look at the second example, the problem of getting change.</p>
<h1 id="Ⅱ-The-problem-of-getting-change"><a href="#Ⅱ-The-problem-of-getting-change" class="headerlink" title="Ⅱ. The problem of getting change"></a>Ⅱ. The problem of getting change</h1><p>Let’s start with the following question: you are given <code>k</code> coins of denominations <code>c1, c2 ... ck</code>, each with an infinite number of coins. Given an infinite number of each coin, and a total <code>amount</code>, you are asked how many coins <strong>at least</strong> you need to make up this amount, and if this is not possible, the algorithm returns -1. The function signature of the algorithm is as follows</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// coins are the optional coin denominations, and amount is the target amount</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span></span>;</span><br></pre></td></tr></table></figure>
<p>For instance,  <code>k = 3</code> and the denominations are <code>1</code>, <code>2</code> and <code>5</code> and the total <code>amount = 11</code>. Then a minimum of <code>3</code> coins is needed to come up with <code>11 = 5 + 5 + 1</code>.</p>
<p>How do you think the computer should solve this problem? Obviously, by exhausting all the possible ways to make up the coins, and then finding the minimum number of coins needed.</p>
<h2 id="1-Violent-recursion-1"><a href="#1-Violent-recursion-1" class="headerlink" title="1. Violent recursion"></a>1. Violent recursion</h2><p>Firstly, the problem is a dynamic programming problem because it has an ‘optimal sub-structure’. <strong>To be ‘optimally sub-structured’, the sub-problems must be independent of each other.</strong> What do you mean by mutually independent? You won’t want to read a mathematical proof, so I’ll use a visual example to explain.</p>
<p>For example, suppose you take an exam and your results in each subject are independent of each other. Your original problem is to get the highest overall score, so your sub-problem is to get the highest score in language and the highest score in maths …… In order to get the highest score in each subject, you have to get the highest score in the corresponding multiple-choice questions and the highest score in the fill-in-the-blank questions in each subject …… Of course, the end result is that you get a perfect score in each subject, which is the highest overall score.</p>
<p>The correct result is obtained: the highest total score is the total score. Because this process fits into the optimal sub-structure, the sub-problems “highest in each subject” are independent of each other and do not interfere with each other.</p>
<p>However, if you add the condition that your language and maths scores will constrain each other, a high maths score will lower your language score and vice versa. In that case, obviously the highest total score you can get will not reach the total, and you will get the wrong result along the lines of the one you just did. Because the sub-problems are not independent, the language and mathematics scores cannot be optimal at the same time, so the optimal substructure is broken.</p>
<p>Returning to the problem of rounding up the change, why is it consistent with the optimal sub-structure? For example, if you want to find the minimum number of coins for <code>amount = 11</code> (the original problem), and if you know the minimum number of coins to come up with for <code>amount = 10</code> (the subproblem), you simply add one to the answer to the subproblem (and choose a coin of denomination <code>1</code>) to give you the answer to the original problem. Since there is no limit to the number of coins, <strong>the sub-problems are not interlocked and are independent of each other</strong>.</p>
<p>So, since we know that this is a dynamic programming problem, we have to think about <strong>how to list the correct state transfer equation</strong>?</p>
<ol>
<li><p><strong>Determine base case</strong>, which is not difficult. The algorithm returns <code>0</code> when the target <code>amount</code> is <code>0</code>, since it does not need any coins to come up with the target amount.</p>
</li>
<li><p><strong>Determine the ‘state’, i.e. the variables that will change in the original problem and the sub-problem.</strong> Since the number of coins is infinite and the denomination of the coins is given by the question, only the target amount will keep moving closer to the base case, so the only ‘state’ is the target <code>amount</code>.</p>
</li>
<li><p><strong>Determine the ‘choice’, that is, the behaviour that causes the ‘state’ to change.</strong> The reason why the target amount changes is because you are choosing coins, and every time you choose a coin, you are decreasing the target amount. So the face value of all coins is your ‘choice’.</p>
</li>
<li><p><strong>Clarify the definition of the <code>dp</code> function/array.</strong> We are talking about a top-down solution here, so there will be a recursive <code>dp</code> function. Generally speaking, the argument of the function is the amount that will change in the state transfer, that is, the ‘state’ mentioned above; the return value of the function is the amount that the question asks us to calculate. In this case, there is only one state, the ‘target amount’, and we are asked to calculate the minimum number of coins needed to come up with the target amount. So we can define the <code>dp</code> function like this.</p>
</li>
</ol>
<p>Definition of <code>dp(n)</code>: Enter a target amount <code>n</code> and return the minimum number of coins needed to reach the target amount <code>n</code>.</p>
<p>With these key points clear, the pseudocode for the solution can be written as follows.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pseudocode framework</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coinChange</span>(<span class="params">coins: List[<span class="built_in">int</span>], amount: <span class="built_in">int</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Definition: To come up with the amount n, at least dp(n) coins are needed</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dp</span>(<span class="params">n</span>):</span></span><br><span class="line">        <span class="comment"># Make choice: Choose the result that requires the fewest coins</span></span><br><span class="line">        <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">            res = <span class="built_in">min</span>(res, <span class="number">1</span> + dp(n - coin))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The final result required by the title is dp(amount)</span></span><br><span class="line">    <span class="keyword">return</span> dp(amount)</span><br></pre></td></tr></table></figure>
<p>Based on the pseudocode, we add the base case to get the final answer. Obviously when the target amount is <code>0</code>, the number of coins required is <code>0</code>; when the target amount is less than <code>0</code>, there is no solution and the answer is <code>-1</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coinChange</span>(<span class="params">coins: List[<span class="built_in">int</span>], amount: <span class="built_in">int</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dp</span>(<span class="params">n</span>):</span></span><br><span class="line">        <span class="comment"># base case</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>: <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="comment"># to solve the minimal, so initialize to positive infinity</span></span><br><span class="line">        res = <span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">            subproblem = dp(n - coin)</span><br><span class="line">            <span class="comment"># Sub-questions no solution, skipped</span></span><br><span class="line">            <span class="keyword">if</span> subproblem == -<span class="number">1</span>: <span class="keyword">continue</span></span><br><span class="line">            res = <span class="built_in">min</span>(res, <span class="number">1</span> + subproblem)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res <span class="keyword">if</span> res != <span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>) <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp(amount)</span><br></pre></td></tr></table></figure>
<p>At this point, the state transfer equation is in fact complete, and the above algorithm is already a violent solution; the mathematical form of the above code is the state transfer equation.<br>$$<br>dp(n)=<br>\begin{cases}<br>0, \quad n=0 \<br>-1, \quad n&lt;0 \<br>min{dp(n-coin)+1|coin \in coins }, \quad n&gt;0<br>\end{cases}<br>$$<br>At this point, the problem is in fact solved, except for the elimination of the overlapping subproblem, e.g. when <code>amount = 11</code>, <code>coins = &#123;1,2,5&#125;.</code> We draw a recursive tree to see this situation:</p>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/DynamicProgSolutionFramework/pic5.png" width='80%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">recursive tree</div>
</center>

<p>*<em>Time complexity analysis of recursive algorithm: total number of subproblems * time per subproblem costs.*</em></p>
<p>The total number of subproblems is the number of nodes in the recursive tree, which is harder to see and is $O(n^k)$, in short exponential. Each subproblem contains a <code>for</code> loop, which has a complexity of $O(k)$. So the total time complexity is $O(k \cdot n^k)$, which is also exponential level.</p>
<h2 id="2-Recursion-with-memo"><a href="#2-Recursion-with-memo" class="headerlink" title="2. Recursion with memo"></a>2. Recursion with memo</h2><p>Similar to the previous example of the Fibonacci series, the subproblem can be eliminated by memoing, with only minor modifications.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coinChange</span>(<span class="params">coins: List[<span class="built_in">int</span>], amount: <span class="built_in">int</span></span>):</span></span><br><span class="line">    <span class="comment"># Memo</span></span><br><span class="line">    memo = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dp</span>(<span class="params">n</span>):</span></span><br><span class="line">        <span class="comment"># Check memo to avoid extra counting</span></span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">in</span> memo: <span class="keyword">return</span> memo[n]</span><br><span class="line">        <span class="comment"># base case</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>: <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        res = <span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">            subproblem = dp(n - coin)</span><br><span class="line">            <span class="keyword">if</span> subproblem == -<span class="number">1</span>: <span class="keyword">continue</span></span><br><span class="line">            res = <span class="built_in">min</span>(res, <span class="number">1</span> + subproblem)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Write into memo</span></span><br><span class="line">        memo[n] = res <span class="keyword">if</span> res != <span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>) <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> memo[n]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp(amount)</span><br></pre></td></tr></table></figure>
<p>Obviously ‘memo’ reduces the number of subproblems significantly and eliminates the redundancy of subproblems completely, so the total number of subproblems does not exceed the number of amounts <code>n</code>, i.e. the number of subproblems is $O(n)$. The time to process a subproblem remains the same, $O(k)$, so the total time complexity is $O(kn)$.</p>
<h2 id="3-Iterative-solution-of-dp-arrays"><a href="#3-Iterative-solution-of-dp-arrays" class="headerlink" title="3. Iterative solution of dp arrays"></a>3. Iterative solution of dp arrays</h2><p>Of course, we can also use the bottom-up <strong>dp table</strong>  to eliminate the overlapping sub-problem, and there is no difference between the “state”, “selection” and base case as before. However, the <code>dp</code> function is reflected in the function parameters, while the <code>dp</code> array is reflected in the array index.</p>
<p><strong>The definition of the <code>dp</code> array: when the target amount is <code>i</code>, at least <code>dp[i]</code> coins are needed to round up.</strong></p>
<p>According to the dynamic programming code framework given at the beginning of our article, the solution can be written as follows.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// The array size is amount + 1 and the initial value is also amount + 1</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(amount + <span class="number">1</span>, amount + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// The outer for loop is iterating over all values of all states</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dp.size(); i++) &#123;</span><br><span class="line">        <span class="comment">// The inner for loop is finding the minimum value of all choices</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> coin : coins) &#123;</span><br><span class="line">            <span class="comment">// Sub-questions not solved, skipped</span></span><br><span class="line">            <span class="keyword">if</span> (i - coin &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            dp[i] = min(dp[i], <span class="number">1</span> + dp[i - coin]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (dp[amount] == amount + <span class="number">1</span>) ? -<span class="number">1</span> : dp[amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<center>
  <img style="border-radius: 0.3125em;
  box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
  src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed/blog/DynamicProgSolutionFramework/pic6.png" width='80%'>
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9;
  display: inline-block;
  color: #999;
  padding: 2px;">Process demonstration</div>
</center>

<p>PS: The reason why the <code>dp</code> array is initialized to <code>amount + 1</code> is because the number of coins that make up the amount can only be equal to the amount at most (all <code>1</code> coins), so initializing to <code>amount + 1</code> is equivalent to initializing to positive infinity, making it easier to take the minimum value later.</p>
<h1 id="Ⅲ-Conclusion"><a href="#Ⅲ-Conclusion" class="headerlink" title="Ⅲ. Conclusion"></a>Ⅲ. Conclusion</h1><p>The first Fibonacci sequence problem explains how to optimise the recursive tree by means of a ‘memo’ or ‘dp table’ approach, and makes it clear that these two approaches are essentially the same, just top-down and bottom-up.</p>
<p>The second problem of scraping together change shows how to process a ‘state transfer equation’, and once the violent recursive solution is written through the state transfer equation, all that remains is to optimise the recursive tree and eliminate overlapping sub-problems.</p>
<p>If you don’t know much about dynamic programming, I applaud you for reading this and believe you have mastered the design of this algorithm.</p>
<p><strong>There is no special technique for a computer to solve a problem. Its only solution is to exhaust all possibilities.</strong> Algorithm design is simply a matter of thinking <strong>‘how to exhaust’</strong> and then pursuing <strong>‘how to exhaust intelligently’</strong>.</p>
<p>Listing the dynamic transfer equations is a solution to the problem of “how to exhaust”. It is difficult because many of them require recursive implementation, and because some of the problems themselves have complex solution spaces that are not so easy to exhaust completely.</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>The difference between this.\$store.dispatch() and this.\$store.commit() in vuex</title>
    <url>/2021/03/16/vuexStoreDispatchAndCommit/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Difference"><a href="#Difference" class="headerlink" title="Difference"></a>Difference</h1><p>The difference between <code>this.$store.dispatch()</code> and <code>this.$store.commit()</code> methods is that in general they are only different in <strong>the way values are accessed</strong>, both methods pass the value to vuex’s mutation to change the state.</p>
<ul>
<li><code>this.$store.dispatch()</code>: contains asynchronous operations, such as submitting data to the background, written: <code>this.$store.dispatch(&#39;action method name&#39;, value)</code></li>
<li><code>this.$store.commit()</code>: synchronous operation, written: <code>this.$store.commit(&#39;mutations method name&#39;, value)</code></li>
</ul>
<a id="more"></a>

<blockquote>
<p> commit: Synchronize operations</p>
<ul>
<li>Storage value: <code>this.$store.commit(&#39;changeValue&#39;,name)</code></li>
<li>Fetch value:  <code>this.$store.state.changeValue</code></li>
</ul>
</blockquote>
<blockquote>
<p>dispatch: Asynchronous operation</p>
<ul>
<li>Storage value: <code>this.$store.dispatch(&#39;getlists&#39;,name)</code></li>
<li>Fetch value:  <code>this.$store.getters.getlists</code></li>
</ul>
</blockquote>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="Vuex-file-src-store-index-js"><a href="#Vuex-file-src-store-index-js" class="headerlink" title="Vuex file src/store/index.js"></a>Vuex file <code>src/store/index.js</code></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// state专门用来保存共享的状态值</span></span><br><span class="line">  state: &#123;</span><br><span class="line">    <span class="comment">// 保存登录状态</span></span><br><span class="line">    login: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// mutations: 专门书写方法,用来更新 state 中的值</span></span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    <span class="function"><span class="title">doLogin</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.login = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 退出</span></span><br><span class="line">    <span class="function"><span class="title">doLogout</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.login = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="JS-Component-section-src-components-Header-vue"><a href="#JS-Component-section-src-components-Header-vue" class="headerlink" title="JS Component section: src/components/Header.vue"></a>JS Component section: <code>src/components/Header.vue</code></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 使用vux的 mapState需要引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 官方推荐: 给组件起个名字, 便于报错时的提示</span></span><br><span class="line">  name: <span class="string">&quot;Header&quot;</span>,</span><br><span class="line">  <span class="comment">// 引入vuex 的 store 中的state值, 必须在计算属性中书写!</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// mapState辅助函数, 可以快速引入store中的值</span></span><br><span class="line">    <span class="comment">// 此处的login代表,  store文件中的 state 中的 login, 登录状态</span></span><br><span class="line">    ...mapState([<span class="string">&quot;login&quot;</span>])</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">logout</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$store.commit(<span class="string">&quot;doLogout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="JS-Component-section-src-components-Login-vue"><a href="#JS-Component-section-src-components-Login-vue" class="headerlink" title="JS Component section: src/components/Login.vue"></a>JS Component section: <code>src/components/Login.vue</code></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&quot;Login&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      uname: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      upwd: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">doLogin</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.uname, <span class="built_in">this</span>.upwd);</span><br><span class="line">      <span class="keyword">let</span> data=&#123;</span><br><span class="line">        uname:<span class="built_in">this</span>.uname,</span><br><span class="line">        upwd:<span class="built_in">this</span>.upwd</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="built_in">this</span>.axios</span><br><span class="line">        .post(<span class="string">&quot;user_login.php&quot;</span>, data)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res);</span><br><span class="line">          <span class="keyword">let</span> code = res.data.code;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (code == <span class="number">1</span>) &#123;</span><br><span class="line">            alert(<span class="string">&quot;恭喜您, 登录成功! 即将跳转到首页&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 路由跳转指定页面</span></span><br><span class="line">            <span class="built_in">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//更新 vuex 的 state的值, 必须通过 mutations 提供的方法才可以</span></span><br><span class="line">            <span class="comment">// 通过 commit(&#x27;方法名&#x27;) 就可以触发 mutations 中的指定方法</span></span><br><span class="line">            <span class="built_in">this</span>.$store.commit(<span class="string">&quot;doLogin&quot;</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">&quot;很遗憾, 登陆失败!&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Instruction for deploying sz-education locally</title>
    <url>/2021/03/10/sz-educationLocalDeploy/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Congratulations, wrong guess." data-whm="Do you really want to see it?">
  <script id="hbeData" type="hbeData" data-hmacdigest="72b0615d13f2cc98434402fb3fc1fbb044fc6ed35051ed8747c504bc05a60948">3ab60c175e2fafe508a3c9a0bfc45b39e8e71f852125fd1f67e223e5a7f1ca51e3a6e640e745329b658210809448f304c7bb37f56d8524fbac11862504deccf33e7a8b961255779c28dd35b3decc577a2567abfb97a75d8178f920d4a139cd6ac5c6e678709b30828851626268b1e6b14609a2669f148289abdee549c1177c9060c299b27d17da5494b8682287760c8a5adbdd6529f2cf60f79164caa3d7c7623a5292b470b0343466629c2bd3084fc179493120b60a650e0742e8d9e56d1069eec3e66e00a92825987f9a43d13dac96ccfa2375414f86cc5037958993c4f47b29fb94b22e6a40409fc851864bbd51a4f5a08b88b382c1be585873d008caab7f5abdf97e691fc76b780c4aa67be2814671023192e3ea393013bcc0893cbbf7a0cd8161d00225b473dc9dab98901b6b30431e550b71870eb273cf38555d8ab95a9f5718c5f50ca0d75105c282942bac1f0550acd94eb4aa3ffbd4d21ef33b4ee548ee57463bfef56e8886862495972d7b2cc2c9f01228aee1273e471a4597748fe9a3045ad66e11e6e9bbfd4d995d477fb73dbea4f11466816a2926fb835fca59a29f18eadd0c7e9b889c9c912d0bff1f804eb988df7003fca782d24c2dfdf554912d389cae361cc80ce5249aaf2c635b7f412fe55a363b8560f1b3dbd98a643f63e59305063b92f7d0b97163cd0541dba57505b4b72158865e7758dcfe45b0da06de609bce0b99b8a83da67a6e55c1e7d33440d344891d283d3b51d168d46a29dadd12177cf69299ba45d2410779fc01d8cc83ae93c67af5729ec5f8744315a54dbd9accc99897493f20400222f292a54743e6cc10d176ca4795f8e80b586186ff9abb184da2331f9a02c30fa6c2deaf3b8b4cfc9489a850fc2f1cb3c9fe4a741e4ad5450f6f30cacd4a611884aa12aae7f34669ec5b1367be73119555a0db1670b2df79d158e5e182cec216c93989915222d18a982cbc2a5da43c82ec680991575299a03d446cce0c1a58694a21cf4ff70edaadf85b19f88149808b160ff7fa1343b50d0cef849cc80c291f5e2062b14c9195628b82617a7a3d27f4b2f69d183025d24da7b24e9130252aabcdfa1ed500b4e263a273f7ce7f894474d0c4af934ac3f87cc2c007a3a81654c03dcfa584b1ec28608419173a26ad375bb019da60736571c7628db383c9f737dc601e0ab0f63ef9397b5b93ab63ba56890e9f61db1e043d0af4ffe7815c1e3a309eab4e1af5711ddd8115843466f5e3aee395f1351a63d9cd31330afc1a32056753677596eba23f22f185970a6287e545cbc0a40076a5dd8ef3c08f6e2fb9d722085ff2ecc42c88d4de63c762095f52fa5bece1bd7addb28203957992debaef97a6be25b2e027611e2b293e4c2b0aa7372529ab1ccdee30caefd02ddf34621607109de786992b1001c8024d417e55e949f476e2ad3576147de718f41336a921fd30ab901d6b5d82a0ac6f9263ec22b1ab907e80cb065e96ee7ef246491dc79107809a17e1c424e6d10d967f10a81c685f9c6aef1f7c0dff4ea7f29db8fe165c5b71bb9e3df227085eb28b52788bb6a1342b53b1ddff697f54a0d2766fcbb52e0109ece11eaed9afe0784cd2b7a466c6ab934a212da769d9342f77b886cc5f7dff056436815fb17e1e6c8fbb42b78831f9ffb15bd41f7c60ea1cb44d6938dc0d2bf8fd3d45c4eb2e83633a6034f4e0a7dcd053c6457cf0d0e0eee76f70232e21da7d46860fb9b2a07c1958500326290e6cf80bfe635d8053bcde1d1f038149b0394625f4d6bfbdb8acc89f9b8c7f07c62738c5382bfc6138d13e6d1d605d18059d79aadbcbb1df5ee92393d8f1121f23cd5ca861a558b1df39a6c1169da185a474f3ba185c2cfa930dac2848ccc7cb7c2316d99f2c7c70668d59d004380f1a3836327e9bbdbb4d9c1e4015147ecde434d7f744fc8c6109c414e310db0292e4f728c4d4c48760f55d6c0072f418378ab4b1fd79dbbaaae1365a28ee6fadc413283f93dc975a09566f8a6e178d2ba6c8c8d6b23838be580802607aa4e42e7ee882f41d4e3489eff0be2af480ebbd1d2ed111a0974de4854243c746efb43985c115cdb5c40290853173bbc5442ce282b223c84e4dcd79486dfef2db02cc710bb285fb9ef377a55b98c6292b22ab4fc12dc361f090bf484bf04ebdb39e5d6765a59979ab42b6dc561a1c8fce4cf51e95f8473f85a513edd4211979a6a73c7488ea415760897531b90fcaf7166de72f96691580d28713b9597b088b0d19885e38ceb00dcbc61c5b79301343589dbc275204543a1308e1695683cb8b6a6fca722ca9757a879258e79791e6b94c4a631fc33907a144f3880f867a46c16f27620e2d219b2fdc612cfeaf9e1a33412d24bb4d7109c01af316c38d32e0a0e42eca0fde53be6167386d3f9bdcf31b3abc82f4076331cc0d0120ea5aba2a1bf6662109e47ec1c9450e4e6ebb5b39966251808aefba5fa39c957c8dee52eab6626cad5ae7c28a5fece33ebec4cee722dcbd7e1cdb86014fd1b2dd9fef0deb3613bb3632c8c4525e0b6201c83bf535488d77f39ea86a3067b7d82bc5154d99ab555723d80be7748f1fb46a404cb0fcf86233b3d8db76f9e93f4cc65020ca9e553f3485b871ff30faf48fc99aa3ece3c85621132ec10e8800b0063620c8808eabe78c895e3e0c2142309edef49049c090c7fa8e49debbd8479eb23365694854b1ef05c6a73b1e9fadf87b2773810f69c84579904f812f796d947c567cdcc681162998cf2813107148567b3c23150c983b2e68090d76414d6a23ec9d6ce12e8a59a68e668569617236043bccab356c9dde44a5ea31386da88d96d9f01cc162cc5b69a904a1463642d2ba1839687ba705105e804c298b1d4455e1c8400f34160de6b74df7b0d28a5f8d29657192430cf9d090cd720cb124cd5c19d6a48ebfcc700cec2610cb0760eddd7ab38d8c9a87ad588d3d758bff0a9a085d5b7f80817564d1274258324e3b12582bf9eb105894205cf915a44eeab59997c6715672497815b9fde1916a1e916fc138732f12843a2f279820f83e6eb54b2ace52efaaf1ba912b0a20e891934c5936ca89f257edb5b628562e57a911046f63d4326b887d744da0a804b8b5695198fc1dcab30f0a8b14d2d00a75192f34493a8788b253e372800849a4357379347ae7bbe388a41dbf814f3f9a336fe8a5ec8feb62e5a5193c3b2534ef8645e497f173456402dbeae5466c9bbfc3cd74fcbe720e190838042ba97f609a5f31fac0422af2db6e6957f1027f34589b26439901dd912c8fc2c15ebd74656f33b6685ddce15f269b57c135f429bcb85a700abff59cefba08bf22aa423ae0ca8ff1f7cc703a139b863c5e4382b862cfeeef707cc2b8e5063227a473dc9cc6a35dba9d2a1e3e1bb49579511eed0e13ddee9dbb3f970a18d8bc3e40f719dc6c59fb31800e72413e056ce4d4d82a571ce1699227b2953b982cd6b74fda4257c846dd34a095d4a8ba1d94ea46c9d5dcc82f8231928b578a7c206a078af5f08f4ed97d0eb7a48805bb83aa1b294ddff9eec216d120174eb90c60f15be91fb4c1713d3165fc740614987f8352e3674bbded1ccc8be1292913d99cc687b66fed300e203696a78acd63cf7aa328e5a351b8b2eb314e3477e687211c80e71fdb0cf931dccc583fca3ff8d69e1acfb8d0ffd33b5951991c213984db850c4943cd0d6885cc441a5bca1afbec20e0a8a074284e0584df2aad0c1598d80fdd45a54fae0a737323db5b49b77ada83be295d9cead65dbe8b2eab0ba4d6af05ddbf88267e1514099183d31bdb0baaa901c7a5717edf5b5a9d7fb610745155036e5a49c575cfb18bd07c1e10f1df57c546def945e66136bf71873cb559a746b683f833ef616377626acb6977d7b9dacb901b4d61b5bf598e155a2ef5f8f48189dff41d39b25116fb65e9dcd2653c5351bbe52411bab7e5fd6221854b3638f5ba39cc47dc9cf6947d54a0572834913dd30f31747a2f4aef44cd9a101dac395fe564ce3a0d6e1599593d2a78f9ee14059d2cf104ff5dbdc39e0f81dc64a4bdbcf7f3824d601a15e93a5dffbe4ad6396e51f037cf1ddf1b19672cf99b7b0b1e49ff2472646819858c0fee5424e36570a77d5654a4f4d4594fd216251ec64f04731bb0bb9a877b0a2fbf641cc5a43d36b8d85c042e7164de8c0f1f57049759f3a25128b564777cf3ff87af7eb3348ad575a8ca89e90a35051590121066c8fd988ca6ec3f324881c7faab4aca6bd2f4d09edfb0d6015193585a3e2f2f18ea09ac20902bc0b5fab65d7cb93d150d4e91defad6b55accb12448484d5e0fa544e637287b7d07589be5459973d3880538191e267d02e0db6fd583df005875ce6285500a72ff385476a9683fc88a12364ec98bad6d266d731006e0fe26df04d63f0164b524a458f1ba223b0d0c6ee5df6138751dd6e8f21a34d28d8b3023b7075d08b3680d776a5c0e81c71ed54e5939f7eeaf5e6fd0b2ed29b682b7a987cd71bd02a5e27bd38e4346fdbc47e99ef21d14a3070c86d79d34c9a459ad6ef80e10365d1f43d1e9c32a767dd56fcf5168e877e03296fb84199641e4e624be29e216568b30a2e82d8213208dad50de20494a8487b9e66281415dd0f21440122dae2f236b9683fae132e8487b88637405b64bd887b179ee26d87d3c3dc0528a106e793003005297608b9d8a9cd609f3d945b3c7cdc8ce59f3b68c56be349ab48378b2d14aade53e7e128782e37475e61732bc53e85e5f5771e8bc7ac8370c31934257b3485a1734ca8909de9d205eae197dda533d7923eb5358fda072a6f0924b1ccb3477e1e6bff939fd9839a12cf32ab6bac5e6e4e8a32f8c2b09ab546f309e3fce114f9c7d118399516a7ca54ee6103b442cacd0fd19be99c49cf8f55d67783410e85af81631df901a144d5c23b46fbfdf9584ea33bef2b0c0855c682a41b867c69829cceec9ef3f7803b47acc3f66014f2c2ec9ea273557d4c2e1c8aa4effaa1f679f1a8aa8b0916a361e1af985774491104b121e4a5335604b46b07fc07ba20d8d00901cb830335a7b1dccc002ee65995246d385c89e66337902c7f6fa43c8b4a6ab0f62a9cab69842c2a29cd9a335e1e122a2ac3f42c962b3fc33d75ca00a73ed7a746ee242bcc3012dd5e889a658b38f7881154353f45a820b414fe2433ca2ff8a11a0a819b1f6dd0893f47d748e6df384a113c2789c9e2d60e9d22aab94a6e30b3d2fcad2a9cd0215e0f812483a7339f4332e07b607e3fc5fe1c96edd08a6cc2df63d57c1cb3623bfced51d98cb5804d9010e49bb911bbff4b71a6d7fe4322eaa3ef5bdb3f8576d161d1133f7afe613ab49520c8c465a54949200bf3ed3452766ad233409f6d92f5d0e51e48ba1081bce73e18be46cb208e2d0a0124e7c70519060c6924036bc848a478d9db6d80e06d5926970ea7be2850fa2dae91c3052b91bbeb9d39b87ce1f91e27cc72dbdfe84712400ee7e6470e83ff03b52df1a5a57a9355f908f30417e875cb46b3551a6b1f875be58a597bca34e5ad5df591205b3af9020f6a7176d68ce0fe45f3bdfb4f9fb609dd9b48a1d8d4fd44bf2b755e345438f1476972a0bea3545b33e686fe73b6853de7df5ca22d79a592c1c1032c4756ce007785048eb5691a0d748918aa7b54e56e96b9f49aa3b813e77ebfbc68fab5f00584bc1881621a7e9876c1cac8a370e29d39a536d599d9d70b7d6758d86164159834c8e0f6d407feea72f8b06345378c9277f8e163d428e206b3322ded5eb1d1046bf8f0c96eeb551f4b32524143ea715a768ea1ec8d33eeb2c44a0eb8b71c2f317585991d962a6de0f042141e6239cada3071f3c8f81c189955c4b4ff58b7de682c618387bc8418ed6f146877692bb0881005f7738a9cff8db2318fb7c309515d6075b422dd93abc68c91ea9a46fd06714b8d66589c84f34fef01df7b5cf5640c7ced0238048d7015851a23c43fc448969e7ba7763e72fefcc7d4a271605f2b505216ad34716b5d855a194a4c047740dad70e84d0f3d69362d2e91b972a6b5df3e39cf859ea544ff4e3d9d3fe77c6ec163cfe77c89125c8c23fbe5ea28a353ad54fd085580bd3e02d0d69f85b7f6ffda53a68237005236ffd92cd570c917b3fb3eb60ee413a024b37148dc141ecd25678dc68cc790cbc4061b47900410c4cea7998f294f64af2f24e81c7f41d10fd2db48d678eea001855012e1b1f16c567acf972bb5675591470250bd299782db1c66ca04c99c4960243b3e3264147db6819857913297593e327962c7580211d2dd43bd671c416abf06786104e14bfaebf94f8576dd5b8278c6f18dab295971bb8c4160671305b50ad0d9dc43bf3b6a8a287629bc533932a2519fe0944c2c5b489ad840a02c76eedda96faf54f4d99717b7e97e12e8aa209d4c3c7b5856b4ab8167d5c0f0072b7f62e74a1bba1ba70f18982ee05c179e9d065ab8488101cf921f882aed73229e2a26abaa4e240c2668fd200d59a5e4bf5cb593aa3fc67191a3fb686cb7d27732a6b7e61b4f67bdddb42213da5633afc8cbbcf9838eea2fe1391b3ee82dd0859dcc8ddddead34782696b064c739a881e9081b6ea2e1b14a3f4eb4d737f85062fbda82fd0c667d23c7a9a66f4ce0ec66854a357db0e6c5ab760cce60a6af55cad3b05ca1c5772a94d070c71b4dff1a0c1db412196574e3ba7541de11c5ecbd6adf6025a84a759a8003e329668d923d0c88adfff0f1e9c920536a9de3d6b8e197993b0924621fb2f6d6e94b70a3607614e382c5abfb88c6e6e7864746d672cb6fdf8bbd705ac320c48803268bfa926f206fa54af6cd2111054a830f061b4f730e2a426b18168ebf7b5350b2309550ef8cb722b03168c2b25a1ff4f29036a3510b0780aca872ef43d7faadfffbdb0fd7531e5f35e1cefc71ada5d858cacbf962f09ee179fc64df8e1b98f01e0d5b6fe10e7d0ccf4580a1ed5d93ad494788e958d71fe44ed4032013c399a68558d2b0572393b98d061bf9637654d1f72684eef3f4e93862223240ab0a8d49740622ae443710f9e0aec7d883cc2243a6901e8f0797cee9d5339d8f6d48c1351ce952aad2086132ac852419104fb61de5b65977e0dbbb839b90abd8925a0d6fc920b8b58f5bade33a23cc834651f4c011a476b3f8013b53439de811f9919cac9cba788ecf2ace68566f476439f3ed684a6fc681d4360cdb39877e9a5decf6c32bbee2b28af916e86072a7979ef33eb6218ab9c3fe49917e6e6b3bdb492702c8ea9a1a6d7970af46a351dd3b432b075c6ae0b2ad262b7b1d5b759de8d9e8d43330117d10589aca6e0b03567d9b8af1c9eec8db744358e6914ee859b6309a416ea14f3036c304b1857c48febac5bdd9788ce12a4f20f0e4ab19b84e6d750c3755726724d3bdc901689203f08f05d2114e1b27e893bab13953b0b81c3c47bbcb17cabfba613073480c2c90c822c7398a56058084f6c1f82eef31fa3f31f28f4880e5c1755b0f41b237298e9a84ab62e64f827d093f236dc4fd627fe1ffded90fa4423c3278974a1a51172563a4f6f3784f5b8c9da53754c427865b400f559130a54e0fe88dd3edd7b9040e0f4fb24048ce3b4255c956eafc53b8c1d6cf03e922a7e017b8ee3aafbf2adfebe7f2054dcc5f2ebb1efc54d1376380e80d4bcc36ab2cd2186a786b665b79540f382420854cd7c9a5e9dc26562d5a79ccedc09fc48f428ed5b565209973301378bd3ec0580c10c7fbe58ebd873f6c61417544976dd205da607f2aa19a2033d98afc38833eff3cea1956b7a3248aefe0d712096141038fd0645c70700ff67b7c63777a865cc9a9e5890051bd840564abea4128f166cbe9bc4b0b8f34c33cddbba36a3e1a0f2736272937091fe96df3127330456fbac45dfed18b41c9b0dd8cc8446685f8910f370726f7ee4ca82074b6e0343a1086dbd06d8479898ec1f8a8d35742cc9fef1ec5979b5ff71b457bcb57f81509b89887752a98b83180e487835703e0a94d83d8d61195d4c00e614e9ea0d39412f61f6974648d0e87dd8881111c2b49acf3a9eefea9bded7aee1b8db178235ba118229b41f1babfddab45cc1a90ad2b05dee9fd6b363866fa94c2a3baa2b73ab8597981ee0b50f4e287d415b20fdc3903475eda2850475a174fb2d6157282b89e61dd334e524774951abbccf4f2ff2f905fd1a685f355a2125158ffbd374a39b83451ae2bd6e0e1eb99e2d34376f6afa1b3ddf395075ef8635e999a2c377e0f9bbaee41d88757c2b833a91f7e0c6363417a9811d08d4c700936b2040c7c9ba18f63381eeb8fdcf5c069c86d6e251a931953104455150103789637f210972311dc301a12a0d23e0a3412b4f417439a951dfc622fcee634dfb815abf9e0234f8a51ca64f923625e5d4a29ce17b47eda5cf29715d37c3a5a7b50f55a395e5bd642b308340c177cf754522d291e671b6d5720fb27d8e5a250727a25cd0010a3a194deb543fb79d14852ec0df610e9d8cb5198c71beaa1d846862fd8e1060d157f64e14e516a6b3844bc42c0406dd225013871aa56d012f0c05097cb860a31bf0ea2b29742757d3bc97601293f4f7f904e4ab857b1ad16694d505077357e8aaa17e2af5da3728b5094c4a0653a7578127eb75d23aad9c05d17e5e629259410975ba89e1d486fca49fa8b948106ff887f752e376872d766ef6db3968e35f1869efa5a21d7b89315158f17856f08ec7ba883e8a2f9d14a6adc6d7bb810c83acaba6a709622654836bff15c8d788f9e32d44573c79fae079ff32e3f51de78df05cd18a95bfcab7de4e29ea130b15dc7413eebdd363bc225fb6a6633bfa81241c9f2841c898e9cfaf96cbe157e3549ee07cd33f40d991f2ba443e26ce4ef01d3c81ca5f9389c0505ca97760389094f9b4b3517431324f8a7bf7c91a34d3dd1d8369d28f20cf2d563ef656685a9b32eaf057688fc6cc5a4778d2039223cea1dae21e51757bc63970e673ba3ad34770f5f19a3b27ffa581a71327a7ad8779d7a76c3a64bef2445f4a2abfd2620540db9c5c3bc5717b137a84d3772fd621c63d408f940aaf461bc5f1cfec34fb16a8b3def5ca67be079b2777b1a9bffe23acc74cb2ebf08a3f82a476188f0eb0edfb9620db9d2a2130e18dd91b1061daee6a83d9f799616c3775543801a519513078f9878e496a627aaf7ac905877e2643bbdc18bb5e15519ff15f5dbab9a391a13c5ab2204ed4076c0545e3ad43d6b8e94a5044937ea2d82b7fd60c4b331b824394d0ade637d94808238bc4d65cea22416e1f5928b1aa96379c8fb6d2c1d6a0abe7123e9c04b98e7797815566d744e0976680660857bde628f44b43c06c96c70e5d35549d9bc4dccef6ee02cd129ee5914e8608c26cd4b9325c88c28426adbe32b8122efd360a55965b36a5c9d868078d91bf2d9ed1ade465d24b6a9f15a1391cca0c84f308d6fc7ea7a99c9a9e2e45d82f9cff2432acede9eebd2ace5824a532a6bc91d11aeb899c31b183c9f073b7e71648f097bf50176744f67cb342b8af8f67663bc236633054b3b14f32776e270258c50a03824f077342bccf6bc91a7fb9b9327b9d9a5a00a5b666e7eca8bd1671dad46565e095d596bcd542eef725c80a0b90aaeed4a40ed6d7b83b84c75516c96b4e507da726fa6b9b05c8dab4af9f9db3d1cd8f4b3bf54ff3de20fa77d563b229e7e4c5aff31f7eaf0d622f2a105d0a6ad95988c2f593fe95b4de7e0a81782c4d238edde77873c39e1fa0b1d198cecf71fe344f610ac607b99ccb778fcac14af354d4474a58a72a0c59d88823440954a5da59a94fa1dea8c6a3e794b9c922b054c997848e762606647581a540f039ef2d4d8b1fff580aec73c144fc3058919bc298ba003e404527b7a683736d04d4f0869cfc22bd83ce015bd5021f8b13fcf0b9579d2bee937fcdcce54f0570420f2b7065498f7e1ba738aa15bb772a562abda5fd6914710c1e0548f9dea74c8a4e26ab110a3cb2141443c1bdaeb78f465d03639b2e875930ea466ff0c0faab3c9168e7becc09e361a5c2b7762f0234bbfe97df5641565d4b8f193f288bfcbcdd361cea697343bbad1de31006d9763024d7be34a322b2f544444f9c1da8b988767dda4341b9f6b34b51420964e8499c4ab716aabaaa3dd909c8fab58825f4d10ce6ffa02e97d0df46bc5bced919b62601e4f9269b6217b65bf4065b97c39c17ee50824f35c60d9bc8dc8d9c4d39a29c5f1ce1d14d926ee3272829e4d5c826fb189683fe0fc2530cbaa447529519719152cff8265883c2fa3a5b27ec61bd20a93d16ebcd03b9f582158cf63f20bffae25861e8592483b16a640ae6907eef9baae7d781f15175d996c239c92004fb9327ae174cc744e3b38879277c131e1d76c0c5fe087a673981be15105e60c58aed19cf3b0ae1f4a857b118c5a3dfef6d7521c1174c556bb6f7b324128cae12149d5417486de44d9cb628a9a975948d8e01429d3ab1ff1ea590c93c330444de6ba113e64fb96a30c461ca6b593e04ad80bc883e47855789f3320c7c8466640a4e227eab6073fd2653401c5270ac336081eef2e75ebc56efba5c578bedefdb5908d955c30e1fcf0cc0a2600c85a385080a0fdf62ff0c8a407367a7c81e29390e3a3ba264e5fd6557ceb00d8e64c735aa4f4c8952c12a18384072662faa6547d281650893cf049506800f2ece1f7bf3173cb6e279946e6295f8ec27f530e66f681e5095dd326b97da975b8cf07e507e21c12873e78891f7e6631c49c19594145419626362583503a57d0b5449eff5b95748771b23296e8d056273adb214e584fff9a71ef101dfd637d21ad7c691095ba0b13c09990099bc39b13f17b4a07a66179357ee683fa79935d7699e0a0bbc216c7c71c3a12c143d4a9e4e60bfc2542f38714f023cef0730eb3a6335800c4851ad9b2bfb67ff2c5ea33437c2a38e98f90a98aa5bc3d4c788672c9a8d4803ea1b8d65e5fedb31c65c2995a7dde8123d8df68e06bf73800ce6d6b2cfac7c6f2243761b0353c9b9f0343250f65ee46560bc4ceb1b6b1d5a809cdff1709f2a6646cd4b9fead7627238a14cbd07fdea1b64d74496ab164cc8b9152dabd49f5d818301486ee21a90960621a2dc3fde1a9e846b09b25430f2c2266e4afba1dd8f9138bb2df86592ff09fe576137108831eb8fe07b6815dec18f88d57068b6c8cba90050c79e278dc1e72b497499c4c912dbcaa7feaae6ad646a2131b9cca88036d9ee83d46e979b177a4f8605d71d1dbe336bd60e93de6c854ec957f033b636da590335916b388012efd1a7ffdd4596a807350b64dd646e4bc76995d57d52f995ccfbf1bdda15e24e25de666947f5d18e1c9343bc408de98f2c2a2077c5957305767189f93cd458f3aa4266509e979cd1796f66eaa5355a789362b09e1baffc9d32d591bdeaf5751c8d3d0dea9cf1609a0d9ad533b8b092b85809e1364fb5df750529e49efe32fd3f5a51f622275c516c7367b4f655d363b3acc677c05f6a94ea966f79cff6d6b2f7a2e34bbbeee4e0b3c7ae63c07f2d291517b95c3c5cf21df7d367a83e0694d182472201da38c2303a81dbd88d198644fe0f711ca23db08fb44cce735cb6bb76b23081aeef2c02646ccf1b49f6b7b6c46d49f697477b91c103545f2e1c111a69dc61997e722fbfeef3b2f048d5353e6e32e1b144e45037e20491e7617c427bfc0c232e427515cad0dba4415434ae4ba7e7702024893e033ecd743ab1a9ff4f019bba4a81b1d5beb964d9071e72fbd4f8b3a28469ecdb694c17fc5f90defe7af6146fc3b5eed959c32d7fa0d0b9e4c209184a6f379b2b278ec25203c84864ef9af8e2b2310a89851ff2cea8fdca28157e4e8b4ea1455549d4510e48467c664765abce5410e530d3f11710c7a3b6ef4b7b45443660753d5712789c07e35faad0c0231b05eb43b3dd78ce61a4bea163f1edcc3c1c4883e15b46a1526061f6f8294c48f2084725664b859db1c2fb916570b39e4675d5d7c10f453c00a06d64a59f5bcd52f51e69ab038797d24e48092c630d7a8888112c1ef565d8efb422de030a72c159989e60aaa1ce8c12fc552febd455319284289d971dd505e526b7ef6ce1ec93c07865776bb2dae2281fe7aebb4e64935b409a65685e244eddc11d6f63bc6b9f42e642b592f9f6d9c6bceeb0ff306d1f71056ca477623cb1cdc8f7d995b6c1aae7446b6b14d98a42ef960019054a182bc42855222dc097cc8a8055da67188506e7f274da6e61f57ce9a0f720f81716aca1957ee5858c8952e0154983ff5ec048133969d23df8f866b4c30f3566450b16fa6d555f43bcd297f5b071769e3c6cfabf64c2afe2b7cc245c55a1cbb7d0d96eea83695105a63d06b32d41739f72d320f8ed52ae6cc11f7c6b815ea8838a780f98b2810ce863a6a9e3ccab2fc1b94d6bf621a9bc51930c249d7f12dd63c85b8c874342d6cc4b23cef27237b0faa282c8d8830bf90605a6f32e0f1c0912297b5dfe7e796bf71bce5deeb729085409ceed29eeede81382c6f225c62f51d79de0b602c3184f7d35214a337ff8f8ca293966b2a920ce3d422e718c4b83f64470a08870edf3187abc5463ae0555d89ed3d5d111aa045151edcafe7cc6530a62b617b2ed09d0fdb0ef3a1b638df8c5f855154e26f092ddf6628084b450c254d3214b506abf9c59c0dfd24dd0088ce9acb5c517e4335230fc871a8763c7afc02c844fcfa9f5c5c9ac07f6e3ba0a508c20e32586783554b8340dfeb6404e64457b8a48d1be50701412272c6d91b4ef6db72a9855cb6362e84f5ccc667d4c17afe2b663a078895f19412e604cb62b8cc4d5c2764d92ec80e04d178b827146476ca04fe50a23f529e4f68a1206bb5b64a6247a2bda9939cb1b7d5132e843e0414e11418e9e8f82d9a6e4bd6b22e0ead42bfd3bfa3149663e02047c3fb8f4033ca24e9199c8a1041c6a93b586e6d2ca4b05ed46d7243a05a6f96b4b7230de8f58ea7a899e1e3eb23bf75d762d50c59f18d97eef1f740c3353195e790aea9c8b3e54611c96e31f8449f82b52edd752a85e62d0f009582914acf2cbe6e70023f51a680a3e7175a461976800adf9f0d1d0c67917fd1697aff7605f40171400baaf8d22215e5c04424360476f0e81a32b248842b6913871e6d2114f9fdd4c5b46d3f9f7b0570d5224bc2c54849800a71a25acdcafd19f652dc9dba822a5a8e7eeda9600e479535b425b153671616418025ff4c8cdceb3f59ff8cbac928c624bf89ec3c895d5c5e1951f7d3334af5cd72ee577156465c554dd62e6595525c09ba4fa7a5391767a962678fd847278507755e754629ff296e04a1fb6e3fd3fe2d790f318eef80948303c0a45976271e90a0350cbfb9390b07888fc8bad052b675d7f2b08f23d46167d96973a42e9195d7a5de572438b04530b79a43fdf8fd75a202cd938c1714d84b0b2035888855bfb11a6e9f2541e5f573249a84c827c3c726175f44bbf62ab70c88521e7ee9681f348a0557866688816e41b2ef2f0594a020554ab9c5863cc989bf684ea707eb1e29ab5f893755d9471f0a1ba65fdf9a3a8583f573a4c99bb29f076817a47a1dcd26ea6cd655c10078d02ba7e854e24918a8b689aace400a20ad86d515ec0c63ea5c1055057f7da04538ea29852f9b4a211d0e88dddf8803f72531c46d710334dd219872218f0f1fc7703085a4d1c2b88d7ffae260a06a4c88974765d07eda5da5ddc927b5888f768bd9152cfc7b48e04cd88673b3c08fc4023922c0cb3b47805fa69ef947d0c56dba51fca1ff9c2dad533b4f418ef2d20240c90565754f6ab22e8223498e5e90ea5b85ff33ad11834629840b3b36f2003b2bd7e3011ccd09fc4897412219fb433d22fd8e67a009b188ad6077f3b32e0d6c5c76154bc08128f36e9b309110e14d6b1eae83e22e36f12cf60697b2ae433b2a2c53868ca2fa13b063c95b7fa572f56e907d22cfaa1698d4435c736d3bb304cacea531da8b93d2677d578e0819808980e2c7da268088a166e04d1d34988a26f0c0af0031ee19e59b01531d5273b81edff724d86186393a266e37799f7118534bcaf579b7f4b06f741fb752207a93353f072f7877bc5d39aafdd9d73e54669b06210f335071ef30649f46c37b7bdfef421a39c79742e21c5825feb022ae3a4e0be4ae10d9e66171da54e171c598b32949ebbe0c5123409192e590556ba058567f1da9e6a79156678c1103b29a4d072db7999fddfda74c5e88eba48316c853e2d8b34c8a06bfed03521ddac2cb81cf27cafd70e4facc54ac5d45b1bbb9898f25886b3078354a6144a8a14087fc3928a9bd2e2e4f1023e1df4eaa83e1619a9f0599b5e19c8cb82615674e6cf3f21892146411e47227b6459943100a4ea14ddb9e7aa2796a603e563425f2f672a38498047448b492ab6afc64d8c3d31d052e358a47032f34ab38c044f07ae06445430c64920e446501b373c3d175141c171c8db7e24d4400a7c6833e08c89533b6d80603f4241e66a2b27d0f9b0957f1167435f417db1b8ab5bf2c75ca0fae0e7e3d3104ad8bc045165969eef30ab3446ea7978e2deb2b61a78f38132bc4b690cb59541533f0e323b67dce7a84f83781923c169084559270021cd02b48563fbe28837580e18225c3b3794cdf76ba1a7ea0137956b606adc208bdf5bcc40f4d2341979fa7792ff1837f9fc02bd927a14006dfc4fbb13ca54cba1d217df03a58fda05f18262d35d2d5c6d50c2c315c098ef51606821c4a23b3b08fd2f1ddce12195141dabc647d43aef116d042ca8165f2c01c06ca27becb5087519beb99c226c17fb5717f00e0d4a76aa415e1f95159dccb2ba4469e6365e894fbb1760393d806936ecb6dd696c65456d85c8e92ecd69940465fbdecc2eacdd510aff66d7aa25aa776a3b45be5f0d71e03e6467893cfdaa7e7b1ed61971bbc87dbcbef04a1a42938b582ecf21adb8d1a5837e829d78cd6d64c4b9a7cceb1ab5348d5b1232430bdd223b7057cfa34b87c87fdf809df6c1d5f078482ad9656e098e917b52ba494b491f03269f8cf18d6ba6e8d51a4b549457f2acc1a42fbb4b06a661ccbe3e90f1ca6b37f23200dbba1b8e0846d8c394adce67ad503cebbe40585a2c0528fc13f084401b68520c6e83d0b377670eb54f9a07c36b5ffe60fa2fd4365a7c786a5421d7537fc57c8de13c6c1b315c69156461f24c997fb9b580df2c18cb9fb670c7363430d46efbdf5c6d012e86d3510a5380e47277b9a214800802991b20fc83539ecf66fdd393c7d537330a8261486cd531de7075b15b53278afadb53feecbe0e73f04d3a775532f606eb0ad41e210f2fef7bbdd64582026fcf7bd69009bc01e6f4b5ffc4d4711470e8b4893f18f1ce4ac9984ed63cb565cb62bcbefe097b6a1cdbfe0d875e9e0a2d3b6c70636948e25dd4e46c2104c7bb7b2437d8f93ed559b98ff069aa78aa00743be6e1d2f1c40b80df9e969f73485a0bc22568b8be2cad62158de7dcce717a53f3a8cbe872f93adc732d0f3c9c1dc0a579fd8e302669561a19e17a46dad631a64fc88bcd34492ee52d6715bd738f38935007ff78caab00e90b36efc593e2eddacb3762d1ab5de1bc7c40d2e0930fdb682aea102de4e9d191a514d03d537f7aec259edc672abd701f7c1bf555562bd46f72caa6000ab851173df7fbeeec4b93a2915b5bb40a1c1b557a6339be6c2eb228b5f7561e81da0e716019eb2b2d0277e2c746a6cb4b66f1673086fa8f9252561c229763524653b02cdad9c4fc1427ac24bccc0577b82f7303cd67948fe4a2a8d1e8e4ec715853968944193b4d4e2905edcaba91aecdee2442b546e21dd0758128ed38a3b81dbb894255eefaf0ae8246e1433cc9aea2fe29d9712783114a71d2e2405176166d137805b1ac717b1cdb639fc9c373f7d4d87545bcc0956838e01a27d5d1c1634f2e8e98c196dc7dc3b209e42ed46d8fe3d7d35299fce0c3f176a3a1f0e084e046e9872b83ef16d7ff0e491ec5d02158d7a8836c824c12443f5c923134ce112f726fe3b4f3caa65ec39c0e022decb760a32c2e291399bd01108618ba033b2d9d9d4da56ba7c36d8b2c02e6b7a770fe0133469c820b5de2d196a679a2b6da0ed5aef0f6c8490896379764ad064248f3c888eca33803db1fffaa060f56204ae4e8766bf82d66ac1590adfc0a5efa0bd22e9943a1dc6099adfa986d846715e4c3ec7179411bed4d9df1ec474e308ce961111b42d8e5c7f09142c23f41f0b2237cb17470ceec6f016111f84176b30746d4610e879f6b4ec654e8fa4616fdff6f3ceb420577ef33e43f6747b838e14ab8c4a42302d10c0cc466645c85790914ef2e132acc5fa0c4744e186f9c73fb819427339ba4990e61768a181628b2eed7d3f998a3c703197cf526f19f88e36986766c8626fd175b49e9361ca40214c889881fda3c2e976f838a87fd28f7df2f38df2bcf11672838c79f728381cd939db119fe2dc0cb4d98be309b63f481f71ba57c8c7c7f251ffbb60e8648bfc33d8a2ef85b2e9c70890c2c646e703f071bcb31f1a43ec9317c00ff7bbc423de78b98a8a3ff325cc9a35589ed36aa4222b8a4d4eb20fac20e8a7788458dff54697dcadea923b84f8ead5ae5a9c133ebc11ae5dc22f5342f671ebc2c5d1398c35b4da8c81bb43555dc8898a7ceb41e793b79512d2d4036cb6264d995effb12d1547eef20228b0567b2cbd2db212ce577f0a65182088a20da040619033afa19e591c692e25e87d46cdc4bd012f6f0314fe5d309a779cd222f940beacf09ff8e7802dcc69aeafb98bbd8bc2676cb1c2ee31ac26075466cb4c9797f85a0a6745c174e8a93876ce1ff926ecf267be424e648e5d29a3bf35540359bc0bbdd01eadeff91999dc29276dca6e764b2b0df83869116dbc395f04d5f3839dd2247217b4255e597bc811c8843dcf4d061aa1d78f88be5b2e8f07b8ea43768c9a81a86ede17f71ab0cb62f7dd2647f911a15e28dcf0523c80d25a8c991b1f70860438860f2080e184e1a5fb16f4563f133dd9919f2f81b1c0ba7ae9b51dfa7e6d9ac3955e752177a7135e13f01a65585f003acc3af153ba4511e920cb80f97021daeaeec9b413ea8a401f698b45373ce883e292db0701efc5a1a0a67f8ebc3ae1cc7eb6973892daae49a0611c86896975d9134403fe046369741b01018952ab5ab59b9627de5496a1a6ddefc3195afee78f73899ea5873f5c2c92a900d939aaf866fa349d256c23c86ee15a63209c820f20c7013d7647366515b4cdad0f9fbfb7dc87820a1df016e5af5ba69c98ad84f637373b9caab150c85c150a78b3fc297f98b955268137fdb5f713909f8fe744281066b46222cc0086ba80b49d73aa5458968550a58132802ad14a0b93e65a969dbc108ca242cd1479daa2d96a1115c3f6af2018cfbfb659255ff6d11f3306a5515cafb95cf8e3dd9d9296af0615977f6a6e76b86be49bc89984fcd5c8e695b76ab2b040c16b04d9cb353f97968c60f16b5533e8b659b492f87dcf478a0381fd0b34112be54507ab9f0d72ef2d2cbb96ec854987df461f043a232a917b280af2a8fffe2fb22372d7e622d8b0af3daedae618bdc40ba2b9f91ade81c3ac3a58859af3a871c1fb69f2c93b724b8c5cbfd7fccf1415b7d10f5c7ee635a5a2b238a5fc4d7254a5367a84c555fb88df066b33cc4bf314a9dfaece05abfa2a983630daa6d9cf61dbc832e4ef708f289568f3cd8442ac2c43025aa620b9d94c655006e7f9f0346310842ac5a02881b74dae65eedd6b7256a89edfe214e87d9e1a065e0bdb2ce515a99fa617d009f5335cd2417ef32db097388fb9f875c6e03a8142c602c9bf52c291e0ce7edd230136251be2a14fe0979f31fcebec18b1ef4f0d2e7236e022b05801f119dfdb8507d0a449a2a7d9396069a9566f09a386f9353851387996a7009c529a844cd54b158f92c7b6038166baf6a1506f519d1529eb6c58b8c380ebdc73b8d72d3587c40915ee43d2e906310e7de34dc618fd9479ea755267c0c93d554b801a3c8a8f95764b3f34ac0dbc1eac4c36bd2dce4c04ca50365d00559452c8aa36334407ac982901322b0c3924a161d8528007884f2573fce8528474bb244e8141c9b0212c21b3649a541e4c5b274f0b9e908de49c6957d529e25543716695a6a580bf51b175a729e06de6c6fce95da1d339c32ad6889543fda34368160fcc0ae8ff9f1bff20f4d80f119117133c5e892768eb626092331c74ba441ffdc30ef4b7eb5799344d5fbc2416403de9efff598d6ed0fbdf719c505d852fa8a47fd46ac7f9323a799237b2f0efe4a87e3a761f500b0d14d9910056d548fcd6c66c89532683863988116f5c1b0f44cd43030f48166339951d223f7b539fc74fdf5a3b98917140909359bae542557a729c6ee089636f090859fe0dac8c5c43830e01afcee92c31bb7def7b783012cb19841e3c6ae0c4ad2576606709345d5697685cb8d2a50023424518365da7ad1afe80d602da835514f071d1e096881a0b7211f599b35ff31558a9e6b84026ece808fa99ab577c96f89716e9aa694e0289386278ae8fe284c22169932e1574229f8f202f504287732b1ea1465c44b4f96cf8be70696f8333dab3c34f30ea65bb78a3000de06820e79e4dfbab112907664bd71ad611d2bc59da362ad568ba3501852a17c032430e3fc569f226dd5b705f636f8bb11c27e73d543d769968f734c9e833d7c119bea4eed63a0c4b9029ab2afb32d46869bf8bd543ce015e9bbdeb9bda18daa9d49462518bdd60324ad369fc61186e662e712acab5f90d6c3f449c2eb36da1141a65d7fc5f29bc888d3b4526a27f86c2f9cce22bbc6e40c6d03f092e2ac43d986baea9ce72956dbcbf42ada29c8a8d57db66c60bfeb4c2fe143e0bf2a8976fe1ceb158669d96867a399ef181a0d53a696070d5fbd5c75ebb06f15118f2ae7f71f699a1999dfb736fb150a1adda2fd00a5d7975f2d42b6138ad86d1e64108c883266c714ef77061aacdc1d7ff6ac0d51a0ad62f27fd4a31615575ad5e84f6adaf7f498c594ad7c3e43c1f1a6118215df818afa5bf0f443247f8fab9779279f1fb2af10b970de04291c6d22db50d608260fee0db72ee964c283899e7ace51ccffeaae199251844c8cef857a6a928834cd7ce03d85d9d29c3853d64386ec2e7b498df65be25bfcce2ad0f92f1e25763d222b21e8d823716b5cd3bf4c9f5ee73b6ddb0471709f25803f8a767fffab85fbbf006b0f998f54b552822cdac45d630c2860726c3ce9129e63cebcf8d1e6bbb8ad23b61af8aacc3813df5136ba1869cdd693524fecb9a1a11491d32a76ea02c6e8dfefe0a4eb21159ea4f3108f490cb914d3de2442ad10b2d6c490bb873e1df70463272750eaaef7474ac9814358f9668b7433583be0700a14cb60c48920a64662067d39b563e5b1de0898a137ec388fe21d4ea5131bf28610e777341bbb82c8f1e39891509c86f70518477d6cade89f1a80805a6a708ad07be1af146e1654e1be926e9e206835023ea64e7c7a73af0196e8a63b76cc2d03547c731393e3f9c4ed97ce19f090a583bc775c0211f3b76ed2a2bc35a7e46f6546df77c5356e5b9978f3e3ad2025da2815c0c84f2f889043b14fd58a09c103480e7171275c8049502fb9e762f2a379340d0fd70432d8386b760b5c551e0ac9d0e8950690cbd253ec249e65020c3b67c5f768b838d0265536e0ddcbe651ce76fd9d2d9627400c6777b4ad3944beedbe40724ea84c363d1590533086c74cbf3e1e68dfac0caa0fa3e0c405fab519b0e26cce6e619546e6268d84c361af3bd16ba27d219f213ed95aa3b54a7a6af361ee6c45edfe8d68be4599cce969d65153ef973ef527d5e68665024b30f997daf5b75d2f037d226c9d5c5d56961c01211d04f3ff4c945d95a123be42299fd05ae63b77a4d7f7656e50ef0dd70a95431b192c228d9ab8693110666434577f8ff93f355ddaeec9e0d8170a4f796188b93761f553de41fc7567698672195b4f212bd6b75b768413bde712e397643f8d3361896499108cf16895cf51d7ca311296569da7357e0cf71e4e99ea4671c57a1d5550d42301e343fbed43fe78f88ce356d233723b40a238baa013243b4e1ec75f0a8c5d7e98e87239d3ac8f74de94faf9dedba7b2443c01b416a6a76e9bc8fad2fc320406b0b046a8fac4023e88588390239d71032596620fc9b7c41c46c1d20a40b0630bc3362ff84bdf412e2e412263a7932c65c62f4a936e945bd96bec545de3f912c81c5a4466dff96470f93a5d2675b50499f9182028aae2212286e2777cedd2c097cc575cca60ef3c35cc952f461dc528546ca1a0832dfb8419c70769adf2815f3145e5ded401f7064e2946509b8247fdce2dc668109a0033e4ebc64931fafe46827f5e7f9d59b2eff48655569e8d97ed82cc1c011353c90849f852a4c3843ba2b751901519f2ced0671141c33b19e7101d35090a6f5ea37ec0e787e90e64aa3e3fc4b293df4232f6133b3903343b1f901368bd67c595deb8a97e32dcfedfbf0d950fced6efef3a9b457d26f317c5be87c6455b16feb728029499cdec0c380e4b5f2aef61728a13fedcba1f1a57ab96ba3463b7b60008ec65220f25d342933548c99608799e7c119abeecc36c17646c82c5e87cfdaeceacc82761234858134dfc9be4db11dd69dcd2fc5673017fc7727ddbc7075cd5539fb2940d10d4a628b093d47235349e38332981b5c53656c4c358a0be18dd8c7711549eb970de57600c4f12a939f3068dbe7190a370681b230efb21fb657ba2a04be2d3dc64496a2d8819e89c22d5ddd6c8b73d908a369806c2ce8ca3303231806f359429fbbfa0c4f8e5e61d8395003ff1a750fd055b27e87e0a5042b39eb14ae9b41674cffb1429c01f7b4f5d9ee27f06865841016ec122edbe1975f7cf4a7df94b427ca54f0b218bbe7671e097eb5aefc3907791c9ee07dc1d9eeedf69fe405ec5331db666b4a223ed7533c25fc0ca6f4400fce8de6151c34b224aa233aabfd43c9a4d84f916180450c66f2ff5c57a08c8d145b6f0f7bfc677314c21b866c8fb275ba1dbd81b9d15c404387f7e9b6ff2dd86df4d52a4869507b15ea74a37b87b153ef22f9c1bb9a3c8543d1a8fe2a9e8f64b1bf8720827cf11d002b65de4c5b699969243e7045e421fe86dc3677563da21adecb686a9fb6bd5473e13829bf2c7af4c3be5e8db0284c3d16b4f9ccd1926e04577f718ededbcae973600e814fdbaf61539936ec3e0c5ae196bc2ae950f49ebe9bafd3e0d806280d9a24e9748c53fcd103b4272b59b0c53061206285f384e15354e742554685921cfc5029f47d30d62f5bce50d7872e7017add7d399fb0618ce77fe618e5113bfa206d94e04288b5b1377c982024979dbefefcee80dede9013c57f1f6015a2eec9343061160dee31933614c11a3a210afb9e181b74e5e895917e6dd97dd72a3873bda7780634a9af3c963c3d6aa0ef7962ff1b0f6adfb97093009d66ceeea1740aabf775f24da0748678fe7814d02625ccf4d18d36144f740ead9f5737fbe9ccfec2c0cb5b5360dd66c8c357128a31cc81738a953593c7c4fd3afd67184a5b30a7ac3abb75ff5ed6777991269828d1f017ddd2c7327444310129f7b071cc0861d1cc1ea570365c2c66a3b50584fd42bcdc87819b7f88a0c3749730ac77d9fb43a703637562998ab36ca43cea73ab6672ce1e5348be5ce9469ac346c80706ded4dcdb93f08b09b972ef542848fd58bc5b89f9271ed5c66104743df94af3447c351829d25d4db639c1d1aef29a5167f20204d17fa24b2658b8efcc895a095866ede3b6a54fcfdddbeb1a794cbd49879a935a18ad0f10174727796660656f2d616a081a747caff99f939b6dfe1fc8efd6041a5424063f684d513a89fb9857014009344d7afc9d4b3c74a3023ad4544a94b4578dc6ba48ed41ab311175c2c629638982803fe5bddd411db92d80d7f1f64e263af1f1aa293f6cefd3d20cede704ebe71fdf2654a90c48e44257949a3464c88d78fa711001e591e885031c991e6714085c1cfc0bec20b55dc7e05be586de60a975de29b50166fa27265cbbcc5ad6e88b96ea4d8bb9aff5441278f65e8a524138035fa3428082cc5beb9290a3595d38fe1530a6f5215f8c2ef39e2a5863bdb2e401b4b7be985cb4377f26d2077b0c89b78de8774f1215345799e2e80fc8f7bd188479057adf67aedfee5d031cf692a0b6c96919eb59c9deaf3bb67ba5795adea845454ce307e0af923a1877f795b044a3b839d314d71d59cf1976fb9e400b966e029284ef1e46cd59b881524f79907daf3b79bccf5a2c487e164ec5f68349d7153ba9c43a9b2339e2a0bde15e02295880e141d710ea924f9fe95e925928f15d121e23d96c00bf87effb16aa32dadea401ec42326c7035d6cbf8ff1a3f2947c2751d7911f92a2b894f9954aaca6732b2a9dc4538258811a0be6eb4b0c810ee9afd94afe327792c5e1270a9bfd7d663556e15d8d4b831587d8462b9a5a36dd151dc8e597ea953bc1f0b6149191ecd73bb04b002c4bdeb5f64747646aee43723bc33251535eec2e8d535d21e64d84b8b24ac8c766069f122229d457a8237c353675f2d82bcdcc5dbbe7245eb49768c9e3f53d4888d5b94a4c617255733a8e1736784b25de32e687aae70238b171fcb15a5cecec537bbf38218987b49ae89ba5ad63b284695782ad51a785bf8d54504374306967d03933cc0110b4556a21b5a27371156a12cf498101718dca35f2fb021f3e14bc4ffd1afec197bd96f35245ce7dd4471470468fcd3a1fb130452eee9d45f0054ec5ecba25703c648f59a433f44b9250c4283c57e898bbddb4eee4009a129e4472654db3de05a6e328a4cf44b4e13b39f8c8f0ce3346907e7ab24b84ac72e1b99fa55fda18cbaa27032d08de7fe2c7f8df219dc3830715ef0ebecd691d94899b871deef1ae893df9a2b24bb4b2edf4e35acb77cb224e10b03c7cfd6b95ed709522c695a63e423c93bcb9fed0bf287111537065d1f5bc7a802b9e86e1e844164e28f1c19657f8cb526b93a483ad62f1ac242c85ca010b10c2c9c985a0fe94c184a10d39779125155b10265526d0533f1fbd15a8ce7ed708cbbe8b3bf576d538fedd77a3a470668c83904553d25254dd8371e7b4755cf1f7c6ff88b1993c83682781374c5f15f1a5ad2a562ebf7f9f253cc14787ad8e14d369c5cbbc5ba9b728fc3b37ec3300172464bb49f0a9346a65ec3592db08ed21815ee0ed0c6ff0da239e8f69a6bd7565de84e1ab26538dc8a23dd80d506b0204c1abb8821ea6a822124d2220194dd834bd3feb0de59f9e4731236b914588b567fdda1715cbfaf14acd9c7bab8b8dd8259df2cbe3701f3ea5597e8e7324b83b91c6d4a05116bc1113394c072600d23256dc6db35e5158d975ec1135e17d761b360684045bb71bc28f7e1c827c0de58c058306e3d81db279627f31624fc9ea70bd03388ddc9f019f6f9f61ac95604489d361a5d973e3a88b4a91558a92821afcf7741a0234c4f7b95b466ab731daca069e80bfdae0c82a7b272d8cce9a459428a2f9894b31913e044811e2de509defeb3eecfe443aee0b06107321c8e3bd8495f8b557654aba291a4bd9c37d7b0f9577d13511fb20a4c07f65a73c970e190fe968cffedcf8256e1f3b8eb0ea7c3f6e07230ee8ca9f9337886257f289ba48fa40f86e1000cfc947ca6caae077b6a5f56c72f9daec1b8641062020e66b3a1f07a6118c62db98cb9b44a2e6b42f29d480ae03853be9961d7f72a481389a9be0095d03343631615a0f3e426345826daf6f737a058aa470e7a94ed79d5dd820ee496162287119969cf462a602096f8fb7fce60fc03f8861dfeabc9738ea38ce8a9e295f91fb62bc102f73df4a6e7874568eb3949e7c278c49342a9ad108cae7c67895312527e4bb6dc2dd3389627c5093899a82b46ee0248a84249c1b367008fba70e6446a487ef2447b0a093d07d3a496209ebc55c9e0b0e0b3d268258a2b678e03965346a0ac621ceed24b1e546049d1e86abf109db16593eabe56f2584703c75ad85415c91926bb978161f46654dafc20f1db43e445c9938ac5067be61e4e95b57f074c2c23349ace61ed730dbf9b520d3dd23706a4d6d72b1eb95fb95e1c2fcf2943da1289be7af45a3561c69e00443c38c731a473b220d84e6a21d69c8b0f37a2a83e2cfd892abb82e02f1cc95cfe09b19c96d8f1cf257abd780f03619cfa9aa240aa8cbb93a1a22706642b1eaff364e9ba74b5d65335738422df2d27b420ea93ce69b387aa1a953692b0ee96659fda532cbca63f744e69236c98331166ee638f1ef3ed36c5b2ee4168295f1aec684cecde04b1b239008f22665d47bbb972ef89ef0af0fe3b1aa846dae6d9186f4f6e67fb6ed1a8bbc2c93d4543cba99bb0c0b569df8b38421aade937dbbf4a064ad18c9b78bdcbefb1c2a9a6ecff2b1dacf6fbce87e5eec12f37533bd196a8d9fcee49b6aad112c1544f18263eede2f63af3991f6dc9b834186b5d1122245f402d921fd55f1cb25fd7539400ebea3b6681d50c7c7a3705f4a0428db13dcc1e7e32f11a31e352a2040640838a4c62611363ade77b7997e20a6f7e4c489e2c251c70354eb67817e137fe582d5949364aa6eec9862f7fa54b2e6ee0ff59c6b030ba170a4bb88a5a47bb42e5b333e2f0035e8a229f35825d6312a24194e02f1e9d0644361aa7fc8cec613dd79c486f1a0f9485caf774b8e1521806c2c697d9f0b45405944ebcc432954cc464a7da8335ef67465ec6e05166e441fd83a8b0dadc8d1ef06142d346fe17b63ec1cc25f8deab3ebb7896799ef2a9c75fecb69a810e7f2ac7de7c4283f9f9a690513f835a44056ddb7e7790876ac1d918cf57be8bed4f6bef10256504eeef3fe4f6d694bfca98eb8ff8cc83ad2eb7cc660c00694ac565e76afcfc932ccb6e59b1e87d870a3ff59eb670ffe20987cbe68ce5d79a58ce561b4dff554541dfe1de9b7002a13777b58497bd804afff618ec2fc6eaab2348839a0373f0de2b010542a738675f96a370547de2130d2ec7594b3ca45a18a69bcb0eb767ca19917ea8716d1ff929b3567d84b1f6e536336816d5338d2079bf02051e766f0a24495a89263587fc0934a39e054cff4464e904342bd4d29ffc2785bf215e8db66cd880daef313072c70c9c9c4688d1ee2035d83ca83a8338c4137c0c487c4deef6139feda890b034cad4b6807d8c20e75dab944d2fa2eaae7425fe89347f5c3a89632a296dfdd096b47c87695f3e3822ebf7b4dd45c23e8c4943a81c363f9f657ae60b361dfade339b3e71c09385e24e6d0bf952748e5d315c3d8e8d1826d2b74a262ffc2002dc8f870d9368b2362d5d85bba38b60960da3b7600fb338d5e07260058354a65af561691809340cffc69790588f3e484d65a870367390d73898ab232f5c2dfc9967d347b27a29a3da851ed582fcc0d4ceafa1b36f82189840cfe912dd2615efeb7f3a4795d9ad0e269e51c55e45f42ff480aa6cec787cf38e98ef248f5ad9d6be6cecd4a46e7b89cd0d31058bf589dfc66126ff6c4b950dc58af23d19a9522b0a989f3275a29108465ad8bcaf0162ee649ef04a4944bc9cd388ca1d08520f5f181463e4c1edf994ed882441b89d9c5ef0a2a0a56628c90c886bb14a962b784607bb3f7c4caf6c68ee5ad5b5b7f34e229a5b0e40c06b941e38dfb85a19bed7cb2d502800f698865374cfce6676ded14feb9b29d0d04bb18df44de08afbe119e8c31c72df330edb54e57c1628805cbb89e1ae99e20434f2b0135e572512f28b1ee21f26018a55085ecdb5f93d16b254c4d151a5fc7cdf15e3cf5ffd318d18aa9c3c0950c76f8d7fecc71e917a59bde5b763a82e511ee6113c3b18787b87547820c023e17c607e6c2d7ed1a378268ea8bc4aecd9b34ce14261bf2c2a6651adbfb2e47c07e560c501444ddd2e28170589a1f21b154de245f81cfb9e7dce2295b5e71453fa119084349cf1eadca5db25826527a10303b295b80f5a861f52a10cebd002cda862088ecde32e6b801f547de8022bce6b01cebf508fc9c204a40c352f60b68bb75f68bbb3813e1c980873da1105ecd4c1fe00ac25c5d9141b712a3d1e8ec0c08f910568b354236ec63abad3d51339263458704a639bdcb1102f302fdb37d585332e6e01007df69826f4f4551a2259b7c5719915cf804d0face98eb9d659d7e3eb2aa7aef8f6d6a2a11594999656ea64ceead5a0cfa4372ab8cacc53ee58bc2b1a21007f62610dab4c76ad2cd12c69ae3b13ffbc6669120202ac0f9b434913e222ccf44c66770d9b9626c874035b9d60557cc5d7ba6df2083a56ca77ce5c4e5770795f22630380c7508cec4f7f16b036d66314999292a007d26a13e172af80a322ccc3da4e5c354cf7f4d00adcd3cd41c08ea722fc7e09346a02252ba364418d4bfd0a1bffba6375ebcdb90749150fe50db4c6f494587cc4b07f9787d1e58287e79968f3984713035bd31652c8cde082c26981f26349c8be1951bc6ac80028586e52d8f0c0d75eb505ba976c0e693beb8e42d09dcb346a87439d75a6750629ff0190b166f2b5892610d3a8dd9bacab29f0d5d68206fb148dd59b045c481c49d706a5b088b4709564ddf87f851c136b9f9237b6bdb65f63f2030d0d06a45efa1c1c67a81798bb7f7b4c20e50e8a6b2b7bd6a7c7825c34a8f5e8607855b4a03cd8a3a19b0a91193ea3200e93a3fe24a5bded4d642b229e5480c15c71b6b25fe779d178b79c16ce3d89fa84941eb0a2b368235e76aceab7f2e2e702cbc8ac074964b0280cbbfac3b325eda3bae9caf4b08420b9443db4c32ada322fdabf132d7934b16b717277ccaf0fcf2b50d9596f00b1e09c766f8910c6f84f32b52ce5e476b95849c4263f0edaf4deedddf205450e7f7ab0e9f68d2487cc2d31caf2458f4b04f81f9c1ed3f8d6ace41ebc5eb2a5a3dc4221d9bff7ad114b82af754232a3c5a084d5c52b456647cb89a265b3b00dbd818c2d349d1b58fa1ca54905ce8445caa946d9801c277f57cccd512355cb843925b75a38b16a076d440852dc30553528668a188b0b51f5c92de1ae1d941bb3ff58e9baddd74682eee451e775139f7aefa55ea61ee82262b0518067963e7437d46a1b2bdc784bf7ed466d3310703d0cbe048181eea7e6445dae470204858172ac257c0cc6f12e57e5a34daf12d97e3fed0a39ce3f71bc4056325e2875390ad89f4ab49a85f1f3d80a7275cb80d8dae5a1ff6bc00e61c06d5e0ab47778c0a3cb47c6f3c6009c91c49f3d18c164b55e1731e893add96bb5ee016f2b3ac316000100390518009566e13fa5de2b9e2c1d43be68db2ec631de37ed36bad9949bf98b4bfa241083db5f4d7caed9f8577df8a1352937fc3f4a2884b87572378a66439551a957c71693b1f336cc1d7ec7f1b8baae829fa1f0a80e57655bdea8b1e35d7a2fc4d90c7a082d79792831304244cace4aaa481da30f1a1bd58214c4229c74628525dbf07600bf4fd696c832817873b1453a434e5f8c89f4bfa1e00f76f449bde3a2d2bd9106ce7a457f3ea2e2271f5964cc56db2b27d9b6b26cbb581adf321a3613ca7179848e28468d72527314624be15253a021b9cf6e2137b8c507be62eb63ff31e97cad3d6cf9c9009bb1aaa3cf2b34203eec091271c4e0a076360afbaae3b7f447a75eabffdd0af8d107192fd56b2463a11b47ca1c19fd4374c984806dacdae017acf39ce10320fe4a5453f5ea210a61f700e1c9b3a113a1ee0ff235508ddd0dd03a21fe65fe04d29595bed4633a01f22a2818be2a4679d1df90c5cf23606ac5dc774c4b57f8f6482ecf8c38b0f2ded6f53db41b95e999786afcd3f655b7c8be477345a819acf77e8745acf0f0af635ae845ab3efb9599d68df0c97fe25d507320874ab3dc27609ab12347dab469c6b595bb8e160855fc132b3344b63563cc8add2be4a0d936b4441c0d37f5c376ddd1b6613229e13f4df0767dedc0654aec732cbf113edcc6684e084f03458fc370ec900ca1268de6f28296fd4ae2cfa41d810c7183f234ed16bda7de512c8e31133e61f9756f0b69bd314c10ae3acf00510d2d9b00d00c0145c3a5a616017ae39392cbe0422aa501ea4c47b02a15d8f0cfab3cbadfb21cb814216bbbdedc0d386e7bf27cfa021e726e678058dd183f9563487f3c5fd443adca382e2e1144e33ed67493223859b78d265e15c9e752fc4dada95b67742264f2be1adc6bcd7096cf754e8cefd4716ff56559f353a87414026dfeaa8896b58211cae742386506ab5c3022349ab493fe8e221d1a9cd7e83367cd4dcb0889e295814a7f1e02d958807b963783bd18bb05a78e1974e9d508c06ad8f86b1b6e7cab0f13fd262e942e8f89a01accb9c50e9c3aaf4f58a3fdcdb14d4346f7c471386fb76083fe00975681afe7acc50533d71132ba7b8bcfb44</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hand over Your Token!</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>SpringCloud</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to sz-education</title>
    <url>/2021/03/08/introToSZ-education/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/shimmerjordan/sz-education">轼辙云 (sz-education)</a>  is a new generation of microservices teaching management platform based on Spring Cloud, providing multi-tenancy, permission management, exams and exercises. </p>
<p>The exams support single choice, multiple choice, indefinite choice, judgement and short answer questions.</p>
<a id="more"></a>

<p>轼 means handrail at the front of the car and 辙 means the tyre tracks left by the car going by. By naming the platform this way, I want to express that the ultimate victory will come to those who are forward-looking and have a habit of looking back and taking stock of the past.</p>
<p>Deploying this project locally can be found in this article at <a href="/2021/03/10/sz-educationLocalDeploy/" title="Instruction for deploying sz-education locally">Instruction for deploying sz-education locally</a> </p>
<p>For some factors, the deployment tutorial requires authorization to view, you can try the password or contact me.</p>
<h1 id="1-Function-Overview"><a href="#1-Function-Overview" class="headerlink" title="1. Function Overview"></a>1. Function Overview</h1><p>The project is divided into two parts: the front-end website and the back-end management. The front-end mainly provides examination functions, while the back-end provides basic management and examination management functions.</p>
<p>The frontend mainly provides online examination and online learning functions</p>
<p>Backstage management is divided into: <a href="#1">system management</a>, <a href="#2">system monitoring</a>, <a href="#3">examination management</a>, <a href="#4">attachment management</a>, <a href="#5">personal management</a></p>
<div id="1" ><b>System management: provides basic management of users, departments, roles and permissions, etc.</b></div>

<blockquote>
<ul>
<li>User management: add, delete, change, import and export user information</li>
<li>Department management: add, delete and check department information</li>
<li>Role management: add, delete and check role information and assign permissions</li>
<li>Menu management: add, delete, change and check menu information, import and export</li>
<li>Terminal management: management of OAuth 2.0 clients, such as client_id, client_secret, access_token validity time, etc.</li>
<li>Routing management: gateway routing management, including the addition, deletion and checking of routes, refreshing routes, etc.</li>
</ul>
</blockquote>
<div id="2" ><b>System monitoring: monitoring services, logs, etc.</b></div>

<blockquote>
<ul>
<li>Log monitoring: view system logs</li>
<li>consul monitoring: consul service monitoring</li>
<li>zipkin monitoring: monitoring service call links</li>
<li>Service monitoring: spring boot admin service monitoring</li>
<li>Interface documentation: swagger api documentation</li>
</ul>
</blockquote>
<div id="3" ><b>Examination Management: Provide management of courses, examinations, question banks, results, etc.</b></div>

<blockquote>
<ul>
<li>Course management: add, delete, change and check course information</li>
<li>Exam management: add, delete and check exam information, question management, issue and recycle, question management supports simple text, rich text input, add from the question bank, etc.</li>
<li>Question bank management: add, delete and check question categories, add, delete and check question information</li>
<li>Results management: view results, export results</li>
<li>Knowledge base: add, delete and check knowledge base, upload attachments</li>
</ul>
</blockquote>
<div id="4" ><b>Attachment management: all attachments of the project are stored in fastDfs, providing a unified management portal</b></div>

<blockquote>
<ul>
<li>Attachment list: manage all attachments, such as user avatars, exam attachments, knowledge base attachments, etc.</li>
</ul>
</blockquote>
<div id="5" ><b>Personal management: manage personal data and change passwords</b></div>

<blockquote>
<ul>
<li>Personal information: modification of basic information such as name and avatar</li>
<li>Change password: change password</li>
</ul>
</blockquote>
<h2 id="System-function-diagram"><a href="#System-function-diagram" class="headerlink" title="System function diagram"></a>System function diagram</h2><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/system-functions-en.png" width="100%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">System Functions</div>
</center>

<h1 id="2-Technology-Selection"><a href="#2-Technology-Selection" class="headerlink" title="2.  Technology Selection"></a>2.  Technology Selection</h1><table>
<thead>
<tr>
<th align="center">Technology Name</th>
<th align="center">Tool</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Service Registration and Discovery</td>
<td align="center"><code>Consul</code></td>
</tr>
<tr>
<td align="center">Fuse</td>
<td align="center"><code>Hystrix</code> + <code>Turbine</code></td>
</tr>
<tr>
<td align="center">Client-side load balancing</td>
<td align="center"><code>Ribbon</code></td>
</tr>
<tr>
<td align="center">Internal service calls</td>
<td align="center"><code>Feign</code></td>
</tr>
<tr>
<td align="center">Gateway</td>
<td align="center"><code>Spring Cloud Gateway</code></td>
</tr>
<tr>
<td align="center">Authentication Forensics</td>
<td align="center"><code>Spring Cloud OAuth2 </code> + <code>JWT</code></td>
</tr>
<tr>
<td align="center">Program Monitoring</td>
<td align="center"><code>Spring Boot Admin </code> / <code>Spring Boot Actuator</code></td>
</tr>
<tr>
<td align="center">Distributed Configuration Center</td>
<td align="center"><code>Spring Cloud Config</code></td>
</tr>
<tr>
<td align="center">Distributed call chain monitoring</td>
<td align="center"><code>Spring Cloud Sleuth</code> + <code>Zipkin</code></td>
</tr>
<tr>
<td align="center">Database</td>
<td align="center"><code>MySQL</code></td>
</tr>
<tr>
<td align="center">Deployment</td>
<td align="center"><code>Docker</code> + <code>docker-compose</code></td>
</tr>
<tr>
<td align="center">Build Tools</td>
<td align="center"><code>Maven</code></td>
</tr>
<tr>
<td align="center">Back-end API Documentation</td>
<td align="center"><code>Swagger</code></td>
</tr>
<tr>
<td align="center">Message Queue</td>
<td align="center"><code>RabbitMQ</code></td>
</tr>
<tr>
<td align="center">File Storage</td>
<td align="center"><code>七牛云</code></td>
</tr>
<tr>
<td align="center">Cache</td>
<td align="center"><code>Redis</code></td>
</tr>
<tr>
<td align="center">Front-end</td>
<td align="center"><code>vue</code></td>
</tr>
</tbody></table>
<h1 id="3-System-Architecture-Diagram"><a href="#3-System-Architecture-Diagram" class="headerlink" title="3. System Architecture Diagram"></a>3. System Architecture Diagram</h1><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/system-architecture-en.png" width="100%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">System Architecture Diagram</div>
</center>

<h1 id="4-Core-Dependencies"><a href="#4-Core-Dependencies" class="headerlink" title="4. Core Dependencies"></a>4. Core Dependencies</h1><table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Version</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>Spring Boot</code></td>
<td align="center"><code>2.1.11.RELEASE</code></td>
</tr>
<tr>
<td align="center"><code>Spring Cloud</code></td>
<td align="center"><code>Greenwich.SR4</code></td>
</tr>
</tbody></table>
<h1 id="5-Project-Structure"><a href="#5-Project-Structure" class="headerlink" title="5. Project Structure"></a>5. Project Structure</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">common                <span class="comment">// System Common Module </span></span><br><span class="line">    ├── common-core         <span class="comment">//System Common Core Module</span></span><br><span class="line">    |						<span class="comment">//Encapsulate generic configuration, constants, exceptions, base entities, etc.</span></span><br><span class="line">    ├── common-feign        <span class="comment">//System public feign module</span></span><br><span class="line">    |						<span class="comment">//Encapsulate generic feign configuration for carrying access_token between service calls</span></span><br><span class="line">    ├── common-<span class="built_in">log</span>          <span class="comment">//System public log module</span></span><br><span class="line">    |						<span class="comment">//Encapsulate logging logic to record logs asynchronously</span></span><br><span class="line">    ├── common-config		<span class="comment">//General Basic Configuration</span></span><br><span class="line">    ├── common-basic		<span class="comment">//Public base configuration</span></span><br><span class="line">    						<span class="comment">//encapsulating basic configuration including Redis startup, gender enumeration, etc.</span></span><br><span class="line">    ├── common-oss			<span class="comment">//oss configuration, ecapsulating the oss configuration including FastDfs</span></span><br><span class="line">    └── common-security     <span class="comment">//System public security module, including resource server configuration</span></span><br><span class="line">    						<span class="comment">//Encapsulating the common configuration of resource servers in OAuth 2.0</span></span><br><span class="line">    </span><br><span class="line">modules               <span class="comment">//Business Modules </span></span><br><span class="line">    |-- auth-service-parent     <span class="comment">//Certification Authorization Services</span></span><br><span class="line">        |-- auth-service-api          <span class="comment">//Authentication authorization service api</span></span><br><span class="line">        |-- auth-service             <span class="comment">//Authentication authorization service specific implementation</span></span><br><span class="line">    |-- user-service-parent     <span class="comment">//user service</span></span><br><span class="line">        |-- user-service-api         <span class="comment">//user service api</span></span><br><span class="line">        |-- user-service             <span class="comment">//User services specific implementation</span></span><br><span class="line">    |── exam-service-parent     <span class="comment">//exam service</span></span><br><span class="line">        |-- exam-service-api         <span class="comment">//exam service api</span></span><br><span class="line">        |-- exam-service             <span class="comment">//exam service specific implementation</span></span><br><span class="line">    └── msc-service-parent      <span class="comment">//message center</span></span><br><span class="line">        |-- msc-service-api          <span class="comment">//message center api</span></span><br><span class="line">        |-- msc-service              <span class="comment">//message center specific implementation</span></span><br><span class="line">frontend               <span class="comment">//Frontend page</span></span><br><span class="line">    ├── sz-education-ui         <span class="comment">//Backend management front-end page</span></span><br><span class="line">    ├── sz-education-web        <span class="comment">//User front-end page</span></span><br><span class="line">config-service         <span class="comment">//Configuration Center (local repository)</span></span><br><span class="line">gateway-service        <span class="comment">//Gateway (dynamic routing)</span></span><br><span class="line">monitor-service        <span class="comment">//Spring boot amdin monitoring service</span></span><br></pre></td></tr></table></figure>
<h1 id="6-Interface-Display"><a href="#6-Interface-Display" class="headerlink" title="6. Interface Display"></a>6. Interface Display</h1><h2 id="Front-Desk-Examination-Subsystem"><a href="#Front-Desk-Examination-Subsystem" class="headerlink" title="Front Desk Examination Subsystem"></a>Front Desk Examination Subsystem</h2><table>
<thead>
<tr>
<th><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_web_login.png" alt="Front Login"></th>
<th><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_web_home.png" alt="Front Home"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_web_courses.png" alt="Courses List"></td>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_web_exams.png" alt="Exams List"></td>
</tr>
<tr>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_web_exam.png" alt="Exam Interface one"></td>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_web_exam1.png" alt="Exam Interface two"></td>
</tr>
<tr>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_web_record.png" alt="Exam records"></td>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_web_incorrect_answer.png" alt="Answer Details"></td>
</tr>
</tbody></table>
<h2 id="Back-office-management-subsystem"><a href="#Back-office-management-subsystem" class="headerlink" title="Back office management subsystem"></a>Back office management subsystem</h2><table>
<thead>
<tr>
<th><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_login.png" alt="Backend Login"></th>
<th><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_exam.png" alt="Backend Exam Management"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_exam_share.png" alt="Backend Exam Share"></td>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_addExam.png" alt="Backend Exam Add"></td>
</tr>
<tr>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_addExam_detail1.png" alt="Backend Exam Add Detail"></td>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_score_manage.png" alt="Backend Score Management"></td>
</tr>
<tr>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_score_detail.png" alt="Backend Score Details"></td>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_score_mark.png" alt="Backend Score Mark"></td>
</tr>
<tr>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_subjects_manage.png" alt="Backend Subjects Management"></td>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_subjects_rich_edit.png" alt="Backend Subjects Adding Rich Edit"></td>
</tr>
<tr>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_menu_manage.png" alt="Backend Menu Management"></td>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_client_manage.png" alt="Backend Client Management"></td>
</tr>
<tr>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_role_manage.png" alt="Backend Role Management"></td>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_route_manage.png" alt="Backend Route Management"></td>
</tr>
<tr>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_user_manage.png" alt="Backend User Management"></td>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_msg.png" alt="Backend Msg Management"></td>
</tr>
</tbody></table>
<h2 id="Systems-Monitoring"><a href="#Systems-Monitoring" class="headerlink" title="Systems Monitoring"></a>Systems Monitoring</h2><table>
<thead>
<tr>
<th><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_consul.png" alt="Consul Monitor"></th>
<th><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_log_manage.png" alt="Log Management"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_spring_boot_admin.png" alt="Spring Boot Admin Monitor"></td>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_spring_boot_admin01.png" alt="Spring Boot Admin Monitor Detail"></td>
</tr>
<tr>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_zipkin1.png" alt="Zipkin Monitor one"></td>
<td><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/sz-education@master/docs/images/images_ui_zipkin2.png" alt="Zipkin Monitor two"></td>
</tr>
</tbody></table>
<h1 id="System-deployment"><a href="#System-deployment" class="headerlink" title="System deployment"></a>System deployment</h1><p>See more details on [Instruction for deploying sz-education locally]<a href="https://shimmerjordan.site/2021/03/10/sz-educationLocalDeploy/">https://shimmerjordan.site/2021/03/10/sz-educationLocalDeploy/</a></p>
<p><strong>Article token access is currently not available to everyone, please <a href="https://shimmerjordan.site/2020/01/18/about">contact me</a> if you need token unlocking</strong></p>
]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>SpringCloud</tag>
        <tag>Redis</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-seo Optimization Tips</title>
    <url>/2021/02/06/Hexo-seo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Usually Baidu, Google and other search engines actively included in our site is not very likely. This requires us to SEO (Search Engine Optimization) the site, and for blog sites built on Hexo, the Hexo-SEO optimization strategy is used here.</p>
<a id="more"></a>

<h1 id="1-Generate-the-sitemap-files"><a href="#1-Generate-the-sitemap-files" class="headerlink" title="1. Generate the sitemap files"></a>1. Generate the sitemap files</h1><p>Two Hexo plug-ins need to be installed first:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save		</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>
<p>Open the configuration file <code>_config.yml</code> in the root tree and add:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">	<span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">	<span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>
<p>Restart Hexo again and access <a href="localhost:4000/sitemap.xml">localhost:4000/sitemap.xml</a> and <a href="localhost:4000/baidusitemap.xml">localhost:4000/baidusitemap.xml</a> locally to check the two sitemap files. Be sure to ensure that the sitemap file is displayed properly in your browser and that no errors are reported. Possible causes of errors are the following:</p>
<ul>
<li>The <code>sitemap.xml</code> file is in the wrong encoding format, you need to use an editor to convert the encoding format to <code>UTF-8</code> or <code>UNICODE</code>.</li>
<li>The URL saved in <code>sitemap.xml</code> does not contain <code>&amp;</code>, i.e. the path to the article in Hexo does not contain <code>&amp;</code>. If it does, you need to replace <code>&amp;</code> in the URL with <code>&amp;amp;</code>.</li>
</ul>
<p>There may also be other errors, which can be located by the error message and are not repeated here.</p>
<h1 id="2-Push-to-Google-and-Baidu"><a href="#2-Push-to-Google-and-Baidu" class="headerlink" title="2. Push to Google and Baidu"></a>2. Push to Google and Baidu</h1><h2 id="1-Baidu-→-Add-personal-website"><a href="#1-Baidu-→-Add-personal-website" class="headerlink" title="(1) Baidu → Add personal website"></a>(1) Baidu → <a href="https://ziyuan.baidu.com/site/siteadd?siteurl=">Add personal website</a></h2><blockquote>
<p>The add file approach is not feasible, hexo will handle html files. So the choice is, add html tags to <code>head.ejs</code></p>
</blockquote>
<p><a href="https://ziyuan.baidu.com/dashboard/index">Baidu Dashboard</a></p>
<p>1.1 Manually submit <a href="https://ziyuan.baidu.com/linksubmit/index">baidusitemap.xml</a> (There is also an automatic submission code inside)</p>
<p>1.2 You can use “Crawl Diagnosis”, manually - Baidu crawl</p>
<p>1.3 Robots → detect and update</p>
<blockquote>
<h5 id="Robots-configuration"><a href="#Robots-configuration" class="headerlink" title="Robots configuration"></a>Robots configuration</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">User-agent:</span> <span class="string">*</span></span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/home/</span></span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/archives/</span></span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/about/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/vendors/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/js/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/css/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/fonts/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/vendors/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/fancybox/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Sitemap:</span> <span class="string">http://yoursite/sitemap.xml</span></span><br><span class="line"><span class="attr">Sitemap:</span> <span class="string">http://yoursite/baidusitemap.xml</span></span><br></pre></td></tr></table></figure>

<p><code>Allow</code> means allowed to be accessed, <code>Disallow</code> means not allowed. Note that the last two sitemaps are URL to sitemaps. <code>Robots.txt</code> files need to be placed in the root of the page, in line with the <code>sitemap</code> file. In the Hexo blog, it needs to be placed in <code>./public</code></p>
</blockquote>
<h2 id="2-Google-→-Add-personal-website"><a href="#2-Google-→-Add-personal-website" class="headerlink" title="(2)Google → Add personal website"></a>(2)Google → <a href="https://search.google.com/search-console/welcome">Add personal website</a></h2><p>Similar to Baidu, it also adds html tags to <code>head.ejs</code>.</p>
<p><strong>You can also verify websites on baidu and google by means of DNS, here I Google is through the DNS method. See the official guide for details, so I won’t go into it again here.</strong></p>
<h5 id="Manual-sitemap-submission-even-for-individual-sites"><a href="#Manual-sitemap-submission-even-for-individual-sites" class="headerlink" title="Manual sitemap submission, even for individual sites:"></a>Manual sitemap submission, even for individual sites:</h5><ul>
<li><a href="https://search.google.com/search-console">GoogleSearchConsole</a> → sitemap → Enter the corresponding URL for sitemap.xml → Submit</li>
</ul>
<p>Verification is good, after two days or so Baidu and Google will be able to include your site</p>
<p>Test method: (respectively in google and baidu search their site or site url title content)</p>
<h1 id="3-Remove-dead-links-regularly"><a href="#3-Remove-dead-links-regularly" class="headerlink" title="3. Remove dead links regularly"></a>3. Remove dead links regularly</h1><p><a href="https://www.google.com/webmasters/tools/removals">https://www.google.com/webmasters/tools/removals</a></p>
]]></content>
      <tags>
        <tag>Web deployment</tag>
        <tag>git</tag>
        <tag>reference</tag>
      </tags>
  </entry>
  <entry>
    <title>Deploy Github Actions</title>
    <url>/2021/02/01/DeployGithubActions/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Sometimes automated deployment projects or timed tasks need to be deployed online, but these are for temporary use or these lightweight applications do not warrant the additional purchase of a cloud server for deployment. This is when you might consider using Github Actions for automated deployments.</p>
<p><a href="#1">GitHub Actions[1]</a> is GitHub’s <a href="#2">continuous integration service[2]</a>, launched in <a href="#3">October 2018[3]</a>. It is very powerful in that each action is used to perform an action, such as grabbing code, running tests, logging into a remote server, publishing to a third-party service, and so on. Combining these actions is a process of continuous integration. Of course, these actions are shared in the GitHub code repository, so we can refer to them directly.</p>
<p>Github Actions provides a complete server environment with the following server specifications</p>
<ul>
<li>2-core CPU</li>
<li>7 GB RAM memory</li>
<li>84 GB of SSD hard disk space</li>
</ul>
<p>Detailed system environment information is shown in the following figure:</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2021/02/02/ym5WQJ.png" width="76%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">System environment information</div>
</center>

<p>Of course, you can use Windows Server 2019 and macOS X Catalina 10.15 in addition to Ubuntu.</p>
<a id="more"></a>

<p>This looks great, but GitHub Actions itself doesn’t allow direct connections for interactive operations, which means you can’t connect to the server via SSH. If there was a way to connect directly to the server interactively, wouldn’t that be like getting one or more VPS with an E5 2vCPU/7G RAM/90G SSD configuration for free?</p>
<p>This article will show you how you can get around the limitations of GitHub Actions itself and connect directly to the server by doing a few tricks!</p>
<blockquote>
<p>Note: Please do not use it for malicious purposes. All consequences such as banning, deterioration of Sino-American relations, atomic bombing, World War III, etc. are not the author’s responsibility.</p>
</blockquote>
<h1 id="Option-One"><a href="#Option-One" class="headerlink" title="Option One"></a>Option One</h1><ul>
<li><a href="#4">mxschmitt/action-tmate[4]</a></li>
</ul>
<p>This is the first action that implements <a href="#5">tmate[5]</a> to connect to the Actions server, but this solution cannot proceed to the next step after exiting the connection, so it has little value in practice and can only be used for SSH connections. However, due to its groundbreaking role, I decided to put it first.</p>
<p>Example workflow file:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">name:</span> <span class="string">CI</span></span><br><span class="line"><span class="string">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="string">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="string">-</span> <span class="string">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="string">-</span> <span class="string">name:</span> <span class="string">Setup</span> <span class="string">tmate</span> <span class="string">session</span></span><br><span class="line">      <span class="string">uses:</span> <span class="string">mxschmitt/action-tmate@v2</span></span><br></pre></td></tr></table></figure>
<h1 id="Option-Two"><a href="#Option-Two" class="headerlink" title="Option Two"></a>Option Two</h1><ul>
<li><a href="#6">csexton/debugger-action[6]</a></li>
</ul>
<p>This action is inspired by <a href="#7">mxschmitt/action-tmate[7]</a>, which also connects via tmate and allows you to continue to the next step after exiting the connection, making it better suited for use in real-world projects. The authors have added an automatic disconnect for 15 minutes by default, probably in the interest of saving resources for GitHub, but this can be removed by running <code>touch /tmp/keepalive</code>.</p>
<p>Example workflow file:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">name:</span> <span class="string">debugger-action</span></span><br><span class="line"><span class="string">on:</span> </span><br><span class="line">  <span class="attr">watch:</span></span><br><span class="line">    <span class="string">types:</span> <span class="string">started</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="string">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">     <span class="string">-</span> <span class="string">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"> </span><br><span class="line">     <span class="string">-</span> <span class="string">name:</span> <span class="string">Setup</span> <span class="string">Debug</span> <span class="string">Session</span></span><br><span class="line">       <span class="string">uses:</span> <span class="string">csexton/debugger-action@master</span></span><br></pre></td></tr></table></figure>
<p>Action Log output:</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2021/02/01/yZi4BV.png" width="100%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Action Log</div>
</center>

<p>Here you can use the connection given for SSH connections, but sometimes I have some problems running OpenSSH under windows. So I choose to use a browser to open <code>https://tmate.io/t/authToken</code> to connect to the remote host. The <code>authToken </code> here is shown in the token string after the ssh command. In the example given above, the link is <code>https://tmate.io/t/vX3de9KCggEWpQTcc8B9xYuaP</code></p>
<h1 id="Option-Three"><a href="#Option-Three" class="headerlink" title="Option Three"></a>Option Three</h1><p>Instead of using action to achieve this, the solution goes the other way and uses ngrok to penetrate the intranet directly, with the following script.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="string">&quot;<span class="variable">$NGROK_TOKEN</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Please set &#x27;NGROK_TOKEN&#x27;&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="string">&quot;<span class="variable">$USER_PASS</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Please set &#x27;USER_PASS&#x27; for user: <span class="variable">$USER</span>&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;### Install ngrok ###&quot;</span></span><br><span class="line"> </span><br><span class="line">wget -q https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-386.zip</span><br><span class="line">unzip ngrok-stable-linux-386.zip</span><br><span class="line">chmod +x ./ngrok</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;### Update user: <span class="variable">$USER</span> password ###&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$USER_PASS</span>\n<span class="variable">$USER_PASS</span>&quot;</span> | sudo passwd <span class="string">&quot;<span class="variable">$USER</span>&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;### Start ngrok proxy for 22 port ###&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">rm -f .ngrok.log</span><br><span class="line">./ngrok authtoken <span class="string">&quot;<span class="variable">$NGROK_TOKEN</span>&quot;</span></span><br><span class="line">./ngrok tcp 22 --<span class="built_in">log</span> <span class="string">&quot;.ngrok.log&quot;</span> &amp;</span><br><span class="line"> </span><br><span class="line">sleep 10</span><br><span class="line">HAS_ERRORS=$(grep <span class="string">&quot;command failed&quot;</span> &lt; .ngrok.log)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="string">&quot;<span class="variable">$HAS_ERRORS</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;==========================================&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;To connect: <span class="subst">$(grep -o -E <span class="string">&quot;tcp://(.+)&quot;</span> &lt; .ngrok.log | sed <span class="string">&quot;s/tcp:\/\//ssh <span class="variable">$USER</span>@/&quot;</span> | sed <span class="string">&quot;s/:/ -p /&quot;</span>)</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;==========================================&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$HAS_ERRORS</span>&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 4</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>This script is used to create a TCP tunnel for the SSH service and print out the commands to connect to the remote server over the public network.</p>
<p>First you need to register an account on <a href="#8">ngrok’s official website[8]</a> and generate a Tunnel Authtoken: <a href="https://dashboard.ngrok.com/auth">https://dashboard.ngrok.com/auth</a>. Then create the following workflow.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">name:</span> <span class="string">Debugging</span> <span class="string">with</span> <span class="string">SSH</span></span><br><span class="line"><span class="string">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="string">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">     <span class="string">-</span> <span class="string">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"> </span><br><span class="line">     <span class="string">-</span> <span class="string">name:</span> <span class="string">Try</span> <span class="string">Build</span></span><br><span class="line">       <span class="string">run:</span> <span class="string">./not-exist-file.sh</span> <span class="string">it</span> <span class="string">bloke</span> <span class="string">build</span></span><br><span class="line"> </span><br><span class="line">     <span class="string">-</span> <span class="string">name:</span> <span class="string">Start</span> <span class="string">SSH</span> <span class="string">via</span> <span class="string">Ngrok</span></span><br><span class="line">       <span class="string">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">failure()</span> <span class="string">&#125;&#125;</span></span><br><span class="line">       <span class="string">run:</span> <span class="string">curl</span> <span class="string">-sL</span> <span class="string">https://gist.githubusercontent.com/retyui/7115bb6acf151351a143ec8f96a7c561/raw/7099b9db76729dc5761da72aa8525f632d8875c9/debug-github-actions.sh</span> <span class="string">|</span> <span class="string">bash</span></span><br><span class="line">       <span class="attr">env:</span></span><br><span class="line">        <span class="comment"># After sign up on the https://ngrok.com/</span></span><br><span class="line">        <span class="comment"># You can find this token here: https://dashboard.ngrok.com/get-started/setup</span></span><br><span class="line">        <span class="string">NGROK_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.NGROK_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># This password you will use when authorizing via SSH </span></span><br><span class="line">        <span class="string">USER_PASS:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.USER_PASS</span> <span class="string">&#125;&#125;</span></span><br><span class="line"> </span><br><span class="line">     <span class="string">-</span> <span class="string">name:</span> <span class="string">Don&#x27;t</span> <span class="string">kill</span> <span class="string">instace</span></span><br><span class="line">       <span class="string">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">failure()</span> <span class="string">&#125;&#125;</span></span><br><span class="line">       <span class="string">run:</span> <span class="string">sleep</span> <span class="string">1h</span> <span class="comment"># Prevent to killing instance after failure</span></span><br></pre></td></tr></table></figure>
<p>The default server duration is 1 hour, but you can adjust this. The TOKEN and SSH passwords in this case are best done the way recommended in workflow, by creating the Secret in GitHub and then referencing the Secret in workflow. See the official documentation [9] for details.</p>
<h1 id="Additional-notes"><a href="#Additional-notes" class="headerlink" title="Additional notes"></a>Additional notes</h1><h2 id="Switching-to-a-root-user-on-linux"><a href="#Switching-to-a-root-user-on-linux" class="headerlink" title="Switching to a root user on linux"></a>Switching to a root user on linux</h2><p><strong>(1)<code>sudo</code> command</strong> </p>
<p><code>example@ubuntu:~$ sudo</code></p>
<p>This will give you superuser privileges by entering the current admin user password. However, by default root privileges are disabled after 5 minutes.</p>
<p><strong>(2) <code>sudo -i</code></strong></p>
<p><code>example@ubuntu:~$ sudo -i</code></p>
<p>In this way you can get to the root user by entering the password of the current admin user.</p>
<p><strong>(3) If you want to use root privileges all the time, you have to switch to the root user via <code>su</code>.</strong></p>
<p>Then we first have to reset the password for the root user:</p>
<p><code>example@ubuntu:~$ sudo -i</code></p>
<p><code>example@ubuntu:~$ sudo passwd root</code></p>
<p>This will set the password for the root user.</p>
<p><strong>(4) After that you can freely switch to the root user</strong></p>
<p><code>example@ubuntu:~$ su</code></p>
<p>Enter the password for the root user.</p>
<p><code>su &quot;king&quot; </code>or <code>exit </code> to return to user rights</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Here are some automated Github Actions I have deployed:</p>
<ul>
<li><a href="https://github.com/shimmerjordan/health-check-automation">支持Github Action的NEU健康打卡自动化python脚本</a></li>
<li><a href="https://github.com/shimmerjordan/hub-mirror">Mirror github repo to other platforms such as gitee via github actions</a></li>
<li><a href="https://github.com/shimmerjordan/github-statis">github account statistics based on ‘github action’, using py script to generate svg statistics graphs</a></li>
<li><a href="https://github.com/shimmerjordan/GLaDOS-autoCheckin">Automatic check-in to GLaDOS via timed tasks based on Github Actions</a></li>
<li><a href="https://github.com/shimmerjordan/sz-education">This is a repository using github actions to run super-linter automatically</a></li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><div id="1" ><a href="https://github.com/features/actions" target="_blank">[1]. GitHub Actions</a></div>

<div id="2" ><a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank">[2]. 持续集成服务</a></div>

<div id="3" ><a href="https://github.blog/changelog/2018-10-16-github-actions-limited-beta/" target="_blank">[3]. 推出</a></div>

<div id="4" ><a href="https://github.com/mxschmitt/action-tmate" target="_blank">[4]. mxschmitt/action-tmate</a></div>

<div id="5" ><a href="https://github.com/tmate-io/tmate" target="_blank">[5]. tmate</a></div>

<div id="6" ><a href="https://github.com/csexton/debugger-action" target="_blank">[6]. csexton/debugger-action</a></div>

<div id="7" ><a href="https://github.com/mxschmitt/action-tmate" target="_blank">[7]. mxschmitt/action-tmate</a></div>

<div id="8" ><a href="https://ngrok.com/" target="_blank">[8]. ngrok 的官网</a></div>

<div id="9" ><a href="https://docs.github.com/cn/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets" target="_blank">[9]. 官方文档</a></div>

<div id="9" ><a href="https://p3terx.com/archives/ssh-to-the-github-actions-virtual-server-environment.html" target="_blank">[10]. SSH 连接到 GitHub Actions 虚拟服务器环境</a></div>]]></content>
      <categories>
        <category>新手指北</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>Cloud Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Free CDN for WebPage</title>
    <url>/2021/01/27/freeWebpageCDN/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>The previous article <a href="/2021/01/24/freeWebpage/" title="Free Static Webpage Deployment">Free Static Webpage Deployment</a>  has explained in full how to deploy a free static website, here are further instructions on how to get free CDN services to improve the speed of access to your website in different parts of the world.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2021/02/06/yYsRE9.jpg" width=35%>
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">CDN</div>
</center>

<a id="more"></a>

<h1 id="Overview-of-steps"><a href="#Overview-of-steps" class="headerlink" title="Overview of steps"></a>Overview of steps</h1><ul>
<li>Ensure deployment of mid-owned cloud repository is completed;</li>
<li>Login to Vercel;</li>
<li>Import the corresponding cloud repository containing the pages to be deployed;</li>
<li>[Option] Custom Domains;</li>
<li>Later remarks.</li>
</ul>
<h1 id="Ensure-deployment-of-mid-owned-cloud-repository-is-completed"><a href="#Ensure-deployment-of-mid-owned-cloud-repository-is-completed" class="headerlink" title="Ensure deployment of mid-owned cloud repository is completed"></a>Ensure deployment of mid-owned cloud repository is completed</h1><p>Here you need to make sure that you have web resources that can be accessed properly, as can be seen in <a href="/2021/01/24/freeWebpage/" title="Free Static Webpage Deployment">Free Static Webpage Deployment</a>. Of course, if you are considering using vercel acceleration here, the cloud repository name does not need to be specified as in the previous article, it can be completely customised. This is because vercel can copy and host the cloud repository.</p>
<h1 id="Login-to-Vercel"><a href="#Login-to-Vercel" class="headerlink" title="Login to Vercel"></a>Login to Vercel</h1><p>You can log in to Vercel using github, gitLab and bitbucket, and you can bring in repositories from other platforms (if you are authorised to do so), regardless of which account you are registered under.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2021/01/27/sxDG38.png" width=70%>
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Sign Up</div>
</center>

<h1 id="Import-the-corresponding-cloud-repository-containing-the-pages-to-be-deployed"><a href="#Import-the-corresponding-cloud-repository-containing-the-pages-to-be-deployed" class="headerlink" title="Import the corresponding cloud repository containing the pages to be deployed"></a>Import the corresponding cloud repository containing the pages to be deployed</h1><p>You can follow the guidelines for importing repositories or just click on import third party repositories. By doing this it is clear why you don’t need a specific named cloud repository, the principle of vercel is to automatically pull the bound cloud repository and deploy it in vercel. The site to be deployed can therefore not rely on a GithubPage.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2021/01/27/sxD44x.png" width=60%>
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Import Git Respository</div>
</center>



<p>It is important to note here that if the cloud repository is simply a static web page that can be accessed directly without additional deployment operations via index.html etc. Here the following options need to be set at the time of introduction, the main points to note are the following:</p>
<ul>
<li><p>Ensure that <code>FRAMEWORK PRESET</code> is <code>OTHER</code>, i.e. no additional deployment and installation is required;</p>
</li>
<li><p>Check the <code>OVERRIDE</code> option for <code>BUILD COMMAND</code>, <code>OUTPUT DICTIONARY</code>,<code>INSTALL COMMAND</code>,<code>DEVELOPMENT COMMAND</code> and change its content to empty. (Even though all content is removed and no input is made, the empty form here will still show some content in grey, i.e. the text will be disabled, as shown below).</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2021/01/27/sxrYPx.png" width=60%>
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">OVERRIDE COMMAND</div>
</center>

</li>
</ul>
<p>By this point it can be accessed using the second level domain name provided by vercel. It is also possible to add this second level domain to the Custom domain of the GithubPage to improve access speed. If domain customisation is required, then the following deployment can be done.</p>
<h1 id="Option-Custom-Domains"><a href="#Option-Custom-Domains" class="headerlink" title="[Option] Custom Domains"></a>[Option] Custom Domains</h1><p>Select your project card to enter the project, click Settings-Domains and enter your domain name Add to add:</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2021/01/27/sxyejU.png" width=65%>
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Add domains</div>
</center>

<p>Then resolve the domain name.</p>
<ul>
<li>Root domain recommended: Record type: A  Record value: <code>76.76.21.21</code></li>
<li>Sub-domain recommended: Record type: CNAME  Record value: <code>cname.vercel-dns.com</code></li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2021/01/27/sxcTnU.png" width=65%>
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Resolve the domain name</div>
</center>

<p>It will automatically validate the domain name, enable ssl, redirect and all that is supported, and you can see the record you have added by editing it yourself.</p>
<h1 id="Later-remarks"><a href="#Later-remarks" class="headerlink" title="Later remarks"></a>Later remarks</h1><p>Vercel automatically pulls updates from the introduced cloud repositories, so updates only need to be pushed to the corresponding d repository</p>
<p>This is all I have done, and here are the current pages I have successfully deployed by this method:</p>
<ul>
<li><p><a href="https://shimmerjordan.site/">My blog (github)</a></p>
</li>
<li><p><a href="http://qiaodanju.bitbucket.io/">My CV (bitbucket)</a></p>
</li>
</ul>
<p>Similar CDN acceleration services include <a href="https://www.jsdelivr.com/">jsDelivr</a>, and here I have chosen to use <a href="https://www.jsdelivr.com/">jsDelivr</a> in conjunction with github as my personal image bed.</p>
<p>Its use is shown below:</p>
<blockquote>
<p> <a href="https://gcore.jsdelivr.net/gh/username/repositoryName@branch/filePath">https://gcore.jsdelivr.net/gh/username/repositoryName@branch/filePath</a></p>
<ul>
<li>gh: Indicates this is a github resource;</li>
<li>username: your username of github;</li>
<li>repositoryName: Name of the repository corresponding to the resource;</li>
<li>branch: The branch of the repository to which the resource corresponds, usually master, or the version number of the release;</li>
<li>filePath: Path to the file.</li>
<li><strong>For more information, please refer to <a href="https://github.com/jsdelivr/data.jsdelivr.com">https://github.com/jsdelivr/data.jsdelivr.com</a></strong></li>
</ul>
</blockquote>
<p>Use the following image as an example (723KB):</p>
<ul>
<li><p>Original link: <a href="https://github.com/shimmerjordan/shimmerjordan.github.io/blob/master/images/cover5.jpg">origin github link (https://github.com/shimmerjordan/shimmerjordan.github.io/blob/master/images/cover5.jpg)</a></p>
</li>
<li><p>Preview: </p>
</li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://github.com/shimmerjordan/shimmerjordan.github.io/blob/master/images/cover5.jpg?raw=true" width=65%>
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Original link</div>
</center>

<ul>
<li>Link to the accelerated resources referenced via jsDelivr: <a href="https://gcore.jsdelivr.net/gh/shimmerjordan/shimmerjordan.github.io@master/images/cover5.jpg">CDN link (https://gcore.jsdelivr.net/gh/shimmerjordan/shimmerjordan.github.io@master/images/cover5.jpg)</a></li>
<li>Preview:</li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/shimmerjordan.github.io@master/images/cover5.jpg" width=65%>
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">CDN link</div>
</center>

<p>Of course, it is also possible to operate directly on github resources via tools such as PicGo and PicX, eliminating the need for troublesome git operations. This requires setting up read and write access to the repo via <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a> , and generating the appropriate token, which is not covered here.</p>
<h1 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h1><blockquote>
<p>Jsdelivr国内的CDN服务被DNS污染了，被指向了Google、Twitter和 Facebook 的 IP 地址，导致使用CDN服务加速的链接访问失败。</p>
</blockquote>
<p>Jsdelivr国内的CDN服务被DNS污染，往往一般是cdn.jsdelivr.net被DNS污染了，而其他代替的地址没有被污染，比如fastly.jsdelivr.net、gcore.jsdelivr.net等。这时候我们就可以批量把图片或者其他静态资源链接中的gcore.jsdelivr.net替换为别的可用的地址（下面自己选一个可用的），等官方修复回去后再替换回去就行了。</p>
<ul>
<li>无CDN加速<code>https://raw.githubusercontent.com/shimmerjordan/shimmerjordan.github.io/master/cover5.jpg</code></li>
<li>Jsdelivr的DNS被污染<code>https://cdn.jsdelivr.net/gh/shimmerjordan/shimmerjordan.github.io@master/images/cover5.jpg</code></li>
<li>Jsdelivr替换后的<code>https://gcore.jsdelivr.net/gh/shimmerjordan/shimmerjordan.github.io@master/images/cover5.jpg</code></li>
</ul>
<h2 id="可替换的选项"><a href="#可替换的选项" class="headerlink" title="可替换的选项"></a>可替换的选项</h2><ul>
<li>fastly.jsdelivr.net</li>
<li>gcore.jsdelivr.net</li>
<li>testingcf.jsdelivr.net</li>
<li>test1.jsdelivr.net</li>
</ul>
]]></content>
      <categories>
        <category>新手指北</category>
      </categories>
      <tags>
        <tag>Web deployment</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Free Static Webpage Deployment</title>
    <url>/2021/01/24/freeWebpage/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>I have a number of static websites on hand, including a CV, an anniversary website, a small blog and miniature functional static pages such as QR code generation that need to be deployed on the internet. The best option would undoubtedly be to deploy on a private cloud server, but the functionality of these sites does not justify renting an expensive server for them. In this context, here is a solution for webpage deployment based on github or bitbucket.</p>
<a id="more"></a>

<h1 id="Overview-of-steps"><a href="#Overview-of-steps" class="headerlink" title="Overview of steps"></a>Overview of steps</h1><ul>
<li>Find an available mailbox;</li>
<li>Sign up for bitbucket or github using your email address;</li>
<li>Configuring local SSH;</li>
<li>Create a cloud repository with a specific name;</li>
<li>Push local repositories to the cloud;</li>
<li>[Option] Binding personal domains.</li>
</ul>
<h1 id="Find-an-available-mailbox"><a href="#Find-an-available-mailbox" class="headerlink" title="Find an available mailbox"></a>Find an available mailbox</h1><p>Of course I can use my personal email, but it is tied to my mobile number and I don’t want to receive relevant tweets or ads. I only use this email address to register for github or bitbucket for the time being and will not need it again once my account is registered. So I opted for a temporary email address provided by a third party (NO PHONE NUMBER NEEDED), and here are some of the things I gathered and tried:</p>
<ul>
<li><a href="https://www.snapmail.cc/">Snapmail</a>: Always available, but emails will be automatically deleted after 4 hours. I used this email address to successfully sign up for bitbucket and deployed <a href="https://abadanniversary2.bitbucket.io/">https://abadanniversary2.bitbucket.io</a>. </li>
<li><a href="https://temp-mail.org/">TempMail</a>: It is more widely available, but uses a mailbox for a period of time and does not support customisation., which requires the purchase of additional services at a cost. If you need to change to a new mailbox, you will need to delete the current mailbox.</li>
<li><a href="https://linshiyouxiang.net/">临时邮箱 - 十秒钟内收到邮件</a>: A very good temporary email provider, I have used this site to register for many forums that require email logins for temporary use. But the email here doesn’t seem to register with bitbucket, at least not for me. Also this email address is prompted with “Your account has been flagged. Because of that, your profile is hidden from github” after registering for github, you can appeal here but given the time cost and the need for temporary use, I’ve opted out.</li>
<li><a href="http://24mail.chacuo.net/">24mail</a>: No registration is required and the mailbox lasts 24 hours, which is longer than a ten-minute mailbox (10 minutes). You can set any mailbox name and change your mailbox at any time. However, after trying, there are some websites that do not support this mailbox, such as github.</li>
</ul>
<blockquote>
<p>There are other free temporary mailboxes or alternate mailboxes that do not require a mobile number to be registered, which will be added here in the future after testing.</p>
</blockquote>
<h1 id="Sign-up-for-bitbucket-or-github-using-your-email-address"><a href="#Sign-up-for-bitbucket-or-github-using-your-email-address" class="headerlink" title="Sign up for bitbucket or github using your email address"></a>Sign up for bitbucket or github using your email address</h1><p>This step should not be difficult, make sure that your github account is not flagged. If it is, please send an email requesting to be unblocked or change your registered email address.</p>
<h1 id="Configuring-local-SSH"><a href="#Configuring-local-SSH" class="headerlink" title="Configuring local SSH"></a>Configuring local SSH</h1><h2 id="1-Open-the-git-Bash"><a href="#1-Open-the-git-Bash" class="headerlink" title="1. Open the git Bash"></a>1. Open the git Bash</h2><p>Open a git Bash command window anywhere and type the following command to access the .ssh directory:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure>
<p>If the path does not exist, you will need to manually create this folder in <code>C:\Users\yourAccountName\.ssh</code>.</p>
<h2 id="2-Generate-SSH-for-different-accounts"><a href="#2-Generate-SSH-for-different-accounts" class="headerlink" title="2. Generate SSH for different accounts"></a>2. Generate SSH for different accounts</h2><p>Generate the corresponding ssh with the following command, and run as many lines of the corresponding command as the number of accounts needed for ssh.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;theEmailRegisted@email.com&quot;</span> -f <span class="string">&quot;githubForWeb_id_rsa&quot;</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;theEmailRegisted@email.com&quot;</span> -f <span class="string">&quot;bitbucketTemp_id_rsa&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-Copy-the-public-key-to-platforms-such-as-github"><a href="#3-Copy-the-public-key-to-platforms-such-as-github" class="headerlink" title="3. Copy the public key to platforms such as github"></a>3. Copy the public key to platforms such as github</h2><ul>
<li>Execute the command <code>cat ~/.ssh/githubForWeb_id_rsa.pub</code> and copy the second line to the end to the ssh of github and save it.</li>
<li>Or you can simply open the file directory and find the corresponding public key file <code>githubForWeb_id_rsa.pub</code>, then open the file with an editor and copy all its contents to the SSH settings of your account.</li>
</ul>
<p>The same operation can be used to add SSH keys for platforms such as bitbucket, gitee, etc.</p>
<h2 id="4-Create-config-file-to-resolve-ssh-conflicts"><a href="#4-Create-config-file-to-resolve-ssh-conflicts" class="headerlink" title="4. Create config file to resolve ssh conflicts"></a>4. Create config file to resolve ssh conflicts</h2><p>Execute the command <code>vi config</code> in the .ssh folder and add the following to the file</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># github</span></span><br><span class="line">Host myWebOnGithub</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/githubForWeb_id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># bitbucket</span></span><br><span class="line">Host myWebOnBitbucket.org</span><br><span class="line">HostName bitbucket.org</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/bitbucketTemp_id_rsa</span><br></pre></td></tr></table></figure>
<p>Once the configuration is complete, use <code>:wq</code> to save and exit the editor. You can change the Host and HostName as required, and you can just create a new <code>config</code> file in the folder and right click to edit it.</p>
<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>Test each of the following codes separately:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -T git@myWebOnGithub</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -T git@myWebOnBitbucket.org</span><br></pre></td></tr></table></figure>
<p>If there is no problem it will say that the login was successful, but it may say something like <code>but GitHub does not provide shell access</code>. This does not affect the connection and means that the configuration has been successful.</p>
<h1 id="Create-a-cloud-repository-with-a-specific-name"><a href="#Create-a-cloud-repository-with-a-specific-name" class="headerlink" title="Create a cloud repository with a specific name"></a>Create a cloud repository with a specific name</h1><p>Create a repository in github named <code>username.github.io</code>, e.g. if the username is <code>AbAdAnniversary</code>, you need to create a repository named <code>AbAdAnniversary.github.io</code>.</p>
<p>If you are using bitbucket, the repository name needs to be <code>username.bitbucket.io</code>; the same naming convention applies to platforms such as gitee</p>
<h1 id="Push-local-repositories-to-the-cloud"><a href="#Push-local-repositories-to-the-cloud" class="headerlink" title="Push local repositories to the cloud"></a>Push local repositories to the cloud</h1><p>With git installed correctly, start git Bash from the root of your local repository.</p>
<ul>
<li><p>Type <code>git init</code> on the command line to turn the folder into a manageable Git repository;</p>
</li>
<li><p>Then you can add the file via <code>git add . </code>(note the “.” with spaces in it, “.” means that all the directories under this folder are committed. You can also add a file to the cache by <code>git add filename</code>);</p>
</li>
<li><p>[Option] You can then check the current status by using the git status command;</p>
</li>
<li><p>Then, use the command <code>git commit -m &quot;write your comments here&quot;</code> to commit the file to the local repository;</p>
</li>
<li><p>Connecting to a remote warehouse:</p>
<ul>
<li><p>Test the corresponding SSH with the command <code>ssh -T git@myWebOnBitbucket.org</code>;</p>
</li>
<li><p>Linked remote and local repositories now, Enter the following command in the local repository Git Bash:</p>
<p><code>$ git remote add origin git@github.com:username/repositoryName.git</code> The git address after origin can be obtained via clone from the cloud repository, both SSH and HTTP methods are available. SSH is preferred.</p>
</li>
</ul>
</li>
<li><p>Once the association is done we can push all the content from the local repository to the remote repository:</p>
<p><code>$ git push -u origin master</code></p>
</li>
</ul>
<p>If the remote repository contains files that are not in the local repository, a direct push will report an error. For example, when creating a new repository, “Initialize this repository with a README” is checked, but the local repository does not have this file. Here you can pull the contents of the remote repository locally, merge it and commit it:</p>
<ul>
<li><code>$ git pull --rebase origin master</code></li>
<li><code>$ git push -u origin master</code></li>
</ul>
<p>This can also be pushed through tools such as sourcetree, where we can first clone from the remote repository and then push, while taking care to set the SSH Key for sourcetree to ensure write access.</p>
<h1 id="Option-Binding-personal-domains"><a href="#Option-Binding-personal-domains" class="headerlink" title="[Option] Binding personal domains"></a>[Option] Binding personal domains</h1><h2 id="Adding-DNS-records"><a href="#Adding-DNS-records" class="headerlink" title="Adding DNS records"></a>Adding DNS records</h2><p>Open the console in the Personal Domain Name Service platform you purchased, click on Resolve Domain Name (DNS) and create the following DNS record:</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2021/01/25/sqg9pD.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">The red arrows point out the necessary DNS (First & second), the rest are baidu's and google's webmaster statistics tools</div>
</center>

<p>Note the types of these two DNSs. For the record of type A, fill in @ for Name (here I’m using CloudFlare so I’m filling in my personal domain address) and the ip address for username.github.io for content. This ip can be obtained by <code>ping username.github.io</code>. Since my username of github is shimmerjordan, I put shimmerjordan here.</p>
<h2 id="Adding-CNAME-file"><a href="#Adding-CNAME-file" class="headerlink" title="Adding CNAME file"></a>Adding CNAME file</h2><p>Create a new CNAME file in the local repository root directory and edit its contents to your personal domain name. In my case, for example, the CNAME file will read shimmerjordan.site. be sure to note that the CNAME file does not have any suffixes. Then push it to the remote repository.</p>
<h2 id="Go-to-github-settings-and-bind-the-domain-name"><a href="#Go-to-github-settings-and-bind-the-domain-name" class="headerlink" title="Go to github settings and bind the domain name"></a>Go to github settings and bind the domain name</h2><p>In the repository settings, pull down to the bottom and find GitHub Pages, select the appropriate source branch and fill in the Custom domain with your personal domain name. Finally, check Enforce HTTPS if required and select Theme Chooser.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2021/01/25/sqRclD.png" width=70%>
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">My Case</div>
</center>

<p>Click save to complete the domain binding.</p>
<h1 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h1><p>This is all I have done, and here are the current pages I have successfully deployed by this method:</p>
<ul>
<li><p><a href="https://shimmerjordan.site/">My blog</a></p>
</li>
<li><p><a href="http://qiaodanju.bitbucket.io/">My CV</a></p>
</li>
<li><p><a href="https://ruichenzhao.bitbucket.io/">My grilfriend’s CV</a></p>
</li>
<li><p><a href="https://abadanniversary2.bitbucket.io/">A little surprise for our second anniversary</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>新手指北</category>
      </categories>
      <tags>
        <tag>Web deployment</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Add Two Numbers</title>
    <url>/2020/12/08/addTwoNumbers/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="What-is-the-best-solution-to-Add-Two-Numbers"><a href="#What-is-the-best-solution-to-Add-Two-Numbers" class="headerlink" title="What is  the best solution to Add Two Numbers"></a>What is  the best solution to Add Two Numbers</h1><p>Currently I encounter a problem about adding two numbers, based on the bias between my initial solution and the official solution, I am able to generate a better way to add two numbers.</p>
<a id="more"></a>

<h1 id="Add-Two-Numbers"><a href="#Add-Two-Numbers" class="headerlink" title="Add Two Numbers"></a>Add Two Numbers</h1><p>Detailed information can be found on <a href="https://leetcode.com/problems/add-two-numbers/">(LeetCode) Add Two Numbers</a></p>
<blockquote>
<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<p><strong>Example 1:</strong></p>
 <center>
     <img style="border-radius: 0.3125em;
     box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
     src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/12/09/r9yrAs.jpg" width='50%'>
     <br>
     <div style="color:orange; border-bottom: 1px solid #d9d9d9;
     display: inline-block;
     color: #999;
     padding: 2px;">Example 1</div>
 </center>


<blockquote>
<p><strong>Input:</strong>     l1 = [2, 4, 3],    l2 = [5, 6, 4]</p>
<p><strong>Output:</strong>    [7, 0, 8]</p>
<p><strong>Explanation:</strong>    342 + 465 = 807</p>
</blockquote>
<p><strong>Example 2:</strong></p>
<blockquote>
<p><strong>Input:</strong>    l1 = [0],    l2 = [0]</p>
<p><strong>Output:</strong>    [0]</p>
</blockquote>
<p><strong>Example 3:</strong></p>
<blockquote>
<p><strong>Input:</strong>    l1 = [9, 9, 9, 9, 9, 9, 9],    l2 = [9, 9, 9, 9]</p>
<p><strong>Output:</strong>    [8, 9, 9, 9, 0, 0, 0, 1]</p>
</blockquote>
</blockquote>
<p>Constraints:</p>
<ul>
<li>The number of nodes in each linked list is in the range <code>[1, 100]</code></li>
<li><code>0 &lt;= Node.val &lt;= 9</code></li>
<li>It is guaranteed that the list represents a number that does not have leading zeros.</li>
</ul>
<h1 id="Initial-solution"><a href="#Initial-solution" class="headerlink" title="Initial solution"></a>Initial solution</h1><p>First of all, this solution was my first attempt and failed in some test  cases after submission. </p>
<p>We know that the digits are stored in reverse order in each linked list. So it is possible to transfer the linked list into integer first, and then store the sum digit by digit into a result linked list. The solution for this route is as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode curr = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode flag = curr;</span><br><span class="line">        <span class="keyword">int</span> digit = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">long</span> x = (l1 != <span class="keyword">null</span>) ? l1.val : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span> y = (l2 != <span class="keyword">null</span>) ? l2.val : <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            num1 += x * digit;</span><br><span class="line">            num2 += y * digit;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="keyword">null</span>)</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="keyword">null</span>)</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            digit *= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> temp = num1 + num2;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(temp == <span class="number">0</span>)&#123;</span><br><span class="line">             curr.next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(temp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            curr.next = <span class="keyword">new</span> ListNode((<span class="keyword">int</span>)temp % <span class="number">10</span>);</span><br><span class="line">            curr = curr.next;</span><br><span class="line">            temp /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>It Seems that the solution have passed most of the test cases, but it <strong>failed</strong> for the case as follows:</p>
<blockquote>
<p><strong>Input:</strong>    l1 = [9],    l2 = [1, 9, 9, 9, 9, 9, 9, 9, 9, 9]</p>
<p><strong>Output:</strong>    sum = [8, 0, 4, 5, 6, 0, 0, 1, 4, 1]</p>
<p><strong>Expected:</strong>    sum = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]</p>
</blockquote>
<p>It follows that the range of integer data types is not taken into account. Therefore, the out-of-bounds error is generated as a result that the wrong result is obtained at the sum calculation stage. Therefore, this approach is not feasible, and in fact only solves the problem of adding or subtracting a small number of small integers.</p>
<p>Then we need to sum directly from the original chain table and synchronize to the result chain table to avoid the data overflow problem.</p>
<h1 id="Correct-Thinking"><a href="#Correct-Thinking" class="headerlink" title="Correct Thinking"></a>Correct Thinking</h1><p>Create a new chain table by setting up a variable called carried, which represents a carryover. Process the two input links simultaneously from the beginning to the end, adding up every two, and then add the result plus the value of carried to the new table as a new node.</p>
<p>The process can be seen in the following diagram:</p>
<center>
     <img style="border-radius: 0.3125em;
     box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
     src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/12/09/rC6Vw4.gif" width="60%">
     <br>
     <div style="color:orange; border-bottom: 1px solid #d9d9d9;
     display: inline-block;
     color: #999;
     padding: 2px;">Adding process</div>
 </center>


<h1 id="Code-Implementation"><a href="#Code-Implementation" class="headerlink" title="Code Implementation"></a>Code Implementation</h1> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode curr = dummyHead;</span><br><span class="line">        <span class="keyword">int</span> carried = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span> || carried != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> l1Val = (l1 != <span class="keyword">null</span>) ? l1.val : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> l2Val = (l2 != <span class="keyword">null</span>) ? l2.val : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> sumVal = l1Val + l2Val + carried;</span><br><span class="line">            carried = sumVal / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            ListNode sumNode = <span class="keyword">new</span> ListNode(sumVal % <span class="number">10</span>);</span><br><span class="line">            curr.next = sumNode;</span><br><span class="line">            curr = sumNode;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="keyword">null</span>) l1 = l1.next;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="keyword">null</span>) l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Data structures</tag>
      </tags>
  </entry>
  <entry>
    <title>Differences between HashMap and HashTable</title>
    <url>/2020/12/06/HashMap-HashTable/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>The difference between a HashMap and a HashTable is a common question asked by interviewers in interviews. You can choose to focus your answer on the following main differences:</p>
<ul>
<li>Different value ranges for key and value</li>
<li>Threading safety</li>
<li>Efficiency and synchronisation</li>
<li>Selection and use</li>
</ul>
<p>The details will be discussed in the following part of this article.</p>
<a id="more"></a>

<h1 id="Different-value-ranges-for-key-and-value"><a href="#Different-value-ranges-for-key-and-value" class="headerlink" title="Different value ranges for key and value"></a>Different value ranges for key and value</h1><p>Both HashMap and HashTable are tool classes that implement key-value mapping based on hash tables, with an underlying hash table structure. </p>
<p>HashMap allows a key to be null and a value to be null. For HashMap, if you use the get method to return null, it does not indicate that the key does not exist in the HashMap, it is possible that the value corresponding to the key is null.</p>
<p>The HashTable does not allow null keys and null values.</p>
<h1 id="Threading-safety"><a href="#Threading-safety" class="headerlink" title="Threading safety"></a>Threading safety</h1><p>HashMap is non-synchronized, whereas HashTable is a synchronized.</p>
<blockquote>
<p>synchronized is a keyword in Java language that can be used to lock objects and methods or blocks of code. When it locks a method or block of code, at most one thread executes the code at any one time. </p>
</blockquote>
<p>This means that a HashTable is thread-safe, whereas a HashMap is not.</p>
<h1 id="Efficiency-and-synchronisation"><a href="#Efficiency-and-synchronisation" class="headerlink" title="Efficiency and synchronisation"></a>Efficiency and synchronisation</h1><p>HashMap is asynchronous and efficient, HashTable is synchronous and inefficient.<br>Although HashMap is not thread-safe, it will be much more efficient than HashTable. It makes sense to design it this way. Most of our daily use is single-threaded, and HashMap frees up this part of the operation.<br>The ConcurrentHashMap is also thread-safe, but it is much more efficient than the HashTable, which can be used when multi-threaded operations are required.</p>
<h1 id="Selection-and-use"><a href="#Selection-and-use" class="headerlink" title="Selection and use"></a>Selection and use</h1><p>If you don’t need thread-safe then use HashMap, if you need thread-safe then use ConcurrentHashMap, which is not only thread-safe, but also more efficient than HashTable.</p>
<p><strong>HashTable is almost obsolete.</strong></p>
]]></content>
      <categories>
        <category>Data structures</category>
      </categories>
      <tags>
        <tag>Data structures</tag>
        <tag>Java</tag>
        <tag>HashMap</tag>
        <tag>HashTable</tag>
      </tags>
  </entry>
  <entry>
    <title>In-depth analysis of Java-HashMap</title>
    <url>/2020/12/03/Java-HashMap/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><hr>
<p>Hash table is a very important data structure with a rich set of applications. The core of many caching techniques (such as memcached) is actually maintaining a large hash table in memory. This article will explain the principles of HashMap implementation in the java collection framework and analyse the JDK7 HashMap source code.</p>
<a id="more"></a>

<h1 id="1-What-is-HashMap"><a href="#1-What-is-HashMap" class="headerlink" title="1. What is HashMap"></a>1. What is HashMap</h1><p>Before discussing the hash table, we firstly have an overview of the performance of other data structures in performing basic operations such as adding, searching, etc.</p>
<p><strong>Array:</strong> Array uses a continuous segment of memory cells to store data. For a given subscript search,  the time complex is $O(1)$; For a search by a given value, it is necessary to traverse the array, comparing the given keywords and array elements one by one, with a time complex of $O(n)$. Of course, for ordered arrays, the dichotomous search, interpolation search, Fibonacci search, etc. can be used, increasing the complexity of the search for $O(\log n)$; For the general insertion and deletion operations, involving the movement of array elements, the average complexity is also $O(n)$.</p>
<p><strong>Linear chain table:</strong> For the addition, deletion, etc. of a link table (after the location of the specified operation has been found), only the references between the nodes need to be processed, which has a time complexity of $O(1)$, while the search operation needs to traverse the link table one by one for comparison, which has a complexity of $O(n)$.</p>
<p><strong>Binary tree:</strong> The insertion, search and deletion operations carried out on a relatively balanced, ordered binary tree have an average complexity of $O(\log n)$.</p>
<p><strong>Hash tables:</strong> Compared to the data structures above, adding, deleting, searching, etc. in a hash table has very high performance and can be done in just one location, regardless of hash conflicts (which can be discussed later), with a time complexity of $O(1)$. I will show how the hash table is achieved to reach the stunning constant order complexity of $O(1)$.</p>
<p>As we know, there are only two types of physical storage structures for data structures: sequential storage structures (like stacks, queues, trees, graphs, etc. that are abstracted from logical structures and mapped to memory, which are also two forms of physical organisation). As we mentioned above, finding an element in an array based on its subscript can be achieved in a single location. Hash tables make use of this property, the backbone of the hash table being the array.</p>
<p>For example, if we want to add or find an element, we can do this by mapping the current element’s keyword to a location in the array via a  function that locates the array’s subscript once.</p>
<p>This function can be described simply as: store location = $f(keywords)$, this function $f$ is generally known as the hash function, and the design of this function will have a direct impact on the performance of the hash table. As an example, if we want to perform an insert operation in a hash table, whose process is shown in the figure below:</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/12/04/DqKdIJ.jpg">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Insertion operation</div>
</center>

<p>The same principle applies to the search operation, where the actual storage address is calculated via the hash function and then the corresponding address is retrieved from the array.</p>
<p><strong>Hash conflict:</strong></p>
<p>However, nothing is perfect, so what if two different elements have the same actual storage address via a hash function? In other words, when we perform a hash operation on an element, get a storage address and then, when we want to insert it, we find that it is already occupied by another element. This is in fact a so-called hash conflict, also known as a hash collision. As we have mentioned before, the design of the hash function is crucial. A good hash function will ensure that the calculation is as simple as possible and that the hash address is evenly distributed. So how are hash conflicts resolved? There are various solutions to hash conflicts: the open address method (in the event of a conflict, the search continues for the next unoccupied storage address), the re-hash function method, the chain address method, and HashMap uses the chain address method, which is an array + chain table method.</p>
<h1 id="2-Implementation-principle-of-HashMap"><a href="#2-Implementation-principle-of-HashMap" class="headerlink" title="2. Implementation principle of HashMap"></a>2. Implementation principle of HashMap</h1><p>The backbone of a HashMap is an array of Entries, which are the basic building blocks of a HashMap, each of those containing a key-value pair. (A Map is actually a collection that holds the mapping between two objects.)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//The backbone array of a HashMap can be seen as an Entry array </span></span><br><span class="line"><span class="comment">//with an initial value of an empty array &#123;&#125;, the length of which must be a power of 2</span></span><br><span class="line"><span class="comment">//The reasons why this was done are analysed in detail later.</span></span><br><span class="line"><span class="keyword">transient</span> Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</span><br></pre></td></tr></table></figure>
<p>Entry is a static internal class in a HashMap. The code is as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Entry&lt;K,V&gt; next;	<span class="comment">//Storing references to the next Entry, single-chain table structure</span></span><br><span class="line">    <span class="keyword">int</span> hash;	<span class="comment">//The hash code value of the key is hashed and stored in the Entry to avoid double counting.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Creates new entry.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">        value = v;</span><br><span class="line">        next = n;</span><br><span class="line">        key = k;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="overall-structure"><a href="#overall-structure" class="headerlink" title="overall structure"></a>overall structure</h2><p>The overall structure of a HashMap is therefore as follows:</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/12/04/DqG000.png" width='80%'>
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Overall structure of a HashMap</div>
</center>

<p>Put it simply, a HashMap consists of an array + a linked table. The array is the main body of the HashMap, while the linked table exists mainly to resolve hash conflicts. For the search  operation, the link table still needs to be traversed, and then the key object’s equals method can be used to find the link table one by one. Therefore, in terms of performance, the less the link table appears in a HashMap, the better the performance will be.</p>
<h2 id="A-few-other-important-fields"><a href="#A-few-other-important-fields" class="headerlink" title="A few other important fields"></a>A few other important fields</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Number of key-value pairs actually stored */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Threshold value, which is the initial capacity when table == &#123;&#125; </span></span><br><span class="line"><span class="comment">* (the default initial capacity is 16); </span></span><br><span class="line"><span class="comment">* when table is filled, i.e. when memory space has been allocated to it.</span></span><br><span class="line"><span class="comment">* HashMap needs to refer to the threshold when scaling, </span></span><br><span class="line"><span class="comment">* which is discussed in more detail later</span></span><br><span class="line"><span class="comment">*/</span>.</span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** load factor, which represents how much the table is filled, the default is 0.75</span></span><br><span class="line"><span class="comment">* The reason for the load factor is also to mitigate hash conflicts, </span></span><br><span class="line"><span class="comment">* because if the initial bucket is 16 and you wait until it is full of 16 elements before expanding, </span></span><br><span class="line"><span class="comment">* some buckets may have more than one element in them.</span></span><br><span class="line"><span class="comment">* So the default loading factor is 0.75, </span></span><br><span class="line"><span class="comment">* which means that a HashMap of size 16 will expand to 32 by the 13th element.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The number of times the HashMap has been changed, </span></span><br><span class="line"><span class="comment">* due to the non-threaded safety of the HashMap, when iterating on the HashMap</span></span><br><span class="line"><span class="comment">* If the structure of the HashMap has changed during the period due to the involvement of other threads (e.g. put, remove, etc.).</span></span><br><span class="line"><span class="comment">* A ConcurrentModificationException needs to be thrown</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br></pre></td></tr></table></figure>
<h2 id="constructors"><a href="#constructors" class="headerlink" title="constructors"></a>constructors</h2><p>HashMap has four constructors, the other constructors use default values if the user does not pass in the <em>initialCapacity</em> and <em>loadFactor</em> parameters.</p>
<p>The default <em>initialCapacity</em> is 16 and the default <em>loadFactory</em> is 0.75.</p>
<p>Let’s take a look at one of these:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//Here the incoming initial capacity is verified </span></span><br><span class="line">    <span class="comment">//and cannot exceed a maximum of MAXIMUM_CAPACITY = 1&lt;&lt;30(230)</span></span><br><span class="line">	<span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">	<span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">		initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">	<span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">	threshold = initialCapacity;</span><br><span class="line">　　　　　</span><br><span class="line">	init();<span class="comment">//The init method is not actually implemented in the HashMap, </span></span><br><span class="line">    	   <span class="comment">//but is implemented in its subclasses such as linkedHashMap.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="put-operation"><a href="#put-operation" class="headerlink" title="put operation"></a>put operation</h2><p>Let’s now look at the implementation of the put operation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//If the table array is empty &#123;&#125;, </span></span><br><span class="line">    <span class="comment">//the array is filled (allocating actual memory space to the table),</span></span><br><span class="line">    <span class="comment">//with threshold as the input reference.</span></span><br><span class="line">	<span class="comment">//In this case the threshold is the initialCapacity.&lt;default is 1&lt;&lt;4 (24=16)&gt;</span></span><br><span class="line">	<span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">		inflateTable(threshold);</span><br><span class="line">	&#125;</span><br><span class="line">   <span class="comment">//If the key is null, the storage location is table[0] or on the conflicting chain of table[0].</span></span><br><span class="line">	<span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">		<span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">	<span class="keyword">int</span> hash = hash(key);<span class="comment">//The hashcode of the key is further calculated to ensure an even hash.</span></span><br><span class="line">	<span class="keyword">int</span> i = indexFor(hash, table.length);<span class="comment">//Get the actual position in the table</span></span><br><span class="line">	<span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">	<span class="comment">//If this corresponding data already exists, </span></span><br><span class="line">    <span class="comment">//an overwrite is performed. Replace the old value with the new value and return the old value</span></span><br><span class="line">		Object k;</span><br><span class="line">		<span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">			V oldValue = e.value;</span><br><span class="line">			e.value = value;</span><br><span class="line">			e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">			<span class="keyword">return</span> oldValue;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	modCount++;	<span class="comment">//Guaranteed failure of rapid response if the internal structure of the HashMap changes during concurrent accesses</span></span><br><span class="line">	addEntry(hash, key, value, i);<span class="comment">//Adding an entry</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <em>inflateTable</em> method is used to allocate storage space in memory for the master array table. By <em>roundUpToPowerOf2</em> (toSize) you can ensure that the capacity is greater than or equal to the nearest power of toSize, e.g. toSize=13, then capacity=16;to_size=16,capacity=16;to_size=17,capacity=32.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inflateTable</span><span class="params">(<span class="keyword">int</span> toSize)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> capacity = roundUpToPowerOf2(toSize);	<span class="comment">//capacity must be a power of 2</span></span><br><span class="line">	<span class="comment">/**Here is the threshold assignment, taking the minimum value of capacity*loadFactor and MAXIMUM_CAPACITY+1.</span></span><br><span class="line"><span class="comment">	* The capaticy must not exceed MAXIMUM_CAPACITY, unless the loadFactor is greater than 1.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	threshold = (<span class="keyword">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">	table = <span class="keyword">new</span> Entry[capacity];</span><br><span class="line">	initHashSeedAsNeeded(capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The processing in <em>roundUpToPowerOf2</em> is such that the length of the array must be a power of 2. <em>Integer.highestOneBit</em> is used to get the value represented by the leftmost bit (the other bits are 0).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">roundUpToPowerOf2</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// assert number &gt;= 0 : &quot;number must be non-negative&quot;;</span></span><br><span class="line">	<span class="keyword">return</span> number &gt;= MAXIMUM_CAPACITY</span><br><span class="line">			? MAXIMUM_CAPACITY</span><br><span class="line">			: (number &gt; <span class="number">1</span>) ? Integer.highestOneBit((number - <span class="number">1</span>) &lt;&lt; <span class="number">1</span>) : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Hash function</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**This is a magic function that uses a lot of isomorphisms, transpositions, etc.</span></span><br><span class="line"><span class="comment">* Further calculations of the key&#x27;s hashcode and adjustment of the binary bits ensure that </span></span><br><span class="line"><span class="comment">* the resulting storage locations are as evenly distributed as possible.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> h = hashSeed;</span><br><span class="line">	<span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">		<span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">	h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">	<span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The value calculated by the above hash function is further processed by indexFor to obtain the actual storage location.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * return the index of array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>h&amp;(length-1) ensures that the index obtained is within the array, for example, the default capacity is 16, length-1=15, h=18, which is converted to binary as index=2. Bit operations are much higher performance for computers (there are a lot of bit operations in HashMap).</p>
<p>So the process for determining the final storage location is as follows.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/12/05/DOrEhd.jpg">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">process for determining</div>
</center>

<p>A further look at the implementation of addEntry:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">		resize(<span class="number">2</span> * table.length);	<span class="comment">//Scaling when size exceeds the critical threshold and a hash conflict is imminent</span></span><br><span class="line">		hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">		bucketIndex = indexFor(hash, table.length);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can learn from the code above that when a hash conflict occurs and the size is greater than the threshold, we need to expand the array. When expanding, we need to create a new array twice the length of the previous one, and the transfer all elements of the current Entry array. The new array is twice the length of the previous after expansion, so expansion is relatively resource-consuming operation.</p>
<h1 id="3-Why-must-the-array-length-of-a-HashMap-be-the-power-of-2"><a href="#3-Why-must-the-array-length-of-a-HashMap-be-the-power-of-2" class="headerlink" title="3. Why must the array length of a HashMap be the power of 2"></a>3. Why must the array length of a HashMap be the power of 2</h1><p>Let’s continue analysis the resize method above:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">	Entry[] oldTable = table;</span><br><span class="line">	<span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">	<span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">		threshold = Integer.MAX_VALUE;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">	transfer(newTable, initHashSeedAsNeeded(newCapacity));</span><br><span class="line">	table = newTable;</span><br><span class="line">	threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If the array is expanded, the length of the array changes and the storage location index = h&amp;(length-1),index may also change and the index needs to be recalculated, let’s look at the transfer method first.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">    <span class="comment">//The code in the for loop goes through the chain table one by one, </span></span><br><span class="line">    <span class="comment">//recalculating the index positions and copying the old array data into the new array </span></span><br><span class="line">    <span class="comment">//(the array does not store the actual data, so it&#x27;s just a copy reference)</span></span><br><span class="line">	<span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;</span><br><span class="line">			Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">			<span class="keyword">if</span> (rehash) &#123;</span><br><span class="line">				e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">			<span class="comment">//Point the next chain of the current entry to the new index position,</span></span><br><span class="line">            <span class="comment">//newTable[i] may be empty, or it may also be an entry chain,</span></span><br><span class="line">            <span class="comment">//in which case it is inserted directly at the head of the chain table.</span></span><br><span class="line">			e.next = newTable[i];</span><br><span class="line">			newTable[i] = e;</span><br><span class="line">			e = next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This method takes the data from the old array and traverses it one by one, chain by chain, throwing it into the new expanded array. The array index position is calculated by hash scrambling the key value hashcode and then performing a bitwise operation with length-1 to obtain the final array index position.</p>
<p>For example, if the binary representation of 16 is 10000, then length-1 is 15, and the binary is 01111, similarly the expanded array length is 32, binary is 100000, length-1 is 31, and the binary is 011111. It is guaranteed that the low bit is all 1, while the expansion has only one difference, i.e. an extra leftmost 1, so that when passing h&amp;(length-1), as long as the leftmost difference bit corresponding to h is 0, the new array index is guaranteed to be the same as the old one (greatly reducing the need to re-swap the data position of the old array which has been well hashed before), with personal understanding.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/12/06/DXzISg.jpg">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">length of HashMap array</div>
</center>

<p>Also, keeping the length of the array to the power of 2, with the lower bits of length-1 all being 1, results in a more uniform index of the obtained array.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/12/06/DjS79O.jpg">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">length of HashMap array</div>
</center>

<p>As we can see, with the &amp; operation above, the higher bits have no effect on the result (the hash function uses a variety of bit operations, possibly also to make the lower bits more hashed), we are only concerned with the lower bits, and if the lower bits are all 1, then for the lower part of h, any change in one bit will have an effect on the result, i.e. to get to the storage position index=21, h’s This is the only combination of the lower positions. This is the reason why the array length is designed so that it must be a power of 2.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/12/06/Dj9JyQ.jpg">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">length of HashMap array</div>
</center>

<p>If it is not the power of 2, i.e. the low bit is not all 1, then, to make index = 21, the low part of h is no longer unique and the chance of a hash conflict becomes even greater. At the same time, the bit corresponding to the index will not be equal to 1 in any case, and the corresponding array positions will be wasted.</p>
<h2 id="get-method"><a href="#get-method" class="headerlink" title="get method"></a>get method</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">　　<span class="comment">//If the key is null, then just go to table[0] to retrieve it.</span></span><br><span class="line">	<span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">		<span class="keyword">return</span> getForNullKey();</span><br><span class="line">	Entry&lt;K,V&gt; entry = getEntry(key);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span> == entry ? <span class="keyword">null</span> : entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The get method returns the corresponding value by means of a key, and if the key is null, it goes directly to table[0]. Let’s look at the getEntry method again</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">            </span><br><span class="line">	<span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//Calculation of the hash value via the key&#x27;s hashcode value</span></span><br><span class="line">	<span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</span><br><span class="line">	<span class="comment">//indexFor (hash&amp;length-1) gets the final array index and then traverses the chain table </span></span><br><span class="line">    <span class="comment">//to find the corresponding records by matching them with the equals method</span></span><br><span class="line">	<span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">		 e != <span class="keyword">null</span>;</span><br><span class="line">		 e = e.next) &#123;</span><br><span class="line">		Object k;</span><br><span class="line">		<span class="keyword">if</span> (e.hash == hash &amp;&amp; </span><br><span class="line">			((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">			<span class="keyword">return</span> e;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<p>As can be seen, the get method is relatively simple to implement, key(hashcode)-&gt;hash-&gt;indexFor-&gt;final index position, find the corresponding position table[i], check if there is a link table, traverse the link table, and pass the key’s The equals method compares and finds the corresponding record. It is important to note that some people feel that the above judgement of e.hash == hash is not necessary when traversing the chain table after locating the array position and then using only the equals judgement. This is not the case, think about it, if the incoming key object overrides the equals method but does not override the hashCode, and it happens that this object is positioned in this array, if only using equals may be equal, but its hashCode is not consistent with the current object, in this case, according to the conventions of Object’s hashCode, can not return Instead of the current object, null should be returned, as will be further explained in the examples that follow.</p>
<h1 id="4-Overriding-the-equals-method-requires-overriding-the-hashCode-method"><a href="#4-Overriding-the-equals-method-requires-overriding-the-hashCode-method" class="headerlink" title="4. Overriding the equals method requires overriding the hashCode method."></a>4. Overriding the equals method requires overriding the hashCode method.</h1><p>Finally we come to the age-old question, which is mentioned in various sources, “overwrite the hashcode as well as the equals”. Let’s take a small example to see what happens if we override equals without overriding the hashcode.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> idCard;</span><br><span class="line">        String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> idCard, String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.idCard = idCard;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Person person = (Person) o;</span><br><span class="line">            <span class="comment">//两个对象是否等值，通过idCard来确定</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.idCard == person.idCard;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        HashMap&lt;Person,String&gt; map = <span class="keyword">new</span> HashMap&lt;Person, String&gt;();</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="number">1234</span>,<span class="string">&quot;乔峰&quot;</span>);</span><br><span class="line">        <span class="comment">//put到hashmap中去</span></span><br><span class="line">        map.put(person,<span class="string">&quot;天龙八部&quot;</span>);</span><br><span class="line">        <span class="comment">//get取出，从逻辑上讲应该能输出“天龙八部”</span></span><br><span class="line">        System.out.println(<span class="string">&quot;结果:&quot;</span>+map.get(<span class="keyword">new</span> Person(<span class="number">1234</span>,<span class="string">&quot;萧峰&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>实际输出结果：null</code></pre>
<p>This result is easy to understand if we already have some understanding of the principles of HashMap. Although the keys we use for the get and put operations are logically equivalent (equal by comparison with equals), there is no overriding of the hashCode method, so that for the put operation, key(hashcode1)-&gt;hash-&gt; indexFor-&gt;final index position. Whereas when retrieving values by key key(hashcode1)-&gt;hash-&gt;indexFor-&gt;final index position, as hashcode1 is not equal to hashcode2, an array of positions is not located and the value is not retrieved. The logically incorrect value null is returned (it is also possible to happen to locate an array of positions. But it also determines whether its entry hash value is equal, as mentioned in the get method above).</p>
<p>So, when rewriting the methods of equals, care must be taken to rewrite the hashCode method. It is also important to ensure that calls to the hashCode method return the same integer value for two objects that are judged to be equal by equals. If the equals judge two objects that are not equal, the hashCode can be the same (hash conflicts will occur and should be avoided).</p>
<h1 id="5-Performance-optimisation-of-HashMap-in-JDK-1-8"><a href="#5-Performance-optimisation-of-HashMap-in-JDK-1-8" class="headerlink" title="5. Performance optimisation of HashMap in JDK 1.8"></a>5. Performance optimisation of HashMap in JDK 1.8</h1><p>What if there is too much data on an array of slots on the chain (i.e. the zip is too long) causing a drop in performance?<br>JDK1.8 has added a red and black tree on the basis of JDK1.7 to optimise the HashMap. That is to say, when the chain table exceeds 8, the chain table will be converted into a red and black tree to improve the performance of HashMap by taking advantage of the rapid addition, deletion and rechecking of the red and black tree, in which the insertion, deletion and search algorithms of the red and black tree will be used.</p>
<h1 id="Attachment-HashMap-put-method-logic-diagram-JDK-1-8"><a href="#Attachment-HashMap-put-method-logic-diagram-JDK-1-8" class="headerlink" title="Attachment: HashMap put method logic diagram (JDK 1.8)"></a>Attachment: HashMap put method logic diagram (JDK 1.8)</h1><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/12/06/DjEVhR.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">logic diagram of put method</div>
</center>]]></content>
      <categories>
        <category>Data structures</category>
      </categories>
      <tags>
        <tag>Data structures</tag>
        <tag>Java</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>A Possible Way to Remove Watermark perfectly</title>
    <url>/2020/11/08/WatermarkRemoval/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Although the traditional method of image watermark removal is efficient, it is more damaging to the details. It may takes a few seconds for some watermarks to be removed using repair stamp, and a few watermarks may be failed to be removed even given  one or two hours. </p>
<p>Some images that are not very rich in detail can be filled with adjacent pixels through Photoshop and other image processing software to cover up the watermark part, which can achieve near-perfect results.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://s1.ax1x.com/2020/11/09/BHcTpQ.jpg">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">From left to right, Original image (with watermark), PS processing (heavy loss of detail), Deep de-watermarking (full details).</div>
</center>

<p>PS is no longer perfect for some extremely detailed and complex images. Traditional PS watermark removal methods can no longer meet the demand for detailed and complex watermarks.</p>
<p>Nowadays, using AI technology to remove watermarks, we can achieve almost perfection.</p>
<a id="more"></a>

<blockquote>
<p>With the continuous development of artificial intelligence technology, deep learning its application in the filed of image processing is becoming more and more widespread. At ICML 2018, researchers from institutions such as NVIDIA and MIT showcased an image degradation technology, Noise2Noise, which automatically removes watermarks, blurs and other noises from images, almost perfectly restores them, and the rendering time is milliseconds. Reference: <a href="https://arxiv.org/abs/1803.04189">Noise2Noise: Learning Image Restoration without Clean Data</a></p>
</blockquote>
<p>Third party reproduction project: <a href="https://link.zhihu.com/?target=https://github.com/yu4u/noise2noise">yu4u/noise2noise</a> . This can be used to remove subtitles and image noise, but the author did not add a watermark removal feature. I’ve modified this python script to remove the watermark already. <strong>But it only works on computers with NVIDIA series graphics card.</strong></p>
<h1 id="Preparations"><a href="#Preparations" class="headerlink" title="Preparations"></a>Preparations</h1><h2 id="Download-Script"><a href="#Download-Script" class="headerlink" title="Download Script"></a>Download Script</h2><p><a href="https://github.com/shimmerjordan/n2n-dewatermark">https://github.com/shimmerjordan/n2n-dewatermark</a></p>
<h2 id="Build-environment"><a href="#Build-environment" class="headerlink" title="Build environment"></a>Build environment</h2><p>First go to the NVIDIA website and download the latest version of the graphics driver for your computer’s graphics card. (studio version - for designer PS modeling and drawing, GRD version - for playing games)</p>
<p><a href="https://www.nvidia.cn/Download/index.aspx?lang=cn">NVIDIA Driver Download</a></p>
<p>Many people are using older versions of video card drivers. So the cuda version is too low and the tf frame runs up reporting errors.</p>
<p>After installation, restart your computer, right-click on the desktop and click NVIDIA Control Panel -&gt; System Information -&gt; Components.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/11/17/DZYscn.jpg">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">System Information</div>
</center>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/11/17/DZtpjI.jpg" width="70%" height="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">CUDA version</div>
</center>
See if the CUDA version is higher than 9.0, otherwise it will report an error. If it is still below 9.0, use a software program such as Software Manager to uninstall any software on the computer that starts with NVIDIA, and then re-download the latest version of the graphics card driver from the address above. Then we need to download and install the CUDA through official website: [https://developer.nvidia.com/cuda-toolkit-archive](https://developer.nvidia.com/cuda-toolkit-archive). Besides, we should go to the official website and select the corresponding version of cuDNN to download.
[https://developer.nvidia.com/cudnn](https://developer.nvidia.com/cudnn).

<blockquote>
<p><strong>1、CUDA</strong></p>
<p>CUDA (Compute Unified Device Architecture) is a computing platform from graphics card manufacturer NVIDIA. CUDA is a general-purpose parallel computing architecture introduced by NVIDIA, which enables GPUs to solve complex computing problems.</p>
<p><strong>2、CUDNN</strong></p>
<p>NVIDIA cuDNN is a GPU acceleration library for deep neural networks. With an emphasis on performance, ease of use, and low memory overhead, NVIDIA cuDNN can be integrated into higher-level machine learning frameworks such as Google’s Tensorflow and UC Berkeley’s popular caffe software. The simple <strong>insert design</strong> allows developers to focus on designing and implementing neural network models rather than simply tuning performance, while also enabling high-performance modern parallel computing on the GPU.</p>
<p> <strong>3、Relationship between CUDA &amp; CUDNN</strong></p>
<p>CUDA is seen as a workbench, equipped with many tools, such as a hammer, screwdriver, etc. cuDNN is a deep learning GPU accelerated library based on CUDA, with which deep learning calculations can be done on the GPU. It’s the equivalent of a working tool, like it’s a wrench. But CUDA, the workbench, didn’t come with a wrench when it was bought. To run a deep neural network on CUDA, you have to install cuDNN, just like you have to buy the wrench back if you want to twist a nut. This is what allows the GPU to do deep neural network work and work much faster than the CPU.</p>
<p><strong>4、CUDNN will have no impact on CUDA</strong></p>
<p>From the official installation guide, we can see that as long as the cuDNN file is copied to the corresponding folder of CUDA, that is, the so-called plug-in design, the cuDNN database is added to CUDA, cuDNN is the extended computing library of CUDA, will not cause other effects on CUDA.</p>
<p>As you can see, the existing files in CUDA and cuDNN do not have the same files, and after copying the files of cuDNN, the files in CUDA will not be overwritten, and other files in CUDA will not be affected.</p>
</blockquote>
<p>Then build the python run container. For convenience, go straight to the highly integrated IDE, Anaconda. The tensorflow-gpu version needs to match the cuda/cudnn version, otherwise the script will run and report an error.</p>
<p>We open Anaconda Prompt and enter the following command into it:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/11/18/DmAjU0.jpg">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Add channels</div>
</center>


<p>Then press enter twice and copy this line again:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install tensorflow-gpu</span><br></pre></td></tr></table></figure>
<p>After the installation we can close the Anaconda Prompt. Here I have created and activated a <em>DeepLearning</em> environment in the <em>env</em> under <em>Anaconda</em>, where all operations take place.</p>
<h2 id="Prepare-data-set"><a href="#Prepare-data-set" class="headerlink" title="Prepare data set"></a>Prepare data set</h2><p>Download the coco2017 dataset at <a href="http://images.cocodataset.org/zips/val2017.zip">http://images.cocodataset.org/zips/val2017.zip</a></p>
<p>This zip file can decompress 5,000 images, of which 4,200 are used for training. The remaining 800 images are used for testing.</p>
<p>Open the n2n-watermark-remove-master directory that we have just extracted to the desktop, enter the dataset inside, then enter the train, use the file manager that comes with windows to randomly select 800 of the pictures, right-click and move them to the test directory. The remaining 4200 pictures (ctrl+A) are all selected and moved to the train directory.</p>
<h2 id="Acquisition-Production-of-watermarks"><a href="#Acquisition-Production-of-watermarks" class="headerlink" title="Acquisition/Production of watermarks"></a>Acquisition/Production of watermarks</h2><p>This step is very important, because if you want the computer to remove the watermark, you have to teach the computer to distinguish the watermark, and the watermark can only be removed if the computer learns to distinguish which parts of a watermarked image are watermarked and which parts are not. The key to this step is to find the original watermark image. Usually logos are watermarked and the logo image can be found on their website, (if it is on a white background it needs to be keyed).<br>Of course you can also use a cleverer approach, assuming that all the images on a website have a uniform style of watermark, you just need to go to the website and upload an image with a solid background (50% neutral grey recommended), let the system add a watermark to this image, and then calculate the difference through image subtraction, which is also the watermark image.</p>
<h2 id="Train-models"><a href="#Train-models" class="headerlink" title="Train models"></a>Train models</h2><p>Use the command via Anaconda Prompt to access the project directory of n2n-watermark-remove. Then use the following command to install the dependencies:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>It may be necessary to wait a while for this to be installed, after which the training operation can be carried out.</p>
<h3 id="Train-with-watermark"><a href="#Train-with-watermark" class="headerlink" title="Train with watermark"></a>Train with watermark</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python train.py --image_dir dataset&#x2F;train --test_dir dataset&#x2F;test --image_size 128 --batch_size 8 --lr 0.001 --source_noise_model text,0,50 --target_noise_model text,0,50 --val_noise_model text,25,25 --loss mae --output_path text_noise</span><br></pre></td></tr></table></figure>
<p>The training time is determined by the graphics card. They generally range from a few dozen hours to several hundred hours. If possible, Kaggle and Google Colab can be used.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/11/20/DQorBF.jpg">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">The Beginning of Training</div>
</center>

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/11/20/DQoghR.jpg">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">The Process of Training</div>
</center>

<p>We can see the ETA, loss and the PSNR during the process(Some index such as batch_size was initialized in the command above).</p>
<p>During the training process, each iteration will generate a weights.xxxxxx-xxxx.hdf5 model file. The hdf5 file is not always generated, and there are times when it is normal that it is not. </p>
<p>The number at the beginning represents the number of laps. The higher the number, the better the de-watermarking effect. The default for this script is 100 laps. The script runs by default for 100 laps. Normally the window is closed after about 50 laps and the resulting model is de-watermarked.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/11/20/DQRNM4.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">De-watermark model</div>
</center>

<p><strong>Further, the model can be trained on the noise of the image and achieve a noise reduction effect.</strong></p>
<h3 id="Train-with-Gaussian-noise"><a href="#Train-with-Gaussian-noise" class="headerlink" title="Train with Gaussian noise"></a>Train with Gaussian noise</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># train model using (noise, noise) pairs (noise2noise)</span></span><br><span class="line">python3 train.py --image_dir dataset/<span class="number">291</span> --test_dir dataset/Set14 --image_size <span class="number">128</span> --batch_size <span class="number">8</span> --lr <span class="number">0.001</span> --output_path gaussian</span><br><span class="line"></span><br><span class="line"><span class="comment"># train model using (noise, clean) paris (standard training)</span></span><br><span class="line">python3 train.py --image_dir dataset/<span class="number">291</span> --test_dir dataset/Set14 --image_size <span class="number">128</span> --batch_size <span class="number">8</span> --lr <span class="number">0.001</span> --target_noise_model clean --output_path clean</span><br></pre></td></tr></table></figure>
<h3 id="Train-with-text-insertion"><a href="#Train-with-text-insertion" class="headerlink" title="Train with text insertion"></a>Train with text insertion</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># train model using (noise, noise) pairs (noise2noise)</span></span><br><span class="line">python3 train.py --image_dir dataset/<span class="number">291</span> --test_dir dataset/Set14 --image_size <span class="number">128</span> --batch_size <span class="number">8</span> --lr <span class="number">0.001</span> --source_noise_model text,<span class="number">0</span>,<span class="number">50</span> --target_noise_model text,<span class="number">0</span>,<span class="number">50</span> --val_noise_model text,<span class="number">25</span>,<span class="number">25</span> --loss mae --output_path text_noise</span><br><span class="line"></span><br><span class="line"><span class="comment"># train model using (noise, clean) paris (standard training)</span></span><br><span class="line">python3 train.py --image_dir dataset/<span class="number">291</span> --test_dir dataset/Set14 --image_size <span class="number">128</span> --batch_size <span class="number">8</span> --lr <span class="number">0.001</span> --source_noise_model text,<span class="number">0</span>,<span class="number">50</span> --target_noise_model clean --val_noise_model text,<span class="number">25</span>,<span class="number">25</span> --loss mae --output_path text_clean</span><br></pre></td></tr></table></figure>
<h3 id="Train-with-random-valued-impulse-noise"><a href="#Train-with-random-valued-impulse-noise" class="headerlink" title="Train with random-valued impulse noise"></a>Train with random-valued impulse noise</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># train model using (noise, noise) pairs (noise2noise)</span></span><br><span class="line">python3 train.py --image_dir dataset/<span class="number">291</span> --test_dir dataset/Set14 --image_size <span class="number">128</span> --batch_size <span class="number">8</span> --lr <span class="number">0.001</span> --source_noise_model impulse,<span class="number">0</span>,<span class="number">95</span> --target_noise_model impulse,<span class="number">0</span>,<span class="number">95</span> --val_noise_model impulse,<span class="number">70</span>,<span class="number">70</span> --loss l0 --output_path impulse_noise</span><br><span class="line"></span><br><span class="line"><span class="comment"># train model using (noise, clean) paris (standard training)</span></span><br><span class="line">python3 train.py --image_dir dataset/<span class="number">291</span> --test_dir dataset/Set14 --image_size <span class="number">128</span> --batch_size <span class="number">8</span> --lr <span class="number">0.001</span> --source_noise_model impulse,<span class="number">0</span>,<span class="number">95</span> --target_noise_model clean --val_noise_model impulse,<span class="number">70</span>,<span class="number">70</span> --loss l0 --output_path impulse_clean</span><br></pre></td></tr></table></figure>
<p><strong>Model architectures</strong></p>
<p>With <code>--model unet</code>, UNet model can be trained instead of SRResNet.</p>
<p><strong>Resume training</strong></p>
<p>With <code>--weight path/to/weight/file</code>, training can be resumed with trained weights.</p>
<p>The detailed options are:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  --image_dir IMAGE_DIR</span><br><span class="line">                        test image dir (default: None)</span><br><span class="line">  --model MODEL         model architecture (&#39;srresnet&#39; or &#39;unet&#39;) (default:</span><br><span class="line">                        srresnet)</span><br><span class="line">  --weight_file WEIGHT_FILE</span><br><span class="line">                        trained weight file (default: None)</span><br><span class="line">  --test_noise_model TEST_NOISE_MODEL</span><br><span class="line">                        noise model for test images (default: gaussian,25,25)</span><br><span class="line">  --output_dir OUTPUT_DIR</span><br><span class="line">                        if set, save resulting images otherwise show result</span><br><span class="line">                        using imshow (default: None)</span><br></pre></td></tr></table></figure>
<p>This script adds noise using <code>test_noise_model</code> to each image in <code>image_dir</code> and performs denoising. If you want to perform denoising to already noisy images, use <code>--test_noise_model clean</code>.</p>
<h3 id="Noise-Models"><a href="#Noise-Models" class="headerlink" title="Noise Models"></a>Noise Models</h3><p>Using <code>source_noise_model</code>, <code>target_noise_model</code>, and <code>val_noise_model</code> arguments, arbitrary noise models can be set for source images, target images, and validatoin images respectively. Default values are taken from the experiment in [1].</p>
<ul>
<li>Gaussian noise<ul>
<li>gaussian,min_stddev,max_stddev (e.g. gaussian,0,50)</li>
</ul>
</li>
<li>Clean target<ul>
<li>clean</li>
</ul>
</li>
<li>Text insertion<ul>
<li>text,min_occupancy,max_occupancy (e.g. text,0,50)</li>
</ul>
</li>
<li>Random-valued impulse noise<ul>
<li>impulse,min_occupancy,max_occupancy (e.g. impulse,0,50)</li>
</ul>
</li>
</ul>
<p>You can see how these noise models work by:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 noise_model.py --noise_model text,0,95</span><br></pre></td></tr></table></figure>
<h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><h4 id="Plot-training-history"><a href="#Plot-training-history" class="headerlink" title="Plot training history"></a>Plot training history</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 plot_history.py --input1 gaussian --input2 clean</span><br></pre></td></tr></table></figure>
<h4 id="Gaussian-noise"><a href="#Gaussian-noise" class="headerlink" title="Gaussian noise"></a>Gaussian noise</h4><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/11/20/DQy9zj.png" width="60%" height="60%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Gaussian noise</div>
</center>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/11/20/DQcFaV.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Denoising result by clean target model (left to right: original, degraded image, denoised image)</div>
</center>

<p>From the above result, I confirm that we can train denoising model using noisy targets but it is not comparable to the model trained using clean targets. If UNet is used, the result becomes 29.67 (noisy targets) vs. 30.14 (clean targets).</p>
<h4 id="Text-insertion"><a href="#Text-insertion" class="headerlink" title="Text insertion"></a>Text insertion</h4><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/11/20/DQyDmt.png" width="60%" height="60%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Text insertion</div>
</center>

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/11/20/DQRpKH.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Denoising result by clean target model</div>
</center>



<h4 id="Random-valued-impulse-noise"><a href="#Random-valued-impulse-noise" class="headerlink" title="Random-valued impulse noise"></a>Random-valued impulse noise</h4><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/11/20/DQyxn1.png" width="60%" height="60%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;"> Random-valued impulse noise</div>
</center>

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/11/20/DQRZRS.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Denoising result by clean target model</div>
</center>

<h4 id="Check-denoising-result"><a href="#Check-denoising-result" class="headerlink" title="Check denoising result"></a>Check denoising result</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 test_model.py --weight_file [trained_model_path] --image_dir dataset&#x2F;Set14</span><br></pre></td></tr></table></figure>
<h2 id="De-watermarking"><a href="#De-watermarking" class="headerlink" title="De-watermarking"></a>De-watermarking</h2><p>Once you have the model, you can use it to remove the watermark. We use the following command:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python test_model.py --weight_file watermark-model-file-names.hdf5  --image_dir inputdir --output_dir outputdir</span><br></pre></td></tr></table></figure>
<p>Replace the <em>watermark-model-file-names.hdf5</em> with the actual file name, put the watermarked image in the <em>inputdir</em> and execute the command. After removing the watermark the picture will lie quietly in the <em>outputdir</em> directory.</p>
<p><strong>Watermarking effect:</strong> Here is the result of 9 hours of training on the 1050ti, which may be a little unclean, but in theory a basic level of usability can be reached after 20 hours of training (original image on the left, watermarking image on the right). </p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/11/20/DQozDS.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">de-watermark sample</div>
</center>

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/11/20/DQTCNj.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">de-watermark sample</div>
</center>

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://gcore.jsdelivr.net/gh/shimmerjordan/pic_bed@main/blog/2020/11/20/DQTk3q.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">de-watermark sample</div>
</center>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] J. Lehtinen, J. Munkberg, J. Hasselgren, S. Laine, T. Karras, M. Aittala, T. Aila, “Noise2Noise: Learning Image Restoration without Clean Data,” in Proc. of ICML, 2018.</p>
<p>[2] J. Kim, J. K. Lee, and K. M. Lee, “Accurate Image Super-Resolution Using Very Deep Convolutional Networks,” in Proc. of CVPR, 2016.</p>
<p>[3] X.-J. Mao, C. Shen, and Y.-B. Yang, “Image Restoration Using Convolutional Auto-Encoders with Symmetric Skip Connections,” in Proc. of NIPS, 2016.</p>
<p>[4] C. Ledig, et al., “Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network,” in Proc. of CVPR, 2017.</p>
<p>[5] O. Ronneberger, P. Fischer, and T. Brox, “U-Net: Convolutional Networks for Biomedical Image Segmentation,” in MICCAI, 2015.</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Deep Learning</tag>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title>Comparison between Machine Learning Algorithms</title>
    <url>/2020/11/06/MLAComparison/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Comparison-between-Algorithms"><a href="#Comparison-between-Algorithms" class="headerlink" title="Comparison between Algorithms"></a>Comparison between Algorithms</h1><p>It is better to teach a man to fish than to teach him to fish. This part will explain how to compare the performance of machine learning algorithms through “statistical tests”. Once we have mastered this method, we can analyse the performance of the algorithms ourselves, without having to follow the crowd.</p>
<a id="more"></a>

<p>Here I will begin by setting out the conclusions reached in this section as follows:</p>
<p>When comparing the performance of the two algorithms on multiple datasets:</p>
<ul>
<li>If the sample is paired (paired) and conforms to a normal distribution, the paired t-test is used preferentially (paired t test).</li>
<li>If the sample does not conform to a normal distribution, but matches the pairing, use the Wilcoxon Signed Ranks test.</li>
<li>If the samples are neither normally distributed nor paired, or even if the sample sizes are not equally large, try the Mann Whitney U test. it is worth noting that MW is used to process independent measures data, which is discussed on a case-by-case basis and analysed in depth later.</li>
</ul>
<p>When comparing the performance of multiple algorithms on multiple datasets:</p>
<ul>
<li>If the sample meets the assumptions of ANOVA (experimental measure) (e.g., normal, equal variance), use ANOVA preferentially.</li>
<li>If the sample does not meet the assumptions of ANOVA, use the Friedman test with the Nemenyi test for post-hoc.</li>
<li>If the sample size is different, or if Friedman-Nemenyi cannot be used for a specific reason, try Kruskal Wallis with Dunn’s test. It is important to note that this method is used to process independent measurements and is discussed on a case-by-case basis.</li>
</ul>
<p>This part is structured as follows: (1-2) Reasons and pitfalls of algorithm comparison (3-4) How to compare two algorithms (5-6) How to compare multiple algorithms (7) How to choose a comparison method based on data characteristics (8) Introduction to the tool library.</p>
<h2 id="1-Why-do-we-need-to-compare-algorithms’-performance"><a href="#1-Why-do-we-need-to-compare-algorithms’-performance" class="headerlink" title="1. Why do we need to compare algorithms’ performance"></a>1. Why do we need to compare algorithms’ performance</h2><p>George Box, a statistician, said: “All models are wrong, but some are useful” (All models are wrong, but some are useful). <strong>In layman’s terms, all algorithms have limitations, so there is no such thing as a “general-purpose optimal algorithm”, only an algorithm that may be progressively optimal under certain circumstances.</strong></p>
<p>Therefore, it is important to evaluate algorithm performance and select the optimal algorithm. Unfortunately, statistical evaluation is not yet widespread in the field of machine learning, and many evaluations tend to be simple analyses on a single piece of data, thus proving to be of limited effectiveness.</p>
<h2 id="2-Pitfalls-in-the-assessment-algorithm"><a href="#2-Pitfalls-in-the-assessment-algorithm" class="headerlink" title="2. Pitfalls in the assessment algorithm"></a>2. Pitfalls in the assessment algorithm</h2><p>First of all, we often talk about the need to choose a correct evaluation criteria, the common ones are: accuracy, recall, precision, ROC, Precision-Recall Curve, F1 and so on.</p>
<p>The choice of assessment criteria depends on the purpose and the characteristics of the dataset. On a more balanced dataset (where all types of data are approximately equal), there is little difference in the performance of these assessment criteria. And in cases where the data are heavily skewed, the selection of inappropriate assessment criteria, such as accuracy, can lead to results that look good, but are actually meaningless. For example, assuming the proportion of a rare blood group (2%), the model would only need to predict the entire sample as “non-rare”, which would result in an accuracy of 98%, but would be meaningless. In this case, the choice of ROC or precision rate may be more appropriate. This knowledge is easy to understand and is described in many popular science books, so we won’t repeat it.</p>
<p>Secondly we need to properly understand the measurement methods, common ones include:</p>
<ul>
<li><strong>Independent measures</strong>: Observations from different samples are independent and not correlated.</li>
<li><strong>Repeated measures</strong>: The observations used in the sample are the same, it’s just that the independent variables have different results on them.</li>
<li><strong>Matched pair</strong>: Use different observations in different samples, but try to make pairs of observations similar between samples.</li>
</ul>
<p>For example, we want to analyse the effect of web browsing time (3 hours per day vs. 10 hours per day) on the performance of college students. If we use the same 20 students and observe the difference between their 3 and 10 hours per day, that’s a repeated measure. If we choose 40 students, split them into two groups of 20 each, and then observe them separately that is an independent measurement. If we start with 20 students and then find 20 college students who are very similar to them and observe them in pairs that is paired similarity.</p>
<p><strong>We found that when the measurement is misinterpreted, the correct statistical means of analysis cannot be used.</strong></p>
<p>In this article we default that valuating the performance of different algorithms on <strong>multiple identical datasets</strong> is a <strong>repeated measurement</strong>, and exceptions will be discussed in Section 7. Also, the methods presented in this article can be used to <strong>compare any evaluation criteria</strong>, such as accuracy, precision, etc., and accuracy is discussed by default in this article.</p>
<h2 id="3-Comparison-of-two-algorithms-Inappropriate-methods"><a href="#3-Comparison-of-two-algorithms-Inappropriate-methods" class="headerlink" title="3. Comparison of two algorithms: Inappropriate methods"></a>3. Comparison of two algorithms: Inappropriate methods</h2><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://s1.ax1x.com/2020/11/05/BR5kDS.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Accuracy of the two algorithms on 14 datasets</div>
</center>

<p>The figure above shows the accuracy of the two decision tree methods $ (C4.5, C4.5+m) $ on 14 datasets. So how should we compare the two algorithms? Let’s start with a few erroneous (and inappropriate) methods:</p>
<p><strong>Inappropriate Method 1: Average each algorithm over all data sets and compare the sizes.</strong> </p>
<p>Reason for error: Our expectation that the algorithms are wrong on different data sets is not the same, so averaging is not meaningful. In other words, the data is not proportional(commensurate).</p>
<p><strong>Inappropriate method 2: Performing a paired sample t test.</strong> </p>
<p>Obviously, the t test is a statistical method that can be used to see if the average difference between the two methods on each data point is not equal to zero, but this method is inappropriate for several reasons:</p>
<ul>
<li>As with the average, errors on different datasets do not match proportionality.</li>
<li>t-test requires that the sample conform to a normal distribution, and obviously we cannot guarantee that the accuracy on different data sets will conform to a normal distribution.</li>
<li>The t-test has certain requirements for sample size, usually requiring a minimum of &gt;30 samples. In this example we only have 14, and in most cases we don’t have 30 data for the experiment.</li>
<li>Statistical results are susceptible to outliers because of the lack of proportionality.</li>
</ul>
<p><strong>Inappropriate Method 3: Sign test</strong> is a non-parametric test that has the advantage that there is no requirement for sample distribution and no requirement for normality. The comparison method is simple: see which algorithm is better on each dataset, and then count the total number of datasets where each algorithm prevails. In this example, for example, C4.5 is optimal on 2 datasets, with 2 ties and 10 worst. If we calculate the confidence interval for this result, we find that $ (p&lt;0.05) $  is required to be optimal on at least 11 datasets. Thus the disadvantages of this method include:</p>
<ul>
<li>The -sign test is a very weak test, losing a lot of information by comparing only superiority and inferiority, losing quantitative information (quantitative), e.g. 0.1 &lt; 0.9 and 0.1 &lt; 0.11 have the same meaning. For this reason, critical values need to be very large, such as in this example where the critical value of α = 0.05 is 11 (Figure 2).</li>
<li>Another problem is that, in the absence of quantitative information, it is often difficult to determine whether the “win” is due to randomness. For example, does 0.99&lt;0.991 really mean that Algorithm A is better? One way to look at it is that a threshold needs to be defined, and that a difference is only better if it is greater than the threshold. However, the problem with this view is that, assuming that Algorithm A has a “slight advantage” over Algorithm B on 1000 datasets, do we need to doubt significance? So again, <strong>the fundamental issue is that the sign test requires a large sample size in order to be significant.</strong></li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://s1.ax1x.com/2020/11/05/BRqMFS.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Threshold table for the sign test</div>
</center>

<h2 id="4-Comparison-of-the-two-algorithms-recommended-methods"><a href="#4-Comparison-of-the-two-algorithms-recommended-methods" class="headerlink" title="4. Comparison of the two algorithms: recommended methods"></a>4. Comparison of the two algorithms: recommended methods</h2><p>Given the generality, we need to use non-parametric tests. In other words, we need to ensure that we make no assumptions about the distribution of the sample, which is more general.</p>
<p><strong>Method 1: The Wilcoxon Signed Ranks Test (WS)</strong> is a non-parametric version of the paired t-test, which also analyses whether the difference between pairs of data is equal to O, but by ranking them. In other words, it can be interpreted as a quantitative version of the Signed Ranks Test. The advantages are as follows:</p>
<ul>
<li>No parameters, no requirement that the sample conform to a normal distribution.</li>
<li>Consistent with data proportionality, although qualitative (vs. paired t-test).</li>
<li>There are certain quantitative properties, i.e. larger differences have a greater impact on the final result (compared to a sign test).</li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://s1.ax1x.com/2020/11/05/BROu8g.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Accuracy and ranking of the two algorithms on 14 datasets</div>
</center>

<p><strong>Method 2 (see section VII for details): The Mann Whitney U test (MW)</strong>, like the WS, is a non-parametric and study ranking test, with the following characteristics:</p>
<ul>
<li>It can be used to detect samples of different sizes, for example, the performance of Algorithm A on 8 datasets vs the performance of Algorithm B on 10 datasets.</li>
<li>No paired sex requirement, cf. previous point.</li>
<li>The comparison is between two sample distributions, so errors in different datasets should conform to a particular distribution and may not satisfy proportionality</li>
<li>The assumptions made about the measurement methods are: <strong>independent measurement</strong>, which is not what we actually have.</li>
</ul>
<p>In other words, MW is recommended only reluctantly when the sample sizes are different, because it does not fit the assumption of independent measurement. Errors (accuracy) in different datasets do not necessarily fit a particular distribution and may well not be proportionate, but are useful in specific situations, as detailed in Section 7.</p>
<p><strong>Conclusion: If the sample is paired and conforms to a normal distribution, the paired t test is preferred. If the sample is not normally distributed, but matches the pairing, use WS.</strong></p>
<h2 id="5-Comparison-of-multiple-algorithms-inappropriate-methods"><a href="#5-Comparison-of-multiple-algorithms-inappropriate-methods" class="headerlink" title="5. Comparison of multiple algorithms: inappropriate methods"></a>5. Comparison of multiple algorithms: inappropriate methods</h2><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://s1.ax1x.com/2020/11/05/BROTdP.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Accuracy and ordering of four algorithms on 14 datasets</div>
</center>

<p>The above figure provides the accuracy of the four algorithms $ (C4.5, C4.5+m, C4.5+cf, C4.5+m+cf) $ on the 14 datasets.</p>
<p><strong>Inappropriate Method 1:</strong> One view is whether we can extend the comparison of two algorithms to multiple algorithms. Suppose there are k algorithms, can we compare them two-by-two and compute them $ \frac{(1+(k-1)) \times (k-1)}{2} = \frac{k^2-k}{2} times to get a matrix. This is a classic multiple hypothesis testing problem, and this exhaustive approach generally assumes independence between the different comparisons - which is generally unrealistic and needs to be corrected, so I won’t repeat it.</p>
<p><strong>Inappropriate method 2: Repeated measures ANOVA</strong> is a classical statistical method used to make comparisons between multiple samples Yes, it can be seen as a multiple extension of the t-test. ANOVA is not suitable for comparing algorithm performance for the following reasons:</p>
<ul>
<li>There is an assumption of normality for the sample distribution, however the accuracy on different data sets often does not meet this assumption.</li>
<li>Different samples have the same overall population variance.</li>
</ul>
<p>Unfortunately, the performance of the algorithm we want to compare does not fit this case, so ANOVA is not suitable.</p>
<h2 id="6-Comparison-of-algorithms-recommended-methods"><a href="#6-Comparison-of-algorithms-recommended-methods" class="headerlink" title="6. Comparison of algorithms: recommended methods"></a>6. Comparison of algorithms: recommended methods</h2><p>We need to find a way to solve the problems mentioned in part 5 at the same time, and this method requires:</p>
<ul>
<li>Non-parametric, does not make assumptions about the distribution of data.</li>
<li>No need, or as little dependence as possible, or the ability to automatically correct for errors caused by comparing two to two</li>
</ul>
<p>Demšar<sup>[1]</sup> recommends the non-parametric multivariate hypothesis test Friedman test, which is also a test based on rank, which assumes that all samples are ranked with equal mean values. Specifically, we first rank the different algorithms on each dataset and finally compute the mean value of the ranking of Algorithm A on all datasets. If there is no performance difference between all algorithms, then the mean ranking of their performance should be equal so that we can choose a specific confidence interval to determine whether the difference is significant or not.</p>
<p>Assuming that we find a statistically significant (p&lt;0.05) with the Friedman test, we also need to continue to do post-hoc analysis (post-hoc). In other words, the Friedman test can only tell us if there is a significant difference between algorithms, but not exactly which algorithms have performance differences. To locate the specific differing algorithms, we also need to perform post-hoc analysis.</p>
<p>The post-hoc that generally accompanies the Friedman test is the Nemenyi test, which indicates whether there is a significant difference between the two. We also generally visualize the Nemenyi results, such as the figure below.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://s1.ax1x.com/2020/11/05/BRzXbd.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;"> Nemenyi's comparison of 10 algorithms, with NS representing not significant</div>
</center>

<p>Another point worth mentioning is that even if Friedman proves that the performance of the algorithms is significantly different, Nemenyi does not necessarily specify which algorithms are different, because Nemenyit is weaker than Friedman, and it is not possible to analyse pairs of algorithms that must be analysed.</p>
<p><strong>Method 2 (see section 7):</strong> As with the two-by-two comparison, there are certain circumstances that prevent us from using Friedman-Nemenyi when comparing multiple samples. This method is characterized by:</p>
<ul>
<li>It can be used to test samples of different sizes, for example, Algorithm A’s performance on 8 datasets vs. Algorithm B’s performance on 10 datasets vs. Algorithm C’s performance on 20 datasets.</li>
<li>The assumption about the measurement method is that it is <strong>independent</strong>, which is not the case in our reality.</li>
</ul>
<h2 id="7-Repeated-measurements-and-independent-measurements"><a href="#7-Repeated-measurements-and-independent-measurements" class="headerlink" title="7. Repeated measurements and independent measurements."></a>7. Repeated measurements and independent measurements.</h2><p>In Part II, we analyze repeated versus independent measurements and assume that the comparison of machine learning performance should be <strong>based on “repeated measurements”, i.e., all algorithms are evaluated on the same dataset.</strong></p>
<p>Under this assumption, we recommend the parameter-free: Wilcoxon for comparing two algorithms and Friedman-Nemenyi for comparing multiple algorithms.</p>
<p>However, the assumption of <strong>“repeated measurements” is not necessarily true</strong>. For example, if we have only one data, and we sample from the data, we get a number of related test sets 1,2,3…. .n, and used to test different algorithms.</p>
<ul>
<li>Algorithm A: Test Set 1,2</li>
<li>Algorithm B: Test Set 3,4,5,6</li>
<li>Algorithm N…</li>
</ul>
<p>In this case, we can compare two algorithms with the Mann Whitney U test and Kruskal-Dunn with multiple algorithms. <strong>And it is worth noting that this is common with synthetic data, such as data sampled from a Gaussian distribution.</strong> Therefore, it is important to specifically analyse how the data are measured and then decide how to evaluate them.</p>
<h2 id="8-Tool-library-and-implementation"><a href="#8-Tool-library-and-implementation" class="headerlink" title="8. Tool library and implementation"></a>8. Tool library and implementation</h2><p>We know that all of these tests are available on R. Let’s focus on the libraries available on Python. Fortunately, all of the tests mentioned above are available in the Python tool library.</p>
<ul>
<li>Scipy <a href="https://docs.scipy.org/doc/scipy/reference/stats.html">Statistical functions</a> : Wilcoxon，Friedman，Mann Whitney</li>
<li><a href="https://pypi.org/project/scikit-posthocs/">scikit-posthocs</a>: Nemenyi，Dunn’s test</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Demšar, J., 2006. Statistical comparisons of classifiers over multiple data sets. Journal of Machine learning research, 7(Jan), pp. 1-30.</p>
<p>Here the properties of the various algorithms are compared and tabulated as follows:</p>
<p><img src="https://s1.ax1x.com/2020/11/05/B2Yx5n.jpg" alt="B2Yx5n.jpg"></p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to Machine Learning Algorithms</title>
    <url>/2020/11/04/MLAIntro/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>There are too many algorithms involved in artificial intelligence, and there are quite a few used in machine learning, so how can we choose the right algorithm?</p>
<p>This blog provides a brief introduction to machine learning algorithms, with specific descriptions and notes to be added later. </p>
<a id="more"></a>

<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>There are too many algorithms involved in artificial intelligence, and there are quite a few used in machine learning, so how can we choose the right algorithm?</p>
<p>That is the question. In the following, I will take you through what algorithms are available and how to choose one.</p>
<p>The outline of this Part</p>
<ol>
<li><p>Classification from the perspective of machine learning problems</p>
</li>
<li><p>Classification from the functional perspective of the algorithm</p>
</li>
<li><p>Machine learning algorithm decision tree</p>
</li>
</ol>
<h2 id="Classification-from-the-perspective-of-machine-learning-problems"><a href="#Classification-from-the-perspective-of-machine-learning-problems" class="headerlink" title="Classification from the perspective of machine learning problems"></a>Classification from the perspective of machine learning problems</h2><p>We start by classifying the machine learning problem itself in terms of the following types of algorithms.</p>
<h3 id="Supervised-learning"><a href="#Supervised-learning" class="headerlink" title="Supervised learning"></a>Supervised learning</h3><p>A large part of the problem in machine learning falls under the category of supervised learning, which, to put it simply and colloquially, is that given a training sample in which each sample input x corresponds to a deterministic outcome y, we need to train a model (mathematically, an x → y mapping f) that allows us to make predictions about the outcome y′ given an unknown sample x′.</p>
<p>If the prediction result is a discrete value (often a category type, such as spam/general mail in the mail classification problem, such as users will/won’t buy a product), then we call it a classification problem; if the prediction result is a continuous value (such as house price, stock price, etc.), then we call it a regression problem.</p>
<p>There are a range of machine learning algorithms that are used to solve supervised learning problems, such as the most classical ones for classification problems such as plain Bayes, logistic regression, support vector machines, etc.; for example, linear regression for regression problems and so on.</p>
<h3 id="Semi-supervised-learning"><a href="#Semi-supervised-learning" class="headerlink" title="Semi-supervised learning"></a>Semi-supervised learning</h3><p>This type of problem gives training data that is partly labeled and partly unlabeled. We want to learn the organizational structure of the data and also make predictions accordingly. The corresponding machine learning algorithms for such problems are Self-Training, Transductive Learning, Generative Model, and so on.</p>
<p>In general, the most common are the first two types of problems, and some machine learning algorithms corresponding to the first two types of problems are as follows.</p>
<p><img src="https://s1.ax1x.com/2020/11/04/BgHB7D.png" alt="BgHB7D.png"></p>
<h2 id="Classifying-algorithms-in-terms-of-their-functionality"><a href="#Classifying-algorithms-in-terms-of-their-functionality" class="headerlink" title="Classifying algorithms in terms of their functionality"></a>Classifying algorithms in terms of their functionality</h2><p>We can classify machine learning algorithms in terms of their common features (E.g., function, mode of operation). In the following, we’ll go ahead and classify algorithms based on their commonality. It should be noted, however, that our following categorization method may have a strong bias towards classification and regression, which are the most commonly encountered problems.</p>
<h3 id="Regression-Algorithms"><a href="#Regression-Algorithms" class="headerlink" title="Regression Algorithms"></a>Regression Algorithms</h3><p><img src="https://s1.ax1x.com/2020/11/05/B23Sd1.png" alt="B23Sd1.png"></p>
<p>A regression algorithm is a class of algorithms that obtains the best way to combine the input features by minimizing the difference between the predicted value and the actual result value. For continuous value prediction, there is linear regression, etc. For discrete value/category prediction, we can also consider logistic regression as a type of regression algorithm:</p>
<ul>
<li>Ordinary Least Squares Regression(OLSR)</li>
<li>Linear Regression</li>
<li>Logistic Regression</li>
<li>Stepwise Regression</li>
<li>Locally Estimated Scatterplot Smoothing(LOESS)</li>
<li>Multivariate Adaptive Regression Splines(MARS)</li>
</ul>
<h3 id="Instance-based-Algorithms"><a href="#Instance-based-Algorithms" class="headerlink" title="Instance-based Algorithms"></a>Instance-based Algorithms</h3><p><img src="https://s1.ax1x.com/2020/11/05/B235lD.png" alt="B235lD.png"></p>
<p>By instance-based algorithms here, I mean the model we finally build that still has a strong dependence on the original data sample instance. These types of algorithms, when making predictive decisions, typically use some type of similarity criterion to compare the similarity of the sample to be predicted to the original sample, and then give the corresponding prediction. Common example-based algorithms include:</p>
<ul>
<li>k-Nearest Neighbour (kNN)</li>
<li>Learning Vector Quantization (LVQ)</li>
<li>Self-Organizing Map (SOM)</li>
<li>Locally Weighted Learning (LWL)</li>
</ul>
<h3 id="Decision-Tree-Algorithms"><a href="#Decision-Tree-Algorithms" class="headerlink" title="Decision Tree Algorithms"></a>Decision Tree Algorithms</h3><p><img src="https://s1.ax1x.com/2020/11/05/B23x1S.png" alt="B23x1S.png"></p>
<p>A decision tree class algorithm will build a tree containing many decision paths based on the raw data features. The prediction phase selects the paths for decision making. Common decision tree algorithms include:</p>
<ul>
<li>Classification and Regression Tree (CART)</li>
<li>Iterative Dichotomiser 3 (ID3)</li>
<li>C4.5 and C5.0 (different versions of a powerful approach)</li>
<li>Chi-squared Automatic Interaction Detection (CHAID)</li>
<li>M5</li>
<li>Conditional Decision Trees</li>
</ul>
<h3 id="Bayesian-Algorithms"><a href="#Bayesian-Algorithms" class="headerlink" title="Bayesian Algorithms"></a>Bayesian Algorithms</h3><p><img src="https://s1.ax1x.com/2020/11/05/B28LDJ.png" alt="B28LDJ.png"></p>
<p>Bayesian-like algorithms are referred to here as algorithms that implicitly use Bayesian principles in classification and regression problems. Including.</p>
<ul>
<li>Naive Bayes</li>
<li>Gaussian Naive Bayes</li>
<li>Multinomial Naive Bayes</li>
<li>Averaged One-Dependence Estimators (AODE)</li>
<li>Bayesian Belief Network (BBN)</li>
<li>Bayesian Network (BN)</li>
</ul>
<h3 id="Clustering-Algorithms"><a href="#Clustering-Algorithms" class="headerlink" title="Clustering Algorithms"></a>Clustering Algorithms</h3><p><img src="https://s1.ax1x.com/2020/11/05/B2GEVA.png" alt="B2GEVA.png"></p>
<p>What clustering algorithms do is to cluster the input samples into ‘clusters’ of ‘data’ around some center in order to discover some patterns in the structure of the data distribution. Commonly used clustering algorithms include.</p>
<ul>
<li>k-Means</li>
<li>Hierarchical Clustering</li>
<li>Expectation Maximisation (EM)</li>
</ul>
<h3 id="Association-Rule-Learning-Algorithms"><a href="#Association-Rule-Learning-Algorithms" class="headerlink" title="Association Rule Learning Algorithms"></a>Association Rule Learning Algorithms</h3><p><img src="https://s1.ax1x.com/2020/11/05/B2GRxO.png" alt="B2GRxO.png"></p>
<p>Association rule algorithms are a class of algorithms that attempt to extract, the rules that best explain the observed correlations between training samples, i.e., to gain knowledge of dependencies or associations between an event and other events, common association rule algorithms are.</p>
<ul>
<li>Apriori algorithm</li>
<li>Eclat algorithm</li>
</ul>
<h3 id="Artificial-Neural-Network-Algorithms"><a href="#Artificial-Neural-Network-Algorithms" class="headerlink" title="Artificial Neural Network Algorithms"></a>Artificial Neural Network Algorithms</h3><p><img src="https://s1.ax1x.com/2020/11/05/B2JeeJ.png" alt="B2JeeJ.png"></p>
<p>This is a class of algorithms inspired by the way neurons work in the human brain. It is important to mention that I have singled out “deep learning”, and that the artificial neural network in this case favours more traditional perception algorithms, which include.</p>
<ul>
<li>Perceptron</li>
<li>Back-Propagation</li>
<li>Radial Basis Function Network (RBFN)</li>
</ul>
<h3 id="Deep-Learning-Algorithms"><a href="#Deep-Learning-Algorithms" class="headerlink" title="Deep Learning Algorithms"></a>Deep Learning Algorithms</h3><p><img src="https://s1.ax1x.com/2020/11/05/B2JMJx.png" alt="B2JMJx.png"></p>
<p>Deep learning is a very hot field of machine learning in recent years, and it usually has a deeper level and more complex structure compared to the artificial neural network algorithms listed above. This type of algorithm is widely used in computer vision.</p>
<ul>
<li>Deep Boltzmann Machine (DBM)</li>
<li>Deep Belief Networks (DBN)</li>
<li>Convolutional Neural Network (CNN)</li>
<li>Stacked Auto-Encoders</li>
</ul>
<h3 id="Dimensionality-Reduction-Algorithms"><a href="#Dimensionality-Reduction-Algorithms" class="headerlink" title="Dimensionality Reduction Algorithms"></a>Dimensionality Reduction Algorithms</h3><p><img src="https://s1.ax1x.com/2020/11/05/B2JGOe.png" alt="B2JGOe.png"></p>
<p>In a way, dimensionality reduction algorithms are actually somewhat similar to clustering in that they are also attempting to discover the inherent structure of the original training data, but the dimensionality reduction algorithm is attempting, with less information (lower dimensional information) to summarize and describe much of the original information.</p>
<p>Interestingly, dimensionality reduction algorithms are generally useful in visualizing data, or in reducing the computational space of data. It is used as a machine learning algorithm, and many times it is used to process the data first and then imbibe other machine learning algorithms to learn. The main dimensionality reduction algorithms include.</p>
<ul>
<li>Principal Component Analysis (PCA)</li>
<li>Principal Component Regression (PCR)</li>
<li>Partial Least Squares Regression (PLSR)</li>
<li>Sammon Mapping</li>
<li>Multidimensional Scaling (MDS)</li>
<li>Linear Discriminant Analysis (LDA)</li>
<li>Mixture Discriminant Analysis (MDA)</li>
<li>Quadratic Discriminant Analysis (QDA)</li>
<li>Flexible Discriminant Analysis (FDA)</li>
</ul>
<h3 id="Ensemble-Algorithms"><a href="#Ensemble-Algorithms" class="headerlink" title="Ensemble Algorithms"></a>Ensemble Algorithms</h3><p><img src="https://s1.ax1x.com/2020/11/05/B2JwfP.png" alt="B2JwfP.png"></p>
<p>Strictly speaking, it’s not really a machine learning algorithm, but more of an optimization tool/strategy that usually combines multiple simple weak machine learning algorithms to make more reliable decisions. Take the classification problem, for example, it is intuitively understood that a single classifier can be wrong and unreliable, but if multiple classifiers vote, then it is much more reliable. Common approaches to model fusion enhancement include.</p>
<ul>
<li>Random Forest</li>
<li>Boosting</li>
<li>Bootstrapped Aggregation (Bagging)</li>
<li>AdaBoost</li>
<li>Stacked Generalization (blending)</li>
<li>Gradient Boosting Machines (GBM)</li>
<li>Gradient Boosted Regression Trees (GBRT)</li>
</ul>
<h2 id="Decision-trees-for-machine-learning-algorithms"><a href="#Decision-trees-for-machine-learning-algorithms" class="headerlink" title="Decision trees for machine learning algorithms"></a>Decision trees for machine learning algorithms</h2><p><img src="https://s1.ax1x.com/2020/11/05/B2Jff0.png" alt="B2Jff0.png"></p>
<p>First of all, if the sample size is very small, there is no way for all machine learning algorithms to “learn” common rules and patterns from it, so getting more data is king. Then according to the problem is unsupervised learning and continuous/discrete value prediction, it is divided into four method classes: classification, clustering, regression and dimensional reduction, and each class has a different treatment according to the specific situation.</p>
<p>With this decision tree, it is easy to choose the right algorithm based on the data you have and the purpose you want to achieve.</p>
<p>And this image is from <a href="https://scikit-learn.org/stable/tutorial/machine_learning_map/">https://scikit-learn.org/stable/tutorial/machine_learning_map/</a></p>
<h2 id="Related-work"><a href="#Related-work" class="headerlink" title="Related work"></a>Related work</h2><p>The October 2014 issue of JMLR has a fabulous article, Do we Need Hundreds of Classifiers to Solve Real World Classification Problems? testing the performance of 179 classification models on 121 data from all of UCI. Random Forests and SVM (Gaussian kernel, with LibSVM version) were found to perform best.<a href="https://jmlr.org/papers/v15/delgado14a.html">Do we Need Hundreds of Classifiers to Solve Real World Classification Problems?</a></p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Milestones</title>
    <url>/2020/11/03/Milestones/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Milestones"><a href="#Milestones" class="headerlink" title="Milestones"></a>Milestones</h1><hr>
<p>This blog serves as a hashtag,  from which I’ll do my best to publish blogs in English!</p>
<a id="more"></a>]]></content>
      <categories>
        <category>新手指北</category>
      </categories>
      <tags>
        <tag>reference</tag>
      </tags>
  </entry>
  <entry>
    <title>Lexian-Mall电子商务平台</title>
    <url>/2020/07/24/LexianMallIntro/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Neu中软国际实训 Lexian-Mall电子商务平台，包括基于SpringBoot的后端服务器、基于SpringCloud的后端服务器、基于Vue的CMS后台管理系统以及基于Uni-app的客户端。</p>
<a id="more"></a>

<h2 id="相关技术栈"><a href="#相关技术栈" class="headerlink" title="相关技术栈"></a>相关技术栈</h2><table>
    <tr >
        <th>技术栈</th>
        <th>说明</th>
    </tr>
     <tr>
         <td>Mysql </td>
         <td>Mysql版本号区别，操作系统对应的不同版本，Mysql相对其他数据库的优势，Mysql服务介绍、启动服务的方式,配置客户端服务命名，配置文件的位置</td>
     </tr>
     <tr>
         <td>html5&css3</td><td>Html5新特性、Html5新增块标签、Html5新增表单元素、CSS3新特性</td>
     </tr>
    <tr>
        <td>VUE技术</td>
        <td>Vue技术</td>
    </tr>
     <tr><td>VueX</td><td>Vue数据管理技术</td></tr>
     <tr><td>ElementUI</td><td>用于Vue界面的组件化技术</td></tr>
     <tr><td>Echarts</td><td>用于电子图表的实现</td></tr>
     <tr><td  rowspan="2">SpringMVC</td><td>环境搭建、Controller控制器、传参、视图解析器</td></tr>
     <tr><td>文件上传下载、表单验证</td></tr>
     <tr><td rowspan="2">Mybatis</td><td>生成工具、CURD操作、映射文件</td></tr>
     <tr><td>动态SQL、分页操作、Dao设计</td></tr>
     <tr><td rowspan="2">Spring</td><td>环境搭建、IOC与AOP</td></tr>
     <tr><td>SSM整合，共同处理封装</td></tr>
     <tr><td>Redis</td><td>高速缓存和消息队列代理的应用</td></tr>
     <tr><td>SpringBoot</td><td>SpringBoot框架自动配置</td></tr>
     <tr><td>Log4j</td><td>日志系统</td></tr>
     <tr><td>Hikari</td><td>快速的数据库连接池</td></tr>
     <tr><td>pagehelper</td><td>分页插件</td></tr>
     <tr><td>NATAPP</td><td>内网穿透工具</td></tr>
     <tr><td rowspan="2">Spring Cloud</td><td>Ribbon、feign、getWay、eureka、Zuul等</td></tr>
     <tr><td>Hytrix、config、用户中心、事务中心。</td></tr>
 </table>
## 项目开发方法

<p>全阶段采用模块化分工与全组合作的方式进行，将瀑布式的生命周期模型结合原型法加速了项目的进展。项目后期利用单元测试与逻辑测试，使得项目有更强健的稳定性。</p>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><table>
<thead>
<tr>
<th><strong>工具名</strong></th>
<th><strong>用途</strong></th>
</tr>
</thead>
<tbody><tr>
<td>HBuilerX</td>
<td>Uni-app端的开发IDE</td>
</tr>
<tr>
<td>Navicat</td>
<td>数据库连接可视化工具</td>
</tr>
<tr>
<td>SQLyogEnt</td>
<td>数据库可视化工具</td>
</tr>
<tr>
<td>Ezdml</td>
<td>数据库文档生成工具</td>
</tr>
<tr>
<td>IntelliJ IDEA</td>
<td>SpringCloud以及SpringBoot后端开发IDE</td>
</tr>
<tr>
<td>VSCode</td>
<td>CMS后台管理端开发IDE</td>
</tr>
<tr>
<td>NATAPP</td>
<td>内网穿透工具</td>
</tr>
<tr>
<td>SourceTree</td>
<td>Git管理可视化工具</td>
</tr>
<tr>
<td>RedisDesktopManager</td>
<td>Redis可视化工具</td>
</tr>
<tr>
<td>Pycharm</td>
<td>Python可视化工具</td>
</tr>
<tr>
<td>微信开发者工具</td>
<td>用于Uni-app小程序端测试</td>
</tr>
<tr>
<td>Processon</td>
<td>流程图、状态图等作图工具</td>
</tr>
<tr>
<td>katalon recorder</td>
<td>自动化测试脚本生成插件</td>
</tr>
<tr>
<td>mybatis-generator</td>
<td>MyBaits生成工具</td>
</tr>
</tbody></table>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><table>
<thead>
<tr>
<th><strong>本地环境</strong></th>
<th><strong>远端环境</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Windows10</td>
<td>滴滴云：Windows Server 2019 DataCenter</td>
</tr>
<tr>
<td>JDK1.8</td>
<td>MySQL8.0</td>
</tr>
<tr>
<td>Tomcat9</td>
<td>百度接口：OCR证件识别</td>
</tr>
<tr>
<td>MySQL8.0</td>
<td>七牛云：图片上传接口</td>
</tr>
<tr>
<td>SpringBoot2.3</td>
<td></td>
</tr>
<tr>
<td>SpringCloud Hoxton.SR1</td>
<td></td>
</tr>
<tr>
<td>Redis-x64-3.0.504</td>
<td></td>
</tr>
</tbody></table>
<h1 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h1><h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><p>这里采用了SpringBoot以及SpringCloud双后端服务器的并行开发方法。由于受机器性能的限制。在本地测试时大部分采用基于SpringBoot的后端服务器，而SpringCloud环境服务器需要部署在机器条件更好的组员或者远端服务器上。这里的架构展示是基于SpringCloud的服务器架构，其详情如下图所示：</p>
<p><img src="https://s1.ax1x.com/2020/07/24/Ujp1I0.png" alt="Ujp1I0.png"></p>
<p>对于SpringBoot后端，其主要的前置框架如下图所示，</p>
<p><img src="https://s1.ax1x.com/2020/07/24/UjC2VA.png" alt="UjC2VA.png"></p>
<h2 id="功能模块划分"><a href="#功能模块划分" class="headerlink" title="功能模块划分"></a>功能模块划分</h2><p>在需求分析与设计阶段，我们已经根据实际情况对项目的功能模块进行了初步的分析与设计。在进行项目编码的时候一方面严格按照模块划分规则来实现项目，另一方面也对初期生成的模块划分进行了优化。其最终的高一致性版本如下表所示：</p>
<table>
<tr><th>角色</th><th>功能类别</th><th>子功能</th></tr>
 <tr><td rowspan="21">顾客</td><td rowspan="3">登陆</td><td>登陆（手机号登录、登录名登录）</td></tr>
 <tr><td>注册</td></tr>
 <tr><td>找回密码</td></tr>
 <tr><td rowspan="3">购物车</td><td>查看购物车</td></tr>
 <tr><td>添加购物车</td></tr>
 <tr><td>移除/清空购物车</td></tr>
 <tr><td rowspan="5">个人中心</td><td>实名认证</td></tr>
 <tr><td>修改个人信息</td></tr>
 <tr><td>系统设置</td></tr>
 <tr><td>地址管理</td></tr>
 <tr><td>浏览记录管理</td></tr>
 <tr><td rowspan="4">订单管理</td><td>下单操作</td></tr>
 <tr><td>订单查看</td></tr>
 <tr><td>订单状态管理</td></tr>
 <tr><td>申诉、评价订单</td></tr>
 <tr><td rowspan="6">个人账户商品管理</td><td>商品搜索</td></tr>
 <tr><td>查看商品详情</td></tr>
 <tr><td>查看商品评价</td></tr>
 <tr><td>商品浏览记录</td></tr>
 <tr><td>商品收藏夹</td></tr>
 <tr><td>推广分享</td></tr>
 <tr><td rowspan="18">店铺管理员</td><td rowspan="6">店铺订单管理</td><td>浏览订单记录</td></tr>
 <tr><td>查询订单</td></tr>
 <tr><td>修改订单信息</td></tr>
 <tr><td>新增订单</td></tr>
 <tr><td>处理客户申请</td></tr>
 <tr><td>统计店铺订单信息</td></tr>
 <tr><td rowspan="3">店铺活动管理</td><td>查看活动列表</td></tr>
 <tr><td>提交活动申请</td></tr>
 <tr><td>修改活动申请</td></tr>
 <tr><td rowspan="3">店铺信息管理</td><td>查看门店信息</td></tr>
 <tr><td>门店信息管理</td></tr>
 <tr><td>门店营业管理</td></tr>
 <tr><td rowspan="4">店铺商品管理</td><td>查看商品信息列表</td></tr>
 <tr><td>新增商品</td></tr>
 <tr><td>修改商品信息</td></tr>
 <tr><td>上架/下架商品</td></tr>
 <tr><td rowspan="2">店铺活动商品管理</td><td>活动商品信息展示</td></tr>
 <tr><td>活动商品管理</td></tr>
 <tr><td rowspan="7">系统管理员</td><td>平台商品管理</td><td>下架违规商品</td></tr>
 <tr><td rowspan="4">平台店铺管理</td><td>新增门店审核</td></tr>
 <tr><td>暂停门店运营</td></tr>
 <tr><td>修改门店信息</td></tr>
 <tr><td>移除门店</td></tr>
 <tr><td rowspan="2">平台权限管理</td><td>查看后端人员信息</td></tr>
 <tr><td>权限管理</td></tr>
</table>
## SSM框架下的类调用关系

<p>主要编写的类和对象的详细设计主要涉及到的包括表现层（前端），controller层，service层，DAO层四层，在下述的调用图中已用蓝色背景标识。</p>
<p><img src="https://s1.ax1x.com/2020/07/24/UjZAmT.png" alt="UjZAmT.png"></p>
<h1 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h1><ol>
<li><p>cmd进入<code>lexian_admin/vue-element-admin-master</code>进行Vue项目的npm/cnpm安装</p>
</li>
<li><p>运行<code>数据库文件/lexian.sql</code>建立数据库并插入数据</p>
</li>
<li><p>启用Redis、MySQL服务</p>
</li>
<li><p>（H5测试环境）右击浏览器快捷方式/属性/目标：在末尾添加以下代码，注意开头有空格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--test-type --disable-web-security</span><br></pre></td></tr></table></figure>
<h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1></li>
<li><p>配置后端application.yaml</p>
<p>调整MySQL数据库地址、密码以及Redis密码、后端运行端口号</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&quot;jdbc:mysql://localhost:3306/lexian?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC&quot;</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="comment"># 连接只读数据库时配置为true， 保证安全</span></span><br><span class="line">      <span class="attr">read-only:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="number">30000</span></span><br><span class="line">      <span class="comment"># 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟</span></span><br><span class="line">      <span class="attr">idle-timeout:</span> <span class="number">600000</span></span><br><span class="line">      <span class="comment"># 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒</span></span><br><span class="line">      <span class="attr">max-lifetime:</span> <span class="number">450000</span></span><br><span class="line">      <span class="comment"># 连接池中允许的最大连接数。缺省值：10</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">60</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">password:</span></span><br><span class="line">      <span class="attr">jedis:</span></span><br><span class="line">        <span class="attr">pool:</span></span><br><span class="line">          <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">          <span class="attr">max-idle:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">max-wait:</span> <span class="number">100000</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="comment">#context-path: /ocp</span></span><br><span class="line">    <span class="attr">encoding:</span></span><br><span class="line">      <span class="attr">charset:</span> <span class="string">UTF-8</span></span><br><span class="line">      <span class="attr">force:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改前端（包括CMS以及Uni-app）连接后端API地址，使其端口号一致</p>
</li>
</ol>
<h1 id="参与贡献"><a href="#参与贡献" class="headerlink" title="参与贡献"></a>参与贡献</h1><ul>
<li><p>辛毅</p>
</li>
<li><p>鞠桥丹</p>
</li>
<li><p>曾德歆</p>
</li>
<li><p>杨佳玉</p>
</li>
<li><p>易忱</p>
</li>
<li><p>金卓然</p>
</li>
</ul>
<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p>github：<a href="https://github.com/shimmerjordan/Lexian-Mall">https://github.com/shimmerjordan/Lexian-Mall</a></p>
]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>SpringCloud</tag>
        <tag>Redis</tag>
        <tag>Vue</tag>
        <tag>电商平台</tag>
        <tag>uni-app</tag>
        <tag>CMS管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Lexian-mall项目结构搭建</title>
    <url>/2020/06/28/lexian-mall-SpringCloud/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这里记录lexian-mall项目的后端脚手架搭建，仅包含部分配置，在后续的开发中所添加的依赖不再赘述。</p>
<a id="more"></a>

<h1 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h1><p>经过需求分析阶段，在项目初期得到如下的系统架构图：</p>
<img src="https://s1.ax1x.com/2020/06/28/NRGu7j.png" width = 76% />

<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p>基于SpringCloud的电商平台lexian-mall项目的总体框架如下所示：</p>
<img src="https://s1.ax1x.com/2020/06/28/N2IbPs.jpg" width = 50% height = 50% />

<p>其项目结构如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├─.idea			</span><br><span class="line">│  └─libraries</span><br><span class="line">├─.mvn</span><br><span class="line">│  └─wrapper</span><br><span class="line">├─lexian-mall-api-dto									&#x2F;&#x2F;类似于service-api与service对应</span><br><span class="line">│  ├─lexian-mall-api-dto-cart-dto</span><br><span class="line">│  ├─lexian-mall-api-dto-item-dto</span><br><span class="line">│  ├─lexian-mall-api-dto-member-dto</span><br><span class="line">│  ├─lexian-mall-api-dto-order-dto</span><br><span class="line">│  ├─lexian-mall-api-dto-pay-dto</span><br><span class="line">│  ├─lexian-mall-api-dto-search-dto</span><br><span class="line">│  └─lexian-mall-api-dto-sso-dto</span><br><span class="line">├─lexian-mall-basics									&#x2F;&#x2F;分布式基础配置</span><br><span class="line">│  ├─lexian-mall-basics-apollo-config-server				&#x2F;&#x2F;阿波罗分布式配置中心			</span><br><span class="line">│  ├─lexian-mall-basics-elk-kafka							&#x2F;&#x2F;分布式事务解决框架</span><br><span class="line">│  ├─lexian-mall-basics-eureka								&#x2F;&#x2F;注册中心 8080</span><br><span class="line">│  ├─lexian-mall-basics-lcn									&#x2F;&#x2F;分布式事务解决框架</span><br><span class="line">│  ├─lexian-mall-basics-xxljob								&#x2F;&#x2F;分布式任务调度平台</span><br><span class="line">│  ├─lexian-mall-basics-xxlsso-server						&#x2F;&#x2F;分布式单点登录系统</span><br><span class="line">│  ├─lexian-mall-basics-zipkin								&#x2F;&#x2F;分布式调用链系统</span><br><span class="line">│  └─lexian-mall-basics-zuul								&#x2F;&#x2F;统一请求入口 80</span><br><span class="line">├─lexian-mall-common									&#x2F;&#x2F;通用框架</span><br><span class="line">│  ├─lexian-mall-common-core								&#x2F;&#x2F;核心工具类</span><br><span class="line">│  └─lexian-mall-common-xxlsso-core							&#x2F;&#x2F;单点登录系统核心工具类</span><br><span class="line">├─lexian-mall-plugin									&#x2F;&#x2F;插件类</span><br><span class="line">├─lexian-mall-portal									&#x2F;&#x2F;门户</span><br><span class="line">│  ├─lexian-mall-porta-cms									&#x2F;&#x2F;管理系统</span><br><span class="line">│  ├─lexian-mall-portal-cart								&#x2F;&#x2F;购物车系统</span><br><span class="line">│  ├─lexian-mall-portal-pay									&#x2F;&#x2F;支付系统</span><br><span class="line">│  ├─lexian-mall-portal-search								&#x2F;&#x2F;搜索系统</span><br><span class="line">│  └─lexian-mall-portal-sso									&#x2F;&#x2F;单点登录系统</span><br><span class="line">├─lexian-mall-service									&#x2F;&#x2F;服务层</span><br><span class="line">│  ├─lexian-mall-service-auth								&#x2F;&#x2F;OAuth授权验证服务</span><br><span class="line">│  ├─lexian-mall-service-cart								&#x2F;&#x2F;购物车服务</span><br><span class="line">│  ├─lexian-mall-service-goods								&#x2F;&#x2F;商品服务</span><br><span class="line">│  ├─lexian-mall-service-integral							&#x2F;&#x2F;积分服务</span><br><span class="line">│  ├─lexian-mall-service-member								&#x2F;&#x2F;会员服务</span><br><span class="line">│  ├─lexian-mall-service-order								&#x2F;&#x2F;订单服务</span><br><span class="line">│  ├─lexian-mall-service-pay								&#x2F;&#x2F;支付服务</span><br><span class="line">│  ├─lexian-mall-service-search								&#x2F;&#x2F;搜索服务</span><br><span class="line">│  └─lexian-mall-service-sso								&#x2F;&#x2F;单点登录服务</span><br><span class="line">└─lexian-mall-service-api							&#x2F;&#x2F;接口层，这里的接口与service层一一对应，不再赘述</span><br><span class="line">    ├─lexian-mall-service-api-auth</span><br><span class="line">    ├─lexian-mall-service-api-cart</span><br><span class="line">    ├─lexian-mall-service-api-goods</span><br><span class="line">    ├─lexian-mall-service-api-integral</span><br><span class="line">    ├─lexian-mall-service-api-member</span><br><span class="line">    ├─lexian-mall-service-api-order</span><br><span class="line">    ├─lexian-mall-service-api-pay</span><br><span class="line">    ├─lexian-mall-service-api-search</span><br><span class="line">    └─lexian-mall-service-api-sso</span><br></pre></td></tr></table></figure>
<p>注意：含有module的maven类型选择为pom类型，每个module类型为jar类型。</p>
]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome浏览器规避cookie覆盖以及前端开发跨域问题解决</title>
    <url>/2020/06/27/multi-chrome/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Chrome浏览器在通常情况下只能在同一网站登录同时登陆一个账号，无论是新标签页还是新窗口下登录其他账号均将覆盖原有cookie，强制下线原有账号。考虑到工作、学习以及生活娱乐的不同需求，需要在同一网站多开账号，以及拥有不同的Chrome账户的同步需求。这里为Chrome多开帐号以及修改默认安装位置（C盘）做了简单笔记，以供后续参考。</p>
<a id="more"></a>

<h1 id="Chrome默认安装位置的修改"><a href="#Chrome默认安装位置的修改" class="headerlink" title="Chrome默认安装位置的修改"></a>Chrome默认安装位置的修改</h1><p>众所周知，默认状态下的直接运行<code>chrome_84.0.4147.68x64.exe</code>Google Chrome只能安装在系统分区（C盘）：</p>
<blockquote>
<p>Vista：C:\Users\用户名\AppData\Local\Google\Chrome</p>
<p>XP：C:\Documentsand Settings\用户名\Local Settings\Application Data\Google\Chrome</p>
</blockquote>
<p>实际上可以通过自定义的方式解决安装未知的问题，默认下载到的<code>Chrome_installer.exe</code>其实是一个自解压压缩文件包，使用常规的解压缩软件（比如Bandzip）等就可以将其解压。譬如最新（2020年6月27日 16:08:19）的84.0.4147.68版本，以此为例：</p>
<ol>
<li>下载Chrome 84.0.4147.68版本的<code>chrome_84.0.4147.68x64.exe</code>安装文件；</li>
<li>右键，单击<code>“用Bandzip打开”</code>将其解压缩；</li>
<li>得到一个<code>Chrome.7z</code>的压缩包，继续将其解压缩；</li>
<li>所得的<code>Chrome-bin</code>文件夹中便可以找到<code>Chrome.exe</code>文件了；</li>
<li>将文件夹<code> 84.0.4147.68</code>中的所有文件包括文件夹都剪切出来，使其与<code>Chrome.exe</code>在同一个目录中。现在双击这个exe文件，便可以启动Chrome。</li>
</ol>
<h1 id="使用启动参数实现多用户数据共存"><a href="#使用启动参数实现多用户数据共存" class="headerlink" title="使用启动参数实现多用户数据共存"></a>使用启动参数实现多用户数据共存</h1><p>接着以上的安装步骤，右击<code>chrome.exe</code>选择发送桌面快捷方式，然后继续右击桌面的<code>chrome.exe快捷方式</code>进入属性窗口。在属性的<code>目标</code>输入框的文本后添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--user-data-dir&#x3D;D:\Chrome\1</span><br></pre></td></tr></table></figure>
<p>注意这里的<code>--user</code>前有一个空格，<code>D:\Chrome\1</code>可自定义，具体参数为<code>chrome.exe路径\分用户数据存储路径</code>，这里我如法炮制设置了四个用户（修改1、2、3、4用户数据文件夹即可）：</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://s1.ax1x.com/2020/06/27/N68ao6.jpg" width="50%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">chrome 属性.</div>
</center>

<p>打开网页测试可用，回查资源管理器中Chrome安装目录已经独立存放了四个分用户的数据（文件夹分别为1、2、3、4），至此便解决了Chrome浏览器自定义安装以及多开的问题。</p>
<h1 id="跨域问题解决"><a href="#跨域问题解决" class="headerlink" title="跨域问题解决"></a>跨域问题解决</h1><p>在开发前后端分离项目的时候，发现前端出现跨域问题，但服务器并不是本地服务器而是第三方接口（百度OCR识别）。使用HBuilder内置浏览器无报错，但使用Chrome浏览器会报如下的错误：</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://s1.ax1x.com/2020/07/14/UthshD.jpg" width="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">跨域报错</div>
</center>

<p>因此判定问题出现在浏览器，这里同样以上面的方式打开Chrome快捷方式的属性，在页面的目标输入框内的最后加上<code> --disable-web-security</code>即可解决问题。</p>
<p>可能会出现以下的提示，也表示设置成功，部署前端工程重新尝试发现无报错。</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://s1.ax1x.com/2020/07/14/UthzNT.jpg" width="70%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">--disable-web-security</div>
</center>

<h2 id="另有Tips："><a href="#另有Tips：" class="headerlink" title="另有Tips："></a>另有Tips：</h2><ol>
<li><code>Locales</code>目录中是各国的语言dll文件，只保留<code>en-US.dl</code>l和<code>zh-CN.dll</code>就可以了，建议还是保留。</li>
<li>进一步定制，可以用的参数：<ol>
<li><code> --single-process</code> 单进程运行Google Chrome</li>
<li><code> --start-maximized</code> 启动Google Chrome就最大化</li>
<li><code> --disable-java</code> 禁止Java</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>新手指北</category>
      </categories>
      <tags>
        <tag>reference</tag>
        <tag>随笔</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot和SpringCloud</title>
    <url>/2020/06/25/SpringBoot-SpringCloud/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、SpringBoot：一个快速开发框架，通过用MAVEN依赖的继承方式，帮助我们快速整合第三方常用框架，完全采用注解化（使用注解方式启动SpringMVC），简化XML配置，内置HTTP服务器（Tomcat，Jetty），最终以Java应用程序进行执行。</p>
<p>2、SpringCloud：一套目前完整的微服务框架，它是是一系列框架的有序集合。它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过SpringBoot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用SpringBoot的开发风格做到一键启动和部署。</p>
<p>这篇文章简单记录关于SpringBoot以及SpringCloud的关系与区别：</p>
<a id="more"></a>

<h1 id="SpringBoot介绍"><a href="#SpringBoot介绍" class="headerlink" title="SpringBoot介绍"></a>SpringBoot介绍</h1><p>SpringBoot简化了基于Spring的应用开发，通过少量的代码就能创建一个独立的，产品级别的Spring应用。SpringBoot为Spring平台及第三方库提供开箱即用的设置，这样你就可以有条不紊的开始，多数Spring应用只需要很少的Spring配置。</p>
<p>SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建以及开发过程。该框架使用了特定的方式进行配置，从而使开发人员不再需要定义样板化的配置。用我的话来理解，就是SpringBoot其实并不是什么新的框架，它默认配置了很多框架的使用方式，就像maven，整合了所有的jar包，SpringBoot整合了所有框架。</p>
<p>SpringBoot的核心思想就是约定大于配置，一切自动完成。采用SpringBoot可以大大的简化你的开发模式，所有你想集成的常用框架，它都有对应的组件支持。</p>
<p>简而言之，SpringBoot是Spring的一套快速配置脚手架，可以基于SpringBoot快速开发单个微服务。而SpringBoot是Spring的引导，也就是用于启动Spring的，使得Spring的学习和使用快速无痛。不仅适合工程结构的替换，更适合微服务的开发。</p>
<p>众所周知，Spring开发有非常头疼的三点：</p>
<p>以启动一个带Hibernate的Spring MVC为例。</p>
<ol>
<li>依赖太多了，而且要注意版本兼容。这个应用，要添加10-20个依赖，Spring相关的包10多个，然后是Hibernate包，Spring与Hibernate整合包，日志包，json包一堆，而且要注意版本兼容性。</li>
<li>配置太多了，要配置注解驱动，要配置数据库连接池，要配置Hibernate，要配置事务管理器，要配置Spring MVC的资源映射，要在web.xml中配置启动Spring和Spring MVC等</li>
<li>部署和运行麻烦。要部署到tomcat里面。不能直接用java命令运行。</li>
</ol>
<p>而大部分的配置在各工程间是通用的，SpringBoot的哲学就是约定大于配置。既然很多东西都是一样的，为什么还要去配置——</p>
<ol>
<li>通过starter和依赖管理解决依赖问题。</li>
<li>通过自动配置，解决配置复杂问题。</li>
<li> 通过内嵌web容器，由应用启动tomcat，而不是tomcat启动应用，来解决部署运行问题。</li>
</ol>
<h1 id="SpringCloud介绍"><a href="#SpringCloud介绍" class="headerlink" title="SpringCloud介绍"></a>SpringCloud介绍</h1><p>SpringCloud是一系列框架的有序集合。它利用SpringBoot的开发便利性巧妙的简化了分布式系统基础设置的开发，如服务发现注册，配置中心，消息总线，负载均衡，断路器，数据监控等，都可以用SpringBoot的开发风格做到一键启动和部署。Spring 并没有重复制造轮子，它只是将目前各家公司开发的比较成熟，经得起实际考验的服务框架组合起来，通过SpringBoot风格进行封装屏蔽掉了复杂的配置和实现原理，最终结合开发者留出了一套简单易懂，易部署和易维护的分布式系统开发工具包。</p>
<p>微服务是可以独立部署，水平扩展。独立访问（或有独立的数据库）的服务单元，SpringCloud就是这些微服务的大管家，采用了微服务这种架构后，项目的数量会非常多，SpringCloud作为大管家就需要提供各种方案来维护整个生态。</p>
<p>SpringCloud就是一套分布式服务治理的框架，既然它是一条分布式治理的框架，那么它本身不会提供身体功能性的操作，更专注于服务之间的通讯，熔断，监控等。因此需要很多的组件来支持一套功能。</p>
<p>SpringCloud架构大致可以用下图来描述：</p>
<p><img src="https://s1.ax1x.com/2020/06/25/NBgPu8.jpg" alt="NBgPu8.jpg"></p>
<p>这里从整体来看一下Spring Cloud主要组件，以及它的访问流程：</p>
<ol>
<li>外部或内部的非Spring Cloud项目统一通过API网管（Zuul）来访问内部服务。</li>
<li>网关接收到请求后，从注册中心（Eureka）获取可用服务。</li>
<li>由Ribbon进行负载均衡后，分发到后端的具体实例。</li>
<li>微服务之间通过Feign进行通信处理业务。</li>
<li>Hystrix负责处理服务超时熔断。</li>
<li>Turbine监控服务间的调用和熔断相关指标。</li>
</ol>
<h1 id="SpringBoot与SpringCloud的关系"><a href="#SpringBoot与SpringCloud的关系" class="headerlink" title="SpringBoot与SpringCloud的关系"></a>SpringBoot与SpringCloud的关系</h1><p>SpringBoot是Spring的一套快速配置手架，可以通过SpringBoot快速开发单个微服务，SpringCloud是一个教育SpringBoot实现的云应用开发工具；SpringBoot用于快速，方便集成的单个微服务个体，SpringCloud关注全局的服务治理框架；SpringBoot使用了默认大于配置的理念，很多集成方案已经帮你选择好了，能不配置就不配置，SpringCloud 很大一部分是基于SpringBoot来实现，属于依赖关系，但是SpringBoot是可以离开SpringCloud独立使用开发项目。</p>
<p>简言之，结合Spring，三者的关系应为：<code>Spring –&gt;Spring Boot–&gt;Spring Cloud</code></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Py爬虫+基于echart可视化csv数数据</title>
    <url>/2020/06/19/pyecharts_tour_statistic/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​        前面一篇文章谈及了Python基于<code>matplotlib</code>模块的csv数据可视化，这篇文章从更广度的数据角度，结合Python爬虫并利用<code>pyecharts</code>这个更优雅的数据可视化模块，对从网络爬取的数据集进行可视化处理。由于Echart的可操作性，最终生成的可视化图像以html的形式展现以供检阅，文中也会贴出静态预览图。</p>
<a id="more"></a>

<h1 id="1-爬取目标分析"><a href="#1-爬取目标分析" class="headerlink" title="1 爬取目标分析"></a>1 爬取目标分析</h1><h2 id="1-1-分析目标url"><a href="#1-1-分析目标url" class="headerlink" title="1.1 分析目标url"></a>1.1 分析目标url</h2><p>​        这里选用了<a href="%5Bhttp://piao.qunar.com">去哪儿旅行</a>作为爬虫的目标，因为观察到点击”门票“后搜索相应关键词，例如热门景点，跳转URL为<code>http://piao.qunar.com/ticket/list.htm?keyword=辽宁&amp;region=&amp;from=mpl_search_suggest&amp;page=&#123;&#125;</code>， 进一步分析可知，该url的结构为<code>http://piao.qunar.com/ticket/list.htm?keyword=搜索地点&amp;region=&amp;from=mpl_search_suggest&amp;page=页数</code>，这里既然搜索热门景点可用，那么就使用该关键词进行爬虫，只需要进行页码参数的调整即可。</p>
<h2 id="1-2-分析页面元素"><a href="#1-2-分析页面元素" class="headerlink" title="1.2 分析页面元素"></a>1.2 分析页面元素</h2><p>​        进入开发者面板后使用元素选择器可以看到在如图的class下便是页面中每条记录数据的显示文字了，例如下图中的”上海·上海·浦东新区“这个地址属性便在<code>&lt;span class=&quot;area&quot;&gt;</code>标签下显示：</p>
<p><img src="https://s1.ax1x.com/2020/06/19/NM8eGq.jpg" alt="NM8eGq.jpg"></p>
<p>​        进一步的，我们可以在例如<code>&lt;div class=&quot;intro color999&quot;&gt;</code>等标签内识别到介绍等相关信息，经过分析，这里我们提取出来的信息包括了景点名称、级别、所在区域、起步价、销售量、热度、地址、经纬度、标语、详情网址。这里的经纬度在项目初期是计划使用百度API根据获取的地址信息进行获取，因此项目的展示需要百度API的支持。但后来无意发现，经纬度其实本网页html中自带，因此似乎白费百度API了。网页内自涵的经纬度如下所示：</p>
<p><img src="https://s1.ax1x.com/2020/06/19/NM3zGt.jpg" alt="NM3zGt.jpg"></p>
<h1 id="2-爬取数据"><a href="#2-爬取数据" class="headerlink" title="2 爬取数据"></a>2 爬取数据</h1><p>​        这里发现这个网站居然是基于http协议而且没有反爬机制的，因此直接采用request爬取即可，在爬取过程中我曾经因为网络不好被拒绝请求，一度以为是被反爬关了小黑屋，就在我要用scrapy解决反爬问题的时候，我换了个网络环境，神奇的解决了这个棘手的问题。这里使用<code>xpath</code>进行内容的匹配，比正则好用许多。以下便是爬取内容的函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getList</span>():</span></span><br><span class="line">    place = <span class="string">&#x27;热门景点&#x27;</span></span><br><span class="line">    url = <span class="string">&#x27;http://piao.qunar.com/ticket/list.htm?keyword=&#x27;</span>+ place +<span class="string">&#x27;&amp;region=&amp;from=mpl_search_suggest&amp;page=&#123;&#125;&#x27;</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    sightlist = []</span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">400</span>:</span><br><span class="line">        page = getPage(url.<span class="built_in">format</span>(i)) <span class="comment">#这里调用了getPage函数获取了网页数据</span></span><br><span class="line">        selector = etree.HTML(page.text)</span><br><span class="line">        print(<span class="string">&#x27;正在爬取第&#x27;</span>, <span class="built_in">str</span>(i), <span class="string">&#x27;页景点信息&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        informations = selector.xpath(<span class="string">&#x27;//div[@class=&quot;result_list&quot;]/div&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> inf <span class="keyword">in</span> informations: <span class="comment">#获取必要信息</span></span><br><span class="line">            sight_name = inf.xpath(<span class="string">&#x27;./div/div/h3/a/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            sight_level = inf.xpath(<span class="string">&#x27;.//span[@class=&quot;level&quot;]/text()&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(sight_level):</span><br><span class="line">                sight_level = sight_level[<span class="number">0</span>].replace(<span class="string">&#x27;景区&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sight_level = <span class="number">0</span></span><br><span class="line">            sight_area = inf.xpath(<span class="string">&#x27;.//span[@class=&quot;area&quot;]/a/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># print(sight_area)</span></span><br><span class="line">            sight_hot = inf.xpath(<span class="string">&#x27;.//span[@class=&quot;product_star_level&quot;]//span/text()&#x27;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;热度 &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            sight_add = inf.xpath(<span class="string">&#x27;.//p[@class=&quot;address color999&quot;]/span/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            sight_add = re.sub(<span class="string">&#x27;地址：|（.*?）|\(.*?\)|，.*?$|\/.*?$&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="built_in">str</span>(sight_add))</span><br><span class="line"></span><br><span class="line">            sight_slogen = inf.xpath(<span class="string">&#x27;.//div[@class=&quot;intro color999&quot;]/text()&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(sight_slogen):</span><br><span class="line">                sight_slogen = inf.xpath(<span class="string">&#x27;.//div[@class=&quot;intro color999&quot;]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sight_slogen = <span class="string">&quot;null&quot;</span></span><br><span class="line">            sight_price = inf.xpath(<span class="string">&#x27;.//span[@class=&quot;sight_item_price&quot;]/em/text()&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(sight_price):</span><br><span class="line">                sight_price = sight_price[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            sight_soldnum = inf.xpath(<span class="string">&#x27;.//span[@class=&quot;hot_num&quot;]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            sight_point = inf.xpath(<span class="string">&#x27;./@data-point&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            sight_url = inf.xpath(<span class="string">&#x27;.//h3/a[@class=&quot;name&quot;]/@href&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            sightlist.append([sight_name,sight_level,sight_area,<span class="built_in">float</span>(sight_price),<span class="built_in">int</span>(sight_soldnum),<span class="built_in">float</span>(sight_hot),sight_add.replace(<span class="string">&#x27;地址：&#x27;</span>,<span class="string">&#x27;&#x27;</span>),sight_point,sight_slogen,sight_url])</span><br><span class="line">        time.sleep(<span class="number">15</span>)</span><br><span class="line">    <span class="keyword">return</span> sightlist</span><br></pre></td></tr></table></figure>
<p>这里爬取的信息包括景点名称、级别、所在区域、起步价、销售量、热度、地址、经纬度、标语、详情网址。本项目实际并未完全使用，全部数据存储在csv文件中，再开发可用性高（实际上谁会去用呢？）</p>
<p>当然，有很多景点存在无销量、无星级、无介绍等情况，这里都在爬取的过程中使用了条件判断，如果为空就赋值为空或者0，这就是缺省值的处理。也可以引用上篇文章中的基于<code>sklearn</code>的缺省值处理方法，这里仿佛犯不着。</p>
<p>另一方面，地址的匹配使用<code>re.sub()</code>去除冗余信息，这里不赘述。这里使用了<code>pandas</code>库进行爬取数据的csv文件存储：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listToExcel</span>(<span class="params"><span class="built_in">list</span>,name</span>):</span></span><br><span class="line">    df = pd.DataFrame(<span class="built_in">list</span>,columns=[<span class="string">&#x27;景点名称&#x27;</span>,<span class="string">&#x27;级别&#x27;</span>,<span class="string">&#x27;所在区域&#x27;</span>,<span class="string">&#x27;起步价&#x27;</span>,<span class="string">&#x27;销售量&#x27;</span>,<span class="string">&#x27;热度&#x27;</span>,<span class="string">&#x27;地址&#x27;</span>,<span class="string">&#x27;经纬度&#x27;</span>,<span class="string">&#x27;标语&#x27;</span>,<span class="string">&#x27;详情网址&#x27;</span>])</span><br><span class="line">    df.to_csv(name + <span class="string">&quot;.csv&quot;</span>, sep=<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>由于项目后期直接使用了爬取的经纬度，这里不需要借助API转换地址为经纬度，这里也给出这部分代码留作学习备份：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getBaiduGeo</span>(<span class="params">sightlist,name</span>):</span></span><br><span class="line">    ak = <span class="string">&#x27;密钥&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span> :<span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    address = 地址</span><br><span class="line">    url = <span class="string">&#x27;http://api.map.baidu.com/geocoder/v2/?address=&#x27;</span> + address  + <span class="string">&#x27;&amp;output=json&amp;ak=&#x27;</span> + ak</span><br><span class="line">    json_data = requests.get(url = url).json()</span><br><span class="line">    json_geo = json_data[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;location&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>观察获取的json文件，location中的数据和百度api所需要的json格式基本是一样，还需要将景点销量加入到json文件中，最后将整理好的json文件输出到本地文件中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getBaiduGeo</span>(<span class="params">sightlist,name</span>):</span></span><br><span class="line">    ak = <span class="string">&#x27;密钥&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span> :<span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">list</span> = sightlist</span><br><span class="line">    bjsonlist = []</span><br><span class="line">    ejsonlist1 = []</span><br><span class="line">    ejsonlist2 = []</span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    address = l[<span class="number">6</span>]</span><br><span class="line">                    url = <span class="string">&#x27;http://api.map.baidu.com/geocoder/v2/?address=&#x27;</span> + address  + <span class="string">&#x27;&amp;output=json&amp;ak=&#x27;</span> + ak</span><br><span class="line">                    json_data = requests.get(url = url).json()</span><br><span class="line">                    json_geo = json_data[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;location&#x27;</span>]</span><br><span class="line">                <span class="keyword">except</span> KeyError,e:</span><br><span class="line">                    address = l[<span class="number">0</span>]</span><br><span class="line">                    url = <span class="string">&#x27;http://api.map.baidu.com/geocoder/v2/?address=&#x27;</span> + address  + <span class="string">&#x27;&amp;output=json&amp;ak=&#x27;</span> + ak</span><br><span class="line">                    json_data = requests.get(url = url).json()</span><br><span class="line">                    json_geo = json_data[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;location&#x27;</span>]</span><br><span class="line">            <span class="keyword">except</span> KeyError,e:</span><br><span class="line">                    address = l[<span class="number">2</span>]</span><br><span class="line">                    url = <span class="string">&#x27;http://api.map.baidu.com/geocoder/v2/?address=&#x27;</span> + address  + <span class="string">&#x27;&amp;output=json&amp;ak=&#x27;</span> + ak</span><br><span class="line">                    json_data = requests.get(url = url).json()</span><br><span class="line">                    json_geo = json_data[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;location&#x27;</span>]</span><br><span class="line">        <span class="keyword">except</span> KeyError,e:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        json_geo[<span class="string">&#x27;count&#x27;</span>] = l[<span class="number">4</span>]/<span class="number">100</span></span><br><span class="line">        bjsonlist.append(json_geo)</span><br><span class="line">        ejson1 = &#123;l[<span class="number">0</span>] : [json_geo[<span class="string">&#x27;lng&#x27;</span>],json_geo[<span class="string">&#x27;lat&#x27;</span>]]&#125;</span><br><span class="line">        ejsonlist1 = <span class="built_in">dict</span>(ejsonlist1,**ejson1)</span><br><span class="line">        ejson2 = &#123;<span class="string">&#x27;name&#x27;</span> : l[<span class="number">0</span>],<span class="string">&#x27;value&#x27;</span> : l[<span class="number">4</span>]/<span class="number">100</span>&#125;</span><br><span class="line">        ejsonlist2.append(ejson2)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;正在生成第&#x27;</span> + <span class="built_in">str</span>(num) + <span class="string">&#x27;个景点的经纬度&#x27;</span></span><br><span class="line">        num +=<span class="number">1</span></span><br><span class="line">    bjsonlist =json.dumps(bjsonlist)</span><br><span class="line">    ejsonlist1 = json.dumps(ejsonlist1,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    ejsonlist2 = json.dumps(ejsonlist2,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./points.json&#x27;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(bjsonlist)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./geoCoordMap.json&#x27;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(ejsonlist1)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data.json&#x27;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(ejsonlist2)</span><br></pre></td></tr></table></figure>
<p>本项目最终采用了以下方式输出json数据文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">datatojson</span>(<span class="params">sightlist</span>):</span>  <span class="comment">#直接生成json数据</span></span><br><span class="line">    bjsonlist = []</span><br><span class="line">    ejsonlist1 = []</span><br><span class="line">    ejsonlist2 = []</span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> sightlist:</span><br><span class="line">        json_geo = &#123;&#125;</span><br><span class="line">        p = <span class="string">&#x27;(.*?),(.*?)$&#x27;</span></span><br><span class="line">        geo = re.findall(p,l[<span class="number">7</span>])[<span class="number">0</span>]</span><br><span class="line">        json_geo[<span class="string">&#x27;lat&#x27;</span>] = geo[<span class="number">1</span>]</span><br><span class="line">        json_geo[<span class="string">&#x27;count&#x27;</span>] = l[<span class="number">4</span>]/<span class="number">100</span></span><br><span class="line">        json_geo[<span class="string">&#x27;lng&#x27;</span>] = geo[<span class="number">0</span>]</span><br><span class="line">        bjsonlist.append(json_geo)</span><br><span class="line"><span class="comment">#        print(&#x27;正在生成第&#x27;, str(num), &#x27;个景点的经纬度&#x27;)</span></span><br><span class="line">        ejson1 = &#123;l[<span class="number">0</span>] : [geo[<span class="number">0</span>],geo[<span class="number">1</span>]]&#125;</span><br><span class="line">        ejsonlist1 = <span class="built_in">dict</span>(ejsonlist1,**ejson1)</span><br><span class="line">        ejson2 = &#123;<span class="string">&#x27;name&#x27;</span> : l[<span class="number">0</span>],<span class="string">&#x27;value&#x27;</span> : l[<span class="number">4</span>]/<span class="number">100</span>&#125;</span><br><span class="line">        ejsonlist2.append(ejson2)</span><br><span class="line">        num +=<span class="number">1</span></span><br><span class="line">    bjsonlist =json.dumps(bjsonlist)</span><br><span class="line">    ejsonlist1 = json.dumps(ejsonlist1, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    ejsonlist2 = json.dumps(ejsonlist2, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./points.json&#x27;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(bjsonlist)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./geoCoordMap.json&#x27;</span>,<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(ejsonlist1)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data.json&#x27;</span>,<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(ejsonlist2)</span><br></pre></td></tr></table></figure>
<p>​        这里生成的三个json文件，一个是给百度地图api引入用的，另俩个是给echartsMap引入用的。</p>
<h1 id="3-数据可视化"><a href="#3-数据可视化" class="headerlink" title="3 数据可视化"></a>3 数据可视化</h1><h2 id="3-1-热力图生成"><a href="#3-1-热力图生成" class="headerlink" title="3.1 热力图生成"></a>3.1 热力图生成</h2><p>​        将前文所述的百度地图api示例中的源代码复制到解释器中，添加密钥（需要自己申请），保存为html文件，打开就可以看到和官网上一样的显示效果。echarts需要在实例页面，点击页面右上角的EN切换到英文版，然后点击download demo下载完整源代码。</p>
<p>​        根据<a href="http://www.jb51.net/article/36678.htm">html导入json文件</a>修改网页源码，导入json文件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#百度地图api示例代码中各位置修改部分</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://libs.baidu.com/jquery/2.0.0/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    $.getJSON(<span class="string">&quot;points.json&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> points = data;</span></span><br><span class="line">        script中原有函数；</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>       </span><br></pre></td></tr></table></figure>
<p>​        此时直接打开baiduMap.html或者echartMap.html均不会正常显示，F12后得知服务器异常。因此这里需要创建一个服务器才能在本地显示（这两个只能运行于服务器），这里进入需要打开的html文件目录，首先将需要打开的html文件重命名为<code>index.html</code>，然后在此目录下调用控制台。python3环境下需使用<code>python -m  http.server</code>开启本地服务器，收取到成功开启的提示后在浏览器中打开<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a>，即可浏览index.html。在控制台中Ctrl+C关闭本地服务器。</p>
<p>​    baiduMap.html以及echartMap.html的预览效果依次如下所示：</p>
<p><img src="https://s1.ax1x.com/2020/06/19/NM6i9K.jpg" alt="NM6i9K.jpg"></p>
<p><img src="https://s1.ax1x.com/2020/06/19/NM6F1O.jpg" alt="NM6F1O.jpg"></p>
<p>​    这是爬取了400页，每页15条数据后的结果，因此有些许简陋。进一步的数据完善下次一定，下次一定！</p>
<h2 id="3-2-数据进一步可视化"><a href="#3-2-数据进一步可视化" class="headerlink" title="3.2 数据进一步可视化"></a>3.2 数据进一步可视化</h2><p>​        在此基础上，为了进一步分析数据，进一步针对一些特性绘制Echarts：</p>
<h3 id="3-2-1-绘制热门景点前20的柱状图"><a href="#3-2-1-绘制热门景点前20的柱状图" class="headerlink" title="3.2.1 绘制热门景点前20的柱状图"></a>3.2.1 绘制热门景点前20的柱状图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制热门景点前20的柱状echart</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_20_echart</span>():</span></span><br><span class="line">    <span class="comment"># 设置行名</span></span><br><span class="line">    columns = name_list</span><br><span class="line">    <span class="comment"># 设置数据</span></span><br><span class="line">    data1 = top_list</span><br><span class="line">    <span class="comment"># 设置柱状图的主标题与副标题</span></span><br><span class="line">    bar = pyecharts.Bar(title=<span class="string">&quot;热门景点前20的柱状图&quot;</span>)</span><br><span class="line"></span><br><span class="line">    bar.add(<span class="string">&quot;热度&quot;</span>, columns, data1, mark_line=[<span class="string">&quot;average&quot;</span>],xaxis_rotate=<span class="number">30</span>,  mark_point=[<span class="string">&quot;max&quot;</span>, <span class="string">&quot;min&quot;</span>])</span><br><span class="line">    <span class="comment"># 生成本地文件（默认为.html文件）</span></span><br><span class="line">    bar.render(<span class="string">&#x27;first_20_echart.html&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/06/19/NMytfK.jpg" alt="NMytfK.jpg"></p>
<h2 id="3-2-2-绘制主要城市景点数漏斗图"><a href="#3-2-2-绘制主要城市景点数漏斗图" class="headerlink" title="3.2.2 绘制主要城市景点数漏斗图"></a>3.2.2 绘制主要城市景点数漏斗图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制主要城市热门景点数漏斗图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nation_hotspot_echart</span>():</span></span><br><span class="line"></span><br><span class="line">    fl = pyecharts.Funnel(<span class="string">&quot;主要城市热门景点数&quot;</span>, <span class="string">&quot;2020年6月18日 22:36:24&quot;</span>, title_pos=<span class="string">&#x27;left&#x27;</span>, width=<span class="number">1400</span>, height=<span class="number">700</span>)</span><br><span class="line">    fl.add(<span class="string">&quot;景点数&quot;</span>, add_key, add_value, is_label_show=<span class="literal">True</span>, label_formatter=<span class="string">&#x27;&#123;b&#125;&#123;c&#125;&#x27;</span>, label_pos=<span class="string">&#x27;outside&#x27;</span>)</span><br><span class="line">    fl.render(<span class="string">&#x27;nation_hotspot_echart.html&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/06/19/NMyJFx.jpg" alt="NMyJFx.jpg"></p>
<h2 id="3-2-3-绘制top20城市的3A、4A、5A景区数"><a href="#3-2-3-绘制top20城市的3A、4A、5A景区数" class="headerlink" title="3.2.3 绘制top20城市的3A、4A、5A景区数"></a>3.2.3 绘制top20城市的3A、4A、5A景区数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制top20城市的3A、4A、5A景区数堆叠柱形图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nA_spot_echart</span>():</span></span><br><span class="line">    <span class="comment"># 设置行名</span></span><br><span class="line">    columns = add_key</span><br><span class="line">    <span class="comment"># 设置数据</span></span><br><span class="line">    data1 = level_3a</span><br><span class="line">    data2 = level_4a</span><br><span class="line">    data3 = level_5a</span><br><span class="line">    <span class="comment"># 设置柱状图的主标题与副标题</span></span><br><span class="line">    bar = pyecharts.Bar(title=<span class="string">&quot;top20城市的3A、4A、5A景区数&quot;</span>)</span><br><span class="line"></span><br><span class="line">    bar.add(<span class="string">&quot;3A景区数&quot;</span>, columns, data1, mark_line=[<span class="string">&quot;average&quot;</span>], xaxis_rotate=<span class="number">30</span>, mark_point=[<span class="string">&quot;max&quot;</span>, <span class="string">&quot;min&quot;</span>], is_stack=<span class="literal">True</span>)</span><br><span class="line">    bar.add(<span class="string">&quot;4A景区数&quot;</span>, columns, data2, mark_line=[<span class="string">&quot;average&quot;</span>], xaxis_rotate=<span class="number">30</span>, mark_point=[<span class="string">&quot;max&quot;</span>, <span class="string">&quot;min&quot;</span>], is_stack=<span class="literal">True</span>)</span><br><span class="line">    bar.add(<span class="string">&quot;5A景区数&quot;</span>, columns, data3, mark_line=[<span class="string">&quot;average&quot;</span>], xaxis_rotate=<span class="number">30</span>, mark_point=[<span class="string">&quot;max&quot;</span>, <span class="string">&quot;min&quot;</span>], is_stack=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 生成本地文件（默认为.html文件）</span></span><br><span class="line">    bar.render(<span class="string">&#x27;nA_spot_echart.html&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/06/19/NMyBmd.jpg" alt="NMyBmd.jpg"></p>
<h3 id="3-2-4-绘制哪里去得起极坐标图"><a href="#3-2-4-绘制哪里去得起极坐标图" class="headerlink" title="3.2.4 绘制哪里去得起极坐标图"></a>3.2.4 绘制哪里去得起极坐标图</h3><p>这里采用了与前面热力图导入Echart一样的方式，利用html导入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">style</span>=<span class="string">&quot;height: 100%&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;height: 100%; margin: 0&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://gcore.jsdelivr.net/npm/echarts/dist/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://gcore.jsdelivr.net/npm/echarts-gl/dist/echarts-gl.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://gcore.jsdelivr.net/npm/echarts-stat/dist/ecStat.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://gcore.jsdelivr.net/npm/echarts/dist/extension/dataTool.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://gcore.jsdelivr.net/npm/echarts/map/js/china.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://gcore.jsdelivr.net/npm/echarts/map/js/world.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://api.map.baidu.com/api?v=2.0&amp;ak=9hmPUqXOhGLfg8xyqzWQ9C21jU7ILXxR&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://gcore.jsdelivr.net/npm/echarts/dist/extension/bmap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">&quot;container&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> myChart = echarts.init(dom);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> app = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">option = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> data = [</span></span><br><span class="line">    [30.0, 499.0, 156.23], </span><br><span class="line">	[55.0, 388.0, 147.99], </span><br><span class="line">	[3.5, 338.0, 106.75], </span><br><span class="line">	[20.0, 308.0, 75.93], </span><br><span class="line">	[20.0, 298.0, 33.88], </span><br><span class="line">	[0.3, 298.0, 84.17], </span><br><span class="line">	[30.0, 268.0, 117.67], </span><br><span class="line">	[72.0, 258.0, 165.0], </span><br><span class="line">	[72.0, 244.9, 179.79], </span><br><span class="line">	[37.3, 225.0, 102.16], </span><br><span class="line">	[28.0, 210.0, 110.83], </span><br><span class="line">	[69.0, 208.0, 138.5], </span><br><span class="line">	[63.8, 199.0, 140.93],</span><br><span class="line">	[0.6, 188.0, 94.3], </span><br><span class="line">	[91.9, 185.0, 135.97], </span><br><span class="line">	[0.8, 170.0, 92.67], </span><br><span class="line">	[45.0, 168.0, 80.25], </span><br><span class="line">	[135.0, 160.0, 147.5], </span><br><span class="line">	[60.0, 160.0, 108.82], </span><br><span class="line">	[10.0, 140.0, 58.5], </span><br><span class="line">	[39.0, 138.0, 91.67], </span><br><span class="line">	[5.0, 90.0, 69.48], </span><br><span class="line">	[1.9, 89.0, 73.34], </span><br><span class="line">	[52.0, 82.8, 62.27]</span><br><span class="line">];</span><br><span class="line"><span class="javascript"><span class="keyword">var</span> cities = [<span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;湖北&#x27;</span>, <span class="string">&#x27;海南&#x27;</span>, <span class="string">&#x27;四川&#x27;</span>, <span class="string">&#x27;云南&#x27;</span>, <span class="string">&#x27;江苏&#x27;</span>, <span class="string">&#x27;陕西&#x27;</span>, <span class="string">&#x27;甘肃&#x27;</span>, <span class="string">&#x27;湖南&#x27;</span>, <span class="string">&#x27;广东&#x27;</span>, <span class="string">&#x27;重庆&#x27;</span>, <span class="string">&#x27;西藏&#x27;</span>, <span class="string">&#x27;天津&#x27;</span>, <span class="string">&#x27;青海&#x27;</span>, <span class="string">&#x27;辽宁&#x27;</span>, <span class="string">&#x27;浙江&#x27;</span>, <span class="string">&#x27;江西&#x27;</span>, <span class="string">&#x27;山西&#x27;</span>, <span class="string">&#x27;山东&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;广西&#x27;</span>, <span class="string">&#x27;贵州&#x27;</span>, <span class="string">&#x27;河南&#x27;</span>, <span class="string">&#x27;安徽&#x27;</span>];</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> barHeight = <span class="number">30</span>;</span></span><br><span class="line"></span><br><span class="line">option = &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line"><span class="javascript">        text: <span class="string">&#x27;到底哪些地方去得起？？&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        subtext: <span class="string">&#x27;钱包允许（数据来源：爬取的去哪旅行）&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line"><span class="javascript">        show: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        data: [<span class="string">&#x27;价格范围&#x27;</span>, <span class="string">&#x27;均值&#x27;</span>]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    grid: &#123;</span><br><span class="line">        top: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    angleAxis: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="string">&#x27;category&#x27;</span>,</span></span><br><span class="line">        data: cities</span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line"><span class="javascript">        show: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        formatter: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> id = params.dataIndex;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> cities[id] + <span class="string">&#x27;&lt;br&gt;最低：&#x27;</span> + data[id][<span class="number">0</span>] + <span class="string">&#x27;&lt;br&gt;最高：&#x27;</span> + data[id][<span class="number">1</span>] + <span class="string">&#x27;&lt;br&gt;平均：&#x27;</span> + data[id][<span class="number">2</span>];</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    radiusAxis: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    polar: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line"><span class="javascript">        type: <span class="string">&#x27;bar&#x27;</span>,</span></span><br><span class="line">        itemStyle: &#123;</span><br><span class="line"><span class="javascript">            color: <span class="string">&#x27;transparent&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        data: data.map(<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> d[<span class="number">0</span>];</span></span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        coordinateSystem: <span class="string">&#x27;polar&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        stack: <span class="string">&#x27;最大最小值&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        silent: <span class="literal">true</span></span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line"><span class="javascript">        type: <span class="string">&#x27;bar&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        data: data.map(<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> d[<span class="number">1</span>] - d[<span class="number">0</span>];</span></span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        coordinateSystem: <span class="string">&#x27;polar&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&#x27;价格范围&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        stack: <span class="string">&#x27;最大最小值&#x27;</span></span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line"><span class="javascript">        type: <span class="string">&#x27;bar&#x27;</span>,</span></span><br><span class="line">        itemStyle: &#123;</span><br><span class="line"><span class="javascript">            color: <span class="string">&#x27;transparent&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        data: data.map(<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> d[<span class="number">2</span>] - barHeight;</span></span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        coordinateSystem: <span class="string">&#x27;polar&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        stack: <span class="string">&#x27;均值&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        silent: <span class="literal">true</span>,</span></span><br><span class="line">        z: 10</span><br><span class="line">    &#125;, &#123;</span><br><span class="line"><span class="javascript">        type: <span class="string">&#x27;bar&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        data: data.map(<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> barHeight * <span class="number">2</span>;</span></span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        coordinateSystem: <span class="string">&#x27;polar&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&#x27;均值&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        stack: <span class="string">&#x27;均值&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        barGap: <span class="string">&#x27;-100%&#x27;</span>,</span></span><br><span class="line">        z: 10</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br><span class="line">;</span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (option &amp;&amp; <span class="keyword">typeof</span> option === <span class="string">&quot;object&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">    myChart.setOption(option, <span class="literal">true</span>);</span></span><br><span class="line">&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="https://s1.ax1x.com/2020/06/19/NMchon.jpg" alt="NMchon.jpg" style="zoom:76%;" />

<h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><p><a href="https://github.com/shimmerjordan/tourSpotList">shimmerjordan的gayhub</a></p>
<h1 id="这次一定！"><a href="#这次一定！" class="headerlink" title="这次一定！"></a>这次一定！</h1><p>关于下次一定的事情，这里我终于没有放鸽子，电脑没关爬了一下，4000多页的数据全部爬取，所生成的热力图如下所示：</p>
<p><img src="https://s1.ax1x.com/2020/06/21/N3V8RU.jpg" alt="N3V8RU.jpg"></p>
<p><img src="https://s1.ax1x.com/2020/06/21/N3V3GT.jpg" alt="N3V3GT.jpg"></p>
]]></content>
      <categories>
        <category>Python初级应用</category>
      </categories>
      <tags>
        <tag>Python - 数据可视化</tag>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python可视化csv数据实例</title>
    <url>/2020/06/17/py_csv_primary/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​        Comma Separated Values，简称CSV，它是一种以逗号分隔数值的文件类型。在数据库或电子表格中，它是最常见的导入导出格式，它以一种简单而明了的方式存储和共享数据，CSV文件通常以纯文本的方式存储数据表。本篇文章记录了Python在csv格式的数据处理中的简单应用实例，并填补了一些曾经学习中的坑。</p>
<a id="more"></a>

<h1 id="1、数据预处理"><a href="#1、数据预处理" class="headerlink" title="1、数据预处理"></a>1、数据预处理</h1><p>​        首先考虑到数据集中可能存在数据缺失与重复，这里我们需要对数据集进行预处理，这里我选用了<a href="http://data.stats.gov.cn/easyquery.htm?cn=C01">国家数据网</a>中的“指标/能源/综合能源平衡表”，筛选条件为20年。在获取到其csv文件后发现，其原数据的保存形式如下图所示：</p>
<p><img src="https://s1.ax1x.com/2020/06/17/NZpdCF.jpg" alt="NZpdCF.jpg"></p>
<p>​        首先使用Excel的倒置粘贴对其进行坐标的倒置操作，另存为data.csv并使用NotePad++打开后其csv数据显示如下（部分）：</p>
<p><img src="https://s1.ax1x.com/2020/06/17/NZpq58.jpg" alt="NZpq58.jpg"></p>
<p>​        可以看到回收能这一条目在2011-2015年没有数据记录，这里需要对其进行丢失数据的预处理。这里可以参考机器学习中的数据处理方式，由于这里丢失数据的规模较小，因此排除了删除特征项的处理方案。这里采用了<code>sklearn.preprocessing</code>的<code>Imputer</code>方法进行缺失值的处理，可以选择平均数，众数或者中位数来填充缺失的值。数据预处理核心代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;data.csv&#x27;</span></span><br><span class="line">df = pd.read_csv(filename, encoding=<span class="string">&#x27;gbk&#x27;</span>) <span class="comment">#解决&#x27;utf-8&#x27; codec can&#x27;t decode byte 0xb1 in position 2: invalid start byte</span></span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line"><span class="comment"># 输出缺失值的个数</span></span><br><span class="line">missing = df.isnull().<span class="built_in">sum</span>()</span><br><span class="line">print(missing)</span><br><span class="line">print(missing.values, <span class="built_in">type</span>(missing.values))</span><br><span class="line">print(missing.values[<span class="number">1</span>:])  <span class="comment"># 可以索引取值，但是不是列表，方法属性不一样</span></span><br><span class="line">print(<span class="built_in">dir</span>(missing.values))</span><br><span class="line"></span><br><span class="line">print(df.dropna())  <span class="comment"># 按行删除有缺失值</span></span><br><span class="line">print(df.dropna(axis=<span class="number">1</span>))  <span class="comment"># 删除列中有缺失值的列</span></span><br><span class="line">print(df.dropna(how=<span class="string">&quot;all&quot;</span>))  <span class="comment"># 删除那些行全是缺失值的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> Imputer</span><br><span class="line"></span><br><span class="line"><span class="comment">#strategy表示采用何种策略，有mean，median， most_frequent</span></span><br><span class="line"><span class="comment">#axis=0, 表示在列上面进行操作， axis=1表示在行上面进行操作</span></span><br><span class="line">imr = Imputer(missing_values=<span class="string">&#x27;&#x27;</span>, strategy=<span class="string">&#x27;mean&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 以后进行transform的时候，直接将这些值填充过去就可以了</span></span><br><span class="line">imr = imr.fit(df)</span><br><span class="line">imputed_data = imr.transform(df.values)</span><br><span class="line">print(imputed_data)</span><br></pre></td></tr></table></figure>
<p>​        至此，关于数据预处理的部分成功完结，由于数据集并未涉及重复数据，这里不再赘述。</p>
<h1 id="2、CSV数据文件可视化"><a href="#2、CSV数据文件可视化" class="headerlink" title="2、CSV数据文件可视化"></a>2、CSV数据文件可视化</h1><h2 id="2-1-数据结构分析"><a href="#2-1-数据结构分析" class="headerlink" title="2.1 数据结构分析"></a>2.1 数据结构分析</h2><p>​        首先我们需要对csv的数据结构做一个简单的分析，可以看到预处理后的数据集第一行是年份信息，每一列是各类消耗途径的信息。这里我们考虑以时间为轴，针对各类消耗途径进行分析。因此在前面预处理数据的阶段进行了数据的转置，以此方便后续基于逐行读取的<code>csv.reader(file)</code>进行数组的截取。</p>
<h2 id="2-2-数据的读取"><a href="#2-2-数据的读取" class="headerlink" title="2.2 数据的读取"></a>2.2 数据的读取</h2><p>​        这里引入csv库，利用其中的<code>csv.reader(file)</code>进行数据的读取，由于在数据预处理阶段已经将csv文件中冗余的说明文字去除，这里直接采用<code>next(csv.reader(file))</code>即可获取第一行数据并默认保存为属性信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;data.csv&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    header_row = <span class="built_in">next</span>(reader)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 存储相关消耗类型</span></span><br><span class="line">    year, total, produce_once, recycle, impo, expo = [], [], [], [], [], []</span><br><span class="line">    ann_inven_diff, total_custom, agri_custom, indus_custom = [], [], [], []</span><br><span class="line">    constru_custom, traf_custom, accomm_custom, other_custom = [], [], [], []</span><br><span class="line">    live_custom, termin_custom, indus_termin_custom, source_loss = [], [], [], []</span><br><span class="line">    cok_loss, oil_loss, total_loss, mean_diff = [], [], [], []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">del</span>(header_row[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        year.append(row[<span class="number">0</span>])</span><br><span class="line">        total.append(<span class="built_in">int</span>(row[<span class="number">1</span>]))</span><br><span class="line">        produce_once.append(<span class="built_in">int</span>(row[<span class="number">2</span>]))</span><br><span class="line">        recycle.append(row[<span class="number">3</span>])</span><br><span class="line">        impo.append(<span class="built_in">int</span>(row[<span class="number">4</span>]))</span><br><span class="line">        expo.append(<span class="built_in">int</span>(row[<span class="number">5</span>]))</span><br><span class="line">        ann_inven_diff.append(<span class="built_in">int</span>(row[<span class="number">6</span>]))</span><br><span class="line">        total_custom.append(<span class="built_in">int</span>(row[<span class="number">7</span>]))</span><br><span class="line">        agri_custom.append(<span class="built_in">int</span>(row[<span class="number">8</span>]))</span><br><span class="line">        indus_custom.append(<span class="built_in">int</span>(row[<span class="number">9</span>]))</span><br><span class="line">        constru_custom.append(<span class="built_in">int</span>(row[<span class="number">10</span>]))</span><br><span class="line">        traf_custom.append(<span class="built_in">int</span>(row[<span class="number">11</span>]))</span><br><span class="line">        accomm_custom.append(<span class="built_in">int</span>(row[<span class="number">12</span>]))</span><br><span class="line">        other_custom.append(<span class="built_in">int</span>(row[<span class="number">13</span>]))</span><br><span class="line">        live_custom.append(<span class="built_in">int</span>(row[<span class="number">14</span>]))</span><br><span class="line">        termin_custom.append(<span class="built_in">int</span>(row[<span class="number">15</span>]))</span><br><span class="line">        indus_termin_custom.append(<span class="built_in">int</span>(row[<span class="number">16</span>]))</span><br><span class="line">        source_loss.append(<span class="built_in">int</span>(row[<span class="number">17</span>]))</span><br><span class="line">        cok_loss.append(<span class="built_in">int</span>(row[<span class="number">18</span>]))</span><br><span class="line">        oil_loss.append(<span class="built_in">int</span>(row[<span class="number">19</span>]))</span><br><span class="line">        total_loss.append(<span class="built_in">int</span>(row[<span class="number">20</span>]))</span><br><span class="line">        mean_diff.append(<span class="built_in">int</span>(row[<span class="number">21</span>]))</span><br></pre></td></tr></table></figure>
<p>​        针对每一次逐行读取，以数组下标为索引，逐个读取各年份的同类型消耗的数据，存放在消耗类型的列表中。例如这里的<code>year[]</code>存放String类型的年份信息，<code>total[]</code>存放总消耗量等等。</p>
<h2 id="2-3-数据可视化"><a href="#2-3-数据可视化" class="headerlink" title="2.3 数据可视化"></a>2.3 数据可视化</h2><p>​        这里利用<code>matplotlib</code>库对csv数据进行数据可视化操作，考虑到依据年份有同类消耗的走势数据分析层面，也有多类型走势对比角度，另一方面也可以针对同一年份不同消耗类型的占比分析角度。因此我采用了组合折线图和饼状图的形式实现数据的可视化操作。核心代码以及相关注解如下（这段代码与上面的数据读取代码同文件）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot  <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>] <span class="comment">#显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span>   <span class="comment">#这两行需要手动设置</span></span><br><span class="line"></span><br><span class="line">	fig=plt.figure(dpi=<span class="number">300</span>,figsize=(<span class="number">15</span>,<span class="number">8</span>))</span><br><span class="line">    <span class="comment"># 将各个列表传个plot()方法</span></span><br><span class="line">    plt.plot(year,total,c=<span class="string">&#x27;red&#x27;</span>,label=<span class="string">&#x27;可供消费的能源总量(万吨标准煤)&#x27;</span>)</span><br><span class="line">    plt.plot(year,produce_once,c=<span class="string">&#x27;aliceblue&#x27;</span>,label=<span class="string">&#x27;一次能源生产量(万吨标准煤)&#x27;</span>)</span><br><span class="line">    plt.plot(year,recycle,c=<span class="string">&#x27;aqua&#x27;</span>,label=<span class="string">&#x27;回收能(万吨标准煤)&#x27;</span>)</span><br><span class="line">    plt.plot(year,impo,c=<span class="string">&#x27;azure&#x27;</span>,label=<span class="string">&#x27;进口量(万吨标准煤)&#x27;</span>)</span><br><span class="line">    plt.plot(year,expo,c=<span class="string">&#x27;blanchedalmond&#x27;</span>,label=<span class="string">&#x27;出口量(-)(万吨标准煤)&#x27;</span>)</span><br><span class="line">    plt.plot(year,ann_inven_diff,c=<span class="string">&#x27;chartreuse&#x27;</span>,label=<span class="string">&#x27;年初年末库存差额(万吨标准煤)&#x27;</span>)</span><br><span class="line">    plt.plot(year,total_custom,c=<span class="string">&#x27;crimson&#x27;</span>,label=<span class="string">&#x27;能源消费总量(万吨标准煤)&#x27;</span>)</span><br><span class="line">    plt.plot(year,agri_custom,c=<span class="string">&#x27;darkorange&#x27;</span>,label=<span class="string">&#x27;农、林、牧、渔、水利业消费总量(万吨标准煤)&#x27;</span>)</span><br><span class="line">    plt.plot(year,indus_custom,c=<span class="string">&#x27;deepskyblue&#x27;</span>,label=<span class="string">&#x27;工业消费总量(万吨标准煤)&#x27;</span>)</span><br><span class="line">    plt.plot(year,constru_custom,c=<span class="string">&#x27;gold&#x27;</span>,label=<span class="string">&#x27;建筑业消费总量(万吨标准煤)&#x27;</span>)</span><br><span class="line">    plt.plot(year,total_loss,c=<span class="string">&#x27;lime&#x27;</span>,label=<span class="string">&#x27;损失量(万吨标准煤)&#x27;</span>)</span><br><span class="line">    plt.plot(year,mean_diff,c=<span class="string">&#x27;violet&#x27;</span>,label=<span class="string">&#x27;平衡差额(万吨标准煤)&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置图形的格式</span></span><br><span class="line">    plt.title(<span class="string">&#x27;2000-2017综合能源平衡折线图（部分）&#x27;</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;year&#x27;</span>,fontsize=<span class="number">26</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制斜线日期标签</span></span><br><span class="line">    fig.autofmt_xdate()</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;万吨标准煤&#x27;</span>,fontsize=<span class="number">26</span>)</span><br><span class="line">    plt.tick_params(axis=<span class="string">&#x27;both&#x27;</span>,which=<span class="string">&#x27;major&#x27;</span>,labelsize=<span class="number">10</span>)</span><br><span class="line">    plt.legend(loc=<span class="number">0</span>,ncol=<span class="number">2</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2000年各消耗途径占比</span></span><br><span class="line">    labels = [<span class="string">&#x27;农、林、牧、渔、水利业消费总量&#x27;</span>,<span class="string">&#x27;工业消费总量&#x27;</span>,<span class="string">&#x27;建筑业消费总量&#x27;</span>,\</span><br><span class="line">              <span class="string">&#x27;交通运输、仓储和邮政业消费总量&#x27;</span>,<span class="string">&#x27;生活消费总量&#x27;</span>,\</span><br><span class="line">                  <span class="string">&#x27;其他行业消费总量&#x27;</span>,<span class="string">&#x27;批发、零售业和住宿、餐饮业消费总量&#x27;</span>]</span><br><span class="line">    sizes_2000 = [agri_custom[<span class="number">0</span>], indus_custom[<span class="number">0</span>], constru_custom[<span class="number">0</span>],\</span><br><span class="line">             traf_custom[<span class="number">0</span>],live_custom[<span class="number">0</span>] , other_custom[<span class="number">0</span>],\</span><br><span class="line">                 accomm_custom[<span class="number">0</span>]]</span><br><span class="line">    explode = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    plt.figure(dpi=<span class="number">300</span>,figsize=(<span class="number">15</span>,<span class="number">8</span>))</span><br><span class="line">    plt.pie(sizes_2000,explode=explode,labels=labels,autopct=<span class="string">&#x27;%1.1f%%&#x27;</span>,\</span><br><span class="line">            shadow=<span class="literal">False</span>,textprops=&#123;<span class="string">&#x27;fontsize&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;black&#x27;</span>&#125;, startangle=<span class="number">150</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&quot;upper left&quot;</span>,fontsize=<span class="number">10</span>,bbox_to_anchor=(<span class="number">1.1</span>,<span class="number">1.05</span>),\</span><br><span class="line">               ncol=<span class="number">1</span>,borderaxespad=<span class="number">0.3</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;饼图示例-2000年损耗占比&quot;</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">               </span><br><span class="line">            </span><br><span class="line">    <span class="comment"># 2017年损耗占比</span></span><br><span class="line">    sizes_2017 = [agri_custom[<span class="number">17</span>], indus_custom[<span class="number">17</span>], constru_custom[<span class="number">17</span>],\</span><br><span class="line">             traf_custom[<span class="number">17</span>], live_custom[<span class="number">17</span>] , other_custom[<span class="number">17</span>],\</span><br><span class="line">                accomm_custom[<span class="number">17</span>]]</span><br><span class="line">    explode = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    plt.figure(dpi=<span class="number">300</span>,figsize=(<span class="number">15</span>,<span class="number">8</span>))</span><br><span class="line">    plt.pie(sizes_2017,explode=explode,labels=labels,autopct=<span class="string">&#x27;%1.1f%%&#x27;</span>\</span><br><span class="line">            ,textprops=&#123;<span class="string">&#x27;fontsize&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;black&#x27;</span>&#125;,shadow=<span class="literal">True</span>,startangle=<span class="number">150</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;饼图示例-2017年损耗占比&quot;</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&quot;upper left&quot;</span>,fontsize=<span class="number">10</span>,bbox_to_anchor=(<span class="number">1.1</span>,<span class="number">1.05</span>),ncol=<span class="number">1</span>,borderaxespad=<span class="number">0.3</span>)</span><br><span class="line">    plt.show()   </span><br></pre></td></tr></table></figure>
<p>​        这里遇到了包括中文标签乱码、<code>&#39;utf-8&#39; codec can&#39;t decode byte 0xb1 in position 2: invalid start byte</code>、<code>ValueError: x and y must have same first dimension, but have shapes (21,) and (18,)</code>等诸多问题。其解决方案在以上的代码注释中已经说明，这里不再赘述。</p>
<h2 id="2-4-输出可视化成果"><a href="#2-4-输出可视化成果" class="headerlink" title="2.4 输出可视化成果"></a>2.4 输出可视化成果</h2><p>​        在填补了输出图像像素、标签等问题后，三张用于展示的图像如下所示：</p>
<p><img src="https://s1.ax1x.com/2020/06/17/NZZReg.png" alt="NZZReg.png"></p>
<p><img src="https://s1.ax1x.com/2020/06/17/NZZrWt.png" alt="NZZrWt.png"></p>
<p><img src="https://s1.ax1x.com/2020/06/17/NZZySP.png" alt="NZZySP.png"></p>
<p>​        这里可以在绘图代码中对绘图参数进行修改，例如这里设置了两个饼图的不同阴影效果。另一方面，在折线图中由于值域的跨越较大，部分变化不明显，这里可以在源码中注释掉部分值域较大的数据集来对特定参数进行数据比对。</p>
<h1 id="3、数据分析"><a href="#3、数据分析" class="headerlink" title="3、数据分析"></a>3、数据分析</h1><p>​        不知道怎么分析，那就胡乱分析一波。总体来说，各类能源消费量在每年均呈现上涨趋势。可以看到，从2000-2017年中，基于生活基础建设类的能源消耗比例有一定程度的减小，而包括工业、农业等生产业的能源消耗有相应的比例提升。这和我国提出一带一路等国际化方针政策有些千丝万缕的关系，各类产业链的间接强化直接影响到了相应能源的消耗量。</p>
]]></content>
      <categories>
        <category>Python初级应用</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA中使用MyBatis-generator自动生成MyBatis代码</title>
    <url>/2020/06/15/MyBaits-generator-IDEAPlugin/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​        MyBaits-generator主要用于在SSM框架的项目中，自动生成实体类、dao、mapper.xml文件。<a href="https://github.com/mybatis/generator">mybatis-generator</a>有三种用法：命令行、eclipse插件、maven插件。个人觉得maven插件最方便，可以在eclipse/intellij idea等ide上可以通用。</p>
<a id="more"></a>

<h1 id="0-在Intellij-IDEA创建maven项目"><a href="#0-在Intellij-IDEA创建maven项目" class="headerlink" title="0. 在Intellij IDEA创建maven项目"></a>0. 在Intellij IDEA创建maven项目</h1><h1 id="1-maven插件添加"><a href="#1-maven插件添加" class="headerlink" title="1.  maven插件添加"></a>1.  maven插件添加</h1><p>在maven项目的pom.xml 添加mybatis-generator-maven-plugin 插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
<h1 id="2-generatorConfig-xml配置文件"><a href="#2-generatorConfig-xml配置文件" class="headerlink" title="2.  generatorConfig.xml配置文件"></a>2.  generatorConfig.xml配置文件</h1><p>​        在maven项目下的src/main/resources 目录下建立名为 generatorConfig.xml的配置文件，作为mybatis-generator-maven-plugin 插件的执行目标，模板如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span>  </span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--导入属性配置 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;generator.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!--指定特定数据库的jdbc驱动jar包的位置 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;$&#123;jdbc.driverLocation&#125;&quot;</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;default&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">&lt;!-- optional，旨在创建class时，对注释进行控制 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">&lt;!--jdbc的数据库连接 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;$&#123;jdbc.driverClass&#125;&quot;</span> <span class="attr">connectionURL</span>=<span class="string">&quot;$&#123;jdbc.connectionURL&#125;&quot;</span> <span class="attr">userId</span>=<span class="string">&quot;$&#123;jdbc.userId&#125;&quot;</span> <span class="attr">password</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">&lt;!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">&lt;!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类  </span></span><br><span class="line"><span class="comment">            targetPackage     指定生成的model生成所在的包名  </span></span><br><span class="line"><span class="comment">            targetProject     指定在该项目下所在的路径  </span></span><br><span class="line"><span class="comment">        --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;org.louis.hometutor.po&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!-- 是否对model添加 构造函数 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;constructorBased&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- 是否允许子包，即targetPackage.schemaName.tableName --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;immutable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- 给Model添加一个父类 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;rootClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.foo.louis.Hello&quot;</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- 是否对类CHAR类型的列的数据进行trim操作 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">&lt;!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;org.louis.hometutor.domain&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span>  </span><br><span class="line">   </span><br><span class="line">        <span class="comment">&lt;!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码  </span></span><br><span class="line"><span class="comment">                type=&quot;ANNOTATEDMAPPER&quot;,生成Java Model 和基于注解的Mapper对象  </span></span><br><span class="line"><span class="comment">                type=&quot;MIXEDMAPPER&quot;,生成基于注解的Java Model 和相应的Mapper对象  </span></span><br><span class="line"><span class="comment">                type=&quot;XMLMAPPER&quot;,生成SQLMap XML文件和独立的Mapper接口  </span></span><br><span class="line"><span class="comment">        --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.foo.tourist.dao&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span> <span class="attr">type</span>=<span class="string">&quot;MIXEDMAPPER&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!--定义Maper.java 源代码中的ByExample() 方法的可视性，</span></span><br><span class="line"><span class="comment">				可选的值有：public; private; protected;default  </span></span><br><span class="line"><span class="comment">                注意：如果 targetRuntime=&quot;MyBatis3&quot;,此参数被忽略  </span></span><br><span class="line"><span class="comment">             --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exampleMethodVisibility&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!--方法名计数器  </span></span><br><span class="line"><span class="comment">              Important <span class="doctag">note:</span> this property is ignored if the target runtime is MyBatis3.  </span></span><br><span class="line"><span class="comment">             --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;methodNameCalculator&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!--为生成的接口添加父接口 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;rootInterface&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;lession&quot;</span> <span class="attr">schema</span>=<span class="string">&quot;louis&quot;</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- optional   , only for mybatis3 runtime  </span></span><br><span class="line"><span class="comment">               自动生成的键值（identity,或者序列值）  </span></span><br><span class="line"><span class="comment">               如果指定此元素，MBG将会生成&lt;selectKey&gt;元素，然后将此元素插入到SQL Map的&lt;insert&gt; 元素之中  </span></span><br><span class="line"><span class="comment">               sqlStatement 的语句将会返回新的值  </span></span><br><span class="line"><span class="comment">               如果是一个自增主键的话，你可以使用预定义的语句,或者添加自定义的SQL语句. 预定义的值如下:  </span></span><br><span class="line"><span class="comment">                  Cloudscape    This will translate to: VALUES IDENTITY_VAL_LOCAL()  </span></span><br><span class="line"><span class="comment">                  DB2:      VALUES IDENTITY_VAL_LOCAL()  </span></span><br><span class="line"><span class="comment">                  DB2_MF:       SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1  </span></span><br><span class="line"><span class="comment">                  Derby:        VALUES IDENTITY_VAL_LOCAL()  </span></span><br><span class="line"><span class="comment">                  HSQLDB:   CALL IDENTITY()  </span></span><br><span class="line"><span class="comment">                  Informix:     select dbinfo(&#x27;sqlca.sqlerrd1&#x27;) from systables where tabid=1  </span></span><br><span class="line"><span class="comment">                  MySql:        SELECT LAST_INSERT_ID()  </span></span><br><span class="line"><span class="comment">                  SqlServer:    SELECT SCOPE_IDENTITY()  </span></span><br><span class="line"><span class="comment">                  SYBASE:   SELECT @@IDENTITY  </span></span><br><span class="line"><span class="comment">                  JDBC:     This will configure MBG to generate code for MyBatis3 suport of JDBC standard generated keys. This is a database independent method of obtaining the value from identity columns.  </span></span><br><span class="line"><span class="comment">                  identity: 自增主键  If true, then the column is flagged as an identity column and the generated &lt;selectKey&gt; element will be placed after the insert (for an identity column). If false, then the generated &lt;selectKey&gt; will be placed before the insert (typically for a sequence).  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">            --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">&quot;&quot;</span> <span class="attr">sqlStatement</span>=<span class="string">&quot;&quot;</span> <span class="attr">identity</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- optional.  </span></span><br><span class="line"><span class="comment">                    列的命名规则：  </span></span><br><span class="line"><span class="comment">                    MBG使用 &lt;columnRenamingRule&gt; 元素在计算列名的对应 名称之前，先对列名进行重命名，  </span></span><br><span class="line"><span class="comment">                    作用：一般需要对BUSI_CLIENT_NO 前的BUSI_进行过滤  </span></span><br><span class="line"><span class="comment">                    支持正在表达式  </span></span><br><span class="line"><span class="comment">                     searchString 表示要被换掉的字符串  </span></span><br><span class="line"><span class="comment">                     replaceString 则是要换成的字符串，默认情况下为空字符串，可选  </span></span><br><span class="line"><span class="comment">            --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">columnRenamingRule</span> <span class="attr">searchString</span>=<span class="string">&quot;&quot;</span> <span class="attr">replaceString</span>=<span class="string">&quot;&quot;</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- optional.告诉 MBG 忽略某一列  </span></span><br><span class="line"><span class="comment">                    column，需要忽略的列  </span></span><br><span class="line"><span class="comment">                    delimitedColumnName:true ,匹配column的值和数据库列的名称 大小写完全匹配，false 忽略大小写匹配  </span></span><br><span class="line"><span class="comment">                    是否限定表的列名，即固定表列在Model中的名称  </span></span><br><span class="line"><span class="comment">            --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">ignoreColumn</span> <span class="attr">column</span>=<span class="string">&quot;PLAN_ID&quot;</span>  <span class="attr">delimitedColumnName</span>=<span class="string">&quot;true&quot;</span> /&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!--optional.覆盖MBG对Model 的生成规则  </span></span><br><span class="line"><span class="comment">                 column: 数据库的列名  </span></span><br><span class="line"><span class="comment">                 javaType: 对应的Java数据类型的完全限定名  </span></span><br><span class="line"><span class="comment">                 在必要的时候可以覆盖由JavaTypeResolver计算得到的java数据类型. For some databases, this is necessary to handle &quot;odd&quot; database types (e.g. MySql&#x27;s unsigned bigint type should be mapped to java.lang.Object).  </span></span><br><span class="line"><span class="comment">                 jdbcType:该列的JDBC数据类型(INTEGER, DECIMAL, NUMERIC, VARCHAR, etc.)，该列可以覆盖由JavaTypeResolver计算得到的Jdbc类型，对某些数据库而言，对于处理特定的JDBC 驱动癖好 很有必要(e.g. DB2&#x27;s LONGVARCHAR type should be mapped to VARCHAR for iBATIS).  </span></span><br><span class="line"><span class="comment">                 typeHandler:  </span></span><br><span class="line"><span class="comment">            --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">&quot;&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;&quot;</span> <span class="attr">typeHandler</span>=<span class="string">&quot;&quot;</span> <span class="attr">delimitedColumnName</span>=<span class="string">&quot;&quot;</span> /&gt;</span>  </span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
<p>​        这里使用了外置的配置文件generator.properties，可以将一下属性配置到properties文件之中，增加配置的灵活性：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driverLocation</span>=<span class="string">D:\\maven\\com\\oracle\\ojdbc14\\10.2.0.4.0\\ojdbc14-10.2.0.4.0.jar  </span></span><br><span class="line"><span class="meta">jdbc.driverClass</span>=<span class="string">oracle.jdbc.driver.OracleDriver  </span></span><br><span class="line"><span class="meta">jdbc.connectionURL</span>=<span class="string">jdbc:oracle:thin:@//localhost:1521/XE  </span></span><br><span class="line"><span class="meta">jdbc.userId</span>=<span class="string">LOUIS  </span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456  </span></span><br></pre></td></tr></table></figure>
<p>​        项目目录如下：</p>
<p><img src="http://img.blog.csdn.net/20150127125526859" alt="技术分享"></p>
<h1 id="3-运行参数配置"><a href="#3-运行参数配置" class="headerlink" title="3.  运行参数配置"></a>3.  运行参数配置</h1><p>​        在Intellij IDEA添加一个“Run运行”选项，使用maven运行mybatis-generator-maven-plugin插件 ：</p>
<p><img src="http://img.blog.csdn.net/20150127114624571" alt="技术分享"></p>
<p><img src="http://img.blog.csdn.net/20150127114637987" alt="技术分享"></p>
<p>​        之后弹出运行配置框，为当前配置配置一个名称，这里其名为”generator”,然后在 “Command line” 选项中输入“mybatis-generator:generate -e”</p>
<p>​        这里加了“-e ”选项是为了让该插件输出详细信息，这样可以帮助我们定位问题</p>
<p><img src="http://img.blog.csdn.net/20150127114644399" alt="技术分享"></p>
<p><img src="http://img.blog.csdn.net/20150127115339141" alt="技术分享"></p>
<p>​        如果添加成功，则会在run 选项中有“generator” 选项，如下：</p>
<p><img src="http://img.blog.csdn.net/20150127115619156" alt="技术分享"></p>
<p>​        点击运行，然后不出意外的话，会在控制台输出：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">C:\Java\jdk1.7.0_71\bin\java -Dmaven.home=D:\software\apache-maven-3.0.5-bin -Dclassworlds.conf=D:\software\apache-maven-3.0.5-bin\bin\m2.conf -Didea.launcher.port=7533 &quot;-Didea.launcher.bin.path=D:\applications\JetBrains\IntelliJ IDEA 14.0.2\bin&quot; -Dfile.encoding=UTF-8 -classpath &quot;D:\software\apache-maven-3.0.5-bin\boot\plexus-classworlds-2.4.jar;D:\applications\JetBrains\IntelliJ IDEA 14.0.2\lib\idea_rt.jar&quot; com.intellij.rt.execution.application.AppMain org.codehaus.classworlds.Launcher -Didea.version=14.0.2 -s D:\software\apache-maven-3.0.5-bin\conf\settings.xml mybatis-generator:generate -e  </span><br><span class="line">[INFO] Error stacktraces are turned on.  </span><br><span class="line">[INFO] Scanning for projects...  </span><br><span class="line">[INFO]                                                                           </span><br><span class="line">[INFO] ------------------------------------------------------------------------  </span><br><span class="line">[INFO] Building hometutor Maven Webapp 1.0-SNAPSHOT  </span><br><span class="line">[INFO] ------------------------------------------------------------------------  </span><br><span class="line">[INFO]   </span><br><span class="line">[INFO] --- mybatis-generator-maven-plugin:1.3.2:generate (default-cli) @ hometutor ---  </span><br><span class="line">[INFO] Connecting to the Database  </span><br><span class="line">[INFO] Introspecting table louis.lession  </span><br><span class="line">log4j:WARN No appenders could be found for logger (org.mybatis.generator.internal.db.DatabaseIntrospector).  </span><br><span class="line">log4j:WARN Please initialize the log4j system properly.  </span><br><span class="line">log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.  </span><br><span class="line">[INFO] Generating Example class for table LOUIS.LESSION  </span><br><span class="line">[INFO] Generating Record class for table LOUIS.LESSION  </span><br><span class="line">[INFO] Generating Mapper Interface for table LOUIS.LESSION  </span><br><span class="line">[INFO] Generating SQL Map for table LOUIS.LESSION  </span><br><span class="line">[INFO] Saving file LessionMapper.xml  </span><br><span class="line">[INFO] Saving file LessionExample.java  </span><br><span class="line">[INFO] Saving file Lession.java  </span><br><span class="line">[INFO] Saving file LessionMapper.java  </span><br><span class="line">[WARNING] Root class com.foo.louis.Hello cannot be loaded, checking for member overrides is disabled for this class   </span><br><span class="line">[WARNING] Existing file E:\sources\tutor\src\main\java\org\louis\hometutor\po\Lession.java was overwritten  </span><br><span class="line">[WARNING] Existing file E:\sources\tutor\src\main\java\com\foo\tourist\dao\LessionMapper.java was overwritten  </span><br><span class="line">[INFO] ------------------------------------------------------------------------  </span><br><span class="line">[INFO] BUILD SUCCESS  </span><br><span class="line">[INFO] ------------------------------------------------------------------------  </span><br><span class="line">[INFO] Total time: 2.334s  </span><br><span class="line">[INFO] Finished at: Tue Jan 27 12:04:08 CST 2015  </span><br><span class="line">[INFO] Final Memory: 8M/107M  </span><br><span class="line">[INFO] ------------------------------------------------------------------------  </span><br><span class="line">  </span><br><span class="line">Process finished with exit code 0  </span><br></pre></td></tr></table></figure>
<p>​        看到BUILD SUCCESS，则大功告成，如果有错误的话，由于添加了-e 选项，会把具体的详细错误信息打印出来的，根据错误信息修改即可</p>
<blockquote>
<p>转自<a href="https://www.cnblogs.com/liaojie970/p/7058543.html">山高我为峰</a></p>
</blockquote>
]]></content>
      <categories>
        <category>MyBaits</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>IDEA</tag>
        <tag>MyBaits</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA常用快捷键整理</title>
    <url>/2020/06/14/IDEAShortcut/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> IDEA确实是一个很好的一个开发工具，但是从Eclipse迁移来的我对IDEA的大部分快捷键并不熟悉，错用了很多Eclipse的快捷键。这里搜集资料结合实战经验，记录IDEA的部分常用快捷键。</p>
<a id="more"></a>

<h1 id="键位分类"><a href="#键位分类" class="headerlink" title="键位分类"></a>键位分类</h1><h2 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + F</td>
<td>在当前文件进行文本查找 （必备）</td>
</tr>
<tr>
<td>Ctrl + R</td>
<td>在当前文件进行文本替换 （必备）</td>
</tr>
<tr>
<td>Ctrl + Z</td>
<td>撤销 （必备）</td>
</tr>
<tr>
<td>Ctrl + Y</td>
<td>删除光标所在行 或 删除选中的行 （必备）</td>
</tr>
<tr>
<td>Ctrl + X</td>
<td>剪切光标所在行 或 剪切选择内容</td>
</tr>
<tr>
<td>Ctrl + C</td>
<td>复制光标所在行 或 复制选择内容</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 （必备）</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）</td>
</tr>
<tr>
<td>Ctrl + E</td>
<td>显示最近打开的文件记录列表</td>
</tr>
<tr>
<td>Ctrl + N</td>
<td>根据输入的 类名 查找类文件</td>
</tr>
<tr>
<td>Ctrl + G</td>
<td>在当前文件跳转到指定行处</td>
</tr>
<tr>
<td>Ctrl + J</td>
<td>插入自定义动态代码模板</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>方法参数提示显示</td>
</tr>
<tr>
<td>Ctrl + Q</td>
<td>光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容</td>
</tr>
<tr>
<td>Ctrl + U</td>
<td>前往当前光标所在的方法的父类的方法 / 接口定义</td>
</tr>
<tr>
<td>Ctrl + B</td>
<td>进入光标所在的方法/变量的接口或是定义出，等效于 Ctrl + 左键单击</td>
</tr>
<tr>
<td>Ctrl + K</td>
<td>版本控制提交项目，需要此项目有加入到版本控制才可用</td>
</tr>
<tr>
<td>Ctrl + T</td>
<td>版本控制更新项目，需要此项目有加入到版本控制才可用</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>显示当前类的层次结构</td>
</tr>
<tr>
<td>Ctrl + O</td>
<td>选择可重写的方法</td>
</tr>
<tr>
<td>Ctrl + I</td>
<td>选择可继承的方法</td>
</tr>
<tr>
<td>Ctrl + +</td>
<td>展开代码</td>
</tr>
<tr>
<td>Ctrl + -</td>
<td>折叠代码</td>
</tr>
<tr>
<td>Ctrl + /</td>
<td>注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）</td>
</tr>
<tr>
<td>Ctrl + [</td>
<td>移动光标到当前所在代码的花括号开始位置</td>
</tr>
<tr>
<td>Ctrl + ]</td>
<td>移动光标到当前所在代码的花括号结束位置</td>
</tr>
<tr>
<td>Ctrl + F1</td>
<td>在光标所在的错误代码出显示错误信息</td>
</tr>
<tr>
<td>Ctrl + F3</td>
<td>调转到所选中的词的下一个引用位置</td>
</tr>
<tr>
<td>Ctrl + F4</td>
<td>关闭当前编辑文件</td>
</tr>
<tr>
<td>Ctrl + F8</td>
<td>在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td>
</tr>
<tr>
<td>Ctrl + F9</td>
<td>执行 Make Project 操作</td>
</tr>
<tr>
<td>Ctrl + F11</td>
<td>选中文件 / 文件夹，使用助记符设定 / 取消书签</td>
</tr>
<tr>
<td>Ctrl + F12</td>
<td>弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td>
</tr>
<tr>
<td>Ctrl + Tab</td>
<td>编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td>
</tr>
<tr>
<td>Ctrl + Enter</td>
<td>智能分隔行</td>
</tr>
<tr>
<td>Ctrl + End</td>
<td>跳到文件尾</td>
</tr>
<tr>
<td>Ctrl + Home</td>
<td>跳到文件头</td>
</tr>
<tr>
<td>Ctrl + Space</td>
<td>基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl + 逗号 （必备）</td>
</tr>
<tr>
<td>Ctrl + Delete</td>
<td>删除光标后面的单词或是中文句</td>
</tr>
<tr>
<td>Ctrl + BackSpace</td>
<td>删除光标前面的单词或是中文句</td>
</tr>
<tr>
<td>Ctrl + 1,2,3…9</td>
<td>定位到对应数值的书签位置</td>
</tr>
<tr>
<td>Ctrl + 左键单击</td>
<td>在打开的文件标题上，弹出该文件路径</td>
</tr>
<tr>
<td>Ctrl + 光标定位</td>
<td>按 Ctrl 不要松开，会显示光标所在的类信息摘要</td>
</tr>
<tr>
<td>Ctrl + 左方向键</td>
<td>光标跳转到当前单词 / 中文句的左侧开头位置</td>
</tr>
<tr>
<td>Ctrl + 右方向键</td>
<td>光标跳转到当前单词 / 中文句的右侧开头位置</td>
</tr>
<tr>
<td>Ctrl + 前方向键</td>
<td>等效于鼠标滚轮向前效果</td>
</tr>
<tr>
<td>Ctrl + 后方向键</td>
<td>等效于鼠标滚轮向后效果</td>
</tr>
</tbody></table>
<h2 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Alt + `</td>
<td>显示版本控制常用操作菜单弹出层</td>
</tr>
<tr>
<td>Alt + Q</td>
<td>弹出一个提示，显示当前类的声明 / 上下文信息</td>
</tr>
<tr>
<td>Alt + F1</td>
<td>显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td>
</tr>
<tr>
<td>Alt + F2</td>
<td>对于前面页面，显示各类浏览器打开目标选择弹出层</td>
</tr>
<tr>
<td>Alt + F3</td>
<td>选中文本，逐个往下查找相同文本，并高亮显示</td>
</tr>
<tr>
<td>Alt + F7</td>
<td>查找光标所在的方法 / 变量 / 类被调用的地方</td>
</tr>
<tr>
<td>Alt + F8</td>
<td>在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td>
</tr>
<tr>
<td>Alt + Home</td>
<td>定位 / 显示到当前文件的 Navigation Bar</td>
</tr>
<tr>
<td>Alt + Enter</td>
<td>IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 （必备）</td>
</tr>
<tr>
<td>Alt + Insert</td>
<td>代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</td>
</tr>
<tr>
<td>Alt + 左方向键</td>
<td>按左方向切换当前已打开的文件视图</td>
</tr>
<tr>
<td>Alt + 右方向键</td>
<td>按右方向切换当前已打开的文件视图</td>
</tr>
<tr>
<td>Alt + 前方向键</td>
<td>当前光标跳转到当前文件的前一个方法名位置</td>
</tr>
<tr>
<td>Alt + 后方向键</td>
<td>当前光标跳转到当前文件的后一个方法名位置</td>
</tr>
<tr>
<td>Alt + 1,2,3…9</td>
<td>显示对应数值的选项卡，其中 1 是 Project 用得最多</td>
</tr>
</tbody></table>
<h2 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Shift + F1</td>
<td>如果有外部文档可以连接外部文档</td>
</tr>
<tr>
<td>Shift + F2</td>
<td>跳转到上一个高亮错误 或 警告位置</td>
</tr>
<tr>
<td>Shift + F3</td>
<td>在查找模式下，查找匹配上一个</td>
</tr>
<tr>
<td>Shift + F4</td>
<td>对当前打开的文件，使用新Windows窗口打开，旧窗口保留</td>
</tr>
<tr>
<td>Shift + F6</td>
<td>对文件 / 文件夹 重命名</td>
</tr>
<tr>
<td>Shift + F7</td>
<td>在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td>
</tr>
<tr>
<td>Shift + F8</td>
<td>在 Debug 模式下，跳出，表现出来的效果跟 F9 一样</td>
</tr>
<tr>
<td>Shift + F9</td>
<td>等效于点击工具栏的 Debug 按钮</td>
</tr>
<tr>
<td>Shift + F10</td>
<td>等效于点击工具栏的 Run 按钮</td>
</tr>
<tr>
<td>Shift + F11</td>
<td>弹出书签显示层</td>
</tr>
<tr>
<td>Shift + Tab</td>
<td>取消缩进</td>
</tr>
<tr>
<td>Shift + ESC</td>
<td>隐藏当前 或 最后一个激活的工具窗口</td>
</tr>
<tr>
<td>Shift + End</td>
<td>选中光标到当前行尾位置</td>
</tr>
<tr>
<td>Shift + Home</td>
<td>选中光标到当前行头位置</td>
</tr>
<tr>
<td>Shift + Enter</td>
<td>开始新一行。光标所在行下空出一行，光标定位到新行位置</td>
</tr>
<tr>
<td>Shift + 左键单击</td>
<td>在打开的文件名上按此快捷键，可以关闭当前打开文件</td>
</tr>
<tr>
<td>Shift + 滚轮前后滚动</td>
<td>当前文件的横向滚动轴滚动</td>
</tr>
</tbody></table>
<h2 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Alt + L</td>
<td>格式化代码，可以对当前文件和整个包目录使用 （必备）</td>
</tr>
<tr>
<td>Ctrl + Alt + O</td>
<td>优化导入的类，可以对当前文件和整个包目录使用 （必备）</td>
</tr>
<tr>
<td>Ctrl + Alt + I</td>
<td>光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td>
</tr>
<tr>
<td>Ctrl + Alt + T</td>
<td>对选中的代码弹出环绕选项弹出层</td>
</tr>
<tr>
<td>Ctrl + Alt + J</td>
<td>弹出模板选择窗口，讲选定的代码加入动态模板中</td>
</tr>
<tr>
<td>Ctrl + Alt + H</td>
<td>调用层次</td>
</tr>
<tr>
<td>Ctrl + Alt + B</td>
<td>在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td>
</tr>
<tr>
<td>Ctrl + Alt + V</td>
<td>快速引进变量</td>
</tr>
<tr>
<td>Ctrl + Alt + Y</td>
<td>同步、刷新</td>
</tr>
<tr>
<td>Ctrl + Alt + S</td>
<td>打开 IntelliJ IDEA 系统设置</td>
</tr>
<tr>
<td>Ctrl + Alt + F7</td>
<td>显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td>
</tr>
<tr>
<td>Ctrl + Alt + F11</td>
<td>切换全屏模式</td>
</tr>
<tr>
<td>Ctrl + Alt + Enter</td>
<td>光标所在行上空出一行，光标定位到新行</td>
</tr>
<tr>
<td>Ctrl + Alt + Home</td>
<td>弹出跟当前文件有关联的文件弹出层</td>
</tr>
<tr>
<td>Ctrl + Alt + Space</td>
<td>类名自动完成</td>
</tr>
<tr>
<td>Ctrl + Alt + 左方向键</td>
<td>退回到上一个操作的地方 （必备）（注意与其他软件快捷键冲突）</td>
</tr>
<tr>
<td>Ctrl + Alt + 右方向键</td>
<td>前进到上一个操作的地方 （必备）（注意与其他软件快捷键冲突）</td>
</tr>
<tr>
<td>Ctrl + Alt + 前方向键</td>
<td>在查找模式下，跳到上个查找的文件</td>
</tr>
<tr>
<td>Ctrl + Alt + 后方向键</td>
<td>在查找模式下，跳到下个查找的文件</td>
</tr>
</tbody></table>
<h2 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Shift + F</td>
<td>根据输入内容查找整个项目 或 指定目录内文件 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + R</td>
<td>根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + J</td>
<td>自动将下一行合并到当前行末尾 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + Z</td>
<td>取消撤销 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + W</td>
<td>递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td>通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + U</td>
<td>对选中的代码进行大 / 小写轮流转换 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + T</td>
<td>对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td>
</tr>
<tr>
<td>Ctrl + Shift + C</td>
<td>复制当前文件磁盘路径到剪贴板</td>
</tr>
<tr>
<td>Ctrl + Shift + V</td>
<td>弹出缓存的最近拷贝的内容管理器弹出层</td>
</tr>
<tr>
<td>Ctrl + Shift + E</td>
<td>显示最近修改的文件列表的弹出层</td>
</tr>
<tr>
<td>Ctrl + Shift + H</td>
<td>显示方法层次结构</td>
</tr>
<tr>
<td>Ctrl + Shift + B</td>
<td>跳转到类型声明处</td>
</tr>
<tr>
<td>Ctrl + Shift + I</td>
<td>快速查看光标所在的方法 或 类的定义</td>
</tr>
<tr>
<td>Ctrl + Shift + A</td>
<td>查找动作 / 设置</td>
</tr>
<tr>
<td>Ctrl + Shift + /</td>
<td>代码块注释 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + [</td>
<td>选中从光标所在位置到它的顶部中括号位置</td>
</tr>
<tr>
<td>Ctrl + Shift + ]</td>
<td>选中从光标所在位置到它的底部中括号位置</td>
</tr>
<tr>
<td>Ctrl + Shift + +</td>
<td>展开所有代码</td>
</tr>
<tr>
<td>Ctrl + Shift + -</td>
<td>折叠所有代码</td>
</tr>
<tr>
<td>Ctrl + Shift + F7</td>
<td>高亮显示所有该选中文本，按Esc高亮消失</td>
</tr>
<tr>
<td>Ctrl + Shift + F8</td>
<td>在 Debug 模式下，指定断点进入条件</td>
</tr>
<tr>
<td>Ctrl + Shift + F9</td>
<td>编译选中的文件 / 包 / Module</td>
</tr>
<tr>
<td>Ctrl + Shift + F12</td>
<td>编辑器最大化</td>
</tr>
<tr>
<td>Ctrl + Shift + Space</td>
<td>智能代码提示</td>
</tr>
<tr>
<td>Ctrl + Shift + Enter</td>
<td>自动结束代码，行末自动添加分号 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + Backspace</td>
<td>退回到上次修改的地方</td>
</tr>
<tr>
<td>Ctrl + Shift + 1,2,3…9</td>
<td>快速添加指定数值的书签</td>
</tr>
<tr>
<td>Ctrl + Shift + 左方向键</td>
<td>在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句</td>
</tr>
<tr>
<td>Ctrl + Shift + 右方向键</td>
<td>在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句</td>
</tr>
<tr>
<td>Ctrl + Shift + 左方向键</td>
<td>在光标焦点是在工具选项卡上，缩小选项卡区域</td>
</tr>
<tr>
<td>Ctrl + Shift + 右方向键</td>
<td>在光标焦点是在工具选项卡上，扩大选项卡区域</td>
</tr>
<tr>
<td>Ctrl + Shift + 前方向键</td>
<td>光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td>
</tr>
<tr>
<td>Ctrl + Shift + 后方向键</td>
<td>光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</td>
</tr>
</tbody></table>
<h2 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Alt + Shift + N</td>
<td>选择 / 添加 task</td>
</tr>
<tr>
<td>Alt + Shift + F</td>
<td>显示添加到收藏夹弹出层</td>
</tr>
<tr>
<td>Alt + Shift + C</td>
<td>查看最近操作项目的变化情况列表</td>
</tr>
<tr>
<td>Alt + Shift + F</td>
<td>添加到收藏夹</td>
</tr>
<tr>
<td>Alt + Shift + I</td>
<td>查看项目当前文件</td>
</tr>
<tr>
<td>Alt + Shift + F7</td>
<td>在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td>
</tr>
<tr>
<td>Alt + Shift + F9</td>
<td>弹出 Debug 的可选择菜单</td>
</tr>
<tr>
<td>Alt + Shift + F10</td>
<td>弹出 Run 的可选择菜单</td>
</tr>
<tr>
<td>Alt + Shift + 左键双击</td>
<td>选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句</td>
</tr>
<tr>
<td>Alt + Shift + 前方向键</td>
<td>移动光标所在行向上移动</td>
</tr>
<tr>
<td>Alt + Shift + 后方向键</td>
<td>移动光标所在行向下移动</td>
</tr>
</tbody></table>
<h2 id="Ctrl-Shift-Alt"><a href="#Ctrl-Shift-Alt" class="headerlink" title="Ctrl + Shift + Alt"></a>Ctrl + Shift + Alt</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Shift + Alt + V</td>
<td>无格式黏贴</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + N</td>
<td>前往指定的变量 / 方法</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + S</td>
<td>打开当前项目设置</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + C</td>
<td>复制参考信息</td>
</tr>
</tbody></table>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>F2</td>
<td>跳转到下一个高亮错误 或 警告位置 （必备）</td>
</tr>
<tr>
<td>F3</td>
<td>在查找模式下，定位到下一个匹配处</td>
</tr>
<tr>
<td>F4</td>
<td>编辑源</td>
</tr>
<tr>
<td>F7</td>
<td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td>
</tr>
<tr>
<td>F8</td>
<td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td>
</tr>
<tr>
<td>F9</td>
<td>在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td>
</tr>
<tr>
<td>F11</td>
<td>添加书签</td>
</tr>
<tr>
<td>F12</td>
<td>回到前一个工具窗口</td>
</tr>
<tr>
<td>Tab</td>
<td>缩进</td>
</tr>
<tr>
<td>ESC</td>
<td>从工具窗口进入代码文件窗口</td>
</tr>
<tr>
<td>连按两次Shift</td>
<td>弹出 Search Everywhere 弹出层</td>
</tr>
</tbody></table>
<h1 id="按常用分类"><a href="#按常用分类" class="headerlink" title="按常用分类"></a>按常用分类</h1><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Alt +B</td>
<td>查找接口的实现类</td>
</tr>
<tr>
<td>Alt + Shift + P</td>
<td>快速实现接口</td>
</tr>
<tr>
<td>Alt + Insert</td>
<td>Get/Set方法快速生成</td>
</tr>
<tr>
<td>Ctrl + Alt+ V</td>
<td>自动补全返回值</td>
</tr>
<tr>
<td>Alt+Enter</td>
<td>自动显示错误解决方案</td>
</tr>
<tr>
<td>psvm + 回车</td>
<td>快速生成Main()方法</td>
</tr>
<tr>
<td>sout + 回车</td>
<td>快速生成输出语句</td>
</tr>
<tr>
<td>Ctrl + Alt + space</td>
<td>内容提示以及代码补全</td>
</tr>
<tr>
<td>Ctr l + Alt + L</td>
<td>格式化代码</td>
</tr>
<tr>
<td>Ctrl + Tab</td>
<td>自由切换</td>
</tr>
<tr>
<td>Ctrl + X</td>
<td>删除整行</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + T</td>
<td>重构</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA整合Maven+SSM框架</title>
    <url>/2020/06/14/IDEAMavenSSM/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前面对于Spring、SpringMVC以及Mybatis的学习后，这里基于IDEA开发工具将SSM整合为Maven工程。</p>
<a id="more"></a>

<h1 id="1-搭建整合环境"><a href="#1-搭建整合环境" class="headerlink" title="1. 搭建整合环境"></a>1. 搭建整合环境</h1><h2 id="1-1-整合说明"><a href="#1-1-整合说明" class="headerlink" title="1.1 整合说明"></a>1.1 整合说明</h2><p>​        整合说明：SSM整合可以使用多种方式，这里选择XML + 注解的方式，这并没有什么不妥，反正这样最简洁</p>
<h2 id="1-2-整合的思路："><a href="#1-2-整合的思路：" class="headerlink" title="1.2 整合的思路："></a>1.2 整合的思路：</h2><ol>
<li><p>先搭建整合的环境</p>
</li>
<li><p>搭建Spring的配置环境</p>
</li>
<li><p>再使用Spring整合SpringMVC框架</p>
</li>
<li><p>随后使用Spring整合MyBatis框架</p>
</li>
<li><p>最后Spring整合MyBaits框架配置事务（Spring声明式事务管理）</p>
</li>
</ol>
<h2 id="1-3-创建数据库和表格结构语句"><a href="#1-3-创建数据库和表格结构语句" class="headerlink" title="1.3 创建数据库和表格结构语句"></a>1.3 创建数据库和表格结构语句</h2><p>建表sql代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database ssm;</span><br><span class="line">use ssm;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> account (</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">money <span class="keyword">double</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="1-4-创建Maven工程"><a href="#1-4-创建Maven工程" class="headerlink" title="1.4 创建Maven工程"></a>1.4 创建Maven工程</h2><ol>
<li>创建Twossm_parent父工程（打包方式选择pom，必须的）</li>
<li>创建Twossm_web子模块（打包方式是war包）</li>
<li>创建Twossm_service子模块（打包方式是jar包）</li>
<li>创建Twossm_dao子模块（打包方式是jar包）</li>
<li>创建Twossm_domain子模块（打包方式是jar包）</li>
<li>web依赖于service，service依赖于dao，dao依赖于domain</li>
<li>在Twossm_parent的pom.xml文件中引入坐标依赖，找到对应的&lt; properties &gt;标签，以及&lt; dependencies &gt;标签，复制粘贴即可<br>版本控制是在&lt; properties &gt;标签中控制，从坐标依赖中可以看出版本号：spring5X、MySQL8.0.15、mybatis3.4.5</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="8">
<li>部署Twossm_web的项目，只要把Twossm_web项目加入到tomcat服务器中即可</li>
</ol>
<h2 id="1-5-编写实体类，在Twossm-domain项目中编写"><a href="#1-5-编写实体类，在Twossm-domain项目中编写" class="headerlink" title="1.5 编写实体类，在Twossm_domain项目中编写"></a>1.5 编写实体类，在Twossm_domain项目中编写</h2><p>在这里，我记录一下IDEA的快捷键，详情见<a href="/2020/06/14/IDEAShortcut/" title="IDEA常用快捷键整理">IDEA常用快捷键整理</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gx.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-6-编写Dao接口"><a href="#1-6-编写Dao接口" class="headerlink" title="1.6 编写Dao接口"></a>1.6 编写Dao接口</h2><p>在dao包中编写dao接口IAccountdao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gx.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gx.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountdao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-7-编写service接口和实现类"><a href="#1-7-编写service接口和实现类" class="headerlink" title="1.7 编写service接口和实现类"></a>1.7 编写service接口和实现类</h2><p>service接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gx.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gx.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询所有账户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 保存帐户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>service接口实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gx.service.Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gx.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.gx.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Service业务层：查询所有账户...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Service业务层：保存帐户...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到这里，整合环境就搭建好了效果如下，接下来搭建Spring的配置！</p>
<p><img src="https://s1.ax1x.com/2020/06/14/NSazgx.jpg" alt="NSazgx.jpg"></p>
<h1 id="2-Spring框架代码的编写"><a href="#2-Spring框架代码的编写" class="headerlink" title="2. Spring框架代码的编写"></a>2. Spring框架代码的编写</h1><p>搭建和测试Spring的开发环境</p>
<h2 id="2-1-创建resources的资源文件目录管理xml配置文件"><a href="#2-1-创建resources的资源文件目录管理xml配置文件" class="headerlink" title="2.1 创建resources的资源文件目录管理xml配置文件"></a>2.1 创建resources的资源文件目录管理xml配置文件</h2><p>创建一个叫resources的资源文件目录，用来管理放置XML配置文件</p>
<p><img src="https://s1.ax1x.com/2020/06/14/NSDNY4.png" alt="NSDNY4.png"></p>
<p><img src="https://s1.ax1x.com/2020/06/14/NSDvXq.png" alt="NSDvXq.png"></p>
<h2 id="2-2-编写applicationContext-xml配置文件"><a href="#2-2-编写applicationContext-xml配置文件" class="headerlink" title="2.2 编写applicationContext.xml配置文件"></a>2.2 编写applicationContext.xml配置文件</h2><p>在resources资源文件中创建applicationContext.xml的配置文件，编写具体的配置信息</p>
<p>applicationContext.xml中的配置信息：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解的扫描，希望处理service和dao，controller不需要Spring框架去处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.gx&quot;</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置哪些注解不扫描--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-3-在项目中编写测试方法，进行测试"><a href="#2-3-在项目中编写测试方法，进行测试" class="headerlink" title="2.3 在项目中编写测试方法，进行测试"></a>2.3 在项目中编写测试方法，进行测试</h2><p>创建Test包后在test包中创建一个叫TestSpring的class类，具体的内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gx.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gx.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.gx.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line">        AccountService as = (AccountService) ac.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">        as.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行如下效果，说明搭建Spring的开发环境成功！</p>
<p><img src="https://s1.ax1x.com/2020/06/14/NSrGjI.png" alt="NSrGjI.png"></p>
<p>到这里，Spring的开发环境成功！接下来搭建SpringMVC框架环境。</p>
<h1 id="3-SpringMVC框架代码的编写"><a href="#3-SpringMVC框架代码的编写" class="headerlink" title="3. SpringMVC框架代码的编写"></a>3. SpringMVC框架代码的编写</h1><h2 id="3-1-web-xml配置"><a href="#3-1-web-xml配置" class="headerlink" title="3.1 web.xml配置"></a>3.1 web.xml配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!--配置前端控制器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--加载springmvc.xml配置文件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--启动服务器，创建该servlet--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--解决中文乱码的过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-配置SpringMVC-xml文件"><a href="#3-2-配置SpringMVC-xml文件" class="headerlink" title="3.2 配置SpringMVC.xml文件"></a>3.2 配置SpringMVC.xml文件</h2><p>同样是在resources资源文件夹中创建springmvc.xml配置文件并写入以下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描，只扫描Controller注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.gx&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置的视图解析器对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--过滤静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/css&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/images/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启SpringMVC注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-3-创建jsp页面，编写Controller代码"><a href="#3-3-创建jsp页面，编写Controller代码" class="headerlink" title="3.3 创建jsp页面，编写Controller代码"></a>3.3 创建jsp页面，编写Controller代码</h2><p>编写index.jsp页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;account/findAll&quot;</span>&gt;</span>测试SpringMVC查询<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在controller层中的AccountController的class类中编写代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gx.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gx.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.gx.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/account/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller表现层：查询所有账户...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;  <span class="comment">//在视图解析器中配置了前缀后缀</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时候就要创建controller跳转的list.jsp页面了：</p>
<p><img src="https://s1.ax1x.com/2020/06/14/NSgZT0.png" alt="NSgZT0.png"></p>
<p>list.jsp页面创建好了，编写一下内容，只是看是否跳转成功，输出一句话即可：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Bule</span><br><span class="line">  Date: <span class="number">2019</span>/<span class="number">9</span>/<span class="number">2</span></span><br><span class="line">  Time: <span class="number">7</span>:<span class="number">32</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">            &lt;h2&gt;查询所有的账户&lt;/h2&gt;</span><br><span class="line">          </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-4-部署Tomcat进行测试"><a href="#3-4-部署Tomcat进行测试" class="headerlink" title="3.4 部署Tomcat进行测试"></a>3.4 部署Tomcat进行测试</h2><p><img src="https://img-blog.csdnimg.cn/20190902162117301.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190902162457840.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190902163745680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NTQzNTA4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>        到这里，spring、springmvc的开发环境就都搭建好了。接下来是整合Spring和SpringMVC了！</p>
<h1 id="4-Spring整合SpringMVC框架"><a href="#4-Spring整合SpringMVC框架" class="headerlink" title="4. Spring整合SpringMVC框架"></a>4. Spring整合SpringMVC框架</h1><h2 id="4-1-Spring整合SpringMVC的框架原理分析"><a href="#4-1-Spring整合SpringMVC的框架原理分析" class="headerlink" title="4.1 Spring整合SpringMVC的框架原理分析"></a>4.1 Spring整合SpringMVC的框架原理分析</h2><p>​        整合成功的表现：在controller（SpringMVC）中能成功的调用service（Spring）对象中的方法。要想在controller中调用service方法，就要注入service到controller中来，有service对象才可以调用service方法，方法是这样没有错，但是有一个问题，就是启动Tomcat之后试想一下，在web.xml中配置有前端控制器，web容器会帮我们加载springmvc.xml配置文件，在springmvc.xml配置文件中我们配置情况是只扫描controller，别的不扫，而spring.xml文件就从头到尾没有执行过，spring中的配置扫描自然也不会去扫描，就相当于没有将spring交到IOC容器当中去，所以，现在的解决方案就是，在启动服务器时就加载spring配置文件,怎么实现呢？这时候监听器listener就派上用场了，具体实现如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20190902171005382.png" alt="在这里插入图片描述"></p>
<h2 id="4-2-在web-xml中配置ContextLoaderListener监听器"><a href="#4-2-在web-xml中配置ContextLoaderListener监听器" class="headerlink" title="4.2 在web.xml中配置ContextLoaderListener监听器"></a>4.2 在web.xml中配置ContextLoaderListener监听器</h2><p>在项目启动的时候，就去加载applicationContext.xml的配置文件，在web.xml中配置ContextLoaderListener监听器（该监听器只能加载WEB-INF目录下的applicationContext.xml的配置文件）。要想加载applicationContext.xml的配置文件有两种方法，第一种（不建议）：</p>
<p>第二种（强烈建议）：在web.xml中配置加载路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring的监听器，默认只加载WEB-INF目录下的applicationContext.xml配置文件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置配置文件的路径--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为我们在整合过程中会有许多配置文件，我们自定义一个类似pages资源文件夹专门管理这些配置文件，方便管理，方便维护！！！</p>
<h2 id="4-3-controller中注入service对象，调用service对象方法并测试"><a href="#4-3-controller中注入service对象，调用service对象方法并测试" class="headerlink" title="4.3 controller中注入service对象，调用service对象方法并测试"></a>4.3 controller中注入service对象，调用service对象方法并测试</h2><p>这时候，启动服务器时也会加载spring配置文件了，那么，我们可以在controller中注入service了，于是开始编写controller代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gx.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gx.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.gx.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>   <span class="comment">//按类型注入</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/account/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller表现层：查询所有账户...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Account&gt; list = accountService.findAll();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写完成，开始测试，启动Tomcat，效果如下：<br><img src="https://img-blog.csdnimg.cn/20190902174053298.png" alt="在这里插入图片描述"></p>
<h1 id="5-MyBaits框架代码的编写"><a href="#5-MyBaits框架代码的编写" class="headerlink" title="5. MyBaits框架代码的编写"></a>5. MyBaits框架代码的编写</h1><p>MyBatis环境搭建首先是dao，搭建mybatis，之前要编写mapper映射的配置文件，其实挺麻烦的，所以我选择使用注解！</p>
<h2 id="5-1-在IAccountdao接口方法上添加注解，编写SQL语句"><a href="#5-1-在IAccountdao接口方法上添加注解，编写SQL语句" class="headerlink" title="5.1 在IAccountdao接口方法上添加注解，编写SQL语句"></a>5.1 在IAccountdao接口方法上添加注解，编写SQL语句</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gx.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gx.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>  <span class="comment">//此注解代表这是一个持久层，用法类似@controller、@service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountdao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from account&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into account (name,money) value(#&#123;name&#125;,#&#123;money&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-2-SqlMapConfig-xml的配置文件"><a href="#5-2-SqlMapConfig-xml的配置文件" class="headerlink" title="5.2 SqlMapConfig.xml的配置文件"></a>5.2 SqlMapConfig.xml的配置文件</h2><p>写入如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span> <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///ssm&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 使用的是注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- &lt;mapper class=&quot;com.gx.dao.IAccountdao&quot;/&gt; --&gt;</span> <span class="comment">&lt;!-- 该包下所有的dao接口都可以使用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.gx.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为我使用的是注解，我觉得还是有必要提一下以下三种方法：<br><img src="https://img-blog.csdnimg.cn/20190902181214119.png" alt="在这里插入图片描述"></p>
<h2 id="5-3-MyBatis测试方法"><a href="#5-3-MyBatis测试方法" class="headerlink" title="5.3 MyBatis测试方法"></a>5.3 MyBatis测试方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gx.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gx.dao.IAccountdao;</span><br><span class="line"><span class="keyword">import</span> com.gx.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyBatis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Account account =<span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">&quot;杜永蓝&quot;</span>);</span><br><span class="line">        account.setMoney(<span class="number">200d</span>);</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">// 创建SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">// 获取到代理对象</span></span><br><span class="line">        IAccountdao dao = session.getMapper(IAccountdao.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存</span></span><br><span class="line">        dao.saveAccount(account);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line"></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line">        IAccountdao dao = session.getMapper(IAccountdao.class);</span><br><span class="line"></span><br><span class="line">        List&lt;Account&gt; list = dao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account: list ) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行测试：<br><img src="https://img-blog.csdnimg.cn/20190902182219742.png" alt="在这里插入图片描述"></p>
<p>​        运行效果：</p>
<p><img src="https://img-blog.csdnimg.cn/20190902182609492.png" alt="在这里插入图片描述"></p>
<h1 id="6-Spring整合MyBaits框架"><a href="#6-Spring整合MyBaits框架" class="headerlink" title="6. Spring整合MyBaits框架"></a>6. Spring整合MyBaits框架</h1><p>​        Spring整合MyBatis框架之前，先想一想，怎样才算整合成功呢？其实，这和之前的spring整合springMVC的套路差不多，其实就是，Service能成功调用dao对象，能够做查询操作或者新增数据能存进数据库。现在spring已经是在IOC容器中了，dao是一个接口，可以通过程序帮这个接口生成代理对象，我们要是可以把这个代理对象也放进IOC容器，那么service就可以拿到这个对象，之后在service中做一个注入，service从而调用dao代理对象的方法，那么我们怎么去实现dao接口生成的代理对象放入IOC容器呢？<br>​        整合目的：把SqlMapConfig.xml配置文件中的内容配置到applicationContext.xml配置文件中</p>
<h2 id="6-1-在applicationContext-xml中配置数据库连接池"><a href="#6-1-在applicationContext-xml中配置数据库连接池" class="headerlink" title="6.1 在applicationContext.xml中配置数据库连接池"></a>6.1 在applicationContext.xml中配置数据库连接池</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring整合MyBatis框架--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///ssm&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="6-2-在applicationContext-xml中配置SqlSessionFactory工厂"><a href="#6-2-在applicationContext-xml中配置SqlSessionFactory工厂" class="headerlink" title="6.2 在applicationContext.xml中配置SqlSessionFactory工厂"></a>6.2 在applicationContext.xml中配置SqlSessionFactory工厂</h2><p>​        没配置工厂之前，我们用Test测试的时候，每次都要先创建工厂，因为工厂能够给我们创建SqlSession,有了SqlSession就可以通过SqlSession拿到代理对象。现在我们直接在applicationContext.xml中配置SqlSessionFactory工厂，这就相当于IOC容器中有了工厂，就可以去创建SqlSession，进而通过SqlSession拿到代理对象，没必要每次测试都去创建工厂。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--配置SqlSessionFactory工厂--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessonFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20190902205722751.png" alt="在这里插入图片描述"></p>
<h2 id="6-3-在applicationContext-xml中配置IAccount"><a href="#6-3-在applicationContext-xml中配置IAccount" class="headerlink" title="6.3 在applicationContext.xml中配置IAccount"></a>6.3 在applicationContext.xml中配置IAccount</h2><p>​        因为工厂有了，SqlSession也有了，那代理谁呢，所以我们要配置IAccountdao接口所在包，告诉SqlSession去代理接口所在包中的代理，从而存到IOC容器中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--配置IAccountdao接口所在包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScanner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.gx.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="6-4-小结上面的三个配置"><a href="#6-4-小结上面的三个配置" class="headerlink" title="6.4 小结上面的三个配置"></a>6.4 小结上面的三个配置</h2><p>​        其实，上面的操作就是<strong>把mybatis中的配置（SqlMapConfig.xml）转移到spring中去，让它产生代理并存到IOC容器中</strong>！</p>
<h2 id="6-5-完善Service层代码"><a href="#6-5-完善Service层代码" class="headerlink" title="6.5 完善Service层代码"></a>6.5 完善Service层代码</h2><p>​        在AccountServiceImpl实现类中编写代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gx.service.Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gx.dao.IAccountdao;</span><br><span class="line"><span class="keyword">import</span> com.gx.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.gx.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountdao iaccountdao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Service业务层：查询所有账户...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> iaccountdao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Service业务层：保存帐户...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-6-完善Controller层代码"><a href="#6-6-完善Controller层代码" class="headerlink" title="6.6 完善Controller层代码"></a>6.6 完善Controller层代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gx.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gx.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.gx.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/account/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span></span>&#123;  <span class="comment">//存数据， Model对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Controller表现层：查询所有账户...&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用service的方法</span></span><br><span class="line">        List&lt;Account&gt; list = accountService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-7-完善list-jsp页面"><a href="#6-7-完善list-jsp页面" class="headerlink" title="6.7 完善list.jsp页面"></a>6.7 完善list.jsp页面</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Bule</span><br><span class="line">  Date: <span class="number">2019</span>/<span class="number">9</span>/<span class="number">2</span></span><br><span class="line">  Time: <span class="number">7</span>:<span class="number">32</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;查询所有的账户&lt;/h2&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;account&quot;</span>&gt;</span><br><span class="line">        $&#123;account.name&#125;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="6-8-运行测试"><a href="#6-8-运行测试" class="headerlink" title="6.8 运行测试"></a>6.8 运行测试</h2><p><img src="https://img-blog.csdnimg.cn/20190902211018192.png" alt="在这里插入图片描述"><br>到这里，SSM整合就基本完成！</p>
<h1 id="7-Spring整合MyBatis框架配置事务（Spring的声明式事务管理）"><a href="#7-Spring整合MyBatis框架配置事务（Spring的声明式事务管理）" class="headerlink" title="7. Spring整合MyBatis框架配置事务（Spring的声明式事务管理）"></a>7. Spring整合MyBatis框架配置事务（Spring的声明式事务管理）</h1><p>​        细心的小伙伴可能发现了，我在整合spring、mybatis测试的时候（TestMybatis中），新增数据保存的时候手动的提交过事务 session.commit()，如果不写这一句，就会出现数据没提交的情况，因此为了完美的整合ssm，我们必须配置Spring的声明式事务管理！</p>
<h2 id="7-1-在applicationContext-xml中配置Spring框架声明式事务管理"><a href="#7-1-在applicationContext-xml中配置Spring框架声明式事务管理" class="headerlink" title="7.1 在applicationContext.xml中配置Spring框架声明式事务管理"></a>7.1 在applicationContext.xml中配置Spring框架声明式事务管理</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring框架声明式事务管理--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--配置AOP增强--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.gx.service.Impl.*ServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="7-2-完善index-jsp页面"><a href="#7-2-完善index-jsp页面" class="headerlink" title="7.2 完善index.jsp页面"></a>7.2 完善index.jsp页面</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;account/findAll&quot;&gt;测试查询&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;测试包&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;account/save&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    金额：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;money&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;保存&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="7-3-完善Service层、Controller层代码"><a href="#7-3-完善Service层、Controller层代码" class="headerlink" title="7.3 完善Service层、Controller层代码"></a>7.3 完善Service层、Controller层代码</h2><p>Service层：在AccountServiceImpl实现类中调用service中的<code>saveAccount(account)</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Service业务层：保存帐户...&quot;</span>);</span><br><span class="line">       iaccountdao.saveAccount(account);  <span class="comment">//调用service中的saveAccount(account)方法</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>Controller层代码：在AccountController类中添加一个保存save的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/account/save&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    accountService.saveAccount(account);</span><br><span class="line">    response.sendRedirect(request.getContextPath()+<span class="string">&quot;/account/findAll&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-4-运行测试"><a href="#7-4-运行测试" class="headerlink" title="7.4 运行测试"></a>7.4 运行测试</h2><p><img src="https://img-blog.csdnimg.cn/20190902220904301.png" alt="在这里插入图片描述"></p>
<p>OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOKKKKKKKKKKKKKKKKKKK！</p>
<p>这么曲折终于整合完毕，但是到底还是SpringBoot香啊，烦神！</p>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>ApplicationContext之getBean方法详解</title>
    <url>/2020/06/14/ApplicationContextGetBean/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们知道可以通过ApplicationContext的getBean方法来获取Spring容器中已初始化的bean。getBean一共有以下四种方法原型：</p>
<ul>
<li>getBean(String name)</li>
<li>getBean(Class<T> type)</li>
<li>getBean(String name,Class<T> type)</li>
<li>getBean(String name,Object[] args)</li>
</ul>
<p>下来我们分别来探讨以上四种方式获取bean的区别。</p>
<a id="more"></a>

<h1 id="其中实体类Person定义如下："><a href="#其中实体类Person定义如下：" class="headerlink" title="其中实体类Person定义如下："></a>其中实体类Person定义如下：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Person [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>applicationContext.xml注册有id为p的bean，配置如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;p&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.bean.Person&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;张三&quot;</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;18&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h2 id="1-getBean-String-name"><a href="#1-getBean-String-name" class="headerlink" title="1. getBean(String name)"></a>1. getBean(String name)</h2><p>​        参数name表示IOC容器中已经实例化的bean的id或者name,且无论是id还是name都要求在IOC容器中是唯一的不能重名。那么这种方法就是通过id或name去查找获取bean.获取bean的参考代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    Person p = (Person) ctx.getBean(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">    System.out.println(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-getBean-Class-type"><a href="#2-getBean-Class-type" class="headerlink" title="2. getBean(Class type)"></a>2. getBean(Class<T> type)</h2><p>​        参数Class<T> type表示要加载的Bean的类型。如果该类型没有继承任何父类(Object类除外)和实现接口的话，那么要求该类型的bean在IOC容器中也必须是唯一的。比如applicationContext.xml配置两个类型完全一致的bean,且都没有配置id和name属性。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.bean.Person&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;张三&quot;</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;18&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.bean.Person&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;李四&quot;</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;20&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<p>​        那么通过com.bean.Person这种类型来查找bean,参考代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    Person p = ctx.getBean(Person.class);</span><br><span class="line">    System.out.println(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        但是由于属于com.bean.Person的bean在IOC容器中不唯一，所以这里会抛出NoUniqueBeanDefinitionException异常。</p>
<p>​        由此我们可以总结getBean(String name)和getBean(Class<T> type)的异同点。</p>
<ul>
<li><h5 id="相同点：都要求id或者name或者类型在容器中的唯一性。"><a href="#相同点：都要求id或者name或者类型在容器中的唯一性。" class="headerlink" title="相同点：都要求id或者name或者类型在容器中的唯一性。"></a>相同点：都要求id或者name或者类型在容器中的唯一性。</h5></li>
<li><h5 id="不同点：getBean-String-name-获得的对象需要类型转换而getBean-Class-type-获得的对象无需类型转换。"><a href="#不同点：getBean-String-name-获得的对象需要类型转换而getBean-Class-type-获得的对象无需类型转换。" class="headerlink" title="不同点：getBean(String name)获得的对象需要类型转换而getBean(Class type)获得的对象无需类型转换。"></a>不同点：getBean(String name)获得的对象需要类型转换而getBean(Class<T> type)获得的对象无需类型转换。</h5></li>
</ul>
<h2 id="3-getBean-String-name-Class-type"><a href="#3-getBean-String-name-Class-type" class="headerlink" title="3.  getBean(String name,Class type)"></a>3.  getBean(String name,Class<T> type)</h2><p>​        这种方式比较适合当类型不唯一时，再通过id或者name来获取bean。</p>
<p>​        例如applicationContext.xml配置有如下bean:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;p1&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.bean.Person&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;张三&quot;</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;18&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean name=<span class="string">&quot;p2&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.bean.Person&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;李四&quot;</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;20&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<p>参考代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    Person p = ctx.getBean(<span class="string">&quot;p2&quot;</span>,Person.class);</span><br><span class="line">    System.out.println(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        这样可以获取到名字叫”李四”的对象。测试结果如下：</p>
<h2 id="4-getBean-String-name-Object-args"><a href="#4-getBean-String-name-Object-args" class="headerlink" title="4.  getBean(String name,Object[] args)"></a>4.  getBean(String name,Object[] args)</h2><p>​        这种方式本质还是通过bean的id或者name来获取bean,通过第二个参数Object[] args可以给bean的属性赋值，赋值的方式有两种：构造方法和工厂方法。但是通过这种方式获取的bean必须把scope属性设置为prototype，也就是非单例模式。</p>
<p>​        先在com.factory包下设计有如下的工厂类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonFactory</span> </span>&#123;</span><br><span class="line">	<span class="comment">//静态工厂注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getPersonInstance</span><span class="params">(String name,<span class="keyword">int</span> age)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Person p = (Person)Class.forName(<span class="string">&quot;com.bean.Person&quot;</span>).newInstance();</span><br><span class="line">        Method m = p.getClass().getMethod(<span class="string">&quot;setName&quot;</span>, java.lang.String.class);</span><br><span class="line">        m.invoke(p, name);</span><br><span class="line">        m = p.getClass().getMethod(<span class="string">&quot;setAge&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">        m.invoke(p, age);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在applicationContext.xml中配置有如下bean:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;bean name=<span class="string">&quot;p3&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.bean.Person&quot;</span> scope=<span class="string">&quot;prototype&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>获取bean的参考代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">Person p = (Person) ctx.getBean(<span class="string">&quot;p3&quot;</span>,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;王五&quot;</span>,<span class="number">35</span>&#125;);</span><br><span class="line">System.out.println(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果想通过工厂注入属性，在applicationContext.xml配置如下bean:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;bean name=<span class="string">&quot;p3&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.factory.PersonFactory&quot;</span> factory-method=<span class="string">&quot;getPersonInstance&quot;</span> scope=<span class="string">&quot;prototype&quot;</span>&gt;</span><br><span class="line">&lt;<span class="title">constructor</span>-<span class="title">arg</span> <span class="title">name</span>=&quot;<span class="title">name</span>&quot;&gt;</span><br><span class="line">&lt;<span class="title">null</span>/&gt;</span><br><span class="line">&lt;/<span class="title">constructor</span>-<span class="title">arg</span>&gt;</span><br><span class="line">&lt;<span class="title">constructor</span>-<span class="title">arg</span> <span class="title">name</span>=&quot;<span class="title">age</span>&quot; <span class="title">value</span>=&quot;0&quot;/&gt;</span><br><span class="line">&lt;/<span class="title">bean</span>&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>转自：<a href="https://www.jianshu.com/p/01bee649a0c9">https://www.jianshu.com/p/01bee649a0c9</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>AOP</tag>
        <tag>bean对象方法</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring AOP与简单实例</title>
    <url>/2020/06/14/AOP-example/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在前面的文章<a href="/2020/06/14/IOCIntroAndCompl/" title="IOC介绍及其简单实现">IOC介绍及其简单实现</a> 中介绍了Spring框架的处理内核之一IOC，这篇文章记录Spring中的另一特性AOP的相关知识。其中关于ApplicationContext的getBean方法笔记可见<a href="/2020/06/14/ApplicationContextGetBean/" title="ApplicationContext之getBean方法详解">ApplicationContext之getBean方法详解</a></p>
<a id="more"></a>

<h1 id="一、AOP——另一种编程思想"><a href="#一、AOP——另一种编程思想" class="headerlink" title="一、AOP——另一种编程思想"></a>一、AOP——另一种编程思想</h1><h2 id="1-1-什么是-AOP"><a href="#1-1-什么是-AOP" class="headerlink" title="1.1 什么是 AOP"></a>1.1 什么是 AOP</h2><p>​        AOP （Aspect Orient Programming）,直译过来就是 面向切面编程。AOP 是一种编程思想，是面向对象编程（OOP）的一种补充。面向对象编程将程序抽象成各个层次的对象，而面向切面编程是将程序抽象成各个切面。<br>​        从《Spring实战（第4版）》图书中扒了一张图：</p>
<p><img src="https://s1.ax1x.com/2020/06/14/tzyDKI.jpg" alt="tzyDKI.jpg"></p>
<center>切面实现了横切关注点（跨多个应用对象的逻辑）的模块化</center>

<p>​        从上图可以很形象地看出，所谓切面，相当于应用对象间的横切点，我们可以将其单独抽象为单独的模块。</p>
<h2 id="1-2-为什么需要-AOP"><a href="#1-2-为什么需要-AOP" class="headerlink" title="1.2 为什么需要 AOP"></a>1.2 为什么需要 AOP</h2><p>​        想象下面的场景，开发中在多个模块间有某段重复的代码，我们通常是怎么处理的？显然，没有人会靠“复制粘贴”吧。在传统的面向过程编程中，我们也会将这段代码，抽象成一个方法，然后在需要的地方分别调用这个方法，这样当这段代码需要修改时，我们只需要改变这个方法就可以了。然而需求总是变化的，有一天，新增了一个需求，需要再多出做修改，我们需要再抽象出一个方法，然后再在需要的地方分别调用这个方法，又或者我们不需要这个方法了，我们还是得删除掉每一处调用该方法的地方。实际上涉及到多个地方具有相同的修改的问题我们都可以通过 AOP 来解决。</p>
<h2 id="1-3-AOP-实现分类"><a href="#1-3-AOP-实现分类" class="headerlink" title="1.3 AOP 实现分类"></a>1.3 AOP 实现分类</h2><p>​        AOP 要达到的效果是，保证开发者不修改源代码的前提下，去为系统中的业务组件添加某种通用功能。AOP 的本质是由 AOP 框架修改业务组件的多个方法的源代码，看到这其实应该明白了，AOP 其实就是前面一篇文章讲的代理模式的典型应用。<br>按照 AOP 框架修改源代码的时机，可以将其分为两类：</p>
<ul>
<li><p>静态 AOP 实现， AOP 框架在编译阶段对程序源代码进行修改，生成了静态的 AOP 代理类（生成的 *.class 文件已经被改掉了，需要使用特定的编译器），比如 AspectJ。</p>
</li>
<li><p>动态 AOP 实现， AOP 框架在运行阶段对动态生成代理对象（在内存中以 JDK 动态代理，或 CGlib 动态地生成 AOP 代理类），如 SpringAOP。</p>
<p>下面给出常用 AOP 实现比较：</p>
<p><img src="https://s1.ax1x.com/2020/06/14/tz6cO1.png" alt="tz6cO1.png"></p>
</li>
</ul>
<p>如不清楚动态代理的，可参考这篇文章，有讲解静态代理、JDK动态代理和 CGlib 动态代理。<br><a href="https://www.cnblogs.com/joy99/p/10865391.html">静态代理和动态代理 https://www.cnblogs.com/joy99/p/10865391.html</a></p>
<h1 id="二、AOP-术语"><a href="#二、AOP-术语" class="headerlink" title="二、AOP 术语"></a>二、AOP 术语</h1><p>​        AOP 领域中的特性术语：</p>
<ul>
<li><p>通知（Advice）: AOP 框架中的增强处理。通知描述了切面何时执行以及如何执行增强处理。</p>
</li>
<li><p>连接点（join point）: 连接点表示应用执行过程中能够插入切面的一个点，这个点可以是方法的调用、异常的抛出。在 Spring AOP 中，连接点总是方法的调用。</p>
</li>
<li><p>切点（PointCut）: 可以插入增强处理的连接点。</p>
</li>
<li><p>切面（Aspect）: 切面是通知和切点的结合。</p>
</li>
<li><p>引入（Introduction）：引入允许我们向现有的类添加新的方法或者属性。</p>
</li>
<li><p>织入（Weaving）: 将增强处理添加到目标对象中，并创建一个被增强的对象，这个过程就是织入。</p>
<p>概念看起来总是有点懵，并且上述术语，不同的参考书籍上翻译还不一样，所以需要慢慢在应用中理解。</p>
</li>
</ul>
<h1 id="三、初步认识-Spring-AOP"><a href="#三、初步认识-Spring-AOP" class="headerlink" title="三、初步认识 Spring AOP"></a>三、初步认识 Spring AOP</h1><h2 id="3-1-Spring-AOP-的特点"><a href="#3-1-Spring-AOP-的特点" class="headerlink" title="3.1 Spring AOP 的特点"></a>3.1 Spring AOP 的特点</h2><p>​        AOP 框架有很多种，1.3节中介绍了 AOP 框架的实现方式有可能不同， Spring 中的 AOP 是通过动态代理实现的。不同的 AOP 框架支持的连接点也有所区别，例如，AspectJ 和 JBoss,除了支持方法切点，它们还支持字段和构造器的连接点。而 Spring AOP 不能拦截对对象字段的修改，也不支持构造器连接点,我们无法在 Bean 创建时应用通知。</p>
<h2 id="3-2-Spring-AOP-的简单例子"><a href="#3-2-Spring-AOP-的简单例子" class="headerlink" title="3.2 Spring AOP 的简单例子"></a>3.2 Spring AOP 的简单例子</h2><p>​        下面先上代码，对着代码说比较好说，看下面这个例子：<br>​        这个例子是基于gradle创建的，首先 build.gradle 文件添加依赖：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">&#x27;org.springframework:spring-context:5.0.6.RELEASE&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        首先创建一个接口 IBuy.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBuy</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">buy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        Boy 和 Gril 两个类分别实现了这个接口：<br>Boy.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boy</span> <span class="keyword">implements</span> <span class="title">IBuy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;男孩买了一个游戏机&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;游戏机&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Girl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Girl</span> <span class="keyword">implements</span> <span class="title">IBuy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;女孩买了一件漂亮的衣服&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;衣服&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件AppConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackageClasses = &#123;com.sharpcj.aopdemo.test1.IBuy.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类AppTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sharpcj.aopdemo.test1.Boy;</span><br><span class="line"><span class="keyword">import</span> com.sharpcj.aopdemo.test1.Girl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">        Boy boy = context.getBean(<span class="string">&quot;boy&quot;</span>,Boy.class);</span><br><span class="line">        Girl girl = (Girl) context.getBean(<span class="string">&quot;girl&quot;</span>);</span><br><span class="line">        boy.buy();</span><br><span class="line">        girl.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://s1.ax1x.com/2020/06/14/tzc2cj.png" alt="tzc2cj.png"></p>
<p>​        这里运用SpringIOC里的自动部署。现在需求改变了，我们需要在男孩和女孩的 buy 方法之前，需要打印出“男孩女孩都买了自己喜欢的东西”。用 Spring AOP 来实现这个需求只需下面几个步骤：<br>1、 <strong>既然用到 Spring AOP, 首先在 <code>build.gralde</code> 文件中引入相关依赖：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile &#39;org.springframework:spring-context:5.0.6.RELEASE&#39;</span><br><span class="line">    compile &#39;org.springframework:spring-aspects:5.0.6.RELEASE&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、 <strong>定义一个切面类，BuyAspectJ.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyAspectJ</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.sharpcj.aopdemo.test1.IBuy.buy(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">haha</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;男孩女孩都买自己喜欢的东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        这个类，我们使用了注解 <code>@Component</code> 表明它将作为一个Spring Bean 被装配，使用注解 <code>@Aspect</code> 表示它是一个切面。<br>​        类中只有一个方法 <code>haha</code> 我们使用 <code>@Before</code> 这个注解，表示他将在方法执行之前执行。关于这个注解后文再作解释。<br>​        参数<code>(&quot;execution(* com.sharpcj.aopdemo.test1.IBuy.buy(..))&quot;)</code> 声明了切点，表明在该切面的切点是<code>com.sharpcj.aopdemo.test1.Ibuy</code>这个接口中的<code>buy</code>方法。至于为什么这么写，下文再解释。<br>3、 <strong>在配置文件中启用AOP切面功能</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackageClasses = &#123;com.sharpcj.aopdemo.test1.IBuy.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        我们在配置文件类增加了<code>@EnableAspectJAutoProxy</code>注解，启用了 AOP 功能，参数<code>proxyTargetClass</code>的值设为了 true 。默认值是 false，两者的区别下文再解释。</p>
<p>运行结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/06/14/tzRm9S.png" alt="tzRm9S.png"></p>
<p>​        我们看到，结果与我们需求一致，我们并没有修改 Boy 和 Girl 类的 Buy 方法，也没有修改测试类的代码，几乎是完全无侵入式地实现了需求。这就是 AOP 的“神奇”之处。</p>
<h1 id="四、通过注解配置-Spring-AOP"><a href="#四、通过注解配置-Spring-AOP" class="headerlink" title="四、通过注解配置 Spring AOP"></a>四、通过注解配置 Spring AOP</h1><h2 id="4-1-通过注解声明切点指示器"><a href="#4-1-通过注解声明切点指示器" class="headerlink" title="4.1 通过注解声明切点指示器"></a>4.1 通过注解声明切点指示器</h2><p>​        Spring AOP 所支持的 AspectJ 切点指示器</p>
<p><img src="https://s1.ax1x.com/2020/06/14/tzRGNV.png" alt="tzRGNV.png"></p>
<p>​        在spring中尝试使用AspectJ其他指示器时，将会抛出<code>IllegalArgumentException</code>异常。</p>
<p>​        当我们查看上面展示的这些spring支持的指示器时，注意只有execution指示器是唯一的执行匹配，而其他的指示器都是用于限制匹配的。这说明execution指示器是我们在编写切点定义时最主要使用的指示器，在此基础上，我们使用其他指示器来限制所匹配的切点。</p>
<p>​        下图的切点表达式表示当<code>Instrument</code>的<code>play</code>方法执行时会触发通知。</p>
<p><img src="https://s1.ax1x.com/2020/06/14/tzWeV1.jpg" alt="tzWeV1.jpg"></p>
<p>​        我们使用execution指示器选择Instrument的play方法，方法表达式以 <code>*</code> 号开始，标识我们不关心方法的返回值类型。然后我们指定了全限定类名和方法名。对于方法参数列表，我们使用 <code>..</code> 标识切点选择任意的play方法，无论该方法的入参是什么。<br>多个匹配之间我们可以使用链接符 <code>&amp;&amp;</code>、<code>||</code>、<code>！</code>来表示 “且”、“或”、“非”的关系。但是在使用 XML 文件配置时，这些符号有特殊的含义，所以我们使用 “and”、“or”、“not”来表示。</p>
<p>举例：<br>        限定该切点仅匹配的包是 <code>com.sharpcj.aopdemo.test1</code>,可以使用<code>execution(* com.sharpcj.aopdemo.test1.IBuy.buy(..)) &amp;&amp; within(com.sharpcj.aopdemo.test1.*)</code><br>        在切点中选择 bean,可以使用<code>execution(* com.sharpcj.aopdemo.test1.IBuy.buy(..)) &amp;&amp; bean(girl)</code>修改 BuyAspectJ.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyAspectJ</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.sharpcj.aopdemo.test1.IBuy.buy(..)) &amp;&amp; within(com.sharpcj.aopdemo.test1.*) &amp;&amp; bean(girl)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hehe</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;男孩女孩都买自己喜欢的东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        此时，切面只会对 <code>Girl.java</code> 这个类生效，执行结果：</p>
<p><img src="https://s1.ax1x.com/2020/06/14/tzWjzD.png" alt="tzWjzD.png"></p>
<p>​        细心的你，可能发现了，切面中的方法名，已经被我悄悄地从<code>haha</code>改成了<code>hehe</code>，丝毫没有影响结果，说明方法名没有影响。和 Spring IOC 中用 java 配置文件装配 Bean 时，用<code>@Bean</code> 注解修饰的方法名一样，没有影响。</p>
<h2 id="4-2-通过注解声明-5-种通知类型"><a href="#4-2-通过注解声明-5-种通知类型" class="headerlink" title="4.2 通过注解声明 5 种通知类型"></a>4.2 通过注解声明 5 种通知类型</h2><p>​        Spring AOP 中有 5 中通知类型，分别如下：</p>
<p><img src="https://s1.ax1x.com/2020/06/14/tzfSLd.png" alt="tzfSLd.png"></p>
<p>下面修改切面类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyAspectJ</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.sharpcj.aopdemo.test1.IBuy.buy(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hehe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.sharpcj.aopdemo.test1.IBuy.buy(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">haha</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;After ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* com.sharpcj.aopdemo.test1.IBuy.buy(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xixi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AfterReturning ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.sharpcj.aopdemo.test1.IBuy.buy(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xxx</span><span class="params">(ProceedingJoinPoint pj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Around aaa ...&quot;</span>);</span><br><span class="line">            pj.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;Around bbb ...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了方便看效果,我们测试类中，只要 Boy 类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sharpcj.aopdemo.test1.Boy;</span><br><span class="line"><span class="keyword">import</span> com.sharpcj.aopdemo.test1.Girl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">        Boy boy = context.getBean(<span class="string">&quot;boy&quot;</span>,Boy.class);</span><br><span class="line">        Girl girl = (Girl) context.getBean(<span class="string">&quot;girl&quot;</span>);</span><br><span class="line">        boy.buy();</span><br><span class="line">        <span class="comment">// girl.buy();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/06/14/tzfVSS.png" alt="tzfVSS.png"></p>
<p>​        结果显而易见。指的注意的是 <code>@Around</code> 修饰的环绕通知类型，是将整个目标方法封装起来了，在使用时，我们传入了 <code>ProceedingJoinPoint</code> 类型的参数，这个对象是必须要有的，并且需要调用 <code>ProceedingJoinPoint</code> 的 <code>proceed()</code> 方法。 如果没有调用 该方法，执行结果为 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Around aaa ...</span><br><span class="line">Around bbb ...</span><br><span class="line">After ...</span><br><span class="line">AfterReturning ...</span><br></pre></td></tr></table></figure>
<p>​        可见，如果不调用该对象的 proceed() 方法，表示原目标方法被阻塞调用，当然也有可能你的实际需求就是这样。</p>
<h2 id="4-3-通过注解声明切点表达式"><a href="#4-3-通过注解声明切点表达式" class="headerlink" title="4.3 通过注解声明切点表达式"></a>4.3 通过注解声明切点表达式</h2><p>​        如你看到的，上面我们写的多个通知使用了相同的切点表达式，对于像这样频繁出现的相同的表达式，我们可以使用 <code>@Pointcut</code>注解声明切点表达式，然后使用表达式，修改代码如下：<br>BuyAspectJ.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyAspectJ</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.sharpcj.aopdemo.test1.IBuy.buy(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">point</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;point()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hehe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;point()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">haha</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;After ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;point()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xixi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AfterReturning ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;point()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xxx</span><span class="params">(ProceedingJoinPoint pj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Around aaa ...&quot;</span>);</span><br><span class="line">            pj.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;Around bbb ...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        程序运行结果没有变化。<br>​        这里，我们使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.sharpcj.aopdemo.test1.IBuy.buy(..))&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">point</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>​        声明了一个切点表达式，该方法 point 的内容并不重要，方法名也不重要，实际上它只是作为一个标识，供通知使用。</p>
<h2 id="4-4-通过注解处理通知中的参数"><a href="#4-4-通过注解处理通知中的参数" class="headerlink" title="4.4 通过注解处理通知中的参数"></a>4.4 通过注解处理通知中的参数</h2><p>​        上面的例子，我们要进行增强处理的目标方法没有参数，下面我们来说说有参数的情况，并且在增强处理中使用该参数。<br>下面我们给接口增加一个参数，表示购买所花的金钱。通过AOP 增强处理，如果女孩买衣服超过了 68 元，就可以赠送一双袜子。<br>更改代码如下：<br>IBuy.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBuy</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">buy</span><span class="params">(<span class="keyword">double</span> price)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Girl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Girl</span> <span class="keyword">implements</span> <span class="title">IBuy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buy</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;女孩花了%s元买了一件漂亮的衣服&quot;</span>, price));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;衣服&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Boy.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boy</span> <span class="keyword">implements</span> <span class="title">IBuy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buy</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;男孩花了%s元买了一个游戏机&quot;</span>, price));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;游戏机&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再看 BuyAspectJ 类，我们将之前的通知都注释掉。用一个环绕通知来实现这个功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyAspectJ</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Pointcut(&quot;execution(* com.sharpcj.aopdemo.test1.IBuy.buy(..))&quot;)</span></span><br><span class="line"><span class="comment">    public void point()&#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Before(&quot;point()&quot;)</span></span><br><span class="line"><span class="comment">    public void hehe() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;before ...&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @After(&quot;point()&quot;)</span></span><br><span class="line"><span class="comment">    public void haha() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;After ...&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @AfterReturning(&quot;point()&quot;)</span></span><br><span class="line"><span class="comment">    public void xixi() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;AfterReturning ...&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Around(&quot;point()&quot;)</span></span><br><span class="line"><span class="comment">    public void xxx(ProceedingJoinPoint pj) &#123;</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;Around aaa ...&quot;);</span></span><br><span class="line"><span class="comment">            pj.proceed();</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;Around bbb ...&quot;);</span></span><br><span class="line"><span class="comment">        &#125; catch (Throwable throwable) &#123;</span></span><br><span class="line"><span class="comment">            throwable.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(String com.sharpcj.aopdemo.test1.IBuy.buy(double)) &amp;&amp; args(price) &amp;&amp; bean(girl)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gif</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;gif(price)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hehe</span><span class="params">(ProceedingJoinPoint pj, <span class="keyword">double</span> price)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pj.proceed();</span><br><span class="line">            <span class="keyword">if</span> (price &gt; <span class="number">68</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;女孩买衣服超过了68元，赠送一双袜子&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;衣服和袜子&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;衣服&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前文提到，当不关心方法返回值的时候，我们在编写切点指示器的时候使用了 <code>*</code> ， 当不关心方法参数的时候，我们使用了 <code>..</code>。现在如果我们需要传入参数，并且有返回值的时候，则需要使用对应的类型。在编写通知的时候，我们也需要声明对应的返回值类型和参数类型。</p>
<p>测试类：AppTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sharpcj.aopdemo.test1.Boy;</span><br><span class="line"><span class="keyword">import</span> com.sharpcj.aopdemo.test1.Girl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">        Boy boy = context.getBean(<span class="string">&quot;boy&quot;</span>,Boy.class);</span><br><span class="line">        Girl girl = (Girl) context.getBean(<span class="string">&quot;girl&quot;</span>);</span><br><span class="line">        String boyBought = boy.buy(<span class="number">35</span>);</span><br><span class="line">        String girlBought = girl.buy(<span class="number">99.8</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;男孩买到了：&quot;</span> + boyBought);</span><br><span class="line">        System.out.println(<span class="string">&quot;女孩买到了：&quot;</span> + girlBought);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<p><img src="https://s1.ax1x.com/2020/06/14/tzftOJ.png" alt="tzftOJ.png"></p>
<p>可以看到，我们成功通过 AOP 实现了需求，并将结果打印了出来。</p>
<h2 id="4-5-通过注解配置织入的方式"><a href="#4-5-通过注解配置织入的方式" class="headerlink" title="4.5 通过注解配置织入的方式"></a>4.5 通过注解配置织入的方式</h2><p>​        前面还有一个遗留问题，在配置文件中，我们用注解 <code>@EnableAspectJAutoProxy()</code> 启用Spring AOP 的时候，我们给参数 <code>proxyTargetClass</code> 赋值为 <code>true</code>,如果我们不写参数，默认为 false。这个时候运行程序，程序抛出异常</p>
<p><img src="https://s1.ax1x.com/2020/06/14/tzfWTI.png" alt="tzfWTI.png"></p>
<p>​        这是一个强制类型转换异常。为什么会抛出这个异常呢？或许已经能够想到，这跟Spring AOP 动态代理的机制有关，这个 <code>proxyTargetClass</code> 参数决定了代理的机制。当这个参数为 false 时，通过jdk的基于接口的方式进行织入，这时候代理生成的是一个接口对象，将这个接口对象强制转换为实现该接口的一个类，自然就抛出了上述类型转换异常。<br>​        反之，<code>proxyTargetClass</code> 为 <code>true</code>，则会使用 cglib 的动态代理方式。这种方式的缺点是拓展类的方法被<code>final</code>修饰时，无法进行织入。<br>​        测试一下，我们将 <code>proxyTargetClass</code> 参数设为 <code>true</code>，同时将 Girl.java 的 Buy 方法用 <code>final</code> 修饰：<br>AppConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackageClasses = &#123;com.sharpcj.aopdemo.test1.IBuy.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Girl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Girl</span> <span class="keyword">implements</span> <span class="title">IBuy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">buy</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;女孩花了%s元买了一件漂亮的衣服&quot;</span>, price));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;衣服&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时运行结果：</p>
<p><img src="https://s1.ax1x.com/2020/06/14/tzfvt0.png" alt="tzfvt0.png"></p>
<p>​        可以看到，我们的切面并没有织入生效。</p>
<h1 id="五、通过-XML-配置文件声明切面"><a href="#五、通过-XML-配置文件声明切面" class="headerlink" title="五、通过 XML 配置文件声明切面"></a>五、通过 XML 配置文件声明切面</h1><p>​        前面的示例中，我们已经展示了如何通过注解配置去声明切面，下面我们看看如何在 XML 文件中声明切面。下面先列出 XML 中声明 AOP 的常用元素：</p>
<p><img src="https://s1.ax1x.com/2020/06/14/tzh9cF.png" alt="tzh9cF.png"></p>
<p>​        我们依然可以使用 <code>&lt;aop:aspectj-autoproxy&gt;</code> 元素，他能够自动代理AspectJ注解的通知类。</p>
<h2 id="5-1-XML-配置文件中切点指示器"><a href="#5-1-XML-配置文件中切点指示器" class="headerlink" title="5.1 XML 配置文件中切点指示器"></a>5.1 XML 配置文件中切点指示器</h2><p>​        在XML配置文件中，切点指示器表达式与通过注解配置的写法基本一致，区别前面有提到，即XML文件中需要使用 “and”、“or”、“not”来表示 “且”、“或”、“非”的关系。</p>
<h2 id="5-2-XML-文件配置-AOP-实例"><a href="#5-2-XML-文件配置-AOP-实例" class="headerlink" title="5.2 XML 文件配置 AOP 实例"></a>5.2 XML 文件配置 AOP 实例</h2><p>​        下面我们不使用任何注解改造上面的例子：<br>BuyAspectJ.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyAspectJ</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hehe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">haha</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;After ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xixi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AfterReturning ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xxx</span><span class="params">(ProceedingJoinPoint pj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Around aaa ...&quot;</span>);</span><br><span class="line">            pj.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;Around bbb ...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Resource 目录下新建一个配置文件 aopdemo.xml ：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.sharpcj.aopdemo.test2.Boy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.sharpcj.aopdemo.test2.Girl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;buyAspectJ&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.sharpcj.aopdemo.test2.BuyAspectJ&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;qiemian&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;buyAspectJ&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.sharpcj.aopdemo.test2.IBuy.buy(..))&quot;</span> <span class="attr">method</span>=<span class="string">&quot;hehe&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.sharpcj.aopdemo.test2.IBuy.buy(..))&quot;</span> <span class="attr">method</span>=<span class="string">&quot;haha&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.sharpcj.aopdemo.test2.IBuy.buy(..))&quot;</span> <span class="attr">method</span>=<span class="string">&quot;xixi&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.sharpcj.aopdemo.test2.IBuy.buy(..))&quot;</span> <span class="attr">method</span>=<span class="string">&quot;xxx&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>​        这里分别定义了一个切面，里面包含四种类型的通知。<br>​        测试文件中，使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;aopdemo.xml&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>​        来获取 ApplicationContext，其它代码不变。</p>
<h2 id="5-3-XML-文件配置声明切点"><a href="#5-3-XML-文件配置声明切点" class="headerlink" title="5.3 XML 文件配置声明切点"></a>5.3 XML 文件配置声明切点</h2><p>​        对于频繁重复使用的切点表达式，我们也可以声明成切点。<br>​        配置文件如下：aopdemo.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.sharpcj.aopdemo.test2.Boy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.sharpcj.aopdemo.test2.Girl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;buyAspectJ&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.sharpcj.aopdemo.test2.BuyAspectJ&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;apoint&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.sharpcj.aopdemo.test2.IBuy.buy(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;qiemian&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;buyAspectJ&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;apoint&quot;</span> <span class="attr">method</span>=<span class="string">&quot;hehe&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;apoint&quot;</span> <span class="attr">method</span>=<span class="string">&quot;haha&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;apoint&quot;</span> <span class="attr">method</span>=<span class="string">&quot;xixi&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;apoint&quot;</span> <span class="attr">method</span>=<span class="string">&quot;xxx&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-4-XML文件配置为通知传递参数"><a href="#5-4-XML文件配置为通知传递参数" class="headerlink" title="5.4 XML文件配置为通知传递参数"></a>5.4 XML文件配置为通知传递参数</h2><p>BuyAspectJ.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharpcj.aopdemo.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyAspectJ</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hehe</span><span class="params">(ProceedingJoinPoint pj, <span class="keyword">double</span> price)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pj.proceed();</span><br><span class="line">            <span class="keyword">if</span> (price &gt; <span class="number">68</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;女孩买衣服超过了68元，赠送一双袜子&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;衣服和袜子&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;衣服&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>aopdemo.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.sharpcj.aopdemo.test2.Boy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.sharpcj.aopdemo.test2.Girl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;buyAspectJ&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.sharpcj.aopdemo.test2.BuyAspectJ&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;apoint&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(String com.sharpcj.aopdemo.test2.IBuy.buy(double)) and args(price) and bean(girl)&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;qiemian&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;buyAspectJ&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;apoint&quot;</span> <span class="attr">method</span>=<span class="string">&quot;hehe&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-5-Xml-文件配置织入的方式"><a href="#5-5-Xml-文件配置织入的方式" class="headerlink" title="5.5 Xml 文件配置织入的方式"></a>5.5 Xml 文件配置织入的方式</h2><p>同注解配置类似,<br>CGlib 代理方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>JDK 代理方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;false&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>​        本文简单记录了 AOP 的编程思想，然后介绍了 Spring 中 AOP 的相关概念，以及通过注解方式和XML配置文件两种方式使用 Spring AOP进行编程。 相比于 AspectJ 的面向切面编程，Spring AOP 也有一些局限性，但是已经可以解决开发中的绝大多数问题了，如果确实遇到了 Spring AOP 解决不了的场景，我们依然可以在 Spring 中使用 AspectJ 来解决。</p>
<h1 id="七-转载与参考"><a href="#七-转载与参考" class="headerlink" title="七 转载与参考"></a>七 转载与参考</h1><blockquote>
<p>《Spring实战（第4版）》<br>《轻量级 JavaEE 企业应用实战（第四版）》<br><a href="https://docs.spring.io/spring/docs/5.0.6.RELEASE/spring-framework-reference/core.html#spring-core">Spring 官方文档</a><br><a href="https://www.w3cschool.cn/wkspring/">W3CSchool Spring教程</a><br><a href="https://www.yiibai.com/spring/">易百教程 Spring教程</a><br><a href="https://www.cnblogs.com/joy99/p/10941543.html">https://www.cnblogs.com/joy99/p/10941543.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>IOC介绍及其简单实现</title>
    <url>/2020/06/14/IOCIntroAndCompl/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​        控制反转（Inversion of Control，英文缩写为IoC）是一个重要的面向对象编程的法则来削减计算机程序的耦合问题，也是轻量级的Spring框架的核心。 控制反转一般分为两种类型，依赖注入（Dependency Injection，简称DI）和依赖查找。依赖注入应用比较广泛，这里只介绍依赖注入。</p>
<a id="more"></a>

<h1 id="一、IOC简介"><a href="#一、IOC简介" class="headerlink" title="一、IOC简介"></a>一、IOC简介</h1><p>​        控制反转IOC，它最主要反映的是与传统面向对象（OO）编程的不同。通常我们编程实现某种功能都需要几个对象相互作用，从编程的角度出发，也就是一个主对象要保存其他类型对象的引用，通过调用这些引用的方法来完成任务。如何获得其他类型的对象引用呢？一种方式是主对象内部主动获得所需引用（也就是通常我们使用的new一个对象）；另一种方式是在主对象中设置setter 方法，通过调用setter方法或构造方法传入所需引用。后一种方式就叫IOC，也是我们常常所说的依赖注入DI。以下我们用一个简单的例子来说明传统OO编程与IOC编程的差别。</p>
<p>​        这个例子的目的是根据时间不同返回不同的问候字符串， 比如Good Morning，world或Good afternoon，World。</p>
<p><strong>服务端口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.test.ioc;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloIF</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        <strong>传统实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.test.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传统实现(非IOC方式)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloIFImpl</span> <span class="keyword">implements</span> <span class="title">HelloIF</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Calendar cal; <span class="comment">// 我们需要的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloIFImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cal = Calendar.getInstance(); <span class="comment">// 主动获取</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cal.get(Calendar.AM_PM) == Calendar.AM)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Good morning, World&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Good afternoon, World&quot;</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        HelloIFImpl hf = <span class="keyword">new</span> HelloIFImpl();</span><br><span class="line">        System.out.println(hf.sayHello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        <strong>采用IOC方式：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.test.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="comment">//IOC方式实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloIFImpl2</span> <span class="keyword">implements</span> <span class="title">HelloIF</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Calendar cal; <span class="comment">// 我们需要的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCal</span><span class="params">(Calendar cal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cal = cal;</span><br><span class="line">    &#125; <span class="comment">// 依赖注入</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cal.get(Calendar.AM_PM) == Calendar.AM)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Good morning, World&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Good afternoon, World&quot;</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        HelloIFImpl2 hf = <span class="keyword">new</span> HelloIFImpl2();</span><br><span class="line">        hf.setCal(Calendar.getInstance());</span><br><span class="line">        System.out.println(hf.sayHello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        在这里你或许会有疑问，这页看不出有太大的差别，并且依赖注入还需要我先创建外部的<code>Calendar</code>对象，然后再传到<code>HelloIFImpl</code>对象中。但是，假如我们事先已经在类用<code>new orderOracle()</code>，但是后来由于需求变更，我们需要使用<code>new orderSqlServer()</code>，这样我们还需要修改所有使用<code>orderOracle()</code>的类，这样好麻烦。如果我们使用IOC方法编程并且使用了spring框架，这样我们只需要修改xml配置文件即可。</p>
<p>​        IoC则是一种 软件设计模式，它告诉你应该如何做，来解除相互依赖模块的耦合。控制反转（IoC），它为相互依赖的组件提供抽象，将依赖（低层模块）对象的获得交给第三方（系统）来控制，即依赖对象不在被依赖模块的类中直接通过new来获取。</p>
<h1 id="二、IOC的一个应用举例"><a href="#二、IOC的一个应用举例" class="headerlink" title="二、IOC的一个应用举例"></a>二、IOC的一个应用举例</h1><p>​        我们以一个struts2和Spring整合的例子来说明。</p>
<h2 id="1）整合struts2和Spring"><a href="#1）整合struts2和Spring" class="headerlink" title="1）整合struts2和Spring"></a>1）整合struts2和Spring</h2><p>　　首先要整合Spring和Struts2，需要先要拷入Spring需要的jar包，既包括Spring本身的jar包，也包括Struts2的Spring插件。将以下几个jar包拷入到我们的web工程的WEB-INF\lib中：<code>org.springframework.asm-3.0.5.RELEASE.jar</code>；<code>spring-*.jar</code>(struts2中lib包里所有的jar，共6个); <code>struts2-spring-plugin-*.jar </code>。</p>
<h2 id="2）编写逻辑层接口"><a href="#2）编写逻辑层接口" class="headerlink" title="2）编写逻辑层接口"></a>2）编写逻辑层接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.test.springDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SampleService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNameById</span><span class="params">(String userId)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3）编写逻辑层实现类"><a href="#3）编写逻辑层实现类" class="headerlink" title="3）编写逻辑层实现类"></a>3）编写逻辑层实现类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.test.springDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleServiceImpl</span> <span class="keyword">implements</span> <span class="title">SampleService</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNameById</span> <span class="params">(String userId)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">//根据userId到数据层进行查询，获取相应的name  </span></span><br><span class="line">        String name = <span class="string">&quot;hello,&quot;</span>+ userId;  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h2 id="4）编写ACTION"><a href="#4）编写ACTION" class="headerlink" title="4）编写ACTION"></a>4）编写ACTION</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.test.springDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过setter方式,由Spring来注入SampleService实例</span></span><br><span class="line">    <span class="keyword">private</span> SampleService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setService</span><span class="params">(SampleService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        name = <span class="keyword">this</span>.service.getNameById(userId);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　在execute方法中不再直接new一个<code>SampleServiceImpl</code>的实例了，而是声明了一个<code>SampleSerivce</code>类型的属性，并提供对应的setter方法，这个setter方法是留给Spring注入对象实例的时候调用的，可以不用提供getter方法。也就是说，现在的<code>SampleAction</code>已经不用知道逻辑层的具体实现了。</p>
<h2 id="5）编写Spring的配置文件applicationContext-xml"><a href="#5）编写Spring的配置文件applicationContext-xml" class="headerlink" title="5）编写Spring的配置文件applicationContext.xml"></a>5）编写Spring的配置文件applicationContext.xml</h2><p>　　要让Spring来管理<code>SampleAction</code>和<code>SampleServiceImpl</code>的实例，还需要新建一个Spring的配置文件。在src下新建一个<code>applicationContext.xml</code>文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans   </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;service&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.test.springDemo.SampleServiceImpl&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;sampleAction&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.test.springDemo.SampleAction&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> &gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;service&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sampleService&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
<p>　　这个xml的根元素是<beans>，在<beans>中声明了它的schema引用，除此之外，还有两个<bean>元素，定义了由Spring管理的SampleServiceImpl和SampleAction。</p>
<ul>
<li><p>对于第一个<bean>元素来说</p>
<ul>
<li>name属性为它设置了一个名字</li>
<li>class元素指定了它的实现类的全类名</li>
</ul>
</li>
<li><p>对于第二个<bean>元素来说</p>
<ul>
<li> name属性和class属性的含义与第一个<bean>元素完全一样。</li>
<li>scope属性，赋值为prototype（原型）。scope属性非常重要，它管理了注册在它里面的Bean的作用域。Spring容器默认的作用域是单例，即每次外界向Spring容器请求这个Bean，都是返回同一个实例；但是，Struts2的Action是需要在每次请求的时候，都要新建一个Action实例，所以，在配置对应Action的<bean>元素时，必须把它的scope属性赋值为prototype，以保证每次请求都会新建一个Action实例。</li>
<li> <property>子元素。<property>元素的name属性为service，代表<code>SampleAction</code>这个类有一个setter方法叫setSampleService；<property>元素的ref属性为<code>sampleService</code>，代表Spring容器会将一个名为<code>sampleService</code>的已经存在的Bean，注入给<code>sampleAction</code>的service属性。</li>
</ul>
</li>
</ul>
<h2 id="6）在web-xml中引用Spring配置文件"><a href="#6）在web-xml中引用Spring配置文件" class="headerlink" title="6）在web.xml中引用Spring配置文件"></a>6）在web.xml中引用Spring配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>Struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>Struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>　　listener实现了当这个Web工程启动的时候，就去读取Spring的配置文件，这个类是由Spring提供的，这里只需要配置上去就可以了。上下文参数的配置里面，<code>contextConfigLocation</code>的值<code>classpath*:applicationContext.xml</code>，表明了所有出现在classpath路径下的<code>applicationContext.xml</code>文件，都是上面的这个Listener要读取的Spring配置文件。</p>
<h2 id="7）编写struts-xml"><a href="#7）编写struts-xml" class="headerlink" title="7）编写struts.xml"></a>7）编写struts.xml</h2><p>　　就快要大功告成了，最后一步，来修改<code>struts.xml</code>，需要做两件事：</p>
<p>　　首先，添加常量<code>struts.objectFactory</code>，其值为<code>spring</code>，这就指定了Struts2使用Action的时候并不是自己去新建，而是去向Spring请求获取Action的实例。示例如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.objectFactory&quot;</span> <span class="attr">value</span>=<span class="string">&quot;spring&quot;</span>/&gt;</span>  </span><br></pre></td></tr></table></figure>
<p>　　然后，<action>元素的class属性，现在并不是要填Action类的全类名了，而是要填一个在Spring配置文件中配置的Action的Bean的名字，也就是<bean>元素的name属性，很显然，需要的是sampleAction这个Bean。示例如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;springPackage&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;sampleActionName&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sampleAction&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span>&gt;</span>/spring/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>　　只有<action>元素的class属性变了，其他部分不变。来测试一下，运行：<a href="http://localhost:8080/struts2Deepen2/sampleActionName.action?userId=test%E3%80%82%E3%80%90%E5%85%B6%E4%B8%AD%EF%BC%8Cstruts2Deepen2%E4%B8%BAweb%E5%B7%A5%E7%A8%8B%E7%9A%84%E5%90%8D%E7%A7%B0%E3%80%91%E3%80%82%E8%BF%90%E8%A1%8C%E4%B8%80%E5%88%87%E6%AD%A3%E5%B8%B8%EF%BC%8C%E8%AF%B4%E6%98%8EStruts2%E4%B8%8ESpring%E6%95%B4%E5%90%88%E5%B9%B6%E4%B8%8D%E6%98%AF%E4%B8%BA%E4%BA%86%E5%AE%9E%E7%8E%B0%E6%96%B0%E5%8A%9F%E8%83%BD%EF%BC%8C%E8%80%8C%E6%98%AF%E4%B8%BA%E4%BA%86%E8%AE%A9%E8%A1%A8%E7%8E%B0%E5%B1%82%E7%BB%84%E4%BB%B6%E5%92%8C%E9%80%BB%E8%BE%91%E5%B1%82%E7%BB%84%E4%BB%B6%E8%A7%A3%E8%80%A6%EF%BC%8C%60SampleAction%60%E7%B1%BB%E4%B8%8D%E7%94%A8%E5%86%8D%E7%9F%A5%E9%81%93%60SampleServiceImpl%60%E8%BF%99%E4%B8%AA%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E4%BA%86%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%60SampleService%60%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82">http://localhost:8080/struts2Deepen2/sampleActionName.action?userId=test。【其中，struts2Deepen2为web工程的名称】。运行一切正常，说明Struts2与Spring整合并不是为了实现新功能，而是为了让表现层组件和逻辑层组件解耦，`SampleAction`类不用再知道`SampleServiceImpl`这个具体实现了，只需要知道`SampleService`这个接口就可以了。</a></p>
<p><strong>参考资料：</strong></p>
<p>　　<a href="http://blog.csdn.net/Kettas2008/article/details/2447809">http://blog.csdn.net/Kettas2008/article/details/2447809</a></p>
<p>　　<a href="http://blog.csdn.net/Kettas2008/article/details/2447809">http://www.iteye.com/topic/1124526</a></p>
<p>　　<a href="http://blog.csdn.net/Kettas2008/article/details/2447809">http://www.cnblogs.com/liuhaorain/p/3747470.htm#title_4</a> 【这篇文章详细介绍了DIP、IoC、DI以及IoC容器，推荐看看】</p>
<p>​        <a href="https://www.cnblogs.com/ningvsban/p/3757890.html">https://www.cnblogs.com/ningvsban/p/3757890.html</a></p>
]]></content>
      <categories>
        <category>Web框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Web开发</tag>
        <tag>IOC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring工厂模式</title>
    <url>/2020/06/13/SpringFactoryModes/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工厂模式是一种在工程中广泛应用的设计模式，对代码的解耦合起到了很大的作用。实际上，我们可以将Spring理解成封装了我们工程中大量重复代码的一种工具。众所周知，Spring中最重要的组件就是IOC，而IOC中非常重要的部分就是应用了工厂模式的代码。而工厂模式依赖于Java的反射机制，所以，我们从反射机制讲起，一步步了解Spring的Bean工厂。</p>
<a id="more"></a>

<h1 id="一、Java中的反射机制"><a href="#一、Java中的反射机制" class="headerlink" title="一、Java中的反射机制"></a>一、Java中的反射机制</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>简单的说，反射机制就是在程序的运行过程中被允许对程序本身进行操作，比如自我检查，进行装载，还可以获取类本身，类的所有成员变量和方法，类的对象，还可以在运行过程中动态的创建类的实例，通过实例来调用类的方法，这就是反射机制一个比较重要的功能了。那么要通过程序来理解反射机制，首先要理解类的加载过程。</p>
<p><img src="https://s1.ax1x.com/2020/06/13/txArSf.jpg" alt="txArSf.jpg"></p>
<p>在Java程序执行的时候，要经历三个步骤：加载、连接和初始化。首先程序要加载到JVM的方法区中，然后进行连接，最后初始化。这里就主要介绍一下类的加载。如上图，首先，JVM会从硬盘中读取Java源文件并将其加载到方法区中同时生成类名.class文件，也就是类对象，这个类对象中包含了我们创建类的实例时所需要的模板信息，也就是源代码中的成员变量和方法等。Class本身也是一个类，它的主要功能之一就是生成类加载时的class文件，为类的初始化及实例化做准备。而我们在程序中通过关键字new创建的对象创建的是类的对象，而不是类对象，二者的区别如图中所示。</p>
<p>对类的加载有了一个大致的理解之后，我们来看一下实现反射机制的具体操作：</p>
<p>反射机制在我们所学习的框架中有很大的应用，而在我们实际开发中用的并不多，所以理解反射机制对我们学习框架来说很有帮助。</p>
<p>首先我们创建一个实体类User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast_01;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;User [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(name+<span class="string">&quot;退出系统&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String username,String password)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;用户名:&quot;</span>+username);</span><br><span class="line">		System.out.println(<span class="string">&quot;密码:&quot;</span>+password);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">CheckInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;年龄:&quot;</span>+age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中包括成员变量，构造方法和一些成员方法。</p>
<p>利用反射机制可以获取类对象（也就是我们前面介绍的类对象，获取类对象之后我们便获取了类的模板，可以对类进行一些操作），有以下三种方法：</p>
<pre><code>1.类名.class()
2.对象名.getClass()
3.Class.forName(具体的类名)</code></pre>
<p>我们通过代码来看一下具体的操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast_01;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//1.类名.class</span></span><br><span class="line">		Class clz = User.class;</span><br><span class="line">		System.out.println(clz);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2.对象名.getClass()</span></span><br><span class="line">		Class clz1 = <span class="keyword">new</span> User().getClass();	</span><br><span class="line">		System.out.println(clz==clz1);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//3.Class.forName()</span></span><br><span class="line">		<span class="comment">//Class clz2 = Class.forName(&quot;User&quot;);</span></span><br><span class="line">		Class clz2 = Class.forName(<span class="string">&quot;cn.itcast_01.User&quot;</span>);</span><br><span class="line">		System.out.println(clz==clz2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在类加载的三个阶段里都可以获取类对象，其中第三种方法，在源码中获取类对象是最常用的，也是反射机制在框架中的应用，在框架中的应用可以是通过配置文件写入所创建的类名，再利用第三种方法获取类对象。</p>
<p>获取类对象之后就可以对类进行一些创建对象、调用方法、访问成员变量的操作了：</p>
<h2 id="2、创建对象"><a href="#2、创建对象" class="headerlink" title="2、创建对象"></a>2、创建对象</h2><pre><code>Object obj = 类对象.newInstance();</code></pre>
<p>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast_01;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;	</span><br><span class="line">		Class clz = Class.forName(<span class="string">&quot;cn.itcast_01.User&quot;</span>);</span><br><span class="line">		System.out.println(clz);</span><br><span class="line">		</span><br><span class="line">		Object obj = clz.newInstance();</span><br><span class="line">		System.out.println(obj);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3、调用方法"><a href="#3、调用方法" class="headerlink" title="3、调用方法"></a>3、调用方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast_05_Method;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> cn.itcast_01.User;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		User u = <span class="keyword">new</span> User(<span class="string">&quot;小巴&quot;</span>,<span class="number">18</span>);</span><br><span class="line">		User u2 = <span class="keyword">new</span> User(<span class="string">&quot;老赵&quot;</span>,<span class="number">20</span>);</span><br><span class="line">		</span><br><span class="line">		Class clz = Class.forName(<span class="string">&quot;cn.itcast_01.User&quot;</span>);</span><br><span class="line">		<span class="comment">//Method md = 类对象.getMethod(&quot;类中的公有方法名&quot;);</span></span><br><span class="line">		<span class="comment">//获取公有方法，其中md是Method类型的方法名，</span></span><br><span class="line">		Method em = clz.getMethod(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line">		<span class="comment">//Object obj1 = lm.invoke(u2,&quot;老赵&quot;,&quot;aixiaoba&quot;);</span></span><br><span class="line">		<span class="comment">//为获取到的方法命名，方便调用。</span></span><br><span class="line">		Object obj = em.invoke(u2);</span><br><span class="line">		</span><br><span class="line">		System.out.println(obj);</span><br><span class="line">		<span class="comment">//Method dm = 类对象.getDeclaredMethod(&quot;类中的私有方法名&quot;);</span></span><br><span class="line">		<span class="comment">//获取私有方法名，又叫暴力获取，此方法无视方法的访问权限，即使是被private修饰的方法也会被获取到。</span></span><br><span class="line">        <span class="comment">//Method lm = 类对象.getMethod(&quot;有参方法方法名&quot;,参数的类对象...);</span></span><br><span class="line">		<span class="comment">//获取有参方法，同时要获取参数的类对象，格式为：参数类型.class</span></span><br><span class="line">		Method lm = clz.getMethod(<span class="string">&quot;login&quot;</span>,String.class,String.class);</span><br><span class="line">		<span class="comment">//Object obj1 = lm.invoke(类的对象,&quot;参数1&quot;,&quot;参数2&quot;);</span></span><br><span class="line">		<span class="comment">//调用获取到的方法，使用invoke关键字，此处表示调用有参方法。</span></span><br><span class="line">		Object obj1 = lm.invoke(u2,<span class="string">&quot;老赵&quot;</span>,<span class="string">&quot;aixiaoba&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//以上方法中由于不确定获取到的对象类型，所以用Object接收。</span></span><br><span class="line">		System.out.println(obj1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4、访问成员变量"><a href="#4、访问成员变量" class="headerlink" title="4、访问成员变量"></a>4、访问成员变量</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast_02Field;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		Class clz = Class.forName(<span class="string">&quot;cn.itcast_01.User&quot;</span>);</span><br><span class="line">		Object obj = clz.newInstance();</span><br><span class="line">		<span class="comment">//最重要的一个关键字：Field</span></span><br><span class="line">		<span class="comment">//Field nf = 类对象.getField(&quot;成员变量名&quot;);</span></span><br><span class="line">        <span class="comment">//和调用私有方法一样，要访问私有成员变量也要通过暴力获取的的方式，同时也要获取访问私有成员变量的权限。</span></span><br><span class="line">		<span class="comment">//Field af = 类对象.getDeclaredField(&quot;私有成员变量名&quot;);</span></span><br><span class="line">		<span class="comment">//af.setAccessible(true);</span></span><br><span class="line">		Field nf = clz.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		nf.set(obj, <span class="string">&quot;小巴&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		Object object = nf.get(obj);</span><br><span class="line">		System.out.println(object);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、工厂模式"><a href="#二、工厂模式" class="headerlink" title="二、工厂模式"></a>二、工厂模式</h1><h2 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h2><p>工厂模式提供了一种绝佳的创建对象的方法。在工厂模式中，我们并不会直接使用new来创建一个对象，而是使用一个共同的接口类来指定其实现类，这就大大降低了系统的耦合性——<strong>我们无需改变每个调用此接口的类，而直接改变实现此接口的类即可完成软件的更新迭代</strong>。</p>
<h2 id="2、分类"><a href="#2、分类" class="headerlink" title="2、分类"></a>2、分类</h2><ul>
<li><p>简单工厂模式（ simple Factory）<br>又叫做静态工厂方法（StaticFactory Method） 模式， 但不属于 23 种设计模式之一。<br>简单工厂模式的实质是由一个工厂类根据传入的参数， 动态决定应该创建哪一个产品类。</p>
</li>
<li><p>工厂方法模式（Factory Method）<br>通常由应用程序直接使用 new 创建新的对象， 为了将对象的创建和使用相分离， 采用工厂方法模式方法,即应用程序将对象的创建及初始化职责交给工厂对象</p>
</li>
<li><p>抽象工厂模式（abstract Factory）<br>主要创建一个产品族，不同工厂继承父类的抽象工厂创建不同的产品族</p>
</li>
</ul>
<h2 id="3、简单工厂模式实例"><a href="#3、简单工厂模式实例" class="headerlink" title="3、简单工厂模式实例"></a>3、简单工厂模式实例</h2><p>有一个为car的接口，有三种不同类型的车分别为奥迪车、奔驰车、宝马车，为了根据传入不同的参数，就可以得到不同car对象</p>
<p><strong>接口类car</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现车子的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>三个具体的实现类如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//奥迪车</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audi</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;audi&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//奔驰车</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;benz&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//宝马车</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bmw</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;bmw&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单工厂的方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单工厂 根据传入不同的参数得到不同对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;BMW&quot;</span>.equalsIgnoreCase(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Bmw();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;Benz&quot;</span>.equalsIgnoreCase(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Benz();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;Audi&quot;</span>.equalsIgnoreCase(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Audi();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这个产品产不出来&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4、工厂方法模式实例"><a href="#4、工厂方法模式实例" class="headerlink" title="4、工厂方法模式实例"></a>4、工厂方法模式实例</h2><p>为了创建不同的类型的车，需要三个不同的工厂去创建，把创建的任务交给工厂去完成，于是代码就进行下面的演变</p>
<ul>
<li>先引入一张简单工厂的uml图帮助大家理解：</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/06/13/tx3IaV.png" alt="tx3IaV.png"></p>
<p>具体代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//造车工厂的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">     <span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生产奥迪的工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Audi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生产奔驰的工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenzFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Benz();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生产宝马的工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BmwFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bmw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>工厂方法的测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.首先先创建一个奥迪工厂出来</span></span><br><span class="line">        Factory factory = <span class="keyword">new</span> AudiFactory();</span><br><span class="line">        <span class="comment">//2.然后根据工厂得到奥迪车，具体的造车工厂交给工厂来完成</span></span><br><span class="line">        System.out.println(factory.getCar());</span><br><span class="line">        factory = <span class="keyword">new</span> BmwFactory();</span><br><span class="line">        System.out.println(factory.getCar());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5、抽象工厂模式实例"><a href="#5、抽象工厂模式实例" class="headerlink" title="5、抽象工厂模式实例"></a>5、抽象工厂模式实例</h2><p>假设奥迪和奔驰和宝马属于一个产品族的，那么可以根据抽象工厂即可创建一些的不同的车，此时的造车的接口工厂需要发生改变，需要支持多个产品族的创建</p>
<ul>
<li>先引入一张抽象工厂的uml图帮助理解：</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/06/13/tx8edP.jpg" alt="tx8edP.jpg"></p>
<p>具体代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">	<span class="comment">//分别得到奥迪、奔驰、宝马车</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Car <span class="title">getAudiCar</span><span class="params">()</span></span>;</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Car <span class="title">getBenzCar</span><span class="params">()</span></span>;</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Car <span class="title">getBmwCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.先创建具体抽象工厂</span></span><br><span class="line">        AbstractFactory abstractFactory = <span class="keyword">new</span> CarFactory();</span><br><span class="line">        <span class="comment">//2.根据具体的抽象工厂得到车</span></span><br><span class="line">        Car audi  = abstractFactory.getAudiCar();</span><br><span class="line">        System.out.println(audi.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="6、工厂模式在Spring中的体现"><a href="#6、工厂模式在Spring中的体现" class="headerlink" title="6、工厂模式在Spring中的体现"></a>6、工厂模式在Spring中的体现</h1><p><code>Spring Bean 的创建是典型的工厂模式</code>， 这一系列的 Bean 工厂， 也即 <code>IOC 容器</code>为开发者管理对象间的依赖关系提供了很多便利和基础服务， 在 Spring 中有许多的 IOC 容器的实现供用户选择和使用，其相互关系如下：</p>
<p><img src="https://s1.ax1x.com/2020/06/13/txGG1e.jpg" alt="txGG1e.jpg"></p>
<p>关于Spring IOC的相关笔记可见<a href="/2020/06/14/IOCIntroAndCompl/" title="IOC介绍及其简单实现">IOC介绍及其简单实现</a> </p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis注解开发入门</title>
    <url>/2020/06/12/MybatisAnnotationDevelopment/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前面介绍了Mybatis基于xml文件的入门，这里以maven环境为例，对Mybatis注解开发做简单札记。</p>
<a id="more"></a>

<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><h2 id="1、pom-xml配置"><a href="#1、pom-xml配置" class="headerlink" title="1、pom.xml配置"></a>1、pom.xml配置</h2><p>新建一个maven项目（不使用脚手架），命名为<code>mybatis_annotationTest</code>，pom.xml文件配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.stevensam<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis_annotationTest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="2、dao以及domain建立"><a href="#2、dao以及domain建立" class="headerlink" title="2、dao以及domain建立"></a>2、dao以及domain建立</h1><p>在main-java目录中建立com.stevensam.dao以及com.stevensam.domain两个包，在dao包中新建一个IStudentDao接口，可以先不写代码。</p>
<h1 id="3、实体类创建"><a href="#3、实体类创建" class="headerlink" title="3、实体类创建"></a>3、实体类创建</h1><p>domain包中建立实体类，可以将之前的项目的实体类复制粘贴过来，各个类的内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stevensam.domain;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* description:学生类</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> sid;</span><br><span class="line">   <span class="keyword">private</span> String sname;</span><br><span class="line">   <span class="keyword">private</span> String sex;</span><br><span class="line">   <span class="keyword">private</span> Date birthday;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> cno;</span><br><span class="line">   <span class="comment">//学生所在班级</span></span><br><span class="line">   <span class="keyword">private</span> Classes cla;</span><br><span class="line">   <span class="comment">//学生所选课程</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;Course&gt; courseList;</span><br><span class="line">   <span class="comment">//学生所选的课程分数类</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;StuCourse&gt; stuCourseList;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">               <span class="string">&quot;sid=&quot;</span> + sid +</span><br><span class="line">               <span class="string">&quot;, sname=&#x27;&quot;</span> + sname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">               <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">               <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">               <span class="string">&quot;, cno=&quot;</span> + cno +</span><br><span class="line">               <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/***************get和set方法此处省略，请自行加载*********************/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stevensam.domain;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* description:班级实体</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Classes</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> cid;</span><br><span class="line">   <span class="keyword">private</span> String cname;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> cnum;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Student&gt; students;<span class="comment">//班级的学生</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;Classes&#123;&quot;</span> +</span><br><span class="line">               <span class="string">&quot;cid=&quot;</span> + cid +</span><br><span class="line">               <span class="string">&quot;, cname=&#x27;&quot;</span> + cname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">               <span class="string">&quot;, cnum=&quot;</span> + cnum +</span><br><span class="line">               <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/***************get和set方法此处省略，请自行加载********************/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="4、resources相关配置"><a href="#4、resources相关配置" class="headerlink" title="4、resources相关配置"></a>4、resources相关配置</h1><p>这里的配置包括jdbcConfig.properties、log4j.properties、SqlMapConfig.xml等，前两者这里不再赘述，此处的SqlMapConfig.xml配置内容如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--如果用resource属性则可以直接写文件名jdbcConfig.properties--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbcConfig.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--只能给实体类区别名--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.stevensam.domain&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--配置mysql的环境--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--配置事务的类型--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--配置数据源（连接池）--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--配置连接数据库的4个基本信息--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--用别名更加简洁方便--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.stevensam.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="5、测试类编写"><a href="#5、测试类编写" class="headerlink" title="5、测试类编写"></a>5、测试类编写</h1><p>test目录下，在java文件夹中添加com.stevensam.test文件夹，再建立AnnotationTest测试类进行测试，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stevensam.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.stevensam.dao.IStudentDao;</span><br><span class="line"><span class="keyword">import</span> com.stevensam.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* author:seven lin</span></span><br><span class="line"><span class="comment">* date:2018/8/2414:33</span></span><br><span class="line"><span class="comment">* description:</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> InputStream in;</span><br><span class="line">   <span class="keyword">private</span> SqlSession session;</span><br><span class="line">   <span class="keyword">private</span> IStudentDao iStudentDao;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Before</span><span class="comment">//在测试方法之前执行</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//1.读取配置文件</span></span><br><span class="line">       in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//2.创建SqlSessionFactory工厂</span></span><br><span class="line">       SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">       SqlSessionFactory factory = builder.build(in);</span><br><span class="line">       <span class="comment">//3.工厂生产SqlSession对象</span></span><br><span class="line">       session = factory.openSession();</span><br><span class="line">       <span class="comment">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">       iStudentDao = session.getMapper(IStudentDao.class);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@After</span><span class="comment">//在测试方法之后执行</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//6.释放资源</span></span><br><span class="line">       in.close();</span><br><span class="line">       session.close();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**后续增加测试方法*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、注解开发——CURD操作"><a href="#二、注解开发——CURD操作" class="headerlink" title="二、注解开发——CURD操作"></a>二、注解开发——CURD操作</h1><h2 id="1、查询所有学生"><a href="#1、查询所有学生" class="headerlink" title="1、查询所有学生"></a>1、查询所有学生</h2><p>在IStudentDao接口中增加一个查询所有学生的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有操作</span></span><br><span class="line"><span class="comment">* 注解开发和xml文件开发最大的区别就是把查询语句用注解写在方法的上面</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from student&quot;)</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>在测试类AnnotationTest中增加测试查询所有学生的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试添加学生</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">   List&lt;Student&gt; studentList = iStudentDao.findAll();</span><br><span class="line">   <span class="keyword">for</span>(Student student:studentList)&#123;</span><br><span class="line">       System.out.println(student);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2、增加一个学生"><a href="#2、增加一个学生" class="headerlink" title="2、增加一个学生"></a>2、增加一个学生</h2><p>在IStudentDao接口中增加一个增加学生的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加一个学生</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> student</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Insert(&quot;insert into student(sname,sex,birthday,cno) &quot; +</span></span><br><span class="line"><span class="meta">       &quot;values(#&#123;sname&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;cno&#125;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>;</span><br></pre></td></tr></table></figure>
<p>在测试类AnnotationTest中增加测试查询所有学生的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试查询所有学生</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddStudent</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   Student student = <span class="keyword">new</span> Student();</span><br><span class="line">   student.setSname(<span class="string">&quot;徐盛&quot;</span>);</span><br><span class="line">   student.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">   student.setBirthday(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>).parse(<span class="string">&quot;2000-02-03&quot;</span>));</span><br><span class="line">   student.setCno(<span class="number">3</span>);</span><br><span class="line">   iStudentDao.addStudent(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3、更改学生信息"><a href="#3、更改学生信息" class="headerlink" title="3、更改学生信息"></a>3、更改学生信息</h2><p>在IStudentDao中添加一个修改学生信息的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 修改学生信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> student</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Update(&quot;update student set sname=#&#123;sname&#125;,sex=#&#123;sex&#125;,birthday=#&#123;birthday&#125;,cno=#&#123;cno&#125; &quot; +</span></span><br><span class="line"><span class="meta">       &quot;where sid=#&#123;sid&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">(Student student)</span></span>;</span><br></pre></td></tr></table></figure>
<p>在测试类AnnotationTest中添加测试修改学生信息的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试修改学生</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   Student student = <span class="keyword">new</span> Student();</span><br><span class="line">   student.setSid(<span class="number">18</span>);</span><br><span class="line">   student.setSname(<span class="string">&quot;徐盛&quot;</span>);</span><br><span class="line">   student.setSex(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">   student.setBirthday(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>).parse(<span class="string">&quot;2001-12-03&quot;</span>));</span><br><span class="line">   student.setCno(<span class="number">1</span>);</span><br><span class="line">   iStudentDao.updateStudent(student);</span><br><span class="line">   session.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4、删除学生信息"><a href="#4、删除学生信息" class="headerlink" title="4、删除学生信息"></a>4、删除学生信息</h2><p>在IStudentDao中添加一个删除学生信息的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据id删除学生</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> student</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from student where sid=#&#123;sid&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(Student student)</span></span>;</span><br></pre></td></tr></table></figure>
<p>在测试类AnnotationTest中添加测试删除学生的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 测试删除学生</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">   Student student = <span class="keyword">new</span> Student();</span><br><span class="line">   student.setSid(<span class="number">18</span>);</span><br><span class="line">   iStudentDao.deleteStudent(student);</span><br><span class="line">   session.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5、模糊查询学生信息"><a href="#5、模糊查询学生信息" class="headerlink" title="5、模糊查询学生信息"></a>5、模糊查询学生信息</h2><p>在IStudentDao中添加一个根据姓名模糊查询学生信息的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据姓名模糊查询学生</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from student where sname like #&#123;sname&#125;&quot;)</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure>
<p>在测试类AnnotationTest中添加测试根据姓名模糊查询学生信息的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试根据姓名模糊查询学生</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span></span>&#123;</span><br><span class="line">   List&lt;Student&gt; studentList = iStudentDao.findByName(<span class="string">&quot;%张%&quot;</span>);</span><br><span class="line">   <span class="keyword">for</span>(Student student:studentList)&#123;</span><br><span class="line">       System.out.println(student);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6、注意事项"><a href="#6、注意事项" class="headerlink" title="6、注意事项"></a>6、注意事项</h2><p>由于设置了事务管理，所以在操作的时候除了查询之外的语句，我们都需要添加提交的代码<code>session.commit();</code></p>
<h1 id="三、如何设置返回值"><a href="#三、如何设置返回值" class="headerlink" title="三、如何设置返回值"></a>三、如何设置返回值</h1><p>在实体类中的成员变量名和数据库中的列名不一致的时候，我们需要一一对应列名，在之前的文章中已经用了XML配置文件设置过，这次用注解开发又如何编写呢？请看下面的例子：</p>
<h2 id="1、查询所有学生的时候设置返回值对应列表"><a href="#1、查询所有学生的时候设置返回值对应列表" class="headerlink" title="1、查询所有学生的时候设置返回值对应列表"></a>1、查询所有学生的时候设置返回值对应列表</h2><p>假设学生类中的成员变量名不同，这里将变量名改一下，并重新生成get和set方法，还有<code>toString</code>方法，如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//之前为sid</span></span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">//之前为sname</span></span><br><span class="line"><span class="comment">/*******************省略其他成员变量********************/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">       <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">       <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">       <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">       <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">       <span class="string">&quot;, cno=&quot;</span> + cno +</span><br><span class="line">       <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来，在IStudentDao接口中修改<code>findAll()</code>方法，增加结果返回集注解，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询所有操作.</span></span><br><span class="line"><span class="comment">    * Results可以用id命名，这里命名为studentMap，在其他方法中可以直接调用</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Select(&quot;select * from student&quot;)</span></span><br><span class="line">   <span class="meta">@Results(id = &quot;studentMap&quot;,value = &#123;</span></span><br><span class="line"><span class="meta">           @Result(id=true,column = &quot;sid&quot;,property = &quot;sid&quot;),</span></span><br><span class="line"><span class="meta">           @Result(column = &quot;sname&quot;,property = &quot;sname&quot;),</span></span><br><span class="line"><span class="meta">           @Result(column = &quot;sex&quot;,property = &quot;sex&quot;),</span></span><br><span class="line"><span class="meta">           @Result(column = &quot;birthday&quot;,property = &quot;birthday&quot;),</span></span><br><span class="line"><span class="meta">           @Result(column = &quot;cno&quot;,property = &quot;cno&quot;)</span></span><br><span class="line"><span class="meta">   &#125;)</span></span><br><span class="line">   <span class="function">List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="2、查询一个学生"><a href="#2、查询一个学生" class="headerlink" title="2、查询一个学生"></a>2、查询一个学生</h2><p>第一例子中的结果集可以在其他方法使用，比如查询一个学生的方法</p>
<p>在IStudentDao中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据id查询学生</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> integer</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from student where sid=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResultMap(&quot;studentMap&quot;)</span></span><br><span class="line"><span class="function">Student <span class="title">findById</span><span class="params">(Integer integer)</span></span>;</span><br></pre></td></tr></table></figure>
<p>AnnotationTest添加测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试根据id查询学生</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span></span>&#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;学生：&quot;</span>+iStudentDao.findById(<span class="number">16</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3、插入学生信息后返回该学生id"><a href="#3、插入学生信息后返回该学生id" class="headerlink" title="3、插入学生信息后返回该学生id"></a>3、插入学生信息后返回该学生id</h2><p>这里的返回和上面的有点不同的是，方法是没有没有返回值的，依靠的是注解将值返回。而且有两种方式实现。</p>
<p>第一种：options，添加表的列名<code>sid</code>，指定成员变量的名<code>id</code>，关键的一步是设置<code>useGeneratedKeys = true</code>，直译过来就是要接代传递变量。</p>
<p>第二种：selectkey，基本的思路和xml配置一样，代码编写如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一个学生</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> student</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Insert(&quot;insert into student(sname,sex,birthday,cno) &quot; +</span></span><br><span class="line"><span class="meta">        &quot;values(#&#123;name&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;cno&#125;)&quot;)</span></span><br><span class="line"><span class="comment">//@Options(useGeneratedKeys = true,keyColumn = &quot;sid&quot;,keyProperty = &quot;id&quot;)</span></span><br><span class="line"><span class="meta">@SelectKey(statement = &quot;select last_insert_id()&quot;,keyProperty = &quot;id&quot;,</span></span><br><span class="line"><span class="meta">           keyColumn = &quot;sid&quot;,resultType = int.class,before = false)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="4、一对一关系映射one注解"><a href="#4、一对一关系映射one注解" class="headerlink" title="4、一对一关系映射one注解"></a>4、一对一关系映射one注解</h2><p>在xml开发中，一对一关系映射查询，用的是<code>association</code>标签解决，而在注解开发用的是<code>one</code>注解。<br>以第一个例子来修改，在IStudentDao修改查询所有的操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 查询所有操作</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from student&quot;)</span></span><br><span class="line"><span class="meta">@Results(id = &quot;studentMap&quot;,value = &#123;</span></span><br><span class="line"><span class="meta">  @Result(id=true,column = &quot;sid&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">  @Result(column = &quot;sname&quot;,property = &quot;name&quot;),</span></span><br><span class="line"><span class="meta">  @Result(column = &quot;sex&quot;,property = &quot;sex&quot;),</span></span><br><span class="line"><span class="meta">  @Result(column = &quot;birthday&quot;,property = &quot;birthday&quot;),</span></span><br><span class="line"><span class="meta">  @Result(column = &quot;cno&quot;,property = &quot;cno&quot;),</span></span><br><span class="line"><span class="meta">  @Result(column = &quot;cno&quot;,property = &quot;cla&quot;,</span></span><br><span class="line"><span class="meta">/*select属性中填写执行方法的全限定类名加方法名，这里还开启了延迟加载（懒加载），在第四节会讲到</span></span><br><span class="line"><span class="meta">*/</span></span><br><span class="line"><span class="meta">one = @One(select = &quot;com.stevensam.dao.IClasses.findByCId&quot;,</span></span><br><span class="line"><span class="meta">                     fetchType = FetchType.LAZY))</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>建立一个班级Dao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stevensam.dao;</span><br><span class="line"><span class="keyword">import</span> com.stevensam.domain.Classes;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author:seven lin</span></span><br><span class="line"><span class="comment"> * date:2018/8/3010:59</span></span><br><span class="line"><span class="comment"> * description:班级实体类</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IClasses</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询班级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from classes where cid=#&#123;cid&#125;&quot;)</span></span><br><span class="line">    <span class="function">Classes <span class="title">findByCId</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在测试类中的测试方法添加打印该学生的班级信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试查询所有学生</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = iStudentDao.findAll();</span><br><span class="line">    <span class="keyword">for</span>(Student student:studentList)&#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">        System.out.println(student.getCla());<span class="comment">//打印该学生对应的班级信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<p><img src="https://s1.ax1x.com/2020/06/13/tXLszV.png" alt="tXLszV.png"></p>
<p>为什么打印出来会不连续呢？而且查询班级的语句怎么只有三条，不应该是每次查询学生的时候就会触发查询班级的语句吗？<br>这里需要给大家讲的是缓存的知识，Mybatis中默认开启一级缓存。一级缓存是存在于sqlsession中的，当同一个语句同一个条件要查询的时候，系统会缓存第一次查询执行对象，而第二次查询的时候就不需要再创建查询对象。比如，当执行<code>select * from classes where cid=3</code>时，那么第一次会执行，第二次不会再去创建对象执行，所以才会有以下的结果：</p>
<p><img src="https://s1.ax1x.com/2020/06/13/tXOGk9.png" alt="tXOGk9.png"></p>
<h2 id="5、一对多关系映射many注解"><a href="#5、一对多关系映射many注解" class="headerlink" title="5、一对多关系映射many注解"></a>5、一对多关系映射many注解</h2><p>内容和one是差不多的，只是根据班级去查询学生，思路相反，没有很多不同。这里暂做留空，不再赘述。</p>
]]></content>
      <categories>
        <category>Web框架</category>
      </categories>
      <tags>
        <tag>MyBaits</tag>
        <tag>Web开发</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis入门测试</title>
    <url>/2020/06/12/MyBatisBeginning/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>此篇对于Mybatis的入门学习，现进行总结。现提供主要基于xml的Mybatis完整测试代码。主要知识内容包括配置文件、映射文件的编写、日志文件的编写、sqlSession的使用以及封装成工具类。基于注解的Mybatis开发见<a href="/2020/06/12/MybatisAnnotationDevelopment/" title="Mybatis注解开发入门">Mybatis注解开发入门</a> </p>
<a id="more"></a>  

<h1 id="1、MyBatis概述"><a href="#1、MyBatis概述" class="headerlink" title="1、MyBatis概述"></a>1、MyBatis概述</h1><ol>
<li>它是基于Java的持久层框架，内部封装了JDBC，简单点就是用来执行sql语句与数据库进行交互的框架。  </li>
<li>与Hibernate的区别是，Mybatis还是要写sql语句的，Hibernate封装得更加全面，不需要写sql语句。</li>
</ol>
<h1 id="2、测试代码"><a href="#2、测试代码" class="headerlink" title="2、测试代码"></a>2、测试代码</h1><h2 id="2-1、工程路径图"><a href="#2-1、工程路径图" class="headerlink" title="2.1、工程路径图"></a>2.1、工程路径图</h2><p><img src="https://s1.ax1x.com/2020/06/12/tXpgTU.jpg" alt="tXpgTU.jpg"></p>
<h2 id="2-2、mapper文件编写"><a href="#2-2、mapper文件编写" class="headerlink" title="2.2、mapper文件编写"></a>2.2、mapper文件编写</h2><p>   mapper文件的作用是程序用以查找具体执行的sql语句：</p>
<p>   值得注意的是：</p>
<p>   A、<code>#&#123;name&#125;</code>，<code>#&#123;age&#125;</code>，<code>#&#123;sore&#125; </code>这个写法，后面讲到DAO层的时候会提。</p>
<p>   B、namespace是命名空间，用来限定范围的，它有两个注意点：</p>
<pre><code>1）后面开发，一般一个Dao对应一个mapper，在这种情况下，我们的insert语句的id可能出现重复，这个时候就可以通过  使用namespace.id来限定是那个mapper文件的操作
2）通过限定namespace可以设定日志文件显示的内容</code></pre>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--test是命名空间  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">		insert into student(sname,age,score) value(#&#123;name&#125;,#&#123;age&#125;,#&#123;sore&#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span>		</span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="3、Mybatis配置文件"><a href="#3、Mybatis配置文件" class="headerlink" title="3、Mybatis配置文件"></a>3、Mybatis配置文件</h1><h2 id="3-1、映射文件的注册"><a href="#3-1、映射文件的注册" class="headerlink" title="3.1、映射文件的注册"></a>3.1、映射文件的注册</h2><p><strong>方法一：</strong>mapper标签class属性，针对于sql注册文件在类中，并该注册文件名必须和接口名称同名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.stone.mybatis.mapper.StudentDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>方法一如果是maven工程需要添加以下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 扫描除了resources之外的其他xml包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>方法二：</strong>mapper标签url属性，能读取硬盘上的注册文件或者网络上的注册文件 （前面file不可省略）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:\D:\Testenv\idea\Java_Mybatis\src\main\resources\mapper\StudentMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>方法三：</strong>mapper标签resource属性，针对于sql注册文件在类路径下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/StudentMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>方法四：</strong>package标签name属性，映射该包下所有的sql映射文件 ，这种方式能够批量注册，并且每一对接口和xml名称必须相同</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册mapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.stone.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>方法四如果是maven工程需要在pom中添加以下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 扫描除了resources之外的其他xml包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2、运行环境的配置"><a href="#3-2、运行环境的配置" class="headerlink" title="3.2、运行环境的配置"></a>3.2、运行环境的配置</h2><ol>
<li>environmentals下可以配置多个environment，通过id来进行选择，这里我们使用默认的JDBC的mysql环境</li>
<li>datasource用来选择数据连接池。作用是存放连接数据库的连接。因为每一次连接到数据库是件非常耗时的事件，增加一个连接池，用来存放连接对象，它可以接受发送连接请求，也可以回收连接进行保存。数据连接池有很多参数，包括最大，最小缓存等等，我们后台的调优，有一部就是这些参数的选择。另外，这里我们使用Mybatis默认的连接池，后续我们会使用到c3p0/dbcp等数据池。</li>
<li>数据库连接四要素，采用properties文件进行配置，采用${}方式进行获取（SpringBoot也可以通过yml进行配置）</li>
</ol>
<blockquote>
<p>正常的情况是先加载yml，接下来加载properties文件。如果相同的配置存在于两个文件中。最后会使用properties中的配置。最后读取的优先集最高。<br>两个配置文件中的端口号不一样会读取properties中的端口号</p>
</blockquote>
<h2 id="Mybaits-xml文件"><a href="#Mybaits-xml文件" class="headerlink" title="Mybaits.xml文件"></a>Mybaits.xml文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;mysql.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--给dao取类名  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;beans&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置运行环境  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysqlEM&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysqlEM&quot;</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--JDBC表示使用JDBC的事务管理器  --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span>			</span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!--映射文件的注册  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;dao/mapper.xml&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="mysql-properties文件代码"><a href="#mysql-properties文件代码" class="headerlink" title="mysql.properties文件代码"></a>mysql.properties文件代码</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost/bjpowernode?serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure>
<h1 id="4、Dao层测试代码"><a href="#4、Dao层测试代码" class="headerlink" title="4、Dao层测试代码"></a>4、Dao层测试代码</h1><ol>
<li><p>这里我们把获取<code>sqlsession</code>方法提取出来，封装成一个类在<code>utils.myUtils</code>文件中。</p>
</li>
<li><p><code>sqlsession.insert(&quot;insertStudent&quot;, student);</code>这里的第二个参数,是一个Student对象，因此我们在Mapper文件中的sql语句采用获取的方式,进行编写</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> beans.Student;</span><br><span class="line"><span class="keyword">import</span> utils.myUtils;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IStudentDaoImpl</span> <span class="keyword">implements</span> <span class="title">IStudentDao</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">private</span> SqlSession sqlsession;</span><br><span class="line"> </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertStu</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			sqlsession = myUtils.getsqlsession();</span><br><span class="line">            <span class="comment">//具体操作代码</span></span><br><span class="line">			sqlsession.insert(<span class="string">&quot;insertStudent&quot;</span>, student);</span><br><span class="line">            <span class="comment">//提交数据代码</span></span><br><span class="line">			sqlsession.commit();</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(sqlsession!=<span class="keyword">null</span>) &#123;</span><br><span class="line">			sqlsession.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="myUtils-java文件代码"><a href="#myUtils-java文件代码" class="headerlink" title="myUtils.java文件代码"></a>myUtils.java文件代码</h2><p>这里我们使用了单例模式，因为考虑到创建factory耗时很长，因此就让他在初始化的时候，就创建好一个对象，并且每次使用的是同一个对象。当然这样是线程不安全的，因为当我进行数据操作的时候，其他线程用的是同一个factory对象，他会读取到我数据，类似mysql的dirtyread。具体情况具体使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myUtils</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlsessionfactory;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">myUtils</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getsqlsession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		InputStream inputstream;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取Mybatis容器内容</span></span><br><span class="line">			inputstream = Resources.getResourceAsStream(<span class="string">&quot;myBatis.xml&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (sqlsessionfactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">             	<span class="comment">//新建一个factory，他的作用用来生产sqlSeesion</span></span><br><span class="line">				sqlsessionfactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputstream);</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="comment">//使用factory的open方法创建一个sqlSeesion</span></span><br><span class="line">			SqlSession sqlsession = sqlsessionfactory.openSession();</span><br><span class="line">			<span class="keyword">return</span> sqlsession;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="5、日志文件"><a href="#5、日志文件" class="headerlink" title="5、日志文件"></a>5、日志文件</h1><p>添加一个日志配置log4j.properties文件：</p>
<p>注意到最后一句：<code>log4j.logger.test</code>这个test就是我们的命名空间，最后他之显现和test有关的日志信息到控制台console</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### \u8F93\u51FA\u5230\u63A7\u5236\u53F0 ###</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.consoleTarget</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span> =<span class="string">[%5-5p][%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %c %L %m%n   //格式信息</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">### set log levels ###</span></span><br><span class="line"><span class="attr">//debug输出到控制台</span></span><br><span class="line"><span class="attr">//test是我们mapper的命名空间，一下设置可以使得只输出有关test的信息</span></span><br><span class="line"><span class="meta">log4j.logger.test</span> = <span class="string">debug,console </span></span><br></pre></td></tr></table></figure>
<h1 id="6、其他代码"><a href="#6、其他代码" class="headerlink" title="6、其他代码"></a>6、其他代码</h1><h2 id="bean对象Student"><a href="#bean对象Student" class="headerlink" title="bean对象Student"></a>bean对象Student</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> beans;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> sore;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> sore)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">		<span class="keyword">this</span>.sore = sore;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> sore;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSore</span><span class="params">(<span class="keyword">double</span> sore)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.sore = sore;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Student [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, sore=&quot;</span> + sore + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试类mytest"><a href="#测试类mytest" class="headerlink" title="测试类mytest"></a>测试类mytest</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> beans.Student;</span><br><span class="line"><span class="keyword">import</span> dao.IStudentDao;</span><br><span class="line"><span class="keyword">import</span> dao.IStudentDaoImpl;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> IStudentDao sdao;</span><br><span class="line"> </span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		sdao = <span class="keyword">new</span> IStudentDaoImpl();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Student student = <span class="keyword">new</span> Student(<span class="string">&quot;张si&quot;</span>,<span class="number">23</span>,<span class="number">93.2</span>);</span><br><span class="line">		sdao.insertStu(student);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Mysql数据库建表"><a href="#Mysql数据库建表" class="headerlink" title="Mysql数据库建表"></a>Mysql数据库建表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use bjpowernode;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">EXISTS</span> student;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">table</span> student(</span><br><span class="line">    id <span class="type">INT</span>(<span class="number">12</span>) <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> auto_increment,</span><br><span class="line">		sname <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">		age <span class="type">INT</span>(<span class="number">12</span>),</span><br><span class="line">		score <span class="type">INT</span>(<span class="number">12</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web框架</category>
      </categories>
      <tags>
        <tag>MyBaits</tag>
        <tag>Web开发</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC-MVP-MVVM</title>
    <url>/2020/03/10/MVC-MVP-MVVM/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>复杂的软件必须有清晰合理的架构，否则难以开发与维护。MVC（Model-View-Controller）是最常见的软件架构之一，广泛应用于业界。在MVC的基础上衍生出了MVP以及MVVM架构，这些名词均是为了解决图形界面应用程序复杂性管理问题而产生的应用架构模式。</p>
<p>本文分别对其相关特性做了简要分析，并从图形角度简析其间区别与联系。</p>
<a id="more"></a>

<h1 id="UI程序面临问题"><a href="#UI程序面临问题" class="headerlink" title="UI程序面临问题"></a>UI程序面临问题</h1><p>图形界面的应用程序提供用户可视化的操作界面，为其提供数据和信息。用户的输入行为会导致一些业务逻辑的触发，可能会变更应用程序的数据。而数据的变更自然需要用户界面的同步更新。例如用户对数据进行筛选，那么程序执行完筛选的业务逻辑后，需要将符合筛选条件的数据同步反馈到界面上。</p>
<p>在开发应用程序时，为更好管理其复杂性，我们通常基于职责分离的思想对应用程序进行分层。</p>
<h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><p>MVC的全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，是一种软件设计典范。它是用一种业务逻辑、数据与界面显示分离的方法来组织代码，将众多的业务逻辑聚集到一个部件里面，在需要改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑，达到减少编码的时间。</p>
<p>MVC开始是存在于桌面程序中的，M是指业务模型，V是指用户界面，C则是控制器。</p>
<h2 id="使用的MVC的目的"><a href="#使用的MVC的目的" class="headerlink" title="使用的MVC的目的"></a>使用的MVC的目的</h2><p>在于将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。</p>
<p>比如Windows系统资源管理器文件夹内容的显示方式，下面两张图中上图为详细信息显示方式，下图边为中等图标显示方式，文件的内容并没有改变，改变的是显示的方式。不管用户使用何种类型的显示方式，文件的内容并没有改变，达到M和V分离的目的。</p>
<p><img src="https://i.imgur.com/ICdm20S.jpg" alt="列表显示"><br><img src="https://i.imgur.com/eKE78zT.jpg" alt="中等图显示"></p>
<h2 id="M含义"><a href="#M含义" class="headerlink" title="M含义"></a>M含义</h2><p>M即Model模型是指模型表示业务规则。在MVC的三个部件中，模型拥有最多的处理任务。被模型返回的数据是中立的，模型与数据格式无关，这样一个模型能为多个视图提供数据，由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。</p>
<h2 id="V含义"><a href="#V含义" class="headerlink" title="V含义"></a>V含义</h2><p>V即View视图是指用户看到并与之交互的界面。比如由html元素组成的网页界面，或者软件的客户端界面。MVC的好处之一在于它能为应用程序处理很多不同的视图。在视图中其实没有真正的处理发生，它只是作为一种输出数据并允许用户操纵的方式。</p>
<h2 id="C含义"><a href="#C含义" class="headerlink" title="C含义"></a>C含义</h2><p>C即Controller控制器是指控制器接受用户的输入并调用模型和视图去完成用户的需求，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示返回的数据。</p>
<p>下图说明了三者之间的调用关系。</p>
<p><img src="https://i.imgur.com/P2HZqXz.jpg"></p>
<p>用户首先在界面中进行人机交互，然后请求发送到控制器，控制器根据请求类型和请求的指令发送到相应的模型，模型可以与数据库进行交互，进行增删改查操作，完成之后，根据业务的逻辑选择相应的视图进行显示，此时用户获得此次交互的反馈信息，用户可以进行下一步交互，如此循环。</p>
<h2 id="简化互动模式"><a href="#简化互动模式" class="headerlink" title="简化互动模式"></a>简化互动模式</h2><p>简而言之，接受用户指令时，MVC可以分为两种方式。一种是通过View接受指令，传递给controller：</p>
<p><img src="https://i.imgur.com/zJtlFDK.jpg"></p>
<p>另一种是直接通过Controller接受指令：</p>
<p><img src="https://i.imgur.com/ddxZ2D1.jpg"></p>
<p>实际项目旺旺采用更领过的方式，以Backbone.js为例：</p>
<p><img src="https://i.imgur.com/nUNQ604.jpg"></p>
<ol>
<li>用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态  </li>
<li>用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View  </li>
<li>Controller 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了 Controller，只保留一个 Router（路由器）</li>
</ol>
<h2 id="MVC例一"><a href="#MVC例一" class="headerlink" title="MVC例一"></a>MVC例一</h2><p>最典型的MVC就是jsp + servlet + javabean模式。</p>
<p>JavaBean作为模型，既可以作为数据模型来封装业务数据，又可以作为业务逻辑模型来包含应用的业务操作。其中，数据模型用来存储或传递业务数据，而业务逻辑模型接收到控制器传过来的模型更新请求后，执行特定的业务逻辑处理，然后返回相应的执行结果。</p>
<p>JSP作为表现层，负责提供页面为用户展示数据，提供相应的表单（Form）来用于用户的请求，并在适当的时候（点击按钮）向控制器发出请求来请求模型进行更新。</p>
<p>Serlvet作为控制器，用来接收用户提交的请求，然后获取请求中的数据，将之转换为业务模型需要的数据模型，然后调用业务模型相应的业务方法进行更新，同时根据业务执行结果来选择要返回的视图。</p>
<h2 id="MVC例二"><a href="#MVC例二" class="headerlink" title="MVC例二"></a>MVC例二</h2><p>Struts2框架：Struts2是基于MVC的轻量级的web应用框架。Struts2的应用范围是Web应用，注重将Web应用领域的日常工作和常见问题抽象化，提供一个平台帮助快速的完成Web应用开发。基于Struts2开发的Web应用自然就能实现MVC，Struts2着力于在MVC的各个部分为开发提供相应帮助。</p>
<h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><p> <strong>Login.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;form1&quot;</span> <span class="attr">action</span>=<span class="string">&quot;action/Login.action&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">		登录<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>&quot;<span class="attr">text</span>&quot;&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> <strong>Login.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(u.equals(<span class="string">&quot;1&quot;</span>) &amp;&amp; p.equals(<span class="string">&quot;1&quot;</span>)) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;Success&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;Error&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <strong>Struts.xml</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;deflut&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/action&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;Login&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dc365.s2.Login&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;Success&quot;</span>&gt;</span>../Success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;Error&quot;</span>&gt;</span>../Error.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>用户首先在Login.html中输入用户名和密码，点击登陆，此时根据action的路径，在struts.xml中找到对应的Login，然后根据对应的class的路径进入相应的login.Java，在这里判断之后，返回success或error，然后根据struts.xml中的result值，指向相应的jsp页面。</p>
<p><img src="https://i.imgur.com/2e3Qvzp.jpg"></p>
<h4 id="控制器——filterdispatcher"><a href="#控制器——filterdispatcher" class="headerlink" title="控制器——filterdispatcher"></a>控制器——filterdispatcher</h4><p>从上面这张图来看，用户请求首先到达前端控制器FilterDispatcher。FilterDispatcher负责根据用户提交的URL和struts.xml中的配置，来选择合适的动作(Action)，让这个Action来处理用户的请求。FilterDispatcher其实是一个过滤器（Filter，servlet规范中的一种web组件），它是Struts2核心包里已经做好的类，不需要我们去开发，只是要在项目的web.xml中配置一下即可。FilterDispatcher体现了J2EE核心设计模式中的前端控制器模式。</p>
<h4 id="动作——Action"><a href="#动作——Action" class="headerlink" title="动作——Action"></a>动作——Action</h4><p>在用户请求经过FilterDispatcher之后，被分发到了合适的动作Action对象。Action负责把用户请求中的参数组装成合适的数据模型，并调用相应的业务逻辑进行真正的功能处理，获取下一个视图展示所需要的数据。Struts2的Action，相比于别的web框架的动作处理，它实现了与Servlet API的解耦，使得Action里面不需要再直接去引用和使用HttpServletRequest与HttpServletResponse等接口。因而使得Action的单元测试更加简单，而且强大的类型转换也使得我们少做了很多重复的工作。</p>
<h4 id="视图——Result"><a href="#视图——Result" class="headerlink" title="视图——Result"></a>视图——Result</h4><p>视图结果用来把动作中获取到的数据展现给用户。在Struts2中有多种优秀的结果展示方式，常规的jsp，模板freemarker、velocity，还有各种其它专业的展示方式，如图表jfreechart、报表JasperReports、将XML转化为HTML的XSLT等等。而且各种视图结果在同一个工程里面可以混合出现。</p>
<h2 id="MVC例三"><a href="#MVC例三" class="headerlink" title="MVC例三"></a>MVC例三</h2><p><strong>ASP.NET MVC</strong><br>ASP.NET项目也含有Controllers，Models和Views目录，体现了MVC编程思想，这里不再赘述。<br>几个需要特别关注的关键点：</p>
<ol>
<li>View是把控制权交移给Controller，自己不执行业务逻辑。  </li>
<li>Controller执行业务逻辑并且操作Model，但不会直接操作View，可以说它是对View无知的。  </li>
<li>View和Model的同步消息是通过观察者模式进行，而同步操作是由View自己请求Model的数据然后对视图进行更新。</li>
</ol>
<p>特别注意的是MVC模式的精髓在于第三点：<code>Model的更新是通过观察者模式告知View的</code>具体表现形式可以是Pub/Sub或者是触发Events。  </p>
<p>通过观察者模式的好处就是：不同的MVC三角关系可能会有共同的Model，一个MVC三角中的Controller操作了Model以后，两个MVC三角的View都会接受到通知，然后更新自己。保持了依赖同一块Model的不同View显示数据的实时性和准确性。我们每天都在用的观察者模式，在几十年前就已经被大神们整合到MVC的架构当中。</p>
<h2 id="MVC的优点："><a href="#MVC的优点：" class="headerlink" title="MVC的优点："></a>MVC的优点：</h2><h3 id="1-耦合性低"><a href="#1-耦合性低" class="headerlink" title="1.耦合性低"></a>1.耦合性低</h3><p>视图层和业务层分离，这样就允许更改视图层代码而不用重新编译模型和控制器代码，同样，一个应用的业务流程或者业务规则的改变只需要改动MVC的模型层即可。因为模型与控制器和视图相分离，所以很容易改变应用程序的数据层和业务规则。</p>
<h3 id="2-重用性高"><a href="#2-重用性高" class="headerlink" title="2.重用性高"></a>2.重用性高</h3><p>MVC模式允许使用各种不同样式的视图来访问同一个服务器端的代码，因为多个视图能共享一个模型，它包括任何WEB（HTTP）浏览器或者无线浏览器（wap），比如，用户可以通过电脑也可通过手机来订购某样产品，虽然订购的方式不一样，但处理订购产品的方式是一样的。由于模型返回的数据没有进行格式化，所以同样的构件能被不同的界面使用。</p>
<h3 id="3-部署快，生命周期成本低"><a href="#3-部署快，生命周期成本低" class="headerlink" title="3.部署快，生命周期成本低"></a>3.部署快，生命周期成本低</h3><p>MVC使开发和维护用户接口的技术含量降低。使用MVC模式使开发时间得到相当大的缩减，它使程序员（Java开发人员）集中精力于业务逻辑，界面程序员（HTML和JSP开发人员）集中精力于表现形式上。</p>
<h3 id="4-可维护性高"><a href="#4-可维护性高" class="headerlink" title="4.可维护性高"></a>4.可维护性高</h3><p>分离视图层和业务逻辑层也使得WEB应用更易于维护和修改。</p>
<h2 id="MVC的缺点："><a href="#MVC的缺点：" class="headerlink" title="MVC的缺点："></a>MVC的缺点：</h2><h3 id="1-完全理解MVC比较复杂。"><a href="#1-完全理解MVC比较复杂。" class="headerlink" title="1.完全理解MVC比较复杂。"></a>1.完全理解MVC比较复杂。</h3><p>由于MVC模式提出的时间不长，加上同学们的实践经验不足，所以完全理解并掌握MVC不是一个很容易的过程。</p>
<h3 id="2-调试困难。"><a href="#2-调试困难。" class="headerlink" title="2.调试困难。"></a>2.调试困难。</h3><p>因为模型和视图要严格的分离，这样也给调试应用程序带来了一定的困难，每个构件在使用之前都需要经过彻底的测试。</p>
<p>Controller测试困难。因为视图同步操作是由View自己执行，而View只能在有UI的环境下运行。在没有UI环境下对Controller进行单元测试的时候，Controller业务逻辑的正确性是无法验证的：Controller更新Model的时候，无法对View的更新操作进行断言。</p>
<h3 id="3-不适合小型，中等规模的应用程序"><a href="#3-不适合小型，中等规模的应用程序" class="headerlink" title="3.不适合小型，中等规模的应用程序"></a>3.不适合小型，中等规模的应用程序</h3><p>在一个中小型的应用程序中，强制性的使用MVC进行开发，往往会花费大量时间，并且不能体现MVC的优势，同时会使开发变得繁琐。</p>
<h3 id="4-增加系统结构和实现的复杂性"><a href="#4-增加系统结构和实现的复杂性" class="headerlink" title="4.增加系统结构和实现的复杂性"></a>4.增加系统结构和实现的复杂性</h3><p>对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。</p>
<h3 id="5-视图与控制器间的过于紧密的连接并且降低了视图对模型数据的访问"><a href="#5-视图与控制器间的过于紧密的连接并且降低了视图对模型数据的访问" class="headerlink" title="5.视图与控制器间的过于紧密的连接并且降低了视图对模型数据的访问"></a>5.视图与控制器间的过于紧密的连接并且降低了视图对模型数据的访问</h3><p>视图与控制器是相互分离，但却是联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。</p>
<h3 id="6-View无法组件化"><a href="#6-View无法组件化" class="headerlink" title="6.View无法组件化"></a>6.View无法组件化</h3><p>View是强依赖特定的Model的，如果需要把这个View抽出来作为一个另外一个应用程序可复用的组件就困难了。因为不同程序的的Domain Model是不一样的</p>
<h1 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h1><p>MVP全称Model-View-Presenter，是MVC模式的一种变体。</p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>MVP有两种：  </p>
<ol>
<li>Passive View  </li>
<li>Supervising Controller</li>
</ol>
<p>这里讨论大多数的情况：Passive View</p>
<h2 id="MVP（Passive-View）的依赖关系"><a href="#MVP（Passive-View）的依赖关系" class="headerlink" title="MVP（Passive View）的依赖关系"></a>MVP（Passive View）的依赖关系</h2><p>MVP模式把MVC模式中的Controller换成了Presenter。MVP层次之间的依赖关系如下：</p>
<p><img src="https://i.imgur.com/V8rlnOZ.jpg"></p>
<p>MVP打破了View原来对于Model的依赖，其余的依赖关系和MVC模式一致。</p>
<h2 id="MVP（Passive-View）的调用关系"><a href="#MVP（Passive-View）的调用关系" class="headerlink" title="MVP（Passive View）的调用关系"></a>MVP（Passive View）的调用关系</h2><p>既然View对Model的依赖被打破了，那View如何同步Model的变更？看看MVP的调用关系：</p>
<p><img src="https://i.imgur.com/fzL6YPZ.jpg"></p>
<ol>
<li>各部分之间的通信，都是双向的。</li>
<li>View 与 Model 不发生联系，都通过 Presenter 传递。</li>
<li>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。</li>
</ol>
<p>和MVC模式一样，用户对View的操作都会从View交移给Presenter。Presenter同样的会执行相应的业务逻辑，并且对Model进行相应的操作；而这时候Model也是通过观察者模式把自己变更的消息传递出去，但是是传给Presenter而不是View。Presenter获取到Model变更的消息以后，<strong>通过View提供的接口更新界面</strong>。</p>
<p>在MVC模式中，Activity应该是属于View这一层。而实质上，它既承担了View，同时也包含一些Controller的东西在里面。这对于开发与维护来说不太友好，耦合度大高了。把Activity的View和Controller抽离出来就变成了View和Presenter，这就是MVP模式。</p>
<h2 id="MVP（Passive-View）关键点"><a href="#MVP（Passive-View）关键点" class="headerlink" title="MVP（Passive View）关键点"></a>MVP（Passive View）关键点</h2><ol>
<li>View不再负责同步的逻辑，而是由Presenter负责。Presenter中既有业务逻辑也有同步逻辑。</li>
<li>View需要提供操作界面的接口给Presenter进行调用。（关键）</li>
</ol>
<p>对比在MVC中，Controller是不能操作View的，View也没有提供相应的接口；而在MVP当中，Presenter可以操作View，View需要提供一组对界面操作的接口给Presenter进行调用；Model仍然通过事件广播自己的变更，但由Presenter监听而不是View。</p>
<h2 id="MVP（Passive-View）的优缺点"><a href="#MVP（Passive-View）的优缺点" class="headerlink" title="MVP（Passive View）的优缺点"></a>MVP（Passive View）的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li><p>便于测试。Presenter对View是通过接口进行，在对Presenter进行不依赖UI环境的单元测试的时候。可以通过Mock一个View对象，这个对象只需要实现了View的接口即可。然后依赖注入到Presenter中，单元测试的时候就可以完整的测试Presenter业务逻辑的正确性。。</p>
</li>
<li><p>View可以进行组件化。在MVP当中，View不依赖Model。这样就可以让View从特定的业务场景中脱离出来，可以说View可以做到对业务逻辑完全无知。它只需要提供一系列接口提供给上层操作。这样就可以做到高度可复用的View组件。</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li>
<li><p>Presenter中除了业务逻辑以外，还有大量的View-&gt;Model，Model-&gt;View的手动同步逻辑，造成Presenter比较笨重，维护起来比较困难。</p>
</li>
</ol>
<h2 id="MVP（Supervising-Controller）"><a href="#MVP（Supervising-Controller）" class="headerlink" title="MVP（Supervising Controller）"></a>MVP（Supervising Controller）</h2><p>上面讲的是MVP的Passive View模式，该模式下View非常Passive，它几乎什么都不知道，Presenter让它干什么它就干什么。而Supervising Controller模式中，Presenter会把一部分简单的同步逻辑交给View自己去做，Presenter只负责比较复杂的、高层次的UI操作，所以可以把它看成一个Supervising Controller。</p>
<p>Supervising Controller模式下的依赖和调用关系：</p>
<p><img src="https://i.imgur.com/klYGsZh.jpg"></p>
<h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><p>MVVM的依赖关系和MVP依赖，只不过是把P换成了VM。</p>
<p><img src="https://i.imgur.com/dBgDcqp.jpg"></p>
<p>下图展示了iOS下的MVC是如何拆分成MVVM的：</p>
<p><img src="https://i.imgur.com/HJ5B0VL.gif"></p>
<h2 id="MVVM的调用关系"><a href="#MVVM的调用关系" class="headerlink" title="MVVM的调用关系"></a>MVVM的调用关系</h2><p>MVVM的调用关系和MVP一样。但是，在ViewModel当中会有一个叫Binder，或者是Data-binding engine的东西。以前全部由Presenter负责的View和Model之间数据同步操作交由给Binder处理。你只需要在View的模版语法当中，指令式地声明View上的显示的内容是和Model的哪一块数据绑定的。当ViewModel对进行Model更新的时候，Binder会自动把数据更新到View上去，当用户对View进行操作（例如表单输入），Binder也会自动把数据更新到Model上去。这种方式称为：Two-way data-binding，双向数据绑定。可以简单而不恰当地理解为一个模版引擎，但是会根据数据变更实时渲染。<br><img src="https://i.imgur.com/ySqPoFu.jpg"></p>
<p>也就是说，MVVM把View和Model的同步逻辑自动化了。以前Presenter负责的View和Model同步不再手动地进行操作，而是交由框架所提供的Binder进行负责。只需要告诉Binder，View显示的数据对应的是Model哪一部分即可。</p>
<p>这里有一个JavaScript MVVM的例子，因为MVVM需要Binder引擎。所以例子中使用了一个MVVM的库：Vue.js。</p>
<h2 id="MVVM的优缺点"><a href="#MVVM的优缺点" class="headerlink" title="MVVM的优缺点"></a>MVVM的优缺点</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol>
<li><p>提高可维护性。解决了MVP大量的手动View和Model同步的问题，提供双向绑定机制。提高了代码的可维护性。</p>
</li>
<li><p>简化测试。因为同步逻辑是交由Binder做的，View跟着Model同时变更，所以只需要保证Model的正确性，View就正确。大大减少了对View同步更新的测试。</p>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3></li>
<li><p>过于简单的图形界面不适用，或说牛刀杀鸡。</p>
</li>
<li><p>对于大型的图形应用程序，视图状态较多，ViewModel的构建和维护的成本都会比较高。</p>
</li>
<li><p>数据绑定的声明是指令式地写在View的模版当中的，这些内容是没办法去打断点debug的。</p>
</li>
</ol>
<p>关于MVVN与DOM对比的详解，可以参考<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1108898947791072" title="廖雪峰的博客">廖雪峰的博客</a></p>
<p>而深入解析的博客链接可参考<a href="https://www.jianshu.com/p/2ad25e2769b5" title="西木柚子的博客">西木优子的博客</a></p>
]]></content>
      <categories>
        <category>Web体系结构</category>
      </categories>
      <tags>
        <tag>Web开发</tag>
        <tag>体系结构</tag>
        <tag>MVC</tag>
        <tag>MVP</tag>
        <tag>MVVE</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象类versus接口</title>
    <url>/2020/03/05/AbVersusInterface/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="抽象导言"><a href="#抽象导言" class="headerlink" title="抽象导言"></a>抽象导言</h1><p>抽象性和具体性都是相对的，不是绝对的。简单说，概念的内涵越小，则其抽象程度就越高，其外延也越大，反之亦然。比如“人”比“男人”抽象一点，而“生物”又比“人”更抽象一点，“物质”则比“生物”更抽象。</p>
<p>抽象的概念是由具体概念依其“共性”而产生的，把具体概念的诸多个性排出，集中描述其共性，就会产生一个抽象性的概念。抽象思维，是人类思维达到高级阶段产生的一种能力，例如，当小孩子思维尚未成熟时，他们只能掌握具体概念，他们在学习代词“你、我、他”时往往遇到困难，因为代词具有较高的抽象性。</p>
<p>总之，抽象概念的外延大，内涵小，具体概念的外延小，内涵大。</p>
<a id="more"></a>

<h1 id="1-抽象类与普通类的区别"><a href="#1-抽象类与普通类的区别" class="headerlink" title="1. 抽象类与普通类的区别"></a>1. 抽象类与普通类的区别</h1><p>（1）普通类可以去实例化调用；抽象类不能被实例化，因为它是存在于一种概念而并非具体。</p>
<p>（2）普通类和抽象类都可以被继承，但是抽象类被继承后子类必须重写继承的方法，除非子类也是抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;                <span class="comment">//这是宠物类,普通父类，方法里是空的  </span></span><br><span class="line">		</span><br><span class="line">	&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//------------------------// </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Pet</span> </span>&#123;    <span class="comment">//这是子类，是一个猫类,重写了父类方法  </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;  </span><br><span class="line">		System.out.println(<span class="string">&quot;猫爬树&quot;</span>);  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//------------------------//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Pet</span> </span>&#123;    <span class="comment">//这是子类，是一个狗类,重写了父类方法  </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;  </span><br><span class="line">		System.out.println(<span class="string">&quot;狗啃骨头&quot;</span>);  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//------------------------//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  <span class="comment">//这是测试类，分别调用了子类的不同方法  </span></span><br><span class="line">		Pet p1=<span class="keyword">new</span> Dog();                               <span class="comment">//多典型的多态表现啊，相当的给力  </span></span><br><span class="line">		Pet p2=<span class="keyword">new</span> Cat();  </span><br><span class="line">		  </span><br><span class="line">		p1.play();  </span><br><span class="line">		p2.play();  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<pre><code>狗啃骨头  
猫爬树</code></pre>
<h1 id="2-FAQ"><a href="#2-FAQ" class="headerlink" title="2. FAQ"></a>2. FAQ</h1><p>问：把父类改成抽象类，方法改成抽象方法，那么子类不变，依然重写父类方法，那这个跟普通父类没区别啊？<br>难道说就一个抽象方法没方法体就完事了？？那我普通方法有方法体，我空着不写内容不就得了，不跟抽象方法一个样吗？？</p>
<p>别跟我说抽象类还不能实例化，哥也不需要去new它！<br>普通类都能搞定的，还弄个抽象类有什么意义？我前面都说了普通类的方法我可以空着不写，达到跟抽象类方法没方法体一样的效果。  </p>
<p>问：既然两种方式都能达到同一个输出效果，弄一种方式不就得了，那为什么还要创造出一个抽象类出来？难道是比普通类看着舒服？用着爽？还是更加便捷？还是为了强制让别人用的时候必须强制化实现抽象方法省的你忘了什么的？</p>
<p>答：就是为了强制不能实例化，以及强制子类必须实现方法这不是你忘不忘的问题<br>你说你不去new它就行了，这话没错<br>那你想另一个问题，为什么要有访问控制呢？为什么要有private和public之分呢？<br>我可以全部public，不该访问的，我不访问就行了啊<br>小程序里，看不出什么区别，反而private成员要写一堆set和get函数，多麻烦，我自己写小程序的时候也会偷懒全部public<br>但是项目大了，代码多了，这种严谨的结构就很重要了<br>且不说会有很多人合作一起写一个程序，哪怕还是你一个人写，也保不住有忘记的时候，那时候编译器不报错，茫茫码海上哪找错误去？<br>面向对象说到底就是方便你思考，模块化，易维护管理，硬要说没必要，整个面向对象都没必要了，C语言有什么干不了的呀，运行效率还高。  </p>
<h1 id="3-抽象类与接口的区别"><a href="#3-抽象类与接口的区别" class="headerlink" title="3. 抽象类与接口的区别"></a>3. 抽象类与接口的区别</h1><h2 id="i-概念不一样"><a href="#i-概念不一样" class="headerlink" title="i 概念不一样"></a>i 概念不一样</h2><p>接口是对动作的抽象，抽象类是对本质的抽象。 </p>
<p>抽象类表示的是，这个对象是什么。接口表示的是，这个对象能做什么。比如，男人，女人，这两个类（如果是类的话……），他们的抽象类是人。说明，他们都是人。人可以吃东西，狗也可以吃东西，你可以把“吃东西”定义成一个接口，然后让这些类去实现它。  </p>
<p>所以，在高级语言上，一个类只能继承一个类（抽象类）(正如人不可能同时是生物和非生物)，但是可以实现多个接口(吃饭接口、走路接口)。</p>
<h2 id="ii-使用不一样"><a href="#ii-使用不一样" class="headerlink" title="ii 使用不一样"></a>ii 使用不一样</h2><p>a.抽象类 和 接口 都是用来抽象具体对象的. 但是接口的抽象级别最高<br>b.抽象类可以有具体的方法 和属性, 接口只能有抽象方法和不可变常量<br>c.抽象类主要用来抽象类别,接口主要用来抽象功能<br>d.抽象类中不包含任何实现，派生类必须覆盖它们。接口中所有方法都必须是未实现的。<br>e.接口是设计的结果 ，抽象类是重构的结果</p>
<h2 id="iii-使用方向不一样"><a href="#iii-使用方向不一样" class="headerlink" title="iii 使用方向不一样"></a>iii 使用方向不一样</h2><p>当你关注一个事物的本质的时候，用抽象类；当你关注一个操作的时候，用接口。  </p>
<p>注意：抽象类的功能要远超过接口，但是，定义抽象类的代价高。因为高级语言来说（从实际设计上来说也是）每个类只能继承一个类。在这个类中，你必须继承或编写出其所有子类的所有共性。虽然接口在功能上会弱化许多，但是它只是针对一个动作的描述。而且你可以在一个类中同时实现多个接口。在设计阶段会降低难度的。</p>
]]></content>
      <categories>
        <category>算法练习</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
        <tag>抽象</tag>
        <tag>接口</tag>
      </tags>
  </entry>
  <entry>
    <title>关于ios::sync_with_stdio(false)和cin.tie(nullptr)</title>
    <url>/2020/02/21/iosSyncWithStdio/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们可以发现C++高效率解决的源码中有很多以下代码段：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">auto</span> io_sync_off = []() &#123;</span><br><span class="line">    <span class="comment">// turn off sync  </span></span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);  </span><br><span class="line">    <span class="comment">// untie in/out streams  </span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;  </span><br><span class="line">&#125;();  </span><br></pre></td></tr></table></figure>
<p>那么ios::sync_with_stdio(false);和cin.tie(nullptr);到底咋C++效率问题上起什么作用呢？这篇文章简要说明其起源与用法。</p>
<a id="more"></a>

<h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><p>ios::sync_with_stdio(false)和cin.tie(nullptr)均来自Lambda表达式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">auto</span> io_sync_off = []() &#123;</span><br><span class="line">    ... ...</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<p>这个乍一看很像是函数，但是前后又是[]又是()的，是Lambda表达式即匿名函数。</p>
<blockquote>
<p>Lambda表达式是C++11引入的特性，是一种描述函数对象的机制，它的主要应用是描述某些具有简单行为的函数。Lambda也可以称为匿名函数。</p>
</blockquote>
<p>Lambda表达式完整的声明格式如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[capture <span class="built_in">list</span>] (params <span class="built_in">list</span>) <span class="keyword">mutable</span> exception-&gt; <span class="keyword">return</span> type &#123; </span><br><span class="line">	function body </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>各项具体含义如下:</p>
<ul>
<li>capture list：捕获外部变量列表  </li>
<li>params list：形参列表  </li>
<li>mutable指示符：用来说用是否可以修改捕获的变量  </li>
<li>exception：异常设定  </li>
<li>return type：返回类型  </li>
<li>function body：函数体  </li>
</ul>
<p>这里不再赘述其详细内容，总而言之等价为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">auto</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ... ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">auto</span> io_sync_off = function();</span><br></pre></td></tr></table></figure>
<h1 id="std-ios-sync-with-stdio-false"><a href="#std-ios-sync-with-stdio-false" class="headerlink" title="std::ios::sync_with_stdio(false)"></a>std::ios::sync_with_stdio(false)</h1><p>iostream默认是与stdio关联在一起的，以使两者同步，因此消耗了iostream不少性能。C++中的std :: cin和std :: cout为了兼容C，保证在代码中同时出现std :: cin和scanf或std :: cout和printf时输出不发生混乱，所以C++用一个流缓冲区来同步C的标准流。通过std :: ios_base :: sync_with_stdio函数设置为false后可以解除这种同步，让std :: cin和std :: cout不再经过缓冲区，iostream的性能就会提高了很多倍。因此，当解除同步之后，注意不要与scanf和printf混用以免出现问题。</p>
<h1 id="std-cin-tie-nullptr"><a href="#std-cin-tie-nullptr" class="headerlink" title="std::cin.tie(nullptr)"></a>std::cin.tie(nullptr)</h1><p>nullptr是c++11中的关键字，表示空指针</p>
<p>NULL是一个宏定义，在C和C++中的定义不同，c中NULL为（void*) 0，而C++中NULL为整数0<br>nullptr是一个字面值常量，类型为std::nullptr_t，空指针常数可以转换为任意类型的指针类型。在c++中（void*)不能转化为任意类型的指针，即 int *p=(void*)是错误的，但int *p=nullptr是正确的。原因是对于函数重载：若C++中 （void*）支持任意类型转换，函数重载时将出现问题。下列代码中fun(NULL)将不能判断调用哪个函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i)</span>  </span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1&quot;</span>;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> *p)</span>  </span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;2&quot;</span>;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	fun(<span class="literal">NULL</span>);        <span class="comment">//输出1，c++中NULL为整数0</span></span><br><span class="line">	fun(<span class="literal">nullptr</span>);     <span class="comment">//输出2，nullptr 为空指针常量。是指针类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>tie是将两个stream绑定的函数，空参数的话返回当前的输出流指针。</p>
<p>std :: cin默认是与std :: cout绑定的，所以每次操作的时候都要调用fflush，这样增加了IO的负担，通过tie(nullptr)来解除std :: cin和std :: cout之间的绑定，进一步加快执行效率。</p>
]]></content>
      <categories>
        <category>C++效率</category>
      </categories>
      <tags>
        <tag>C++效率</tag>
        <tag>Lambda表达式</tag>
        <tag>C++特性</tag>
      </tags>
  </entry>
  <entry>
    <title>差分约束与最短路</title>
    <url>/2020/02/16/DifferentialConstraintAndShortestCircuit/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在差分约束系统中：  </p>
<ul>
<li>如果求未知数的最大值，那么按小于等于建图后求最短路即可。（因为求最短路是由无穷向下约束得到，，所以得到的一定是最大值）  </li>
<li>如果求未知数的最小值，那么按小于等于建图后求最长路即可。  </li>
</ul>
<a id="more"></a>

<p>注意所有数据的关系，不能漏掉关系，还有与附加源点的关系。</p>
<p>如果是按大于等于建图：  </p>
<ul>
<li>求最大值，建图后求最长路；  </li>
<li>求最小值，建图后求最短路。  </li>
</ul>
<p>因为大于等于建图后，相当于未知数都 * -1了，所以求出结果后需要 * -1。 </p>
<p>可为何可以用最短路解决差分约束问题？在这里我记录自己的理解。p>
<h1 id="差分约束系统"><a href="#差分约束系统" class="headerlink" title="差分约束系统"></a>差分约束系统</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>如果一个系统由\(n\)个变量和\(m\)个约束条件组成，形成\(m\)个形如\(a_i-a_j \leq k \quad (i,j \in [1,n], k为常数)\)的不等式则称其为差分约束系统。</p>
<h2 id="引理"><a href="#引理" class="headerlink" title="引理"></a>引理</h2><p>设 $x=(x_1,x_2,\cdots ,x_n)$是差分约束系统 \(Ax \leq b\)的一个解，\(d\) 为任意常数，则 \(x+d=(x_1+d,x_2+d, \cdots ,x_n+d)\) 也是该系统 \(Ax \leq b\) 的一个解</p>
<p>而我们看到的算法解决的问题也便是：在确定一个未知数的情况下，求出这个不等式组中每个 \(a_i\) 的符合不等式的最大值。</p>
<h1 id="理解方式"><a href="#理解方式" class="headerlink" title="理解方式"></a>理解方式</h1><p>查阅资料了解到：由于不等式 \(x_i \leq x_j+k\) 和最短路里面的松弛条件：</p>
<pre><code>if(dis[v] &gt; dis[f]+edge[i].w)
    dis[v]=dis[f]+edge[i].w;</code></pre>
<p>颇有相像之处，因此我们可以使用最短路来解决这个问题，具体造作就是对于 \(x_i \leq x_j+k\) 这个不等式，需要从 \(x_j\) 向 \(x_i\) 连一条权值为 \(k\) 的边</p>
<p>蒟蒻实在无法理解这个看起来强词夺理的说法，于是用了另外一种方法理解：</p>
<h2 id="理解新角度"><a href="#理解新角度" class="headerlink" title="理解新角度"></a>理解新角度</h2><p>对于任意一个点 \(x_i\) ，假设存在以下约束关系：<br>$$<br>\begin{cases}<br>x_i \leq x_a+k_a \\<br>x_i \leq x_b+k_b \\<br>x_i \leq x_c+k_c \\<br>x_i \leq x_d+k_d \\<br>x_i \leq x_e+k_e<br>\end{cases}<br>$$<br>可以借助图形来理解</p>
<div align=center><img src="https://i.imgur.com/lnDdDCK.jpg" width=30% height=30%></div>

<p>显然，对于上述不等式组，我们手动求解的时候一定是同小取小，也即取 \(x_j+k_j (j=a,b,c,d,e)\) 的最小值<br>同样的，在最短路径算法中，当我们跑完一次最短路时，\(x_i\) 一定是 \(x_j+k_j (j=a,b,c,d,e)\) 的最小值，并且这个 \(x_i\) 就是<strong>满足这个约束条件的最大值</strong></p>
<h2 id="新角度2-0"><a href="#新角度2-0" class="headerlink" title="新角度2.0"></a>新角度2.0</h2><p>关于“ \(x_i\) 就是满足这个约束条件的最大值”还有另一种理解方式</p>
<p>我们给 \(x_i \leq x_j+k_j\) 赋予一个意义： \(x_i\) 比 \(x_j\) 最多多 \(k_j\)<br>那么对于任意一个 \(x_i\) ，都会有大于等于 0 个 \(x_j\) 来约束它。如果有一个 \(x_j=5\) 比 \(x_i\) 最多少 3 ，另一个 \(x_j=2\) 比 \(x_i\) 最多少 1。那么这个时候 \(x_i\) 能够取到的最大值就只有第二个 \(x_j\) 的值加上 1，也就是 3 了。</p>
<p>也就是说，通过分析 \(x_i\) 被 \(x_j\) 的约束情况可以知道这样建图最后求出来的究竟是最大还是最小了</p>
<p>最后发现，这不就是这些不等式组合最短路相似的地方了吗？看来大佬说得对啊！奈何蒟蒻太弱无法理解。</p>
<p>现在还有一个问题待解决：如何确定起点？<br>根据引理，如果我们得到了一组为负数的解，那么将这组解同时加上一个数也是这个系统的一组解。那么我们不妨设 \(x_0=0\)，然后对每个 \(x_i\) 多列一个不等式 \(x_i \leq x_0\) ，也即 \(x_i \leq x_0 + 0\)。因此，以 \(x_0\) 为起点跑一个单源最短路，就可以得到所有未知数的最大非正数解了，随后便可以任意处置。</p>
<h1 id="不等号倒转"><a href="#不等号倒转" class="headerlink" title="不等号倒转"></a>不等号倒转</h1><p>如果不等式中的不等号方向调转，也即变为 \(a_i-a_j \leq k\) 怎么办？</p>
<p>注意到不等式是可以反号的，于是可以转化上述不等式</p>
<p>当然，也可以选择不转化。进而用到上述的方法，可以判断出，如果用最长路算法，可以求出每个未知数在约束范围内的最小值。同样，如果设一个 \(x_0\)，那么求出来的解就是最小的非负整数解</p>
<p>当然，事情并不是永远这么一帆风顺。那当我们遇到这种不等式怎么办：<br>$$<br>\begin{cases}<br>a-b \geq k_1 \\<br>b-c \leq k_2 \\<br>c-d \leq k_3 \\<br>d=e \\<br>f-e \geq k_4 \\<br>f-a \leq k_5<br>\end{cases}<br>$$</p>
<p>首先，关于这个不等式 \(d=e\)，可以化为\(d \leq e\)，\(e \leq d\)<br>然后，虽然我们可以将这个不等式任意变号求最长或最短路，但是我们还是需要看问题。如果问题是求XXX的最大值，那么就应该去求最短路，繁殖就是求最长路。</p>
<h1 id="解的存在性"><a href="#解的存在性" class="headerlink" title="解的存在性"></a>解的存在性</h1><p>显然，不等式组不一定有解。有以下几种情况：  </p>
<ol>
<li>不等式有解；  </li>
<li>不等式中的式子相互矛盾，最后出现自己大于（小于）自身的情况；  </li>
<li>不等式中的某些未知数之间没有一定的约束关系。</li>
</ol>
<p>这里不再讨论第一种情况，对于第二种，在最长路上出现便是出现了正环；在最短路上出现就是出现了负环。第三种情况，如果以\(x\)为起点跑程序的话，和\(x\)没有约束关系的值的dis不会被更新。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="约束图"><a href="#约束图" class="headerlink" title="约束图"></a>约束图</h2><p>在一个差分约束系统 \(Ax \leq b\) 中，\(m \times n\) 的线性规划矩阵 \(A\) 可被看做是 \(n\) 顶点，\(m\) 条边的图的关联矩阵。对于 \(i=1,2, \cdots ,n\)，图中的每一个顶点 \(v_i\) 对应着 \(n\) 个未知量的一个 \(x_i\)。图中的每个有向边对应着关于两个未知量的 \(m\) 个不等式中的一个。</p>
<p>给定一个差分约束系统 \(Ax \leq b\)，相应的约束图是一个带权有向图 \(G=(V,E)\)，其中 \(V={v_0,v_1, \cdots ,v_n}\)，而且 \(E={(v_i,v_j) : x_j-x_i \leq b_k 是一个约束} \cup { (v_0,v_1),(v_0,v_2), \cdots ,(v_0,v_n)}\)。引入附加顶点 \(v_0\)是为了保证其他每个顶点均从 \(v_0\) 可达。因此，顶点集合 \(V\) 由对应于每个未知量 \(x_i\) 的顶点 \(v_i\) 和附加的顶点 \(v_0\) 组成。边的集合 \(E\) 由对应于每个差分约束条件的边与对应于每个未知量 \(x_i\) 的边 \((v_0,v_i)\) 构成。如果 \(x_j-x_i \leq b_k\) 是一个差分约束，则边 \((v_i,v_j)\) 的权 \(w(v_i,v_j)=b_k\)（注意 \(i\) 和 \(j\) 不能颠倒），从 \(v_0\) 出发的每条边的权值均为 0。</p>
<h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><p>给定一差分系统 \(Ax \leq b\)，设 \(G=(V,E)\) 为其相应的约束图。如果 \(G\) 不包含负权回路，那么 \(x=(d(v_0,v_1),d(_0,d_2), \cdots ,d(v_0,v_n))\) 是此系统的一可行解。</p>
<h2 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h2><p>由上述定理可知，可以采用Bellman-Ford算法对差分约束问题求解。因为在约束图中，从源点 \(v_0\) 到其他所有顶点间均存在边，因此约束图中任何负权回路均从 \(v_0\) 可达。如果Bellman-Ford算法返回True，则最短路径权给出了此系统的一个可行解；如果返回False，则差分约束系统无可行解。</p>
<p>关于 \(n\) 个未知量 \(m\) 个约束条件的一个差分约束系统产生出一个具有 \(n+1\) 个顶点和 \(n+m\) 条边的约束图。因此采用Bellman-Ford算法，可以再 \(O((n+1)(n+m))=O(n^2+nm)\) 时间内将系统解决。<strong>此外，可以用SPFA算法进行优化，复杂度为 \(O(km)\)，其中 \(k\) 为常数。</strong></p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>差分约束</tag>
        <tag>图论</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>CCF 201809-4 再卖菜</title>
    <url>/2020/02/16/CCF20180904/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>出自CCF 201809-4 再卖菜，本文提供了两种思路解决此问题。主要涉及差分约束的解决策略以及搜索 + 剪枝操作方案。</p>
<a id="more"></a>
<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>时间限制：    1.0s<br>内存限制：    256.0MB<br>问题描述：    </p>
<p>　　在一条街上有n个卖菜的商店，按1至n的顺序排成一排，这些商店都卖一种蔬菜。<br>　　第一天，每个商店都自己定了一个正整数的价格。店主们希望自己的菜价和其他商店的一致，第二天，每一家商店都会根据他自己和相邻商店的价格调整自己的价格。具体的，每家商店都会将第二天的菜价设置为自己和相邻商店第一天菜价的平均值（用去尾法取整）。<br>　　注意，编号为1的商店只有一个相邻的商店2，编号为n的商店只有一个相邻的商店n-1，其他编号为i的商店有两个相邻的商店i-1和i+1。<br>　　给定第二天各个商店的菜价，可能存在不同的符合要求的第一天的菜价，请找到符合要求的第一天菜价中字典序最小的一种。<br>　　字典序大小的定义：对于两个不同的价格序列(a1, a2, …, an)和(b1, b2, b3, …, bn)，若存在i(i&gt;=1), 使得ai&lt;bi，且对于所有j&lt;i，aj=bj，则认为第一个序列的字典序小于第二个序列。</p>
<p>输入格式</p>
<p>　　输入的第一行包含一个整数n，表示商店的数量。<br>　　第二行包含n个正整数，依次表示每个商店第二天的菜价。  </p>
<p>输出格式</p>
<p>　　输出一行，包含n个正整数，依次表示每个商店第一天的菜价。</p>
<p>样例输入</p>
<p>　　8<br>　　2 2 1 3 4 9 10 13  </p>
<p>样例输出</p>
<p>　　2 2 2 1 6 5 16 10  </p>
<p>数据规模和约定</p>
<p>　　对于30%的评测用例，2&lt;=n&lt;=5，第二天每个商店的菜价为不超过10的正整数；<br>　　对于60%的评测用例，2&lt;=n&lt;=20，第二天每个商店的菜价为不超过100的正整数；<br>　　对于所有评测用例，2&lt;=n&lt;=300，第二天每个商店的菜价为不超过100的正整数。<br>　　请注意，以上都是给的第二天菜价的范围，第一天菜价可能会超过此范围。  </p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这道题是非常经典的最短路解差分约束问题。首先，这道题要求字典序最小，我们考虑将所有的不等式都变成 \(x_i-x_j \geq k\)，反过来求最长路即可。</p>
<p>首先分析为什么差分约束可以用最短路求解：<br>因为只有二元一次的不等式建立的差分约束才能用最短路求解，因为图中的两个点是一一对应建立关系的。<br>举个例子，对于 \(x_j-x_i \leq k\)，这样的不等式非常像最短路的松弛操作。假设我们有两个点, \(i\)和\(j\)，在最短路中会有转移方程 <code>if(dist[j]-dist[i] &gt; k)  dist[j]=dist[i]+k</code> 。我们可以发现，当前\(i\)到\(j\)有一条边权值为k，这是相当于对\(j\)更新。原来的dist[j]不满足约束条件，也就是 dist[j]-dist[i]&gt;k，更新后一定满足约束条件，更新后的dist[j]就满足dist[j]-dist[i]&lt;=k，而dist[i]就相当于 \(x_i\)，也就是 \(x_j-x_i \leq k\)。而且这个更新后得到的序列是字典序最大的。为什么？很简单，因为当dist[j]-dist[i]&gt;k时让dist[j]-dist[i]&lt;=k，dist[j]可以更新到dist[i]+k-n，n可以取任意正整数都可以满足条件，但这里的更新就相当于n取零，使得dist[j]有最大值。</p>
<p>然而这道题要求字典序最小，我们只需要把所有不等式都变成 \(x_i-x_j \geq k\)，反过来求最长路即可，其原理同最短路。</p>
<p>设第二天的第 \(i\) 家店的价格是 \(a_i\)，那么第一天第 \(i\) 家店的价格为 \(x_i\)。我们已知 \(a_i\) 的序列，要求 \(x_i\) 的最小字典序。<br>首先，我们可以得到的关系有:  </p>
<p>$$\begin{cases}<br>a_1=(x_1+x_2)/2 \\<br>a_2=(x_1+x_2+x_3)/3 \\<br>a_3=(x_2+x_3+x_4)/3 \\<br>\cdots \cdots \\<br>a_{n-1}=(x_{n-2}+x_{n-1}+x_n)/3 \\<br>a_n=(x_{n-1}+x_n)/2 \<br>\end{cases}<br>$$<br>由于题意为去尾法取整，因此可以将上述关系进一步转化为：</p>
<p>$$\begin{cases}<br>a_1=(x_1+x_2)/2-0.5 \quad or \quad (x_1+x_2)/2 \\<br>a_2 =(x_1+x_2+x_3)/3-1/3 \quad or \quad (x_1+x_2+x_3)/3-2/3 \\<br>\quad or \quad (x_1+x_2+x_3)/3  \\<br>a_3 =(x_2+x_3+x_4)/3-1/3 \quad or \quad (x_2+x_3+x_4)/3-2/3 \\<br>\quad or \quad (x_2+x_3+x_4)/3  \\<br>\cdots \cdots \\<br>a_{n-1}=(x_{n-2}+x_{n-1}+x_n)/3-1/3 \quad or \quad (x_{n-2}+x_{n-1}+x_n)/3-2/3 \\<br>\quad or \quad (x_{n-2}+x_{n-1}+x_n)/3 \\<br>a_n=(x_{n-1}+x_n)/2-0.5 \quad or \quad (x_{n-1}+x_n)/2<br>\end{cases}<br>$$</p>
<p>进一步的，我们将此关系改写为不等式约束：</p>
<p>$$\begin{cases}<br>2 \cdot a_1 \leq x_1+x_2 \leq 2 \cdot a_1+1 \\<br>3 \cdot a_2 \leq x_1+x_2+x_3 \leq 3 \cdot a_2+2 \\<br>3 \cdot a_3 \leq x_2+x_3+x_4 \leq 3 \cdot a_3+2 \\<br>\cdots \cdots \\<br>3 \cdot a_{n-1} \leq x_{n-2}+x_{n-1}+x_n \leq 3 \cdot a_n+2 \\<br>2 \cdot a_n \leq x_{n-1}+x_n \leq 2 \cdot a_n+1<br>\end{cases}<br>$$<br>接下来分析建图问题：</p>
<p>首先这里涉及到多项式之和，但是差分约束系统是二元一次不等式，所以我们需要对其进行重构造。这里设 \(s_i\) 为0到 \(i\)的 \(x\) 序列之和，借此中间变量我们可以将不等式转化为：</p>
<p>$$\begin{cases}<br>2 \cdot a_1 \leq s_2-s_0 \leq 2 \cdot a_1+1 \\<br>3 \cdot a_2 \leq s_3-s_0 \leq 3 \cdot a_2+2 \\<br>3 \cdot a_3 \leq s_4-s_1 \leq 3 \cdot a_3+2 \\<br>\cdots \cdots \\<br>3 \cdot a_{n-1} \leq s_n-s_{n-3} \leq 3 \cdot a_n+2 \\<br>2 \cdot a_n \leq s_n-s_{n-2} \leq 2 \cdot a_n+1 \<br>s_1-s_0 \geq 1 \<br>s_2-s_1 \geq 1 \<br>\cdots \cdots \\<br>s_n-s_{n-1} \geq 1<br>\end{cases}<br>$$</p>
<p>这里的SPFA与原始的SPFA有所区别，在SPFA之前将所有节点加入队列，并且置dist为0，因为差分约束系统不保证图的连通性，所以需要事先建立一个虚拟节点作为源点，向所有边连接一条权值为0的有向边，以上的操作便是人工省略了虚拟源点的步骤。</p>
<h1 id="SPFA实现代码"><a href="#SPFA实现代码" class="headerlink" title="SPFA实现代码"></a>SPFA实现代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, x, n) for(int i = x; i &lt; n; i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">300</span> + <span class="number">6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">2000</span> + <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> n, cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="keyword">int</span> head[MAXN];</span><br><span class="line"><span class="keyword">int</span> vis[MAXN], vis[MAXN], inq[MAXN], dist[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="comment">//采用链式前向星的结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> to;</span><br><span class="line">	<span class="keyword">int</span> next;</span><br><span class="line">	<span class="keyword">int</span> w;</span><br><span class="line">&#125;edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">	edge[cur].to = y;</span><br><span class="line">	edge[cur].next = head[x];</span><br><span class="line">	edge[cur].w = w;</span><br><span class="line">	head[x] = cur++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qq;</span><br><span class="line">	rep(i, <span class="number">0</span>, n + <span class="number">1</span>) &#123;</span><br><span class="line">		qq.push(i);</span><br><span class="line">		vis[i] = <span class="number">1</span>;</span><br><span class="line">		dist[i] = <span class="number">0</span>;</span><br><span class="line">		inq[i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!qq.empty()) &#123;</span><br><span class="line">		<span class="keyword">int</span> x = qq.front();</span><br><span class="line">		qq.pop();</span><br><span class="line">		inq[x]++;	<span class="comment">//x进队的次数，超过n遍证明有负环</span></span><br><span class="line">		vis[x] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (inq[x] &gt; n) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No answer&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i != <span class="number">-1</span>; i = edge[i].next) &#123;</span><br><span class="line">			<span class="keyword">int</span> nx = edge[i].to;</span><br><span class="line">			<span class="keyword">if</span> (dist[nx] &lt; dist[x] + edge[i].w) &#123;</span><br><span class="line">				dist[nx] = dist[x] + edge[i].w;</span><br><span class="line">				<span class="keyword">if</span> (!vis[nx]) &#123;		<span class="comment">//如果没有拜访过</span></span><br><span class="line">					vis[nx] = <span class="number">1</span>;</span><br><span class="line">					qq.push(nx);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	rep(i, <span class="number">1</span>, n + <span class="number">1</span>)  <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">	rep(i, <span class="number">0</span>, n - <span class="number">2</span>) &#123;</span><br><span class="line">		addEdge(i + <span class="number">3</span>, i, -(a[i + <span class="number">2</span>] * <span class="number">3</span> + <span class="number">2</span>)); </span><br><span class="line">		addEdge(i, i + <span class="number">3</span>, a[i + <span class="number">2</span>] * <span class="number">3</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	addEdge(<span class="number">2</span>, <span class="number">0</span>, -(a[<span class="number">1</span>] * <span class="number">2</span> + <span class="number">1</span>));		<span class="comment">//对开头两个单独处理</span></span><br><span class="line">	addEdge(<span class="number">0</span>, <span class="number">2</span>, a[<span class="number">1</span>] * <span class="number">2</span>);</span><br><span class="line">	addEdge(n, n - <span class="number">2</span>, -(a[n] * <span class="number">2</span> + <span class="number">1</span>)); <span class="comment">//对结尾两个单独处理</span></span><br><span class="line">	addEdge(n - <span class="number">2</span>, n, a[n] * <span class="number">2</span>);</span><br><span class="line">	rep(i, <span class="number">1</span>, n + <span class="number">1</span>) </span><br><span class="line">		addEdge(i - <span class="number">1</span>, i, <span class="number">1</span>);	<span class="comment">//每个数都要大于等于1</span></span><br><span class="line">	SPFA();</span><br><span class="line">	a[<span class="number">1</span>] = dist[<span class="number">1</span>];</span><br><span class="line">	rep(i, <span class="number">2</span>, n + <span class="number">1</span>)  </span><br><span class="line">		a[i] = dist[i] - dist[i - <span class="number">1</span>];</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a[<span class="number">1</span>];</span><br><span class="line">	rep(i, <span class="number">2</span>, n + <span class="number">1</span>)  </span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于main函数中<code>ios::sync_with_stdio(false)</code>的相关用法简介，可见 <a href="/2020/02/21/iosSyncWithStdio/" title="关于ios::sync_with_stdio(false)和cin.tie(nullptr)">关于ios::sync_with_stdio(false)和cin.tie(nullptr)</a> </p>
<h1 id="思路（搜索-剪枝）"><a href="#思路（搜索-剪枝）" class="headerlink" title="思路（搜索+剪枝）"></a>思路（搜索+剪枝）</h1><h2 id="剪枝1"><a href="#剪枝1" class="headerlink" title="剪枝1"></a>剪枝1</h2><p>vis[][][]数组记录在到达第s个位置时（此时b[s],b[s-1]均已知），根据关系推知b[s+1] = 3*a[s]-b[s]-b[s-1]+i（因为题目给的是整数除法，其中 \(i \in (0 \cdots 2)\)，这样，当到达当前状态时（状态 : (s,b[s-1],b[s])），如果发现已经访问过了，说明这种状态不可能满足条件，否则程序已经找到满意的结果，可以直接输出了，这样可以直接剪枝掉之后的所有步骤，效率大大增加。</p>
<h2 id="剪枝2"><a href="#剪枝2" class="headerlink" title="剪枝2"></a>剪枝2</h2><p>用flag标记 是否已经找到解，如果找到，之后的所有未完成的搜索，直接返回。</p>
<p>注意：第一个位置与最后的位置单独处理。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,j,k) for(int i=j;i&lt;k;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="keyword">int</span> b[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN][MAXN][MAXN];</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> p1, <span class="keyword">int</span> p2)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (vis[s][p1][p2] || flag) <span class="keyword">return</span>;</span><br><span class="line">	vis[s][p1][p2] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (s == n - <span class="number">1</span>) &#123;</span><br><span class="line">		rep(i, <span class="number">0</span>, <span class="number">3</span>) &#123;<span class="comment">//单独处理最后一个</span></span><br><span class="line">			<span class="keyword">if</span> ((b[n] = (<span class="number">3</span> * a[s] - p1 - p2 + i)) &gt; <span class="number">0</span> &amp;&amp; (b[n - <span class="number">1</span>] + b[n]) / <span class="number">2</span> == a[n]) &#123;</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">				rep(i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	rep(i, <span class="number">0</span>, <span class="number">3</span>) &#123;</span><br><span class="line">		b[s + <span class="number">1</span>] = <span class="number">3</span> * a[s] - p1 - p2 + i;<span class="comment">//递推下一个位置的b[s+1]</span></span><br><span class="line">		<span class="keyword">if</span> (b[s + <span class="number">1</span>] &gt; <span class="number">0</span>) &#123; <span class="comment">// 可能有解</span></span><br><span class="line">			dfs(s + <span class="number">1</span>, b[s], b[s + <span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	rep(i, <span class="number">1</span>, n + <span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	rep(i, <span class="number">1</span>, <span class="number">2</span> * a[<span class="number">1</span>] + <span class="number">1</span>) &#123;<span class="comment">//最大只能是 2*a[1]</span></span><br><span class="line">		b[<span class="number">1</span>] = i; b[<span class="number">2</span>] = a[<span class="number">1</span>] * <span class="number">2</span> - b[<span class="number">1</span>];</span><br><span class="line">		dfs(<span class="number">2</span>, b[<span class="number">1</span>], b[<span class="number">2</span>]);</span><br><span class="line">		b[<span class="number">1</span>] = i; b[<span class="number">2</span>] = a[<span class="number">1</span>] * <span class="number">2</span> - b[<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">		dfs(<span class="number">2</span>, b[<span class="number">1</span>], b[<span class="number">2</span>]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法练习</category>
      </categories>
      <tags>
        <tag>CCF</tag>
        <tag>算法练习</tag>
        <tag>SPFA</tag>
        <tag>差分约束</tag>
        <tag>搜索剪枝</tag>
      </tags>
  </entry>
  <entry>
    <title>前向星与链式前向星</title>
    <url>/2020/02/13/starChain/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前向星"><a href="#前向星" class="headerlink" title="前向星"></a>前向星</h1><p>前向星是以存储边的方式来存储图，先将边读入并存储在连续的数组中，然后按照边的起点进行排序，这样数组中起点相同的边就能够在数组中进行连续访问了。<br>其有点在于实现简单，易于理解。缺点是在读入边后需要对所有边进行一次排序，带来了时间开销，实用性也较差。因此只适合离线算法。  </p>
<h1 id="链式前向星（实质为数组模拟链表）"><a href="#链式前向星（实质为数组模拟链表）" class="headerlink" title="链式前向星（实质为数组模拟链表）"></a>链式前向星（实质为数组模拟链表）</h1><p>链式前向星和邻接表类似，也是链式结构的结合，每个节点i均有一个链表，此链表内的数据均为以节点i为起点的所有边的集合（对比邻接表存的是顶点的集合），边的表示为一个四元组(to,w,next)，其中to代表该条边的有向点对(w,v)，w代表边上的权值，next指向下一条边。<br>调用的时候只要通过head[i]就能访问到由节点i出发的第一条边的编号，通过编号到edge数组进行索引可以得到边的具体信息，然后根据这条边的next域可以得到第二条边的编号，以此类推，直到next域为INF（这里的INF即head数组初始化的值，一般取-1即可）</p>
<a id="more"></a>

<h1 id="链式前向星基本原理"><a href="#链式前向星基本原理" class="headerlink" title="链式前向星基本原理"></a>链式前向星基本原理</h1><p>链式前向星是以边为主的存图方式，因此我们需要利用结构体来规划边，这会使图变得更加清晰。  </p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>这里注意下面两个必要的数组： </p>
<pre><code>Edge edge[edgenumber];    //结构体数组edge存边，edge[i]表示编号为i的边  
int head[vexnumber];    //head[i]存以节点i为起点的第一条边（在edge中的编号）</code></pre>
<p>这里实现的是</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> next;   <span class="comment">//下一条边的存储下标(默认0) </span></span><br><span class="line">	<span class="keyword">int</span> to;     <span class="comment">//某个节点u的邻接点</span></span><br><span class="line">	<span class="keyword">int</span> w;      <span class="comment">//权值 </span></span><br><span class="line">&#125;; </span><br><span class="line">Edge edge[<span class="number">500010</span>];</span><br></pre></td></tr></table></figure>
<h3 id="Edge结构体不用记录顶点u"><a href="#Edge结构体不用记录顶点u" class="headerlink" title="Edge结构体不用记录顶点u"></a>Edge结构体不用记录顶点u</h3><p>如上所述，前向星存储的是每个顶点的邻接边。可以知道，在每个顶点后面连接一个链表，不过链表的节点表示的是邻接边而非邻接点。而用数组实现这个链表，就是前向星。<br>无论采用哪种结构存图，都应该是每读入一条边的信息，就更新一次图的结构。读入一条边u–&gt;v，那么我们在存储图的时候，对于顶点u,该边就是u的一条邻接边，我们就把这条边“挂”在u后面即可。等读入所有的边，建图完成。<br>顶点u后“挂”的边就全是顶点u的邻接边，因此只需要记录这些邻接边的另一个顶点，而不需要存储顶点u。<br>由于边是按顺序一条一条读入，我们就很自然的想到对边进行编号，然后将这些边读入edge数组。对于Edge结构体中的next，其实就相当于链表中的next指针。不过此处的next是int型变量，存储的是下一条邻接边的编号。  </p>
<h3 id="head数组的用处"><a href="#head数组的用处" class="headerlink" title="head数组的用处"></a>head数组的用处</h3><p>head数组相当于邻接链表中的表头数据，head[u]就表示顶点u的某一条邻接边（其编号）。根据这条边的next，就能找出顶点u所有的邻接边。  </p>
<h2 id="增边"><a href="#增边" class="headerlink" title="增边"></a>增边</h2><p>若以点i为起点的边新增了一条，在edge中的下标为j。那么edge[j].next = head[i]，此后head[i] = j<br>即每次新加的边作为第一条边，最后倒序遍历  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;  <span class="comment">//起点u, 终点v, 权值w </span></span><br><span class="line">	<span class="comment">//cnt为边的计数，从1开始计 </span></span><br><span class="line">	edge[++cnt].next = head[u];</span><br><span class="line">	edge[cnt].w = w;</span><br><span class="line">	edge[cnt].to = v;</span><br><span class="line">	head[u] = cnt;    <span class="comment">//第一条边为当前边 </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>遍历以st为起点的边<br>    for(int i = head[st]; i != -1; i = edge[i].next)<br>i为开始的第一条边，每次指向下一条，以初始化的-1为结束标志  </p>
<h1 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 500000 + 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000 + 10</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> next;   <span class="comment">//下一条边的存储下标 </span></span><br><span class="line">	<span class="keyword">int</span> to;     <span class="comment">//这条边的终点 </span></span><br><span class="line">	<span class="keyword">int</span> w;      <span class="comment">//权值 </span></span><br><span class="line">&#125;; </span><br><span class="line">Edge edge[MAXM];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, m, cnt;</span><br><span class="line"><span class="keyword">int</span> head[MAXN];  <span class="comment">//head[i]表示以i为起点的第一条边 </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;  <span class="comment">//起点u, 终点v, 权值w </span></span><br><span class="line">	edge[++cnt].next = head[u];</span><br><span class="line">	edge[cnt].w = w;</span><br><span class="line">	edge[cnt].to = v;</span><br><span class="line">	head[u] = cnt;    <span class="comment">//第一条边为当前边 </span></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> st;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Begin with[Please Input]: \n&quot;</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; st;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = head[st]; i != <span class="number">0</span>; i = edge[i].next) &#123;</span><br><span class="line">		<span class="comment">//i开始为第一条边，每次指向下一条(以0为结束标志)若下标从0开始，next应初始化-1 </span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Start: &quot;</span> &lt;&lt; st &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;End: &quot;</span> &lt;&lt; edge[i].to &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;W: &quot;</span> &lt;&lt; edge[i].w &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s, t, w;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t &gt;&gt; w;</span><br><span class="line">		add(s, t, w);</span><br><span class="line">	&#125;</span><br><span class="line">	print(); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="链式前向星实现SPFA"><a href="#链式前向星实现SPFA" class="headerlink" title="链式前向星实现SPFA"></a>链式前向星实现SPFA</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 50000 + 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000 + 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> next;</span><br><span class="line">	<span class="keyword">int</span> to;</span><br><span class="line">	<span class="keyword">int</span> w;</span><br><span class="line">&#125;;</span><br><span class="line">Edge edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, st, cnt;</span><br><span class="line"><span class="keyword">int</span> head[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[MAXN];</span><br><span class="line"><span class="keyword">bool</span> inq[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> c;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar()) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">		sign = <span class="literal">true</span>;</span><br><span class="line">		c = getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		ans = (ans &lt;&lt; <span class="number">3</span>) + (ans &lt;&lt; <span class="number">1</span>) + (c ^ <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125; <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c = getchar()));</span><br><span class="line">	<span class="keyword">return</span> sign ? -ans : ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">	edge[++cnt].next = head[u];</span><br><span class="line">	edge[cnt].to = v;</span><br><span class="line">	edge[cnt].w = w;</span><br><span class="line">	head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x, y, w;</span><br><span class="line">	n = Read();</span><br><span class="line">	m = Read();</span><br><span class="line">	st = Read();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">		x = Read();</span><br><span class="line">		y = Read();</span><br><span class="line">		w = Read();</span><br><span class="line">		add(x, y, w);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	d[x] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">		d[i] = INF;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">	q.push(x);</span><br><span class="line">	inq[x] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">		<span class="keyword">int</span> k = q.front;</span><br><span class="line">		q.pop();</span><br><span class="line">		inq[k] = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[k]; i != <span class="number">0</span>; i = edge[i].next) &#123;</span><br><span class="line">			<span class="keyword">int</span> j = edge[i].to;</span><br><span class="line">			<span class="keyword">if</span> (d[j] &gt; d[k] + edge[i].w) &#123;</span><br><span class="line">				d[j] = d[k] + edge[i].w;</span><br><span class="line">				<span class="keyword">if</span> (!inq[j]) &#123;</span><br><span class="line">					q.push(j);</span><br><span class="line">					inq[j] = <span class="literal">true</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, d[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	read();</span><br><span class="line">	SPFA(st);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于SPFA算法的详解可见<a href="/2020/02/13/intro-SPFA/" title="SPFA算法详解">SPFA算法详解</a> </p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>SPFA算法详解</title>
    <url>/2020/02/13/intro-SPFA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SPFA算法介绍"><a href="#SPFA算法介绍" class="headerlink" title="SPFA算法介绍"></a>SPFA算法介绍</h1><p>SPFA算法全程为，Shortest Path Faster Algorithm，为Bellman-Ford算法的队列优化算分的别称，其最坏情况的复杂度与Bellman-Ford相同，为O(VE)<br>与BFS算法比较，复杂度相对稳定。但在稠密图中复杂度比迪杰斯特拉算法差。<br>对SPFA的一个很直观的理解就是由无权图的BFS转化而来。在无权图中，BFS首先到达的顶点所经历的路径一定是最短路(也就是经过的最少顶点数)，所以此时利用数组记录节点访问可以使每个顶点只进队一次。但在带权图中，最先到达的顶点所计算出来的路径不一定是最短路。一个解决方法是放弃数组，此时所需时间自然就是指数级的。所以我们不能放弃数组，而是在处理一个已经在队列中且当前所得的路径比原来更好的顶点时，直接更新最优解。  </p>
<a id="more"></a>

<h1 id="算法优点"><a href="#算法优点" class="headerlink" title="算法优点"></a>算法优点</h1><ol>
<li>时间复杂度低于普通Dijkstra以及Ford（一般情况下）</li>
<li>能够计算负权图问题</li>
<li>能够判断是否有负环</li>
</ol>
<h1 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h1><p>我们用数组记录每个节点的最短路径估计值，用邻接表来存储图G。<br>这里采取的方式是动态逼近法：<br>　　1. 设立一个先进先出的队列用来存储待优化的节点。<br>　　2. 优化时每次取出队首节点u,并且用u点当前的最短路径估计值对离开u点所指向的节点v进行松弛操作，如果v点的最短路径估计值有所调整，且v点不在当前的队列中，就将v点放入队尾<br>　　3. 这样不断从队列中取出节点来进行松弛操作，直至队列空为止<br>事实上，如果一个节点被放入队列n次，那么即证明存在负环。</p>
<h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><ol>
<li>存入图。可以使用<a href="/2020/02/13/starChain/" title="链式前向星">链式前向星</a>或者vector；</li>
<li>开一个队列，先将开始的节点放入；</li>
<li>每次从队列中取出一个节点x，遍历与x相通的y节点，查询比对 dis[y] 和 dis[x]+edge[i].w<br>　　如果dis[y] &lt; dis[x]+edge[i].w，说明需要更新操作。<br>　　　　1) 存入最短路<br>　　　　2) 由于改变了原有的长度，所以需要往后更新，与这个节点项链的最短路（即：判断是否存在队列，在就不需要重复，不在就加入队列，等待更新）<br>　　　　3) 在这期间可以记录这个节点的仅对次数，判断是否存在负环（如果某个点进入队列的次数超过n即存在）  </li>
<li>直到队空。</li>
</ol>
<h1 id="模拟过程"><a href="#模拟过程" class="headerlink" title="模拟过程"></a>模拟过程</h1><div align=center><img src="https://i.imgur.com/V2L4gUM.png"></div>

<p>首先建立起始点a到其余各点的最短路径表格  </p>
<p><img src="https://i.imgur.com/cXnijXy.jpg"></p>
<p>首先源点a入队，当队列非空时：  </p>
<ul>
<li>队首元素（a）出队，对以a为起始点的所有边的终点依次进行松弛操作（此处有b，c，d三个点），此时路径表格状态为：  <div align=center><img src="https://i.imgur.com/dvKLisF.jpg"></div>

</li>
</ul>
<p>在松弛时三个点的路径估计值变小了，而这些点队列中都没有出现，这些点需要入队，此时，队列中新入队了三个节点b，c，d（表格中30应为∞，编辑错误）</p>
<ul>
<li>队首元素b点出队，对以b为起始点的所有终点依次进行松弛操作（此时只有e点），此时路径表格状态为：  <div align=center><img src="https://i.imgur.com/0OxHknG.jpg"></div>

</li>
</ul>
<p>在最短路径中，e的最短路径估值也变小了，e在队列中不存在，因此e也要入队，此时队列中的元素为c，d，e</p>
<ul>
<li>队首元素c点出队，对以c为起始点的所有边的终点依次进行松弛操作（此处有e,f两个点），此时路径表格状态为：  <div align=center><img src="https://i.imgur.com/8in2A1V.jpg"></div>

</li>
</ul>
<p>在最短路径表中，e，f的最短路径估值变小了，e在队列中存在，f不存在。因此e不用入队了，f要入队，此时队列中的元素为d，e，f</p>
<ul>
<li>队首元素d点出队，对以d为起始点的所有边的终点依次进行松弛操作（此处只有g这个点），此时路径表格状态为：  <div align=center><img src="https://i.imgur.com/ft0AfIb.jpg"></div>

</li>
</ul>
<p>在最短路径表中，g的最短路径估值没有变小（松弛不成功），没有新结点入队，队列中元素为f，g</p>
<ul>
<li>队首元素f点出队，对以f为起始点的所有边的终点依次进行松弛操作（此处有d，e，g三个点），此时路径表格状态为：  <div align=center><img src="https://i.imgur.com/CiU4zsB.jpg"></div>

</li>
</ul>
<p>在最短路径表中，e，g的最短路径估值又变小，队列中无e点，e入队，队列中存在g这个点，g不用入队，此时队列中元素为g，e</p>
<ul>
<li>队首元素g点出队，对以g为起始点的所有边的终点依次进行松弛操作（此处只有b点），此时路径表格状态为：  <div align=center><img src="https://i.imgur.com/Zd63QDN.jpg></div>

</li>
</ul>
<p>在最短路径表中，b的最短路径估值又变小，队列中无b点，b入队，此时队列中元素为e，b队首元素e点出队，对以e为起始点的所有边的终点依次进行松弛操作（此处只有g这个点），此时路径表格状态为：  </p>
<div align=center><img src="https://i.imgur.com/mjSGsIN.jpg"></div>

<p>在最短路径表中，g的最短路径估值没变化（松弛不成功），此时队列中元素为b</p>
<ul>
<li>队首元素b点出队，对以b为起始点的所有边的终点依次进行松弛操作（此处只有e这个点），此时路径表格状态为：  <div align=center><img src="https://i.imgur.com/EdyYHof.jpg"></div>

</li>
</ul>
<p>在最短路径表中，e的最短路径估值没变化（松弛不成功），此时队列为空了</p>
<p>最终a到g的最短路径为 14</p>
<h1 id="SPFA核心代码"><a href="#SPFA核心代码" class="headerlink" title="SPFA核心代码"></a>SPFA核心代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">	<span class="built_in">memset</span>(vis, inf, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">	<span class="built_in">memset</span>(ven, <span class="number">0</span>, <span class="keyword">sizeof</span>(ven));</span><br><span class="line">	<span class="built_in">memset</span>(nums, <span class="number">0</span>, <span class="keyword">sizeof</span>(nums));</span><br><span class="line">	vis[s] = <span class="number">0</span>;			<span class="comment">//初始化距离 </span></span><br><span class="line">	ven[s] = <span class="number">1</span>, nums[s]++;	<span class="comment">//标记s节点在队列，队列次数+1 </span></span><br><span class="line">	q.push(s);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">		<span class="keyword">int</span> x = q.front();</span><br><span class="line">		q.pop();		<span class="comment">//出队 </span></span><br><span class="line">		ven[x] = <span class="number">0</span>;		<span class="comment">//标记不在队列 </span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = pre[x]; ~i; i = a[i].next) &#123;	<span class="comment">//遍历与x节点连通的点 </span></span><br><span class="line">		</span><br><span class="line">			<span class="keyword">int</span> y = a[i].y;</span><br><span class="line">			<span class="keyword">if</span> (vis[y] &gt; vis[x] + a[i].time) &#123; <span class="comment">//更新 </span></span><br><span class="line">			</span><br><span class="line">				vis[y] = vis[x] + a[i].time;</span><br><span class="line">				<span class="keyword">if</span> (!ven[y]) &#123;</span><br><span class="line">					<span class="comment">//由于更新了节点，所以后续以这个为基础的最短路，也要更新下</span></span><br><span class="line">					<span class="comment">//所以如果在队列就不用加入，不在的话加入更新后续节点 </span></span><br><span class="line">					q.push(y);</span><br><span class="line">					ven[y] = <span class="number">1</span>;	<span class="comment">//标记这个节点在队列中 </span></span><br><span class="line">					nums[y]++;	<span class="comment">//记录加入次数 </span></span><br><span class="line">					<span class="keyword">if</span> (nums[y] &gt; n)	<span class="comment">//加入超过n次说明存在负圈，直接返回 </span></span><br><span class="line">						<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="关于差分约束和最短路"><a href="#关于差分约束和最短路" class="headerlink" title="关于差分约束和最短路"></a>关于差分约束和最短路</h1><p>SPFA通常用于计算最短路来解决差分约束问题，关于差分约束和最短路可见<a href="/2020/02/16/DifferentialConstraintAndShortestCircuit/" title="差分约束与最短路">差分约束与最短路</a> </p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><a href="/2020/02/16/CCF20180904/" title="CCF 201809-4 再卖菜">CCF 201809-4 再卖菜</a>



]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>最短路径优化</tag>
        <tag>负环解决</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫入门</title>
    <url>/2020/02/02/Python-crawlers-beginning/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在初步掌握Python基本语法后，这里使用Py进行一个简单的爬取图片应用作为入门训练。<br>首先爬虫的基本步骤可以概括为：</p>
<ul>
<li>输入域名 -&gt; 下载源代码 -&gt; 分析图片路径 -&gt; 下载图片</li>
</ul>
<p>这里我们选取<a href="http://www.meizitu.com/a/pure.html">http://www.meizitu.com/a/pure.html</a>作为爬取的目标网站。因为这个网站好分析，爬取简单。</p>
<a id="more"></a>
<h1 id="分析页面"><a href="#分析页面" class="headerlink" title="分析页面"></a>分析页面</h1><p><img src="https://s2.ax1x.com/2020/02/02/1tR0mD.jpg" alt="1tR0mD.jpg"></p>
<p>爬虫最重要的一点，便是寻找到分页地点。因为分页处代表可能存在规律可循。建立在既有规律的基础上，我们可以更智能、准确、方便得爬取到相关数据</p>
<p>以本网站为例，我们可从上述图片中发现分页：<br><img src="https://s2.ax1x.com/2020/02/02/1tTWwV.jpg" alt="1tTWwV.jpg"></p>
<p>如图所示，使用浏览器的开发者工具可发现分页规律：</p>
<pre><code>http://www.meizitu.com/a/pure_1.html
http://www.meizitu.com/a/pure_2.html
http://www.meizitu.com/a/pure_3.html
http://www.meizitu.com/a/pure_4.html</code></pre>
<p>接下来我们使用Python实现这部分（采用面向对象的思想）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">all_urls = []   <span class="comment">#我们拼接好的图片集和列表路径</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span>():</span></span><br><span class="line">    <span class="comment">#构造函数，初始化数据使用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, target_url, headers</span>):</span></span><br><span class="line">        self.target_url =  target_url</span><br><span class="line">        self.headers = headers</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取所有的想要爬取的URL</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getUrls</span>(<span class="params">self, start_page, page_num</span>):</span></span><br><span class="line">        <span class="keyword">global</span> all_urls</span><br><span class="line">        <span class="comment">#循环得到URL</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_page, page_num + <span class="number">1</span>):</span><br><span class="line">            url = self.target_url % i   <span class="comment">#注意这里并非取余操作，而是格式化字符串</span></span><br><span class="line">            all_urls.append(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="comment"># 这部分在浏览器中输入 about:version查看</span></span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.62 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;www.meizitu.com&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    target_url = <span class="string">&#x27;http://www.meizitu.com/a/pure_%d.html&#x27;</span>    <span class="comment">#图片集和列表规则</span></span><br><span class="line"></span><br><span class="line">    spider = Spider(target_url, headers)</span><br><span class="line">    spider.getUrls(<span class="number">1</span>,<span class="number">16</span>)</span><br><span class="line">    print(all_urls)</span><br></pre></td></tr></table></figure>
<p>以上的代码主要有以下几个要点：</p>
<ul>
<li>声明了一个<code>class Spider()</code>类，并使用<code>def __init__</code>声明一个构造函数  </li>
<li>拼接URL，我们可以选择很多方法，这里采用最简单直接的字符串拼接方法  </li>
<li>注意上述代码中有一个全局变量<code>all_urls</code>，用来存储我们的所有分页的URL  </li>
</ul>
<h1 id="爬虫核心"><a href="#爬虫核心" class="headerlink" title="爬虫核心"></a>爬虫核心</h1><p>我们需要分析页面中的逻辑。首先打开<a href="http://www.meizitu.com/a/pure_1.html">http://www.meizitu.com/a/pure_1.html</a>，右键审查但愿元素：<br><img src="https://s2.ax1x.com/2020/02/03/1UCMVS.jpg" alt="1UCMVS.jpg"><br><img src="https://s2.ax1x.com/2020/02/03/1UiY7T.jpg" alt="1UiY7T.jpg"><br>上图红色框内的链接即为所需要的链接<br>点击图片后，可发现进入图片详情页面，发现尽然是套图，那么现在的问题在于：<br>首先，我们需要在 <a href="http://www.meizitu.com/a/pure_1.html">http://www.meizitu.com/a/pure_1.html</a> 这种页面中爬取所有的 <a href="http://www.meizitu.com/a/5585.html">http://www.meizitu.com/a/5585.html</a> 这种地址<br>这里我们采用多线程的方案进行爬取，此外还涉及到名为“观察者模式”的设计模式。<br>首先引入三个模块，分别为多线程、正则表达式、时间模块。并新增一个全局的变量，由于是多线程操作，这里需要引入线程锁：</p>
<pre><code>import threading    #多线程模块
import re            #正则表达式模块
import time            #时间模块

all_img_urls = []    #图片列表页面的数组
g_lock = threading.Lock()    #初始化一个锁</code></pre>
<p>下面声明一个生产者的类，用来不断获取详情页地址，然后添加到<code>all_img_urls</code>这个全局变量中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生产者，负责从每个页面提取图片列表链接</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span>   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="comment"># 这部分在浏览器中输入 about:version查看</span></span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.62 Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;www.meizitu.com&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">global</span> all_urls</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(all_urls) &gt; <span class="number">0</span> :</span><br><span class="line">            g_lock.acquire()  <span class="comment">#在访问all_urls的时候，需要使用锁机制</span></span><br><span class="line">            page_url = all_urls.pop()   <span class="comment">#通过pop方法移除最后一个元素，并且返回该值</span></span><br><span class="line">            </span><br><span class="line">            g_lock.release() <span class="comment">#使用完成之后及时把锁给释放，方便其他线程使用</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                print(<span class="string">&quot;分析&quot;</span>+page_url)   </span><br><span class="line">                response = requests.get(page_url , headers = headers,timeout=<span class="number">3</span>)</span><br><span class="line">                all_pic_link = re.findall(<span class="string">&#x27;&lt;a target=\&#x27;_blank\&#x27; href=&quot;(.*?)&quot;&gt;&#x27;</span>,response.text,re.S)   </span><br><span class="line">                <span class="keyword">global</span> all_img_urls</span><br><span class="line">                g_lock.acquire()   <span class="comment">#这里还有一个锁</span></span><br><span class="line">                all_img_urls += all_pic_link   <span class="comment">#这个地方注意数组的拼接，没有用append直接用的+=也算是python的一个新语法吧</span></span><br><span class="line">                print(all_img_urls)</span><br><span class="line">                g_lock.release()   <span class="comment">#释放锁</span></span><br><span class="line">                time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<ul>
<li>上述代码从threading.Thread中继承了一个子类  </li>
<li>线程锁：在上述代码中，当我们操作<code>all_urls.pop()</code>时，我们不希望其他线程对其进行同时操作，否则可能发生意外。所以我们使用<code>g_lock.acquire()</code>锁定资源，然后使用完成之后，记住一定要立即释放<code>g_lock.release()</code>，否则此资源被一直占用，程序无法继续进行。  </li>
<li>匹配网页中的URL，这里使用正则表达式，后面我们会使用其它方法进行匹配。<br><code>re.findall()</code>方法是获取所有匹配到的内容  </li>
<li>这里使用<code>try: except</code>包装可能出现异常的代码</li>
</ul>
<p>如果上述代码均没有出现问题，那么我们可以在程序的入口处编写以下代码来执行程序</p>
<pre><code>for x in range(2):
    t = Producer()
    t.start()</code></pre>
<p>因为我们的Producer继承自threading.Thread类。所以我们必须实现的一个方法是<code>def run</code>（已在上述的代码中呈现）。运行结果如下图所示：<br><img src="https://s2.ax1x.com/2020/02/04/1B0XvV.jpg" alt="1B0XvV.jpg"><br>接下来，我们需要执行这样一步操作，我想要等待图片详情页面全部获取完毕，在进行接下来的分析操作。<br>这里增加代码：</p>
<pre><code>#threads= []   
#开启两个线程去访问
for x in range(2):
t = Producer()
t.start()
#threads.append(t)

# for tt in threads:
#     tt.join()

print(&quot;进行到我这里了&quot;)</code></pre>
<p>注释关键代码，运行如下：</p>
<pre><code>[linuxboy@bogon demo]$ python3 down.py
分析http://www.meizitu.com/a/pure_2.html
分析http://www.meizitu.com/a/pure_1.html
进行到我这里了
[&#39;http://www.meizitu.com/a/5585.html&#39;,</code></pre>
<p>把上面的tt.join等代码注释打开，运行如下：</p>
<pre><code>[linuxboy@bogon demo]$ python3 down.py
分析http://www.meizitu.com/a/pure_2.html
分析http://www.meizitu.com/a/pure_1.html
[&#39;http://www.meizitu.com/a/5429.html&#39;, ......
进行到我这里了</code></pre>
<p>发现一个本质的区别，就是，我们由于是多线程的程序，所以，当程序跑起来之后，<code>print(&quot;进行到我这里了&quot;)</code>不会等到其他线程结束，就会运行到，但是当我们改造成上面的代码之后，也就是加入了关键的代码 <code>tt.join()</code> 那么主线程的代码会等到所以子线程运行完毕之后，在接着向下运行。这就满足了，我刚才说的，先获取到所有的图片详情页面的集合，这一条件了。</p>
<p>join所完成的工作就是线程同步，即主线程遇到join之后进入阻塞状态，一直等待其他的子线程执行结束之后，主线程在继续执行。这个大家在以后可能经常会碰到。</p>
<p>下面编写一个消费者/观察者，也就是不断关注刚才我们获取的那些图片详情页面的数组。</p>
<p>添加一个全局变量，用来存储获取到的图片链接<br><code>pic_links = []            #图片地址列表</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>) :</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;www.meizitu.com&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">global</span> all_img_urls   <span class="comment">#调用全局的图片详情页面的数组</span></span><br><span class="line">        print(<span class="string">&quot;%s is running &quot;</span> % threading.current_thread)</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(all_img_urls) &gt;<span class="number">0</span> : </span><br><span class="line">            g_lock.acquire()</span><br><span class="line">            img_url = all_img_urls.pop()</span><br><span class="line">            g_lock.release()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                response = requests.get(img_url , headers = headers )</span><br><span class="line">                response.encoding=<span class="string">&#x27;gb2312&#x27;</span>   <span class="comment">#由于我们调用的页面编码是GB2312，所以需要设置一下编码</span></span><br><span class="line">                title = re.search(<span class="string">&#x27;&lt;title&gt;(.*?) | 妹子图&lt;/title&gt;&#x27;</span>,response.text).group(<span class="number">1</span>)</span><br><span class="line">                all_pic_src = re.findall(<span class="string">&#x27;&lt;img alt=.*?src=&quot;(.*?)&quot; /&gt;&lt;br /&gt;&#x27;</span>,response.text,re.S)</span><br><span class="line">                </span><br><span class="line">                pic_dict = &#123;title:all_pic_src&#125;   <span class="comment">#python字典</span></span><br><span class="line">                <span class="keyword">global</span> pic_links</span><br><span class="line">                g_lock.acquire()</span><br><span class="line">                pic_links.append(pic_dict)    <span class="comment">#字典数组</span></span><br><span class="line">                print(title+<span class="string">&quot; 获取成功&quot;</span>)</span><br><span class="line">                g_lock.release()</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>
<p>代码中比较重要的一些部分，我已经使用注释写好了，大家可以直接参考。大家一定要注意我上面使用了两个正则表达式，分别用来匹配title和图片的url这个title是为了后面创建不同的文件夹使用的，所以大家注意吧。</p>
<pre><code>#开启10个线程去获取链接
for x in range(10):
    ta = Consumer()
    ta.start()</code></pre>
<p>运行结果：</p>
<pre><code>[linuxboy@bogon demo]$ python3 down.py
分析http://www.meizitu.com/a/pure_2.html
分析http://www.meizitu.com/a/pure_1.html
[&#39;http://www.meizitu.com/a/5585.html&#39;, ......
&lt;function current_thread at 0x7f7caef851e0&gt; is running 
&lt;function current_thread at 0x7f7caef851e0&gt; is running 
&lt;function current_thread at 0x7f7caef851e0&gt; is running 
&lt;function current_thread at 0x7f7caef851e0&gt; is running 
&lt;function current_thread at 0x7f7caef851e0&gt; is running 
&lt;function current_thread at 0x7f7caef851e0&gt; is running 
&lt;function current_thread at 0x7f7caef851e0&gt; is running 
&lt;function current_thread at 0x7f7caef851e0&gt; is running 
进行到我这里了
&lt;function current_thread at 0x7f7caef851e0&gt; is running 
&lt;function current_thread at 0x7f7caef851e0&gt; is running 
清纯美如画，摄影师的御用麻豆 获取成功
宅男女神叶梓萱近日拍摄一组火爆写真 获取成功
美（bao）胸（ru）女王带来制服诱惑 获取成功
每天睁开眼看到美好的你，便是幸福 获取成功
可爱女孩，愿暖风呵护纯真和执着 获取成功
清纯妹子如一缕阳光温暖这个冬天 获取成功 .....</code></pre>
<p>距离成功有进了一大步</p>
<p>接下来就是，我们开篇提到的那个存储图片的操作了，还是同样的步骤，写一个自定义的类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownPic</span>(<span class="params">threading.Thread</span>) :</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;mm.chinasareview.com&#x27;</span></span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:   <span class="comment">#  这个地方写成死循环，为的是不断监控图片链接数组是否更新</span></span><br><span class="line">            <span class="keyword">global</span> pic_links</span><br><span class="line">            <span class="comment"># 上锁</span></span><br><span class="line">            g_lock.acquire()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(pic_links) == <span class="number">0</span>:   <span class="comment">#如果没有图片了，就解锁</span></span><br><span class="line">                <span class="comment"># 不管什么情况，都要释放锁</span></span><br><span class="line">                g_lock.release()</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pic = pic_links.pop()</span><br><span class="line">                g_lock.release()</span><br><span class="line">                <span class="comment"># 遍历字典列表</span></span><br><span class="line">                <span class="keyword">for</span> key,values <span class="keyword">in</span>  pic.items():</span><br><span class="line">                    path=key.rstrip(<span class="string">&quot;\\&quot;</span>)</span><br><span class="line">                    is_exists=os.path.exists(path)</span><br><span class="line">                    <span class="comment"># 判断结果</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> is_exists:</span><br><span class="line">                        <span class="comment"># 如果不存在则创建目录</span></span><br><span class="line">                        <span class="comment"># 创建目录操作函数</span></span><br><span class="line">                        os.makedirs(path) </span><br><span class="line">                </span><br><span class="line">                        <span class="built_in">print</span> (path+<span class="string">&#x27;目录创建成功&#x27;</span>)</span><br><span class="line">                        </span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="comment"># 如果目录存在则不创建，并提示目录已存在</span></span><br><span class="line">                        print(path+<span class="string">&#x27; 目录已存在&#x27;</span>) </span><br><span class="line">                    <span class="keyword">for</span> pic <span class="keyword">in</span> values :</span><br><span class="line">                        filename = path+<span class="string">&quot;/&quot;</span>+pic.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">                        <span class="keyword">if</span> os.path.exists(filename):</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            response = requests.get(pic,headers=headers)</span><br><span class="line">                            <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f :</span><br><span class="line">                                f.write(response.content)</span><br><span class="line">                                f.close</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们获取图片链接之后，就需要下载了，我上面的代码是首先创建了一个之前获取到title的文件目录，然后在目录里面通过下面的代码,去创建一个文件。</p>
<p>涉及到文件操作，引入一个新的模块<br><code>import os  #目录操作模块</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 遍历字典列表</span></span><br><span class="line"><span class="keyword">for</span> key,values <span class="keyword">in</span>  pic.items():</span><br><span class="line">    path=key.rstrip(<span class="string">&quot;\\&quot;</span>)</span><br><span class="line">    is_exists=os.path.exists(path)</span><br><span class="line">    <span class="comment"># 判断结果</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_exists:</span><br><span class="line">        <span class="comment"># 如果不存在则创建目录</span></span><br><span class="line">        <span class="comment"># 创建目录操作函数</span></span><br><span class="line">        os.makedirs(path) </span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span> (path+<span class="string">&#x27;目录创建成功&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 如果目录存在则不创建，并提示目录已存在</span></span><br><span class="line">        print(path+<span class="string">&#x27; 目录已存在&#x27;</span>) </span><br><span class="line">    <span class="keyword">for</span> pic <span class="keyword">in</span> values :</span><br><span class="line">        filename = path+<span class="string">&quot;/&quot;</span>+pic.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(filename):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response = requests.get(pic,headers=headers)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f :</span><br><span class="line">                f.write(response.content)</span><br><span class="line">                f.close</span><br></pre></td></tr></table></figure>
<p>因为我们的图片链接数组，里面存放是的字典格式，也就是下面这种格式</p>
<pre><code>[&#123;&quot;妹子图1&quot;:[&quot;http://mm.chinasareview.com/wp-content/uploads/2016a/08/24/01.jpg&quot;,&quot;http://mm.chinasareview.com/wp-content/uploads/2016a/08/24/02.jpg&quot;.&quot;http://mm.chinasareview.com/wp-content/uploads/2016a/08/24/03.jpg&quot;]&#125;,&#123;&quot;妹子图2&quot;:[&quot;http://mm.chinasareview.com/wp-content/uploads/2016a/08/24/01.jpg&quot;,&quot;http://mm.chinasareview.com/wp-content/uploads/2016a/08/24/02.jpg&quot;.&quot;http://mm.chinasareview.com/wp-content/uploads/2016a/08/24/03.jpg&quot;]&#125;,&#123;&quot;妹子图3&quot;:[&quot;http://mm.chinasareview.com/wp-content/uploads/2016a/08/24/01.jpg&quot;,&quot;http://mm.chinasareview.com/wp-content/uploads/2016a/08/24/02.jpg&quot;.&quot;http://mm.chinasareview.com/wp-content/uploads/2016a/08/24/03.jpg&quot;]&#125;]</code></pre>
<p>需要先循环第一层,获取title，创建目录之后，在循环第二层去下载图片，代码中，我们在修改一下，把异常处理添加上。</p>
<pre><code>try:
    response = requests.get(pic,headers=headers)
    with open(filename,&#39;wb&#39;) as f :
        f.write(response.content)
        f.close
except Exception as e:
    print(e)
    pass</code></pre>
<p>然后在主程序中编写代码</p>
<pre><code>#开启10个线程保存图片
for x in range(10):
    down = DownPic()
    down.start()</code></pre>
<p>运行结果：</p>
<pre><code>[linuxboy@bogon demo]$ python3 down.py
分析http://www.meizitu.com/a/pure_2.html
分析http://www.meizitu.com/a/pure_1.html
[&#39;http://www.meizitu.com/a/5585.html&#39;, &#39;http://www.meizitu.com/a/5577.html&#39;, &#39;http://www.meizitu.com/a/5576.html&#39;, &#39;http://www.meizitu.com/a/5574.html&#39;, &#39;http://www.meizitu.com/a/5569.html&#39;, .......
&lt;function current_thread at 0x7fa5121f2268&gt; is running 
&lt;function current_thread at 0x7fa5121f2268&gt; is running 
&lt;function current_thread at 0x7fa5121f2268&gt; is running 
进行到我这里了
清纯妹子如一缕阳光温暖这个冬天 获取成功
清纯妹子如一缕阳光温暖这个冬天目录创建成功
可爱女孩，愿暖风呵护纯真和执着 获取成功
可爱女孩，愿暖风呵护纯真和执着目录创建成功
超美，纯纯的你与蓝蓝的天相得益彰 获取成功
超美，纯纯的你与蓝蓝的天相得益彰目录创建成功
美丽冻人，雪地里的跆拳道少女 获取成功
五官精致的美眉，仿佛童话里的公主 获取成功
有自信迷人的笑容，每天都是灿烂的 获取成功
五官精致的美眉，仿佛童话里的公主目录创建成功
有自信迷人的笑容，每天都是灿烂的目录创建成功
清纯美如画，摄影师的御用麻豆 获取成功</code></pre>
<p>文件目录下面同时出现</p>
<p><img src="https://s2.ax1x.com/2020/02/04/1BB0Gn.jpg" alt="1BB0Gn.jpg"></p>
<p>点开一个目录</p>
<p><img src="https://s2.ax1x.com/2020/02/04/1BBB2q.jpg" alt="1BBB2q.jpg"></p>
<p>最后我们在代码的头部写上<br><code># -*- coding: UTF-8 -*- </code>以防出现<code>Non-ASCII character &#39;xe5&#39; in file</code>报错问题</p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading  <span class="comment"># 多线程模块</span></span><br><span class="line"><span class="keyword">import</span> re  <span class="comment"># 正则表达式模块</span></span><br><span class="line"><span class="keyword">import</span> time  <span class="comment"># 时间模块</span></span><br><span class="line"><span class="keyword">import</span> os  <span class="comment"># 目录操作模块</span></span><br><span class="line"></span><br><span class="line">all_urls = []  <span class="comment"># 我们拼接好的图片集和列表路径</span></span><br><span class="line">all_img_urls = []  <span class="comment"># 图片列表页面的数组</span></span><br><span class="line">pic_links = []  <span class="comment"># 图片地址列表</span></span><br><span class="line">g_lock = threading.Lock()  <span class="comment"># 初始化一个锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span>():</span></span><br><span class="line">    <span class="comment"># 构造函数，初始化数据使用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, target_url, headers</span>):</span></span><br><span class="line">        self.target_url = target_url</span><br><span class="line">        self.headers = headers</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取所有的想要抓取的URL</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getUrls</span>(<span class="params">self, start_page, page_num</span>):</span></span><br><span class="line">        <span class="comment"># 循环得到URL</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_page, page_num + <span class="number">1</span>):</span><br><span class="line">            url = self.target_url % i</span><br><span class="line">            all_urls.append(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;www.meizitu.com&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">global</span> all_img_urls</span><br><span class="line">        print(<span class="string">&quot;%s is running &quot;</span> % threading.current_thread)</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(all_img_urls) &gt; <span class="number">0</span>:</span><br><span class="line">            g_lock.acquire()</span><br><span class="line">            img_url = all_img_urls.pop()</span><br><span class="line">            g_lock.release()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                response = requests.get(img_url, headers=headers)</span><br><span class="line"></span><br><span class="line">                response.encoding = <span class="string">&#x27;gb2312&#x27;</span></span><br><span class="line">                title = re.search(<span class="string">&#x27;&lt;title&gt;(.*?) | 妹子图&lt;/title&gt;&#x27;</span>, response.text).group(<span class="number">1</span>)</span><br><span class="line">                all_pic_src = re.findall(<span class="string">&#x27;&lt;img alt=.*?src=&quot;(.*?)&quot; /&gt;&lt;br /&gt;&#x27;</span>, response.text, re.S)</span><br><span class="line"></span><br><span class="line">                pic_dict = &#123;title: all_pic_src&#125;</span><br><span class="line">                <span class="keyword">global</span> pic_links</span><br><span class="line">                g_lock.acquire()</span><br><span class="line">                pic_links.append(pic_dict)</span><br><span class="line">                print(title + <span class="string">&quot; 获取成功&quot;</span>)</span><br><span class="line">                g_lock.release()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产者，负责从每个页面提取图片列表链接</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;www.meizitu.com&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">global</span> all_urls</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(all_urls) &gt; <span class="number">0</span>:</span><br><span class="line">            g_lock.acquire()  <span class="comment"># 在访问all_urls的时候，需要使用锁机制</span></span><br><span class="line">            page_url = all_urls.pop()  <span class="comment"># 通过pop方法移除最后一个元素，并且返回该值</span></span><br><span class="line"></span><br><span class="line">            g_lock.release()  <span class="comment"># 使用完成之后及时把锁给释放，方便其他线程使用</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                print(<span class="string">&quot;分析&quot;</span> + page_url)</span><br><span class="line">                response = requests.get(page_url, headers=headers, timeout=<span class="number">3</span>)</span><br><span class="line">                all_pic_link = re.findall(<span class="string">&#x27;&lt;a target=\&#x27;_blank\&#x27; href=&quot;(.*?)&quot;&gt;&#x27;</span>, response.text, re.S)</span><br><span class="line">                <span class="keyword">global</span> all_img_urls</span><br><span class="line">                g_lock.acquire()</span><br><span class="line">                all_img_urls += all_pic_link</span><br><span class="line">                print(all_img_urls)</span><br><span class="line">                g_lock.release()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownPic</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;mm.chinasareview.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;safedog-flow-item=; UM_distinctid=1634d30879a9-06230f37a83b4b8-38694646-1fa400-1634d30879c451; CNZZDATA30056528=cnzz_eid%3D1182386559-1526005899-http%253A%252F%252Fwww.meizitu.com%252F%26ntime%3D1526022264; bdshare_firstime=1526025336868&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">global</span> pic_links</span><br><span class="line">            <span class="comment"># 上锁</span></span><br><span class="line">            g_lock.acquire()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(pic_links) == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 不管什么情况，都要释放锁</span></span><br><span class="line">                g_lock.release()</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pic = pic_links.pop()</span><br><span class="line">                g_lock.release()</span><br><span class="line">                <span class="comment"># 遍历字典列表</span></span><br><span class="line">                <span class="keyword">for</span> key, values <span class="keyword">in</span> pic.items():</span><br><span class="line">                    path = key.rstrip(<span class="string">&quot;\\&quot;</span>)</span><br><span class="line">                    is_exists = os.path.exists(path)</span><br><span class="line">                    <span class="comment"># 判断结果</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> is_exists:</span><br><span class="line">                        <span class="comment"># 如果不存在则创建目录</span></span><br><span class="line">                        <span class="comment"># 创建目录操作函数</span></span><br><span class="line">                        os.makedirs(path)</span><br><span class="line"></span><br><span class="line">                        print(path + <span class="string">&#x27;目录创建成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="comment"># 如果目录存在则不创建，并提示目录已存在</span></span><br><span class="line">                        print(path + <span class="string">&#x27; 目录已存在&#x27;</span>)</span><br><span class="line">                    <span class="keyword">for</span> pic <span class="keyword">in</span> values:</span><br><span class="line">                        filename = path + <span class="string">&quot;/&quot;</span> + pic.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">                        <span class="keyword">if</span> os.path.exists(filename):</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">try</span>:</span><br><span class="line">                                response = requests.get(pic, headers=headers)</span><br><span class="line">                                <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                                    f.write(response.content)</span><br><span class="line">                                    f.close</span><br><span class="line">                            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                                print(e)</span><br><span class="line">                                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;www.meizitu.com&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    target_url = <span class="string">&#x27;http://www.meizitu.com/a/pure_%d.html&#x27;</span>  <span class="comment"># 图片集和列表规则</span></span><br><span class="line"></span><br><span class="line">    spider = Spider(target_url, headers)</span><br><span class="line">    spider.getUrls(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    threads = []</span><br><span class="line">    <span class="comment"># 开启两个线程去访问</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        t = Producer()</span><br><span class="line">        t.start()</span><br><span class="line">        threads.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> tt <span class="keyword">in</span> threads:</span><br><span class="line">        tt.join()</span><br><span class="line">    <span class="comment"># 开启10个线程去获取链接</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        ta = Consumer()</span><br><span class="line">        ta.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启5个线程保存图片</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        down = DownPic()</span><br><span class="line">        down.start()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;进行到我这里了&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="他解"><a href="#他解" class="headerlink" title="他解"></a>他解</h1><p>我们可以知道，同一个页面需要爬取的内容可能具有多方面的特征，上述的获取所需网页链接的方案因此不唯一。</p>
<p>可以发现图片链接还有以下的特征可以提取：</p>
<p><img src="https://s2.ax1x.com/2020/02/04/1BDqXV.jpg" alt="1BDqXV.jpg">  </p>
<p><img src="https://s2.ax1x.com/2020/02/04/1BDOmT.jpg" alt="1BDOmT.jpg"></p>
<p>因此可以考虑采用以下代码进行爬取：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_page</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    用于下载页面</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.18362&quot;</span>&#125;</span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    r.encoding = <span class="string">&#x27;gb2312&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pic_list</span>(<span class="params">html</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取每个页面的套图列表,之后循环调用get_pic函数获取图片</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    pic_list = soup.find_all(<span class="string">&#x27;li&#x27;</span>, class_=<span class="string">&#x27;wp-item&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pic_list:</span><br><span class="line">        a_tag = i.find(<span class="string">&#x27;h3&#x27;</span>, class_=<span class="string">&#x27;tit&#x27;</span>).find(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        link = a_tag.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        text = a_tag.get_text()</span><br><span class="line">        get_pic(link, text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pic</span>(<span class="params">link, text</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取当前页面的图片,并保存</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    html = download_page(link)  <span class="comment"># 下载界面</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    pic_list = soup.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span>=<span class="string">&quot;picture&quot;</span>).find_all(<span class="string">&#x27;img&#x27;</span>)  <span class="comment"># 找到界面所有图片</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.18362&quot;</span>&#125;</span><br><span class="line">    create_dir(<span class="string">&#x27;pic/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(text))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pic_list:</span><br><span class="line">        pic_link = i.get(<span class="string">&#x27;src&#x27;</span>)  <span class="comment"># 拿到图片的具体 url</span></span><br><span class="line">        r = requests.get(pic_link, headers=headers)  <span class="comment"># 下载图片，之后保存到文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pic/&#123;&#125;/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(text, pic_link.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(r.content)</span><br><span class="line">            time.sleep(<span class="number">3</span>)   <span class="comment"># 休息一下，不要给网站太大压力，避免被封</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_dir</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(name):</span><br><span class="line">        os.makedirs(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span>(<span class="params">url</span>):</span></span><br><span class="line">    page_html = download_page(url)</span><br><span class="line">    get_pic_list(page_html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    create_dir(<span class="string">&#x27;pic&#x27;</span>)</span><br><span class="line">    queue = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">72</span>)]   <span class="comment"># 构造 url 链接 页码。</span></span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> thread.is_alive():</span><br><span class="line">                threads.remove(thread)</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(threads) &lt; <span class="number">5</span> <span class="keyword">and</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:   <span class="comment"># 最大线程数设置为 5</span></span><br><span class="line">            cur_page = queue.pop(<span class="number">0</span>)</span><br><span class="line">            url = <span class="string">&#x27;http://meizitu.com/a/more_&#123;&#125;.html&#x27;</span>.<span class="built_in">format</span>(cur_page)</span><br><span class="line">            thread = threading.Thread(target=execute, args=(url,))</span><br><span class="line">            thread.setDaemon(<span class="literal">True</span>)</span><br><span class="line">            thread.start()</span><br><span class="line">            print(<span class="string">&#x27;&#123;&#125;正在下载&#123;&#125;页&#x27;</span>.<span class="built_in">format</span>(threading.current_thread().name, cur_page))</span><br><span class="line">            threads.append(thread)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python初级应用</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>多线程</tag>
        <tag>观察者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>饥荒云服搭搭建</title>
    <url>/2020/01/29/DSTServerConstruction/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　主要介绍基于32位的ubuntu饥荒服务器的搭建以及维护。  </p>
<a id="more"></a>
<h1 id="1-云服务器购买"><a href="#1-云服务器购买" class="headerlink" title="1. 云服务器购买"></a>1. 云服务器购买</h1><p>　　记下登录名（默认阿里云root，腾讯云ubuntu）与密码，以及公网IP  </p>
<h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h1><h2 id="2-1-user-token"><a href="#2-1-user-token" class="headerlink" title="2.1 user token"></a>2.1 user token</h2><p>　　用户令牌，这里开启游戏后在steam内找到服务器相关选项并生成即可  </p>
<h2 id="2-2-文件上传"><a href="#2-2-文件上传" class="headerlink" title="2.2 文件上传"></a>2.2 文件上传</h2><h3 id="2-2-1-脚本及工具下载"><a href="#2-2-1-脚本及工具下载" class="headerlink" title="2.2.1 脚本及工具下载"></a>2.2.1 脚本及工具下载</h3><p>　　首先进入链接下载swap.sh以及go.sh两个文件，另外的压缩包为不稳定的云服工具<br>　　- <a href="https://pan.baidu.com/s/18XbCDXuqvWX-aEu2S7AvfQ">脚本下载百度云链接</a>    提取码：5tv7  </p>
<p>　　- <a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">SSH客户端PuTTY</a>  WIN10 1803以上可直接用CDM<br>　　- <a href="https://winscp.net/eng/download.php">SCPGui客户端WinSCP</a>  用来传文件</p>
<h3 id="2-2-2-文件上传"><a href="#2-2-2-文件上传" class="headerlink" title="2.2.2 文件上传"></a>2.2.2 文件上传</h3><p>　　安装打开后输入公网IP以及用户名密码即可连接。<br>　　-注意这里PuTTY需要设置Windows/selection/勾选Windows(Middle extends, Right brings up menu)以激活右键复制功能，此外PuTTY登录密码会默认隐藏，输入时不可见（一开始以为卡了）<br>　　利用WinSCP直接拖拽文件即可进行传输，右下角可设置隐藏文件的显示<br>　　- 首先将本地下载的go.sh以及swap.sh拖拽至云端/root/目录下，使用PuTTY输入ls查看当前目录下文件<br>　　下面利用PuTTY配置：<br>　　- 输入chmod 777 go.sh swap.sh 为脚本提升执行权限<br>　　- 输入./swap.sh 开启交换分区（云服超过2G忽略此步骤）<br>　　- 输入./go.sh 开始下载steam以及DST  </p>
<h3 id="2-2-3-服务器验证"><a href="#2-2-3-服务器验证" class="headerlink" title="2.2.3 服务器验证"></a>2.2.3 服务器验证</h3><p>　　下载完毕后输入1进行验证（更新服务器），更新完毕后Ctrl+C退出脚本  </p>
<h1 id="3-服务器使用"><a href="#3-服务器使用" class="headerlink" title="3. 服务器使用"></a>3. 服务器使用</h1><h2 id="3-1-开-关服"><a href="#3-1-开-关服" class="headerlink" title="3.1 开/关服"></a>3.1 开/关服</h2><ul>
<li><p>打开PuTTY成功连接对应服务器后输入./go.sh  </p>
</li>
<li><p>输入2（启动服务器）（“代码” == 存档文件夹名称）  </p>
</li>
<li><p>设定完毕后输入2.1记下的令牌（注意禁用Ctrl+V，请使用右键粘贴）  </p>
</li>
<li><p>此后顺次开启地上地下，当出现Sim paused说明地上生成开启，同时按下Ctrl+A+D将地上进程放入后台  </p>
</li>
<li><p>同理出现Sim paused说明地下生成开启，同时按下Ctrl+A+D将地下进程放入后台  </p>
</li>
<li><p>此时服务器开启成功  </p>
</li>
<li><p>同样PuTTY输入./go.sh选择3  </p>
</li>
<li><p>Caves为地下进程，Master为地上进程。前面的数字ID是两进程的ID，这里输入对应的ID即可进入相应的进程的控制台，以此照葫芦画瓢Ctrl+C终止进程即可  </p>
</li>
<li><p>此时服务器关闭成功  </p>
<h1 id="4-维护管理"><a href="#4-维护管理" class="headerlink" title="4. 维护管理"></a>4. 维护管理</h1><h2 id="4-1-黑-白-管理名单"><a href="#4-1-黑-白-管理名单" class="headerlink" title="4.1 黑/白/管理名单"></a>4.1 黑/白/管理名单</h2></li>
<li><p>开启隐藏文件显示后，找到云服务存档目录（/root/.klei/DoNotStarveTogether/存档名）  </p>
</li>
<li><p>新建UTF-8编码的blocklist.txt以及whitelist.txt以及adminlist.txt即可，在各自文档内输入用户steam的ID（每行对应一名）  </p>
<h2 id="4-2-修改存档-MOD设置"><a href="#4-2-修改存档-MOD设置" class="headerlink" title="4.2 修改存档/MOD设置"></a>4.2 修改存档/MOD设置</h2></li>
<li><p>首先在游戏内打开一个房间，设置MOD以及存档的相关设定并记录存档位（例如使用第一个存档位后，在本地对应的便为存档文件夹Cluster_1）  </p>
</li>
<li><p>生成/更新世界完毕后找到本地存档位置（默认在我的文档/Klei/DoNotStarveTogether/backup），以先前设置的Cluster_1为例，Master为地上，Caves为地下<br>各自文件夹内的leveldataoverride.lua为世界设定，Modoverrides.lua为MOD设定。将这两个文件拖入云服中对应位置即可（Master和Caves）  </p>
</li>
<li><p>此后找到本地MOD存储位置，使用steam库浏览本地文件可快速到达（D:/steam/steamapps/common/Don’t Starve Together/mods）<br>将MOD文件夹中对应MOD的文件夹拖拽至云服的对应MOD文件夹中即可（/root/Steam/steamapps/common\Don’t Starve Together Dedicated Server/mods）  </p>
</li>
<li><p>随后重启服务器即可（先关闭后开启 == 重启）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>新手指北</category>
      </categories>
      <tags>
        <tag>reference</tag>
        <tag>随笔</tag>
        <tag>游戏指令</tag>
      </tags>
  </entry>
  <entry>
    <title>饥荒指令</title>
    <url>/2020/01/28/DSTOrder/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　可用Ctrl+F查询所需物品名称（大部分代码名称已修改成联机中文MOD翻译）。<br>　　进入游戏后按“～”键调出控制台<br>　　输入c_give(“代码名称“，数量）——物品会按所输数量出现在物品栏，假若包裹放不下，会自动掉落在地上。此代码最方便，甚至还可以在鼠标指针处直接放置建筑类物品。<br>　　c_spawn(“XX”，数量)——放鼠标指针指示的地上<br>　　上帝模式：c_godmode()<br>　　饥饿值上限：GetPlayer().components.hunger:SetMax(500)<br>　　精神值上限：GetPlayer().components.sanity:SetMax(500)<br>　　生命值上限：GetPlayer().components.health:SetMaxHealth(300)<br>　　全物品直接制造：GetPlayer().components.builder:GiveAllRecipes()<br>　　删除物品：TheInput:GetWorldEntityUnderMouse():Remove()<br>　　传送：GetPlayer().Transform:SetPosition(坐标，例：0,0,0)<br>　　此列表已剔除一些对于联机无效的代码，测试过真实有效。 </p>
<a id="more"></a>
<p>详情见<a href="/file/%E6%B5%81%E5%B9%B4%E9%A5%A5%E8%8D%92%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8C%87%E4%BB%A4%E5%A4%A7%E5%85%A8+%E7%89%A9%E5%93%81%E5%A4%A7%E5%85%A8+%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8.pdf">拓展</a></p>
<h1 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h1><html>
    <table style="margin-left: auto; margin-right: auto;">
        <tr>
            <td>
                <!--左侧内容-->
　　                割下的草：cutgrass <br/>
　　                树枝：twigs <br/>
　　                木头：log  <br/>
　　                木炭：charcoal  <br/>
　　                灰：ash  <br/>
　　                采集的芦苇：cutreeds  <br/>
　　                花瓣：petals  <br/>
　　                噩梦花瓣：petals_evil  <br/>
　　                活木头：livinglog  <br/>
　　                叶子：foliage  <br/>
　　                荧光果：lightbulb  <br/>
　　                发光浆果：wormlight  <br/>
　　                冰：ice  <br/>
　　                燧石：flint  <br/>
　　                硝石：nitre  <br/>
　　                岩石：rocks  <br/>
　　                大理石：marble  <br/>
　　                月之石：moonrocknugget  <br/>
　　                黄金：goldnugget  <br/>
　　                铥矿石：thulecite  <br/>
　　                铥矿石碎片：thulecite_pieces  <br/>
　　                红宝石：redgem  <br/>
　　                蓝宝石：bluegem  <br/>
　　                紫宝石：purplegem  <br/>
　　                绿宝石：greengem  <br/>
　　                橙宝石：orangegem  <br/>
　　                黄宝石：yellowgem  <br/>
　　                彩色宝石：opalpreciousgem  <br/>
　　                绳子：rope  <br/>
　　                木板：boards  <br/>
　　                石砖：cutstone  <br/>
　　                莎草纸：papyrus  <br/>
　　                噩梦燃料：nightmarefuel  <br/>
　　                蜂蜡：beeswax  <br/>
　　                蜡纸：waxpaper  <br/>
　　                电器元件：transistor  <br/>
　　                狗牙：houndstooth  <br/>
　　                蜘蛛丝：silk  <br/>
　　                蜘蛛腺体：spidergland
            </td>
            <td>
                <!--右侧内容--> 
　　                胡子：beardhair <br/> 
　　                牛毛：beefalowool  <br/>
　　                牛角：horn  <br/>
　　                便便：poop  <br/>
　　                蜂巢：honeycomb  <br/>
　　                蜂刺：stinger  <br/>
　　                猪皮：pigskin  <br/>
　　                兔人尾巴：manrabbit_tail  <br/>
　　                猫尾：coontail  <br/>
　　                海象牙：walrus_tusk  <br/>
　　                胡须：beardhair  <br/>
　　                烂鸡蛋：rottenegg  <br/>
　　                乌鸦羽毛：feather_crow  <br/>
　　                红雀羽毛：feather_robin <br/>
　　                雪雀羽毛：feather_robin_winter  <br/>
　　                金丝雀羽毛：feather_canary  <br/>
　　                鸟粪：guano  <br/>
　　                触手皮：tentaclespots  <br/>
　　                粘滑含糊虫（黏糊虫粘液）：slurtleslime  <br/>
　　                破碎的背壳：slurtle_shellpieces  <br/>
　　                蚊子血袋：mosquitosack  <br/>
　　                缀食者皮：slurper_pelt  <br/>
　　                远古守护者角：minotaurhorn  <br/>
　　                掉落的羽毛：goose_feather  <br/>
　　                鳞片：dragon_scales  <br/>
　　                厚皮毛：bearger_fur  <br/>
　　                巨鹿眼球：deerclops_eyeball  <br/>
　　                毒蕈皮：shroom_skin  <br/>
　　                闪电羊角：lightninggoathorn  <br/>
　　                格罗门翅膀：glommerwings  <br/>
　　                格罗门花（花瞬间死亡）：glommerflower  <br/>
　　                格罗门燃料：glommerfuel  <br/>
　　                冷冻虫卵：lavae_cocoon  <br/>
　　                暗影之心：shadowheart  <br/>
　　                鹿茸：deer_antler  <br/>
　　                克劳斯钥匙：klaussackkey  <br/>
　　                齿轮：gears  <br/>
　　                骨片：boneshard  <br/>
　　                化石碎片（据说多种实际上只出一种）：fossil_piece
            </td>
        </tr>
    </table>
</html>

<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><html>
    <table style="margin-left: auto; margin-right: auto;">
        <tr>
            <td>
                <!--左侧内容-->
　　                斧头：axe  <br/>
　　                金斧头：goldenaxe  <br/>
　　                露西斧：lucy  <br/>
　　                鹤嘴锄：pickaxe  <br/>
　　                黄金鹤嘴锄：goldenpickaxe  <br/>
　　                铁铲：shovel  <br/>
　　                黄金铁铲（讲真黄金做的还能叫铁铲）：goldenshovel  <br/>
　　                镐斧：multitool_axe_pickaxe  <br/>
　　                锤子：hammer  <br/>
　　                草叉：pitchfork  <br/>
　　                剃刀：razor  <br/>
　　                捕虫网：bugnet  <br/>
　　                鱼竿：fishingrod  <br/>
　　                陷阱：trap  <br/>
　　                鸟陷阱：birdtrap  <br/>
　　                南瓜灯：pumpkin_lantern  <br/>
　　                提灯：lantern  <br/>
　　                漂亮太阳伞：grass_umbrella  <br/>
　　                雨伞：umbrella  <br/>
　　                保温石：heatrock  <br/>
　　                水球：waterballon  <br/>
　　                指南针：compass
            </td>
            <td>
                <!--右侧内容--> 
　　                空包裹：bundlewrap  <br/>
　　                彩纸：giftwrap  <br/>
　　                稻草卷：bedroll_straw  <br/>
　　                毛皮铺盖：bedroll_furry  <br/>
　　                鹅毛扇：featherfan  <br/>
　　                狗牙陷阱：trap_teeth  <br/>
　　                麦斯威尔的利齿陷阱：trap_teeth_maxwell  <br/>
　　                背包：backpack  <br/>
　　                猪皮包：piggyback  <br/>
　　                隔热包：icepack  <br/>
　　                坎普斯背包：krampus_sack  <br/>
　　                糖果袋：candybag  <br/>
　　                羽毛笔：featherpencil  <br/>
　　                便便蓝：fertilizer  <br/>
　　                取鞍器：saddlehorn  <br/>
　　                鞍：saddle_basic  <br/>
　　                浴血战鞍：saddle_wa  <br/>
　　                闪亮之鞍：saddle_race  <br/>
　　                刷子：brush  <br/>
　　                舐盐器：saltlick
            </td>
        </tr>
    </table>
</html>

<h1 id="武器"><a href="#武器" class="headerlink" title="武器"></a>武器</h1><html>
    <table style="margin-left: auto; margin-right: auto;">
        <tr>
            <td>
                <!--左侧内容-->
　　                长矛：spear  <br/>
　　                瓦丝格雷斯矛：spear_wathgrithr  <br/>
　　                气球（吹好的，可以装饰自己的窝~）：balloon  <br/>
　　                火腿球棒：hambat  <br/>
　　                触手尖刺：tentaclespike  <br/>
　　                晨星：nightstick  <br/>
　　                三脚猫的教诲：whip  <br/>
　　                暗影剑：nightsword  <br/>
　　                蝙蝠斧棍：batbat  <br/>
　　                铥矿棒：ruins_bat  <br/>
　　                冰魔杖（蓝）：icestaff  <br/>
　　                火魔杖（红）：firestaff <br/> 
　　                传送魔杖（紫）：telestaff  <br/>
　　                星星呼唤者（黄）：yellowstaff  <br/>
　　                毁灭权杖（绿）：greenstaff
            </td>
            <td>
                <!--右侧内容-->
　　                魔杖（单机用来找零件那个）：diviningrod  <br/>
　　                懒惰的探索者（橙）：orangestaff  <br/>
　　                呼月者权杖：opalstaff  <br/>
　　                回旋镖：boomerang  <br/>
　　                吹箭：blowdart_pipe  <br/>
　　                燃烧吹箭：blowdart_fire  <br/>
　　                麻醉吹箭：blowdart_sleep  <br/>
　　                电磁吹箭：blowdart_yellow  <br/>
　　                旋风：staff_tornado  <br/>
　　                排箫：panflute  <br/>
　　                独奏乐器:onemanband  <br/>
　　                火药：gunpowder  <br/>
　　                蜜蜂地雷：beemine  <br/>
　　                恒迪尤斯·舒提尤斯（眼睛炮塔）：eyeturret  <br/>
　　                可放置的眼睛炮塔：eyeturret_item
            </td>
        </tr>
    </table>
</html>

<h1 id="装备"><a href="#装备" class="headerlink" title="装备"></a>装备</h1><html>
    <table style="margin-left: auto; margin-right: auto;">
        <tr>
            <td>
                <!--左侧内容-->
　　                缝纫工具包（为了方便而分类）：sewing_kit  <br/>
　　                猪皮头盔：footballhat  <br/>
　　                瓦丝格雷斯帽：wathgrithrhat <br/> 
　　                女王冠：hivehat  <br/>
　　                背壳头盔：slurtlehat  <br/>
　　                远古王冠：ruinshat  <br/>
　　                矿工帽：minerhat  <br/>
　　                地鼠帽：molehat  <br/>
　　                蜘蛛帽：spiderhat  <br/>
　　                高礼帽：tophat  <br/>
　　                雨帽：rainhat  <br/>
　　                眼球伞：eyebrellahat  <br/>
　　                养蜂人的帽子：beehat  <br/>
　　                羽毛帽：featherhat  <br/>
　　                丛林帽：bushhat  <br/>
　　                贝雷帽：walrushat  <br/>
　　                冰块：icehat  <br/>
　　                西瓜帽：watermelonhat  <br/>
　　                猫帽：catcoonhat  <br/>
　　                绿蘑菇帽：green_mushroomhat <br/> 
　　                蓝蘑菇帽：blue_mushroomhat  <br/>  
　　                红蘑菇帽：red_mushroomhat
            </td>
            <td>
                <!--右侧内容-->
　　                草地盔甲：armorgrass  <br/>
　　                木盔甲：armorwood  <br/>
　　                大理石盔甲：armormarble  <br/>
　　                暗影盔甲：armor_sanity  <br/>
　　                鳞甲：armordragonfly  <br/>
　　                圆壳蛞蝓壳：armorsnurtleshell  <br/>  
　　                远古盔甲：armorruins  <br/>
　　                小巧背心：sweatervest  <br/>
　　                花纹衬衫：hawaiianshirt  <br/>
　　                夏季背心：reflectivevest  <br/>
　　                夏日背心：trunkvest_summer  <br/>
　　                寒冬背心：trunkvest_winter  <br/>
　　                熊皮背心：beargervest  <br/>
　　                雨衣：raincoat  <br/>
　　                饥饿腰带：armorslurper  <br/>
　　                提神护符（红）：amulet  <br/>
　　                寒冰护符（蓝）：blueamulet  <br/>
　　                护符（紫）：purpleamulet  <br/>
　　                魔力之光（黄）：yellowamulet  <br/>
　　                懒惰的强盗（橙）：orangeamulet  <br/>
　　                建造护符（绿）：greenamulet  <br/>
　　                铥矿奖章：nightmare_timepiece  <br/>
　　                行走手杖：cane
            </td>
        </tr>
    </table>
</html>

<h1 id="药物"><a href="#药物" class="headerlink" title="药物"></a>药物</h1><html>
    <table style="margin-left: auto; margin-right: auto;">
        <tr>
            <td>
                <!--左侧内容-->
　　                救赎之心：reviver  <br/>
　　                治疗药膏：healingsalve  <br/>
　　                蜜蜂药膏：bandage
            </td>
            <td>
                <!--右侧内容-->
　　                AGV试验药（强心针）：lifeinjector  <br/>
　　                果冻豆：jellybean
            </td>
        </tr>
    </table>
</html>

<h1 id="食物"><a href="#食物" class="headerlink" title="食物"></a>食物</h1><html>
    <table style="margin-left: auto; margin-right: auto;">
        <tr>
            <td>
                <!--左侧内容-->
　　                胡萝卜：carrot  <br/>
　　                烤胡萝卜:carrot_cooked  <br/>
　　                玉米：corn  <br/>
　　                爆米花：corn_cooked  <br/>
　　                南瓜：pumpkin   <br/>
　　                热南瓜：pumpkin_cooked  <br/>
　　                茄子：eggplant  <br/>
　　                烤茄子：eggplant_cooked  <br/>
　　                红蘑菇：red_cap  <br/>
　　                烤红蘑菇：red_cap_cooked  <br/>
　　                绿蘑菇：green_cap  <br/>
　　                烤绿蘑菇：green_cap_cooked  <br/>
　　                蓝蘑菇：blue_cap  <br/>
　　                烤蓝蘑菇：blue_cap_cooked  <br/>
　　                石榴：pomegranate  <br/>
　　                烤石榴：pomegranate_cooked  <br/>
　　                榴莲：durian  <br/>
　　                烤榴莲：durian_cooked  <br/>
　　                火龙果：dragonfruit  <br/>
　　                精致火龙果（烤）：dragonfruit_cooked <br/> 
　　                浆果：berries  <br/>
　　                烤浆果：berries_cooked  <br/>
　　                西瓜：watermelon  <br/>
　　                烤熟的西瓜：watermelon_cooked  <br/>
　　                仙人掌肉：cactus_meat  <br/>
　　                仙人掌花：cactus_flower  <br/>
　　                采集的苔藓：cutlichen  <br/>
　　                肉：meat  <br/>
　　                大熟肉：meat_cooked  <br/>
　　                大肉干：meat_dried  <br/>
　　                小肉块：smallmeat  <br/>
　　                熟肉块：cookedsmallmeat  <br/>
　　                鸡腿：drumstick  <br/>
　　                烤鸡腿：drumstick_cooked  <br/>
　　                青蛙腿：froglegs  <br/>
　　                熟蛙腿：froglegs_cooked  <br/>
　　                怪物肉：monstermeat  <br/>
　　                烤怪物肉：cookedmonstermeat  <br/>
　　                怪物肉干：monstermeat_dried  <br/>
　　                多叶的肉：plantmeat  <br/>
　　                煮熟的多叶肉：plantmeat_cooked  <br/>
　　                鸡蛋：bird_egg  <br/>
　　                熟鸡蛋：bird_egg_cooked  <br/>
　　                油煎高脚鸟蛋：tallbirdegg_cooked  <br/>
　　                鱼：fish  <br/>
　　                熟鱼：fish_cooked  <br/>
　　                鳗鱼：eel <br/>
　　                煮熟的鳗鱼：eel_cooked
            </td>
            <td>
                <!--右侧内容-->
　　                烤坚果：acorn_cooked  <br/>
　　                蝴蝶翅膀：butterflywings<br/>  
　　                黄油：butter  <br/>
　　                蜂蜜：honey  <br/>
　　                蜂王浆：royal_jelly  <br/>
　　                曼德拉草：mandrake  <br/>
　　                烤熟的曼德拉草：cookedma<br/>ndrake  
　　                蝙蝠翅膀：batwing  <br/>
　　                熟蝙蝠翅膀：batwing_cook<br/>ed  
　　                夏象鼻：trunk_summer  <br/>
　　                冬象鼻：trunk_winter  <br/>
　　                熟象鼻：trunk_cooked  <br/>
　　                肉串：kabobs  <br/>
　　                肉丸：meatballs  <br/>
　　                蜜汁火腿：honeyham  <br/>
　　                肉汤：bonestew  <br/>
　　                火鸡正餐：turkeydinner  <br/>
　　                青蛙圆面包三明治：frogglebunwich  <br/>  
　　                玉米饼包炸鱼：fishtacos  <br/>
　　                鱼肉条：fishsticks  <br/>
　　                火龙果派：dragonpie  <br/>
　　                太妃糖：taffy  <br/>
　　                南瓜饼：pumpkincookie  <br/>
　　                奶油松饼：butterflymuffin  <br/>
　　                芝士蛋糕：powcake  <br/>
　　                曼德拉草汤：mandrakesoup  <br/>
　　                鸡蛋火腿：baconeggs  <br/>
　　                甜蜜金砖：honeynuggets  <br/>
　　                半圆小酥饼：perogies  <br/>
　　                蹩脚的炖菜：ratatouille  <br/>
　　                水果拼盘：fruitmedley  <br/>
　　                花沙拉：flowersalad  <br/>
　　                华夫饼：waffles  <br/>
　　                果酱蜜饯：jammypreserves  <br/>
　　                香酥茄盒：stuffedeggplant  <br/>
　　                冰淇淋：icecream  <br/>
　　                西瓜冰：watermelonicle  <br/>
　　                水果杂烩：trailmix  <br/>
　　                辣椒酱：hotchili  <br/>
　　                鳄梨酱：guacamole  <br/>
　　                电羊奶：goatmilk  <br/>
　　                怪物千层饼：monsterlasagna  <br/>
　　                鳗鱼料理：unagi  <br/>
　　                湿腻焦糊：wetgoop  <br/>
　　                腐烂的食物：spoiled_food  <br/>
　　                圣诞食品（4种形状）：winter_food1/2/3/4  <br/>
　　                万圣节糖果（11种类型）：halloweencandy_1/..../11  
            </td>
        </tr>
    </table>
</html>

<h1 id="生物"><a href="#生物" class="headerlink" title="生物"></a>生物</h1><h2 id="普通生物"><a href="#普通生物" class="headerlink" title="普通生物"></a>普通生物</h2><html>
    <table style="margin-left: auto; margin-right: auto;">
        <tr>
            <td>
                <!--左侧内容-->
　　                猪人：pigman  <br/>
　　                猪人守卫：pigguard <br/> 
　　                猪王：pigking  <br/>
　　                鱼人：merm  <br/>
　　                兔人：bunnyman  <br/>
　　                兔子：rabbit  <br/>
　　                野牛（宝宝）：babybeefalo  <br/>
　　                野牛（青年）：  <br/>
　　                野牛（成年）：beefalo  <br/>
　　                海象：walrus  <br/>
　　                小海象：little_walrus  <br/>
　　                夏象：koalefant_summer  <br/>
　　                冬象：koalefant_winter  <br/>
　　                闪电羊：lightninggoat  <br/>
　　                钢羊：spat  <br/>
　　                无睛鹿：deer  <br/>
　　                蜘蛛：spider  <br/>
　　                蜘蛛战士：spider_warrior  <br/>
　　                洞穴蜘蛛：spider_hider  <br/>
　　                喷射蜘蛛：spider_spitter  <br/>
　　                白蜘蛛：spider_dropper  <br/>
　　                猎狗：hound  <br/>
　　                火狗：firehound  <br/>
　　                冰狗：icehound  <br/>
　　                乌鸦：crow  <br/>
　　                红雀：robin  <br/>
　　                雪雀：robin_winter  <br/>
　　                金丝雀：canary  <br/>
　　                火鸡：perd  <br/>
　　                青蛙：frog  <br/>
　　                鼹鼠：mole  <br/>
　　                格罗姆：glommer  <br/>
　　                猫熊：catcoon  <br/>
　　                草蜥：grassgekko  <br/>
　　                触手：tentacle  <br/>
　　                蝙蝠：bat  <br/>
　　                龙虾：rocky  <br/>
　　                猴子：monkey  <br/>
　　                缀食者：sluroer  <br/>
　　                远古虫子：worm
            </td>
            <td>
                <!--右侧内容-->
　　                企鹅：penguin（企鹅这玩意儿会吃格雷姆的粘液）  <br/>
　　                蜜蜂：bee   <br/>
　　                杀人蜂：killerbee  <br/>
　　                萤火虫：fireflies  <br/>
　　                蚊子:mosquito  <br/>
　　                高脚鸟（蛋）：tallbirdegg  <br/>
　　                高脚鸟蛋（孵化）：tallbirdegg_cracked  <br/>
　　                高脚鸟（宝宝）：smallbird  <br/>
　　                高脚鸟（青年）：teenbird  <br/>
　　                高脚鸟（成年）：tallbird  <br/>
　　                苍蝇：flies（讲真这个只能拿来做装饰，可是谁会喜欢呢？）  <br/>
　　                蝴蝶：butterfly  <br/>
　　                岩浆虫：lavae（并没有什么用的，不过你手速够快的话说不定能生成一片烟花）  <br/>
　　                含糊虫：slurtle  <br/>
　　                黏糊虫：snurtle  <br/>
　　                切斯特：chester  <br/>
　　                切斯特骨眼：chester_eyebone  <br/>
　　                哈奇：hutch  <br/>
　　                星空：hutch_fishbowl  <br/>
　　                坎普斯：krampus  <br/>
　　                阿比盖尔：abigail  <br/>
　　                幽灵：ghost <br/>
　　                食人花：lureplant  <br/>
　　                食人花眼睛：eyeplant  <br/>
　　                食人花种子：lureplantbulb  <br/>
　　                发条骑士：knight  <br/>
　　                主教：bishop  <br/>
　　                战车：root  <br/>
　　                爬行梦魇（正常版）：crawlinghorror  <br/>
　　                爬行梦魇（可立即攻击版）：crawlingnightmare  <br/>
　　                巨喙梦魇（正常版）：terrorbeak  <br/>
　　                巨喙梦魇（可立即攻击版）：nightmarebeak  <br/>
　　                暗影战车：shadow_rook  <br/>
　　                暗影主教：shadow_bishop  <br/>
　　                暗影骑士：shadow_knight  <br/>
　　                损坏的象（这个系列好像单独分个机器人）：bishop_nightmare  <br/>
　　                损坏的战车：rook_nightmare  <br/>
　　                损坏的骑士：knight_nightmare
            </td>
        </tr>
    </table>
</html>

<h2 id="BOSS"><a href="#BOSS" class="headerlink" title="BOSS"></a>BOSS</h2><html>
    <table style="margin-left: auto; margin-right: auto;">
        <tr>
            <td>
                <!--左侧内容-->
　　                蜘蛛女王：spiderqueen  <br/>
　　                树精守卫：leif  <br/>
　　                树精守卫（稀少）：leif_sparse  <br/>
　　                坚果精：birchnutdrake  <br/>
　　                桦树精：deciduoustree  <br/>
　　                远古守护者：minotaur  <br/>
　　                鹿角鹅：moose  <br/>
　　                鹿角鹅蛋：mooseegg  <br/>
　　                小鹅：mossling  <br/>
　　                龙蝇：dragonfly  <br/>
　　                熊獾：bearger  <br/>
　　                巨鹿：deerclops
            </td>
            <td>
                <!--右侧内容-->
　　                巨型蜂巢：beequeenhivegrown  <br/>
　　                女王蜂：beequeen  <br/>
　　                雄蜂：beegurd  <br/>
　　                毒蕈（蘑菇蛤）：toadstool  <br/>
　　                毒蕈树菇：mushroomsprout  <br/>
　　                克劳斯：klaus  <br/>
　　                克劳斯包裹：klaus_sack  <br/>
　　                宝石鹿（蓝/红）：deer_blue/red　 <br/> 
　　                森林守护者：DebugSpawn"stalker_forest"  <br/>
　　                远古狩猎者：DebugSpawn"stalker"  <br/>
　　                远古影织者：DebugSpawn"stalker_atrium"
            </td>
        </tr>
    </table>
</html>

<h1 id="植物"><a href="#植物" class="headerlink" title="植物"></a>植物</h1><html>
    <table style="margin-left: auto; margin-right: auto;">
        <tr>
            <td>
                <!--左侧内容-->
　　                种子：seeds  <br/>
　　                松果：pinecone  <br/>
　　                坚果：acorn  <br/>
　　                花：flower  <br/>
　　                噩梦花：flower_evil  <br/>
　　                长在地上的胡萝卜：carrot_planted  <br/>
　　                草：grass  <br/>
　　                草根：depleted_gras  <br/>
　　                长草簇（可种植的草）：dug_grass  <br/>
　　                树苗：sapling    <br/>
　　                树苗（可种植的）：dug_sapling  <br/>
　　                浆果灌木丛：berrybush  <br/>
　　                浆果灌木丛（可种植的）：dug_berrybush  <br/>
　　                浆果灌木丛2：berrybush2  <br/>
　　                浆果灌木丛2（可种植的）：dug_berrybush2  <br/>
　　                蜜汁浆果丛：berrybush_juicy  <br/>
　　                尖刺灌木丛：marsh_bush  <br/>
　　                尖刺灌木丛（可种植的）：dug_marsh_bush  <br/>
　　                芦苇：reeds  <br/>
　　                洞穴苔藓：lichen  <br/>
　　                蕨类植物：cave_fern <br/> 
　　                常青树：evergreen  <br/>
　　                粗壮的常青树：evergreen_sparse  <br/>
　　                桦树：deciduoustree  
            </td>
            <td>
                <!--右侧内容-->
　　                多枝的树种：  <br/>
　　                多枝的树（从小到大4种形态）：twiggy_short/normal/（？）/old  <br/>
　　                针叶树：marsh_tree  <br/>
　　                大理石树：marbletree  <br/>
　　                大理石魔豆：marblebean  <br/>
　　                大理石灌木：marbleshrub_tall  <br/>
　　                荧光草（单朵）：flower_cave  <br/>
　　                荧光草（双朵）：flower_cave_double  <br/>
　　                荧光草（三朵）：flower_cave_triple  <br/>
　　                滚草：tumbleweed  <br/>
　　                仙人掌：cactus  <br/>
　　                池塘边水草：marsh_plant  <br/>
　　                水藻：pond_algae  <br/>
　　                风滚草：tumbleweed  <br/>
　　                红蘑菇（地上种植的）：red_mushroom  <br/>
　　                绿蘑菇（地上种植的）：green_mushroom  <br/>
　　                蓝蘑菇（地上种植的）：blue_mushroom  <br/>
　　                红蘑菇树：mushtree_medium  <br/>
　　                绿蘑菇树：mushtree_small  <br/>
　　                蓝蘑菇树：mushtree_tall  <br/>
　　                带网的蓝蘑菇树：mushtree_tall_webbed  <br/>
　　                香蕉树：cave_banana_tree  <br/>
　　                完全正常的树（活树）：livingtree
            </td>
        </tr>
    </table>
</html>

<h1 id="矿类"><a href="#矿类" class="headerlink" title="矿类"></a>矿类</h1><html>
    <table style="margin-left: auto; margin-right: auto;">
        <tr>
            <td>
                <!--左侧内容-->
　　                卵石（只有岩石）：rock_flintless  <br/>
　　                卵石（带硝石）：rock1  <br/>
　　                卵石（带黄金）：rock2  <br/>
　　                陨石：rock_moon  <br/>
　　                石笋（高）：stalagmite_full  <br/>
　　                石笋（中）：stalagmite_med  <br/>
　　                石笋（矮）：stalagmite_low
            </td>
            <td>
                <!--右侧内容-->
　　                尖石笋（高）：stalagmite_tall_full <br/> 
　　                尖石笋（中）：stalagmite_tall_med  <br/>
　　                尖石笋（矮）:stalagmite_tall_low  <br/>
　　                迷你冰川：rock_ice  <br/>
　　                玄武岩：basalt  <br/>
　　                玄武岩柱子：basalt_pillar  <br/>
　　                石化树（四个形态）：petrified_tree/short/tall/old（？）
            </td>
        </tr>
    </table>
</html>

<h1 id="建筑"><a href="#建筑" class="headerlink" title="建筑"></a>建筑</h1><html>
    <table style="margin-left: auto; margin-right: auto;">
        <tr>
            <td>
                <!--左侧内容-->
　　                营火：campfire  <br/>
　　                石头篝火：firepit  <br/>
　　                火炬：torch  <br/>
　　                猪火炬：pigtorch  <br/>
　　                吸热营火：coldfire  <br/>
　　                吸热篝火：coldfirepit  <br/>
　　                科学机器：researchlab  <br/>
　　                炼金术引擎：researchlab2  <br/>
　　                魔法帽子：researchlab4  <br/>
　　                暗影操纵仪：researchlab3  <br/>
　　                远古遗迹：ancient_altar  <br/>
　　                损坏的远古遗迹：ancient_altar_broken  <br/>
　　                试金石：resurrectionstone  <br/>
　　                宝箱：treasurechest  <br/>
　　                骷髅箱子：skullchest  <br/>
　　                装饰箱：pandoraschest  <br/>
　　                大豪华箱子：minotaurchest  <br/>
　　                鳞片箱子：dragonflychest  <br/>
　　                基本农场：slow_farmplo  <br/>
　　                高级农场：fast_farmplot  <br/>
　　                蘑菇农场：mushroom_farm  <br/>
　　                晾肉架：meatrack  <br/>
　　                蜂箱：beebox  <br/>
　　                烹饪锅：cookpot  <br/>
　　                冰箱：icebox  <br/>
　　                帐篷：tent  <br/>
　　                简易小木棚：siestahut  <br/>
　　                路牌：homesign  <br/>
　　                小木牌：minisign_item  <br/>
　　                路标：  <br/>
　　                木栅栏：fence  <br/>
　　                可放置木栅栏：fence_item  <br/>
　　                木门：fence_gate  <br/>
　　                可放置木门：fence_gate_item  <br/>
　　                干草墙：wall_hay  <br/>
　　                可放置干草墙：wall_hay_item  <br/>
　　                木墙wall_wood  <br/>
　　                可放置木墙：wall_wood_item  <br/>
　　                石墙：wall_stone  <br/>
　　                可放置石墙：wall_stone_item  <br/>
　　                月石墙：wall_moonrock  <br/>
　　                可放置月石墙：wall_moonrock_item  <br/>
　　                铥矿墙壁：wall_ruins  <br/>
　　                可放置铥矿墙壁：wall_ruins_item<br/>
　　                衣柜：Wardrobe  <br/>
　　                猪舍：pighouse  <br/>
　　                兔子窝：rabbithole  <br/>
　　                人鱼舍：mermhouse  <br/>
　　                鸟笼：birdcage  <br/>
　　                肉块雕像：resurrectionstatue  
            </td>
            <td>
                <!--右侧内容-->
　　                温度测量器：winterometer  <br/>
　　                雨量计：rainometer  <br/>
　　                避雷针：lightning_rod  <br/>
　　                雪球发射机：firesuppressor  <br/>
　　                传送核心：telebase  <br/>
　　                宝石看台：gemsocket  <br/>
　　                制图桌：cartographydesk  <br/>
　　                陶艺转盘：sculptingtable  <br/>
　　                月石基座：moonbase  <br/>
　　                月相盘：moondial  <br/>
　　                真眼守卫：sentryward  <br/>
　　                萤菇灯：mushroom_light  <br/>
　　                炽菇灯：mushroom_light2  <br/>
　　                暗夜照明灯：nightlight  <br/>
　　                龙鳞火炉：dragonflyfurnace  <br/>
　　                岩石洞穴：critterlab  <br/>
　　                卵石路：turf_road  <br/>
　　                墓碑：gravestone（需测试）  <br/>
　　                坟墓土堆：mound  <br/>
　　                骨架：skeleton  <br/>
　　                猎犬尸骨：houndbone  <br/>
　　                可疑的土堆：dirtpile  <br/>
　　                池塘：pond  <br/>
　　                洞穴池塘：pond_cave  <br/>
　　                猪人头：pighead  <br/>
　　                鱼人头：mermhead  <br/>
　　                兔子洞：rabbithole  <br/>
　　                蜂窝：beehive  <br/>
　　                杀人蜂窝：wasphive  <br/>
　　                蛛网岩：spiderhole  <br/>
　　                海象巢穴：walrus_camp  <br/>
　　                高脚鸟巢：tallbirdnest  <br/>
　　                猎犬丘：houndmound  <br/>
　　                含糊虫土堆（黏糊虫）：slurtlehole  <br/>
　　                蝙蝠洞：batcave  <br/>
　　                猴子桶：monkeybarrel  <br/>
　　                蜘蛛巢穴：spiderden  <br/>
　　                鼹鼠丘：molehill  <br/>
　　                中空树桩：catcoonden  <br/>
　　                远古头像：ruins_statue_head  <br/>
　　                远古法师雕像：ruins_statue_mage  <br/>
　　                麦斯威尔雕像：statuemaxwell  <br/>
　　                大理石柱子：marblepillar  <br/>
　　                直立雕像：statueharp  <br/>
　　                格罗姆雕像：statueglommer  <br/>
　　                破碎的时钟1/2/3：chessjunk1/2/3  <br/>
　　                虫洞：wormhole  <br/>
　　                限定版虫洞：wormhole_limited_1  <br/>
　　                传送门：multiplayer_portal（？）
            </td>
        </tr>
    </table>
</html>

<h1 id="玩具"><a href="#玩具" class="headerlink" title="玩具"></a>玩具</h1><html>
    <table style="margin-left: auto; margin-right: auto;">
        <tr>
            <td>
                <!--左侧内容-->
　　                trinket_1~5（融化的大理石、假卡祖笛、歌德结、地精玩偶）  <br/>
　　                trinket_6~10（小型火箭飞船、破烂电线、球与奖杯、硬化橡胶塞、不匹配的纽扣、二手假牙） <br/> 
　　                trinket_11~14（半躺机器人、干瘪触手、地精、漏水的茶杯）  <br/>
　　                trinket_17~24（弯曲的叉勺、玩具木马、陀螺、挠痒器、敲打锤、不耐磨的毛线、蹄脚、幸运猫罐）  <br/>
　　                trinket_25~27（空气“清新”剂、土豆杯、钢丝绳）
            </td>
            <td>
                <!--右侧内容-->
　　                迷你主教象棋（白/黑（白色被翻译做白葡萄酒））：trinket_15/16  <br/>
　　                迷你战车象棋（白/黑）：trinket_28/29  <br/>
　　                迷你骑士象棋（白/黑）：trinket_30/31  <br/>
　　                trinket_32~37（方晶锆球、蜘蛛指环、猴爪、容量瓶、假牙、断桩）
            </td>
        </tr>
    </table>
</html>

<h1 id="装饰"><a href="#装饰" class="headerlink" title="装饰"></a>装饰</h1><html>
    <table style="margin-left: auto; margin-right: auto;">
        <tr>
            <td>
                <!--左侧内容-->
　　                木质地板：turf_woodfloor  <br/>
　　                方格地板：turf_checkerfloor  <br/>
　　                地毯地板：turf_carpetfloor  <br/>
　　                龙鳞地板：  <br/>
　　                盆栽：pottedfern  <br/>
　　                茶几：endtable  <br/>
　　                烟斗（白/黑）：chesspiece_pipe_marble/stone  <br/>
　　                禁卫（白/黑）：chesspiece_pawn_marble/stone  <br/>
　　                龙角烩（白/黑）：chesspiece_hornucopia_marble/stone  <br/>
　　                皇后（白/黑）：chesspiece_muse_marble/stone  <br/>
　　                国王（白/黑）：chesspiece_formal_marble/stone  <br/>
　　                骑士（白/黑）：chesspiece_knight_marble/stone  <br/>
　　                主教（白/黑）：chesspiece_bishop_marble/stone  <br/>
　　                战车（白/黑）：chesspiece_rook_marble/stone
            </td>
            <td>
                <!--右侧内容-->
　　                鬣犬(活）：gargoyle_houndatk  <br/>
　　                鬣犬(死)：gargoyle_hounddeath  <br/>
　　                野猪(活)：gargoyle_werepigatk  <br/>
　　                野猪(嘶吼)：gargoyle_werepighowl   <br/>
　　                野猪(死)：gargoyle_werepigdeath  <br/>
　　                友善的稻草人：scarecrow  <br/>
　　                方尖碑：insanityrock  <br/>
　　                方尖碑（可伸缩）：sanityrock  <br/>
　　                奇怪的化石骨架：fossil_stalker（需测试）  <br/>
　　                熔岩池：lava_pond  <br/>
　　                圣诞树盆：winter_tree（其实调出来我无法使用）  <br/>
　　                礼物（空的）：gift  <br/>
　　                包裹（空的）：bundle  <br/>
　　                圣诞灯泡（红/绿/蓝/白）：winter_ornament_light1/2/3/4  <br/>
　　                圣诞灯饰（4种形状）：winter_ornament_fancy1/2/3/4  <br/>
　　                圣诞灯饰（8种色彩）：winter_ornament_plain1/2/3/4/5/6/7/8
            </td>
        </tr>
    </table>
</html>

<h1 id="宠物"><a href="#宠物" class="headerlink" title="宠物"></a>宠物</h1><html>
    <table style="margin-left: auto; margin-right: auto;">
        <tr>
            <td>
                <!--左侧内容-->
　　                小浣猫：critterlab_kitten  <br/>
　　                小座狼：critterlab_puppy  <br/>
　　                小钢羊：critterlab_lamb  <br/>
　　                小龙蝇：critterlab_dragonling
            </td>
            <td>
                <!--右侧内容-->
　　                小格罗姆：critterlab_glomling  <br/>
　　                人工养殖型岩浆虫：lavae_pet（？）  <br/>
　　                （其实我想把小高脚鸟丢到这个分类来）
            </td>
        </tr>
    </table>
</html>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><html>
    <table style="margin-left: auto; margin-right: auto;">
        <tr>
            <td>
                <!--左侧内容-->
　　                动物足迹：animal_track  <br/>
　　                矮人明星：stafflight  <br/>
　　                远古桌子：ruins_table  <br/>
　　                远古椅子：ruins_chair  <br/>
　　                远古花瓶：ruins_vase  <br/>
　　                地图卷轴：mapscroll  <br/>
　　                主教头部：sculpture_bishophead  <br/>
　　                骑士头部：sculpture_knighthead  <br/>
　　                战车鼻部：sculpture_rooknose
            </td>
            <td>
                <!--右侧内容-->
　　                主教雕塑：sculpture_bishopbody  <br/>
　　                战车雕塑：sculpture_rookbody  <br/>
　　                骑士雕塑：sculpture_knightbody  <br/>
　　                （不知道这个系列在联机里到底还有什么用）   <br/>
　　                环状传送机零件：teleportato_ring  <br/>
　　                盒状传送机零件：teleportato_box  <br/>
　　                曲柄状传送机零件：teleportato_crank  <br/>
　　                球状传送机零件：teleportato_potato
            </td>
        </tr>
    </table>
</html>

<h1 id="服务器操作指令"><a href="#服务器操作指令" class="headerlink" title="服务器操作指令"></a>服务器操作指令</h1><p>　　TheNet:Kick(userid)–踢出用户 ID 为“ userid”的玩家<br>　　TheNet:Ban(userid)– 禁止用户 ID 为“ userid”的玩家加入<br>　　c_save()–立即保存当前世界（一般会在每天早上自动保存）<br>　　c_reset(true|false)–true 删除当前世界并新建一个全新的世界； false 重新加载当前世界。<br>　　c_shutdown(true|false)–true 保存并关闭当前世界； false 不保存直接关闭当前世界<br>　　c_rollback()回档<br>　　c_rollback(1)回滚一个存档<br>　　c_rollback(2)回滚两个存档<br>　　c_rollback(3)回滚三个存档<br>服务器没有回过档时理论可以回到任何一个档，但是如果回档一次，最多只能往前回 5 个档<br>　　TheNet:SetAllowIncomingConnections(true|false)–true 允许他人加入； false 阻止任何人加入。<br>　　TheNet:SetAllowIncomingConnections(false)<br>　　TheNet:SetAllowIncomingConnections(true)<br>　　-console -lan -player 6<br>重新生成世界<br>　　c_regenerateworld()<br>测试模式<br>　　c_testruins()<br>超级上帝模式<br>　　c_supergodmode()<br>定位<br>　　GetPlayer().Transform:SetPosition(22,0,33)<br>地图全开：第一次输入<br>　　minimap=TheSim:FindFirstEntityWithTag(“minimap”)<br>第二次打开地图输入：<br>　　minimap=TheSim:FindFirstEntityWithTag(“minimap”)<br>　　minimap.MiniMap:ShowArea(0, 0, 0, 10000)<br>　　c_listplayers()<br>　　-lan -console -player 10<br>　　c_announce(“ 大家记好房间名，回一下档 “)<br>　　c_announce(“ 流年离伤 提醒你：卡？把小地图关了吧。 “)<br>　　c_announce(“ 亲们，重启一下，有点 bug,封了那人之后，我也进不去了 “)<br>　　c_announce(“ 不早了，兄弟们都睡觉吧，服务器要关了，晚安 “)<br>　　c_announce(“ 流年离伤 提醒你： 复活密码 #LNCS,重新选人密码 #LNLS，先按 u 然后输入密码方可 “)<br>　　c_give(“faroz_gls”)<br>　　c_give(“scythe”)<br>复活所有人 :<br>　　for k,v in pairs(AllPlayers) do v:PushEvent(‘respawnfromghost’) end<br>把所有人聚集在一起：<br>　　c_gatherplayers()<br>传送到任意坐标：例子传送到（ 64.008,81.882 ）<br>　　GetPlayer().Transform:SetPosition(64.008,0,81.882)<br>　　GetPlayer().Transform:SetPosition(101,0,112)<br>　　GetPlayer().Transform:SetPosition(73,0,145)<br>　　minimap=TheSim:FindFirstEntityWithTag(“minimap”)<br>　　minimap.MiniMap:ShowArea(0,0,0,10000)<br>全图显示：<br>　　GetWorld().minimap.minimap:showarea(0,0,0,10000)<br>跳过多少天：<br>　　function c_skip(num)<br>　　num = num or 1<br>　　LongUpdate(TUNING.TOTAL_DAY_TIME * num)<br>　　end<br>上帝模式<br>　　c_godmode()，一般情况不会受伤挨饿掉精神<br>设置速度<br>　　c_speed(值)，标准速度为“ 1”，值越大速度越快<br>　　例：设置为标准速度的 10 倍，则输入： c_speed(10)<br>创造模式<br>　　GetPlayer().components.builder:GiveAllRecipes()，可以制作全物品<br>设置生命上限<br>　　GetPlayer().components.health:SetMaxHealth(值)，设置生命上限为值那么大<br>停止饥饿<br>　　GetPlayer().components.hunger:Pause(true)<br>变成海狸（吴迪专用）<br>　　GetPlayer().components.beaverness:SetPercent(1)<br>传送<br>　　c_gonext(“ 代码 “)，把你传送到附近的“代码”的位置<br>　　例：传送到附近的牛的位置，则输入： c_gonest(“beefalo”)<br>删除<br>　　TheInput:GetWorldEntityUnderMouse():Remove()，删除你鼠标所在位置的物体<br>地图全开<br>　　GetWorld().minimap.MiniMap:ShowArea(0,0,0,10000)，退出游戏时失效　<br>跳过一天<br>　　GetClock():MakeNextDay()<br>跳过几天<br>　　for x = 1, 值 do GetClock():MakeNextDay() end<br>　　注意！跳过太多的天数会卡死（根据电脑配置）<br>跳过一段时间<br>　　LongUpdate(值)，时钟每格 30 个单位，一整天是 480 个单位<br>　　跳过 4 格时间，则输入： LongUpdate(120)<br>设置时间段<br>　　GetClock():SetSegs( 白天 ,黄昏 ,夜晚 )<br>　　时钟一共有 16 个格，白天黄昏夜晚加在一起必须为 16<br>　　例：白天7格，黄昏8格，夜晚1格，则输入： GetClock():SetSegs(7,8,1)<br>跳过时间段<br>　　GetClock():NextPhase()，跳过当前时间段，比如白天跳到黄昏<br>开始春天 (DLC1)<br>　　GetSeasonManager():StartSpring()<br>开始下雨<br>　　GetSeasonManager():StartPrecip()<br>停止下雨<br>　　GetSeasonManager():StopPrecip()<br>生成闪电<br>　　GetSeasonManager():DoLightningStrike(Vector3(GetPlayer().Transform:GetWorldPosi<br>tion()))，如果周围没有避雷针，那闪电将会击中你<br>测量距离<br>print(math.sqrt(GetPlayer():GetDistanceSqToInst(TheInput:GetWorldEntityUnderMou<br>se())))，在控制台信息（ Ctrl+L ）中显示角色到鼠标物品之间的距离<br>解锁角色<br>　　GetPlayer().profile:UnlockCharacter(“ 角色名称 “)<br>　　和： GetPlayer().profile:Save()，可以解锁多个角色<br>　　例： GetPlayer().profile:UnlockCharacter(“willow”)<br>　　GetPlayer().profile:UnlockCharacter(“wickerbottom”)<br>　　GetPlayer().profile:Save()<br>　　或全部解锁<br>　　　　GetPlayer().profile:UnlockEverything()<br>清除死亡记录<br>　　ErasePersistentString(“morgue”)，重启游戏可以看到变化  </p>
<p>　　
　　
　　</p>
<p>　　</p>
<p>　　</p>
<p>　　</p>
<p>　　</p>
<p>　　</p>
<p>　　
　　
　　</p>
<p>　　
　　</p>
<p>　　
　　</p>
<p>　　</p>
]]></content>
      <categories>
        <category>新手指北</category>
      </categories>
      <tags>
        <tag>reference</tag>
        <tag>随笔</tag>
        <tag>游戏指令</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯小练</title>
    <url>/2020/01/21/practiceLanqiao/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　记录“蓝桥杯”等赛事的练习，包括真题以及小练等。</p>
<a id="more"></a>

<h1 id="1-计算器模拟"><a href="#1-计算器模拟" class="headerlink" title="1.计算器模拟"></a>1.计算器模拟</h1><h2 id="1-1-问题描述"><a href="#1-1-问题描述" class="headerlink" title="1.1 问题描述"></a>1.1 问题描述</h2><font size=2 face="黑体">

<p>　　模拟程序型计算器，依次输入指令，可能包含的指令有<br>　　　1.数字：’NUM X’，X为一个只包含大写字母和数字的字符串，表示一个当前进制的数<br>　　　2.运算指令：’ADD’,’SUB’,’MUL’,’DIV’,’MOD’，分别表示加减乘，除法取商，除法取余<br>　　　3.进制转换指令：’CHANGE K’，将当前进制转换为K进制(2≤K≤36)<br>　　　4.输出指令：’EQUAL’，以当前进制输出结果<br>　　　5.重置指令：’CLEAR’，清除当前数字  </p>
<p>　　指令按照以下规则给出：<br>　　　数字，运算指令不会连续给出，进制转换指令，输出指令，重置指令有可能连续给出<br>　　　运算指令后出现的第一个数字，表示参与运算的数字。且在该运算指令和该数字中间不会出现运算指令和输出指令<br>　　　重置指令后出现的第一个数字，表示基础值。且在重置指令和第一个数字中间不会出现运算指令和输出指令<br>　　　进制转换指令可能出现在任何地方  </p>
<p>　　运算过程中中间变量均为非负整数，且小于2^63。<br>　　以大写的’A’&#126;’Z’表示10&#126;35  </p>
<p>　　输入格式<br>　　　第1行：1个n，表示指令数量<br>　　　第2..n+1行：每行给出一条指令。指令序列一定以’CLEAR’作为开始，并且满足指令规则<br>　　输出格式<br>　　　依次给出每一次’EQUAL’得到的结果<br>　　样例输入<br>　　　7<br>　　　CLEAR<br>　　　NUM 1024<br>　　　CHANGE 2<br>　　　ADD<br>　　　NUM 100000<br>　　　CHANGE 8<br>　　　EQUAL<br>　　样例输出<br>　　　2040</p>
</font>

<h2 id="1-2-问题分析"><a href="#1-2-问题分析" class="headerlink" title="1.2 问题分析"></a>1.2 问题分析</h2><p>　　由于输入为字符串类型，因此需要将字符串类型的“数字”转化为真实的N进制数方能进行运算。机器将N进制数自动转化为二进制进行运算并得到相应的结果。<br>　　这里我们考虑首先将NUM指令后，也即参与运算的字符数转化为十进制进行运算。在读取到EQUAL指令时再将十进制转化为相应的进制数回显。此外，使用res寄存结果，num变量存储操作数。</p>
<h2 id="1-3-实现代码"><a href="#1-3-实现代码" class="headerlink" title="1.3 实现代码"></a>1.3 实现代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">toNumber</span><span class="params">(<span class="built_in">string</span> strNum, <span class="keyword">int</span> radix)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> flagNum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> len = strNum.length();</span><br><span class="line">	<span class="comment">//转换为radix进制数</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">isupper</span>(strNum[i]))</span><br><span class="line">			<span class="comment">//当读取到大写字母时</span></span><br><span class="line">			<span class="comment">//注意(strNum - &#x27;A&#x27; + 10)以及(strNum - &#x27;0&#x27;)均可补齐差值部分</span></span><br><span class="line">			flagNum = (strNum[i] - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>) + flagNum * radix;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			flagNum = (strNum[i] - <span class="string">&#x27;0&#x27;</span>) + flagNum * radix;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flagNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">toString</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> num, <span class="keyword">int</span> radix)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (num == <span class="number">0</span>)  <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> temp;</span><br><span class="line">	<span class="built_in">string</span> flag;</span><br><span class="line">	<span class="keyword">while</span> (num) &#123;</span><br><span class="line">		temp = num % radix;</span><br><span class="line">		<span class="keyword">if</span> (temp &gt; <span class="number">10</span>)</span><br><span class="line">			<span class="comment">//意味着需要用字母表示对应进制数的数位</span></span><br><span class="line">			flag.push_back(temp + <span class="string">&#x27;A&#x27;</span> - <span class="number">10</span>);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			flag.push_back(temp + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		num /= radix;</span><br><span class="line">	&#125;</span><br><span class="line">	reverse(flag.begin(), flag.end());	<span class="comment">//由于flag.push_back()将字符串倒置放入，这里需要将其倒序</span></span><br><span class="line">	<span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;		<span class="comment">//命令行数</span></span><br><span class="line">	<span class="keyword">int</span> radix = <span class="number">10</span>;	<span class="comment">//默认使用10进制进行中介运算</span></span><br><span class="line">	<span class="keyword">int</span> p = <span class="number">0</span>;	<span class="comment">//用于操作判断</span></span><br><span class="line">	<span class="keyword">int</span> clear = <span class="number">1</span>;	<span class="comment">//用于判断CLEAR指令状态</span></span><br><span class="line">	<span class="built_in">string</span> ord, input_strNum;	<span class="comment">//定义指令以及输入的字符数字</span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>, num;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; ord;</span><br><span class="line">		<span class="keyword">if</span> (!ord.compare(<span class="string">&quot;NUM&quot;</span>)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (clear) &#123;</span><br><span class="line">				<span class="built_in">cin</span> &gt;&gt; input_strNum;</span><br><span class="line">					res = toNumber(input_strNum, radix);</span><br><span class="line">					clear = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">cin</span> &gt;&gt; input_strNum;</span><br><span class="line">					num = toNumber(input_strNum, radix);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (p) &#123;</span><br><span class="line">				<span class="keyword">if</span> (p == <span class="number">1</span>)  res += num;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">2</span>)  res -= num;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">3</span>)  res *= num;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">4</span>)  res /= num;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">5</span>)  res %= num;</span><br><span class="line">				p = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!ord.compare(<span class="string">&quot;CHANGE&quot;</span>))  <span class="built_in">cin</span> &gt;&gt; radix;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!ord.compare(<span class="string">&quot;EQUAL&quot;</span>))  <span class="built_in">cout</span> &lt;&lt; toString(res, radix) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!ord.compare(<span class="string">&quot;ADD&quot;</span>))  p = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!ord.compare(<span class="string">&quot;SUB&quot;</span>))  p = <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!ord.compare(<span class="string">&quot;MUL&quot;</span>))  p = <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!ord.compare(<span class="string">&quot;DIV&quot;</span>))  p = <span class="number">4</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!ord.compare(<span class="string">&quot;MOD&quot;</span>))  p = <span class="number">5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-合根植物"><a href="#2-合根植物" class="headerlink" title="2.合根植物"></a>2.合根植物</h1><h2 id="2-1-问题描述"><a href="#2-1-问题描述" class="headerlink" title="2.1 问题描述"></a>2.1 问题描述</h2><font size=2 face="黑体">
　　w星球的一个种植园，被分成 m * n 个小格子（东西方向m行，南北方向n列）。每个格子里种了一株合根植物。  
　　这种植物有个特点，它的根可能会沿着南北或东西方向伸展，从而与另一个格子的植物合成为一体。


<p>　　如果我们告诉你哪些小格子间出现了连根现象，你能说出这个园中一共有多少株合根植物吗？<br>输入格式<br>　　第一行，两个整数m，n，用空格分开，表示格子的行数、列数（1&lt;m,n&lt;1000）。<br>　　接下来一行，一个整数k，表示下面还有k行数据(0&lt;k&lt;100000)<br>　　接下来k行，第行两个整数a，b，表示编号为a的小格子和编号为b的小格子合根了。</p>
<p>　　格子的编号一行一行，从上到下，从左到右编号。<br>　　比如：5 * 4 的小格子，编号：<br>　　　1 2 3 4<br>　　　5 6 7 8<br>　　　9 10 11 12<br>　　　13 14 15 16<br>　　　17 18 19 20<br>样例输入<br>　　　5 4<br>　　　16<br>　　　2 3<br>　　　1 5<br>　　　5 9<br>　　　4 8<br>　　　7 8<br>　　　9 10<br>　　　10 11<br>　　　11 12<br>　　　10 14<br>　　　12 16<br>　　　14 18<br>　　　17 18<br>　　　15 19<br>　　　19 20<br>　　　9 13<br>　　　13 17<br>样例输出<br>　　　5<br>样例说明<br>　　其合根情况参考下图<br>　<img src="https://s2.ax1x.com/2020/01/22/1AP9tx.jpg" width="18%" height="20%" /><br></font></p>
<h2 id="2-2-问题分析"><a href="#2-2-问题分析" class="headerlink" title="2.2 问题分析"></a>2.2 问题分析</h2><p>　　这是典型的并查集问题，只需要集合归并后搜索即可。  </p>
<h2 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化Union_Find_set并查集</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initUFset</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)  pre[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找树根</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x == pre[x] ? x : pre[x] = find(pre[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//联合树枝</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> fx = find(x);</span><br><span class="line">	<span class="keyword">int</span> fy = find(y);</span><br><span class="line">	<span class="keyword">if</span> (fx != fy) pre[fy] = fx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m, n, k, x, y, total;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;m, &amp;n, &amp;k);</span><br><span class="line">	total = m * n;</span><br><span class="line">	initUFset(total);</span><br><span class="line">	<span class="keyword">while</span> (k--) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">		join(x, y);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; total; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (find(i) == i)  ++ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>
<h2 id="2-4-注释"><a href="#2-4-注释" class="headerlink" title="2.4 注释"></a>2.4 注释</h2><p>　　在Visual Studio 2019中运行代码会出现以下报错：<br>　　<img src="https://s2.ax1x.com/2020/01/22/1AFmfP.jpg" alt="1AFmfP.jpg"><br>　　并非代码bug，这里可考虑尝试以下方法解决编译器报错：<br>　　　方法一：在程序最前面（指在所有#include前的最前）加#define _CRT_SECURE_NO_DEPRECATE；<br>　　　方法二：在程序最前面加#define _CRT_SECURE_NO_WARNINGS；<br>　　　方法三：在程序最前面加#pragma warning(disable:4996)；<br>　　　方法四：把scanf、scanf改为scanf_s、fopen_s，具体方法请百度；<br>　　　方法五：无需在程序最前面加那行代码，只需在新建项目时取消勾选“SDL检查”即可；<br>　　　方法六：若项目已建立好，在项目属性里关闭SDL也行；<br>　　　方法七：在工程项目设置一下就行；将报错那个宏定义放到 项目属性 – C/C++– 预处理器 – 预处理器定义；<br>　　　方法八：在 项目属性 – c/c++ – 命令行 添加：/D _CRT_SECURE_NO_WARNINGS 就行了。  </p>
<h1 id="3-分考场"><a href="#3-分考场" class="headerlink" title="3.分考场"></a>3.分考场</h1><h2 id="3-1-问题描述"><a href="#3-1-问题描述" class="headerlink" title="3.1 问题描述"></a>3.1 问题描述</h2><font size=2 face="黑体">
　　n个人参加某项特殊考试。  
　　为了公平，要求任何两个认识的人不能分在同一个考场。  
　　求是少需要分几个考场才能满足条件。  

<p>输入格式<br>　　第一行，一个整数n(1&lt;n&lt;100)，表示参加考试的人数。<br>　　第二行，一个整数m，表示接下来有m行数据<br>　　以下m行每行的格式为：两个整数a，b，用空格分开 (1&lt;=a,b&lt;=n) 表示第a个人与第b个人认识。<br>输出格式<br>　　一行一个整数，表示最少分几个考场。<br>样例输入<br>　　5<br>　　8<br>　　1 2<br>　　1 3<br>　　1 4<br>　　2 3<br>　　2 4<br>　　2 5<br>　　3 4<br>　　4 5<br>样例输出<br>　　5<br></font></p>
<h2 id="3-2-问题分析"><a href="#3-2-问题分析" class="headerlink" title="3.2 问题分析"></a>3.2 问题分析</h2><p>　　采用回溯算法，每次有两种抉择，新建房间和放置入之前的某个房间（需要判断）</p>
<h2 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a, b) a &gt; b ? b : a  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> cnt[N];				<span class="comment">//cnt[i]表示第i个room内人数</span></span><br><span class="line"><span class="keyword">int</span> relation[N][N];		<span class="comment">//relation[i][j]表示i考生与j考生之间的关系</span></span><br><span class="line"><span class="keyword">int</span> room[N][N];			<span class="comment">//room[i][j]表示第i个考场内第j个考生</span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0x3f3f3f3f</span>;	<span class="comment">//最好情况的房间数</span></span><br><span class="line"><span class="keyword">int</span> n;					<span class="comment">//参加考试的人数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> curStu, <span class="keyword">int</span> roomNum)</span> </span>&#123;	<span class="comment">//curStu表示当前学生，roomNum表示当前考场编号</span></span><br><span class="line">	<span class="keyword">if</span> (roomNum &gt; ans)  <span class="keyword">return</span>;	<span class="comment">//已经大于最好情况的ans个房间，剪枝</span></span><br><span class="line">	<span class="keyword">if</span> (curStu &gt; n) &#123;</span><br><span class="line">		ans = min(ans, roomNum);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= roomNum; i++) &#123;	<span class="comment">//判断是否可以放入以前的考场</span></span><br><span class="line">		<span class="keyword">bool</span> legal = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, len = cnt[i]; j &lt; len; j++) &#123;	<span class="comment">//判断是否和考场内的人相识</span></span><br><span class="line">			<span class="keyword">if</span> (relation[room[i][j]][curStu] == <span class="number">1</span>) &#123;</span><br><span class="line">				legal = <span class="literal">false</span>;				<span class="comment">//有关系则跳出房间内循环，对下一房间进行判断</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (legal) &#123;</span><br><span class="line">				room[i][cnt[i]++] = curStu;	<span class="comment">//将合法考生安放在当前考场内</span></span><br><span class="line">				solve(curStu + <span class="number">1</span>, roomNum);	<span class="comment">//在安排完毕上述考生后基于此房间进行下一个考生的安置</span></span><br><span class="line">				cnt[i]--;					<span class="comment">//若在下一考生未能安置在本房间，需要排除此考生并进入新房间</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//新建房间的操作</span></span><br><span class="line">		room[roomNum + <span class="number">1</span>][cnt[roomNum + <span class="number">1</span>]++] = curStu;</span><br><span class="line">		solve(curStu + <span class="number">1</span>, roomNum + <span class="number">1</span>);</span><br><span class="line">		cnt[roomNum + <span class="number">1</span>]--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ord;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;ord);</span><br><span class="line">	<span class="keyword">while</span> (ord--) &#123;</span><br><span class="line">		<span class="keyword">int</span> x, y;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">		relation[x][y] = relation[y][x] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	solve(<span class="number">1</span>, <span class="number">0</span>);	<span class="comment">//第一个考生必定新建房间，因此从0开始</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4-对局匹配"><a href="#4-对局匹配" class="headerlink" title="4.对局匹配"></a>4.对局匹配</h1><h2 id="4-1-问题描述"><a href="#4-1-问题描述" class="headerlink" title="4.1 问题描述"></a>4.1 问题描述</h2><font size=2 face="黑体">  
　　小明喜欢在一个围棋网站上找别人在线对弈。这个网站上所有注册用户都有一个积分，代表他的围棋水平。小明发现网站的自动对局系统在匹配对手时，只会将积分差恰好是K的两名用户匹配在一起。如果两人分差小于或大于K，系统都不会将他们匹配。  
　　现在小明知道这个网站总共有N名用户，以及他们的积分分别是A1, A2, ... AN。  
　　小明想了解最多可能有多少名用户同时在线寻找对手，但是系统却一场对局都匹配不起来(任意两名用户积分差不等于K)？

<p>输入格式<br>　　第一行包含两个个整数N和K。<br>　　第二行包含N个整数A1, A2, … AN。<br>　　对于30%的数据，1 &lt;= N &lt;= 10<br>　　对于100%的数据，1 &lt;= N &lt;= 100000, 0 &lt;= Ai &lt;= 100000, 0 &lt;= K &lt;= 100000</p>
<p>输出格式<br>　　一个整数，代表答案。</p>
<p>样例输入<br>　　10 0<br>　　1 4 2 8 5 7 1 4 2 8</p>
<p>样例输出<br>　　6<br></font>  </p>
<h2 id="4-2-问题分析"><a href="#4-2-问题分析" class="headerlink" title="4.2 问题分析"></a>4.2 问题分析</h2><p>　　如果把n个元素按照分数相差为k的用户分为一组，例如：<br>　　第一组：{0,k,2k,3k,……}，<br>　　第二组：{1,k+1,k+2,k+3,……}，<br>　　……等等  </p>
<p>　　这样分组可以保证能各组之间不会被匹配，因为分叉不可能为k。因此可能匹配成功的玩家只可能从同组中产生，故只需在每个分组内尽量选取更多用户即可。使用cnt[score]表示分数为score的用户人数，假设现第i组有m个不同分数{x,x+k,x+2k,……,x+(m-1)k}，其中x表示该组的第一个人的积分，这里采用动态规划法来选择更多的人数。dp[j]表示前j个分数能够获得的最大用户（价值），很明显这里有两个选择：</p>
<p>　　1.选择j：dp[j] = dp[j-1];<br>　　2.不选j：dp[j] = dp[j-2] + cnt[score];</p>
<p>　　因此状态转义方程如下所示：<br>　　　　dp[i] = max{dp[i-1], dp[i-2] + cnt[score]}<br>　　　　其中score是此组中第i个分数值<br>　　需要注意的是，边界处（例如k=0）需要特殊处理  </p>
<h2 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_score = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">int</span> cnt[maxn];		<span class="comment">//cnt[score]表示积分为score的人数</span></span><br><span class="line"><span class="keyword">int</span> temp[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k) == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</span><br><span class="line">		<span class="keyword">int</span> score, ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;score);</span><br><span class="line">			cnt[score]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (k == <span class="number">0</span>) &#123;		<span class="comment">//如果分差0即可匹配</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max_score; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (cnt[i])  ans++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;	<span class="comment">//对于每积分组别</span></span><br><span class="line">				<span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; max_score; j += k) &#123;</span><br><span class="line">					temp[index++] = cnt[j];</span><br><span class="line">				&#125;</span><br><span class="line">				dp[<span class="number">0</span>] = temp[<span class="number">0</span>];</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; index; j++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (j == <span class="number">1</span>)  dp[j] = max(dp[<span class="number">0</span>], temp[j]);	<span class="comment">//边界</span></span><br><span class="line">					<span class="keyword">else</span>  dp[j] = max(dp[j - <span class="number">1</span>], dp[j - <span class="number">2</span>] + temp[j]);</span><br><span class="line">				&#125;</span><br><span class="line">				ans += dp[index - <span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　</p>
]]></content>
      <categories>
        <category>试题练习</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>试题</tag>
        <tag>练习</tag>
      </tags>
  </entry>
  <entry>
    <title>About me</title>
    <url>/2020/01/18/about/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>A Coder, live in China.</p>
</blockquote>
<ul>
<li>个人导航页:  <a href="https://shimmerjordan.eu.org/">https://shimmerjordan.eu.org</a></li>
<li>CV: <a href="https://cv.shimmerjordan.eu.org/">Ju Qiaodan</a></li>
<li>技术博客: <a href="https://blog.shimmerjordan.eu.org/">https://blog.shimmerjordan.eu.org</a></li>
<li>随笔: <a href="https://essay.shimmerjordan.eu.org/">https://essay.shimmerjordan.eu.org</a></li>
<li>GitHub: <a href="https://github.com/shimmerjordan">shimmerjordan</a></li>
</ul>
<a href="https://github.com/shimmerjordan/github-statis">

<p><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/github-statis@master/generated/overview.svg"><br><img src="https://gcore.jsdelivr.net/gh/shimmerjordan/github-statis@master/generated/languages.svg"></p>
</a>

<ul>
<li>Email: <a href="mailto:shimmerjordan@gmail.com?subject=For Communication&cc=Carbon Copy&subject=For details about Qiaodan Ju&body=Write your contents here.">shimmerjordan@gmail.com</a></li>
<li>QQ: <a href="http://wpa.qq.com/msgrd?v=3&uin=844152124&site=qq&menu=yes">844152124</a>    <a href="http://wpa.qq.com/msgrd?v=3&amp;uin=844152124&amp;site=qq&amp;menu=yes">chat via QQ</a></li>
<li>Wechat: shimmerjordan</li>
</ul>
<a id="more"></a>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown札记</title>
    <url>/2020/01/18/MarkdownNotes/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Markdown-札记指北"><a href="#Markdown-札记指北" class="headerlink" title="Markdown 札记指北"></a>Markdown 札记指北</h1><hr>
<h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p>
<p>示例：</p>
<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>
<a id="more"></a>

<h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p>
<p>示例：</p>
<h1 id="这是一个一级标题"><a href="#这是一个一级标题" class="headerlink" title="这是一个一级标题"></a>这是一个一级标题</h1><h2 id="这是一个二级标题"><a href="#这是一个二级标题" class="headerlink" title="这是一个二级标题"></a>这是一个二级标题</h2><h3 id="这是一个三级标题"><a href="#这是一个三级标题" class="headerlink" title="这是一个三级标题"></a>这是一个三级标题</h3><p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>
<h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p>
<p>示例：</p>
<p>这是去往 <a href="https://shimmerjordan.github.io/">本人博客</a> 的链接。</p>
<p><img src="https://n1-q.mafengwo.net/s15/M00/65/BB/CoUBGV3brtOAMKOdAAsHBZ8nyQk791.jpg?imageMogr2/thumbnail/1360x/strip/quality/90"></p>
<h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p>
<p>示例：</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p>
<p>示例：</p>
<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p>
<p>示例：</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
<h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p>
<p>示例：</p>
<p>让我们聊聊 <code>html</code>。</p>
<h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p>
<p>示例：</p>
<pre><code>这是一个代码块，此行左侧有四个不可见的空格。</code></pre>
<h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p>
<p>示例：</p>
<p><img src="https://www.zybuluo.com/static/img/my_head.jpg" alt="我的头像"></p>
<h1 id="Cmd-Markdown-高阶语法手册"><a href="#Cmd-Markdown-高阶语法手册" class="headerlink" title="Cmd Markdown 高阶语法手册"></a>Cmd Markdown 高阶语法手册</h1><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1. 内容目录"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p>
<p>[TOC]</p>
<h3 id="2-标签分类"><a href="#2-标签分类" class="headerlink" title="2. 标签分类"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p>
<p>标签： 数学 英语 Markdown</p>
<p>或者</p>
<p>Tags： 数学 英语 Markdown</p>
<h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3. 删除线"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h3 id="4-注脚"><a href="#4-注脚" class="headerlink" title="4. 注脚"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p>
<p>这是一个注脚[^footnote]的样例。</p>
<p>这是第二个注脚[^footnote2]的样例。</p>
<h3 id="5-LaTeX-公式"><a href="#5-LaTeX-公式" class="headerlink" title="5. LaTeX 公式"></a>5. LaTeX 公式</h3><p>$ 表示行内公式： </p>
<p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p>
<p>$$ 表示整行公式：</p>
<p>$$\sum_{i=1}^n a_i=0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p>
<p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax</a> 参考更多使用方法。</p>
<h3 id="6-加强的代码块"><a href="#6-加强的代码块" class="headerlink" title="6. 加强的代码块"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>
<p>非代码示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install vim-gnome</span><br></pre></td></tr></table></figure>
<p>Python 示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span>(<span class="params">param1=<span class="string">&#x27;&#x27;</span>, param2=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;A docstring&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Greater&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">&#x27;&#x27;&#x27;interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>JavaScript 示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* nth element in the fibonacci series.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>n &gt;= 0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return </span>the nth element, &gt;= 0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a += b;</span><br><span class="line">    b = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start:&gt;https:&#x2F;&#x2F;www.zybuluo.com</span><br><span class="line">io&#x3D;&gt;inputoutput: verification</span><br><span class="line">op&#x3D;&gt;operation: Your Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">sub&#x3D;&gt;subroutine: Your Subroutine</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;io-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;sub-&gt;io</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A-&gt;B: Normal line</span><br><span class="line">B--&gt;C: Dashed line</span><br><span class="line">C-&gt;&gt;D: Open arrow</span><br><span class="line">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class="line">B --&gt; C&#123;Decision&#125;</span><br><span class="line">C --&gt;|One| D[Result one]</span><br><span class="line">C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alice-&gt;John: Hello John, how are you?</span><br><span class="line">loop every minute</span><br><span class="line">    John--&gt;Alice: Great!</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table>
<thead>
<tr>
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr>
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr>
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody></table>
<h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><dl><dt>名词 1</dt><dd>定义 1（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><dl><dt>代码块 2</dt><dd>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><pre><code>    代码块（左侧有八个不可见的空格）</code></pre>
<h3 id="14-Html-标签"><a href="#14-Html-标签" class="headerlink" title="14. Html 标签"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p>
<pre><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;
        &lt;th&gt;星期一&lt;/th&gt;
        &lt;th&gt;星期二&lt;/th&gt;
        &lt;th&gt;星期三&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;李强&lt;/td&gt;
        &lt;td&gt;张明&lt;/td&gt;
        &lt;td&gt;王平&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</code></pre>
<table>
    <tr>
        <th rowspan="2">值班人员</th>
        <th>星期一</th>
        <th>星期二</th>
        <th>星期三</th>
    </tr>
    <tr>
        <td>李强</td>
        <td>张明</td>
        <td>王平</td>
    </tr>
</table>

<h3 id="15-内嵌图标"><a href="#15-内嵌图标" class="headerlink" title="15. 内嵌图标"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p>
<pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;</code></pre>
<p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p>
<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p>
<pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;</code></pre>
<p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p>
<p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/">font-awesome</a> 官方网站。</p>
<h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p>
<pre><code>- [ ] **Cmd Markdown 开发**
    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票</code></pre>
<p>对应显示如下待办事宜 Todo 列表：</p>
<ul>
<li><input disabled="" type="checkbox"> <strong>Cmd Markdown 开发</strong><ul>
<li><input disabled="" type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li>
<li><input checked="" disabled="" type="checkbox"> 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments">语法参考</a></li>
<li><input checked="" disabled="" type="checkbox"> 改进 LaTex 功能<ul>
<li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li>
<li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers">语法参考</a></li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong>七月旅行准备</strong><ul>
<li><input disabled="" type="checkbox"> 准备邮轮上需要携带的物品</li>
<li><input disabled="" type="checkbox"> 浏览日本免税店的物品</li>
<li><input checked="" disabled="" type="checkbox"> 购买蓝宝石公主号七月一日的船票</li>
</ul>
</li>
</ul>
<p>[^footnote]: 这是一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
<p>[^footnote2]: 这是另一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
]]></content>
      <categories>
        <category>新手指北</category>
      </categories>
      <tags>
        <tag>reference</tag>
      </tags>
  </entry>
</search>
